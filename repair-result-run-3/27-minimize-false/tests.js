const test0 = async function (t) {
  t.keyPress('right arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 90, 1, "Expected Sprite Scheibe to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 120.78789526876503, 1, "Expected Sprite Rot to face in direction 120.78789526876503 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 32, 5, "Expected Sprite Rot to have x-position 32 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 13, 5, "Expected Sprite Rot to have y-position 13 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.keyPress('left arrow', 3);
  await t.runForSteps(3);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 81, 1, "Expected Sprite Scheibe to face in direction 81 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 120.78789526876503, 1, "Expected Sprite Rot to face in direction 120.78789526876503 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, -5, 5, "Expected Sprite Rot to have x-position -5 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 14, 5, "Expected Sprite Rot to have y-position 14 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.keyPress('right arrow', 4);
  await t.runForSteps(4);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 93, 1, "Expected Sprite Scheibe to face in direction 93 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 120.78789526876503, 1, "Expected Sprite Rot to face in direction 120.78789526876503 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 44, 5, "Expected Sprite Rot to have x-position 44 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -170, 5, "Expected Sprite Rot to have y-position -170 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.keyPress('right arrow', 3);
  await t.runForSteps(3);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 102, 1, "Expected Sprite Scheibe to face in direction 102 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 120.78789526876503, 1, "Expected Sprite Rot to face in direction 120.78789526876503 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 108, 5, "Expected Sprite Rot to have x-position 108 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -149, 5, "Expected Sprite Rot to have y-position -149 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.keyPress('right arrow', 3);
  await t.runForSteps(3);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 111, 1, "Expected Sprite Scheibe to face in direction 111 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 120.78789526876503, 1, "Expected Sprite Rot to face in direction 120.78789526876503 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, -18, 5, "Expected Sprite Rot to have x-position -18 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -88, 5, "Expected Sprite Rot to have y-position -88 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  await t.runForSteps(71);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).currentCostume, 0, "Expected Clone 1 of Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 1, "Expected Sprite Rot to have 1 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 111, 1, "Expected Sprite Scheibe to face in direction 111 +-1");
  t.assert.equal(t.getSprite("Rot").direction, -122.15724595605556, 1, "Expected Sprite Rot to face in direction -122.15724595605556 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).direction, -122.15724595605556, 1, "Expected Clone 1 of Rot to face in direction -122.15724595605556 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 3, "Expected Sprite Scheibe to be at layer 3");
  t.assert.equal(t.getSprite("Rot").layerOrder, 2, "Expected Sprite Rot to be at layer 2");
  t.assert.equal(t.getSprite("Rot").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 237, 5, "Expected Sprite Rot to have x-position 237 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 149, 5, "Expected Sprite Rot to have y-position 149 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, 126.39999999999999, 5, "Expected Clone 1 of Rot to have x-position 126.39999999999999 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, 79.46666666666667, 5, "Expected Clone 1 of Rot to have y-position 79.46666666666667 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.not(t.getSprite("Rot").getClone(1).sayText, "Expected Clone 1 of Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).size, 80, 1, "Expected Clone 1 of Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.ok(t.getSprite("Rot").getClone(1).visible, "Expected Clone 1 of Rot to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.assert.equal(t.getSprite("Rot").getClone(1).volume, 100, "Expected Clone 1 of Rot to have volume 100");
  t.dragSprite('Rot', 47, -21, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).currentCostume, 0, "Expected Clone 1 of Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 1, "Expected Sprite Rot to have 1 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 111, 1, "Expected Sprite Scheibe to face in direction 111 +-1");
  t.assert.equal(t.getSprite("Rot").direction, -122.15724595605556, 1, "Expected Sprite Rot to face in direction -122.15724595605556 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).direction, -122.15724595605556, 1, "Expected Clone 1 of Rot to face in direction -122.15724595605556 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 3, "Expected Sprite Scheibe to be at layer 3");
  t.assert.equal(t.getSprite("Rot").layerOrder, 2, "Expected Sprite Rot to be at layer 2");
  t.assert.equal(t.getSprite("Rot").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 47, 5, "Expected Sprite Rot to have x-position 47 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -21, 5, "Expected Sprite Rot to have y-position -21 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, 123.76666666666667, 5, "Expected Clone 1 of Rot to have x-position 123.76666666666667 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, 77.8111111111111, 5, "Expected Clone 1 of Rot to have y-position 77.8111111111111 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.not(t.getSprite("Rot").getClone(1).sayText, "Expected Clone 1 of Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).size, 80, 1, "Expected Clone 1 of Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.ok(t.getSprite("Rot").getClone(1).visible, "Expected Clone 1 of Rot to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.assert.equal(t.getSprite("Rot").getClone(1).volume, 100, "Expected Clone 1 of Rot to have volume 100");
  t.keyPress('right arrow', 4);
  await t.runForSteps(4);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).currentCostume, 0, "Expected Clone 1 of Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 1, "Expected Sprite Rot to have 1 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 123, 1, "Expected Sprite Scheibe to face in direction 123 +-1");
  t.assert.equal(t.getSprite("Rot").direction, -122.15724595605556, 1, "Expected Sprite Rot to face in direction -122.15724595605556 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).direction, -122.15724595605556, 1, "Expected Clone 1 of Rot to face in direction -122.15724595605556 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 3, "Expected Sprite Scheibe to be at layer 3");
  t.assert.equal(t.getSprite("Rot").layerOrder, 2, "Expected Sprite Rot to be at layer 2");
  t.assert.equal(t.getSprite("Rot").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 47, 5, "Expected Sprite Rot to have x-position 47 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -21, 5, "Expected Sprite Rot to have y-position -21 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, 110.60000000000001, 5, "Expected Clone 1 of Rot to have x-position 110.60000000000001 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, 69.53333333333333, 5, "Expected Clone 1 of Rot to have y-position 69.53333333333333 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.not(t.getSprite("Rot").getClone(1).sayText, "Expected Clone 1 of Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).size, 80, 1, "Expected Clone 1 of Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.ok(t.getSprite("Rot").getClone(1).visible, "Expected Clone 1 of Rot to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.assert.equal(t.getSprite("Rot").getClone(1).volume, 100, "Expected Clone 1 of Rot to have volume 100");
  await t.runForSteps(12);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).currentCostume, 0, "Expected Clone 1 of Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 1, "Expected Sprite Rot to have 1 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 123, 1, "Expected Sprite Scheibe to face in direction 123 +-1");
  t.assert.equal(t.getSprite("Rot").direction, -122.15724595605556, 1, "Expected Sprite Rot to face in direction -122.15724595605556 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).direction, -122.15724595605556, 1, "Expected Clone 1 of Rot to face in direction -122.15724595605556 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 3, "Expected Sprite Scheibe to be at layer 3");
  t.assert.equal(t.getSprite("Rot").layerOrder, 2, "Expected Sprite Rot to be at layer 2");
  t.assert.equal(t.getSprite("Rot").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, -152, 5, "Expected Sprite Rot to have x-position -152 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -113, 5, "Expected Sprite Rot to have y-position -113 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, 76.36666666666665, 5, "Expected Clone 1 of Rot to have x-position 76.36666666666665 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, 48.011111111111106, 5, "Expected Clone 1 of Rot to have y-position 48.011111111111106 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.not(t.getSprite("Rot").getClone(1).sayText, "Expected Clone 1 of Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).size, 80, 1, "Expected Clone 1 of Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.ok(t.getSprite("Rot").getClone(1).visible, "Expected Clone 1 of Rot to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.assert.equal(t.getSprite("Rot").getClone(1).volume, 100, "Expected Clone 1 of Rot to have volume 100");
  t.keyPress('right arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).currentCostume, 0, "Expected Clone 1 of Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 1, "Expected Sprite Rot to have 1 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 126, 1, "Expected Sprite Scheibe to face in direction 126 +-1");
  t.assert.equal(t.getSprite("Rot").direction, -122.15724595605556, 1, "Expected Sprite Rot to face in direction -122.15724595605556 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).direction, -122.15724595605556, 1, "Expected Clone 1 of Rot to face in direction -122.15724595605556 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 3, "Expected Sprite Scheibe to be at layer 3");
  t.assert.equal(t.getSprite("Rot").layerOrder, 2, "Expected Sprite Rot to be at layer 2");
  t.assert.equal(t.getSprite("Rot").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 215, 5, "Expected Sprite Rot to have x-position 215 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -165, 5, "Expected Sprite Rot to have y-position -165 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, 71.10000000000002, 5, "Expected Clone 1 of Rot to have x-position 71.10000000000002 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, 44.7, 5, "Expected Clone 1 of Rot to have y-position 44.7 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.not(t.getSprite("Rot").getClone(1).sayText, "Expected Clone 1 of Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).size, 80, 1, "Expected Clone 1 of Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.ok(t.getSprite("Rot").getClone(1).visible, "Expected Clone 1 of Rot to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.assert.equal(t.getSprite("Rot").getClone(1).volume, 100, "Expected Clone 1 of Rot to have volume 100");
  t.keyPress('left arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).currentCostume, 0, "Expected Clone 1 of Rot to have costume 0");
  t.assert.equal(t.getSprite("Rot").getClone(2).currentCostume, 0, "Expected Clone 2 of Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 2, "Expected Sprite Rot to have 2 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 123, 1, "Expected Sprite Scheibe to face in direction 123 +-1");
  t.assert.equal(t.getSprite("Rot").direction, -52.49585763972988, 1, "Expected Sprite Rot to face in direction -52.49585763972988 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).direction, -122.15724595605556, 1, "Expected Clone 1 of Rot to face in direction -122.15724595605556 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(2).direction, -52.49585763972988, 1, "Expected Clone 2 of Rot to face in direction -52.49585763972988 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 4, "Expected Sprite Scheibe to be at layer 4");
  t.assert.equal(t.getSprite("Rot").layerOrder, 3, "Expected Sprite Rot to be at layer 3");
  t.assert.equal(t.getSprite("Rot").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Rot to be at layer 1");
  t.assert.equal(t.getSprite("Rot").getClone(2).getLayerOrder(), 2, "Expected Clone 2 of Rot to be at layer 2");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 215, 5, "Expected Sprite Rot to have x-position 215 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -165, 5, "Expected Sprite Rot to have y-position -165 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, 65.83333333333334, 5, "Expected Clone 1 of Rot to have x-position 65.83333333333334 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, 41.388888888888886, 5, "Expected Clone 1 of Rot to have y-position 41.388888888888886 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(2).x, 212.61111111111111, 5, "Expected Clone 2 of Rot to have x-position 212.61111111111111 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(2).y, -163.16666666666666, 5, "Expected Clone 2 of Rot to have y-position -163.16666666666666 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.not(t.getSprite("Rot").getClone(1).sayText, "Expected Clone 1 of Rot not to say anything");
  t.assert.not(t.getSprite("Rot").getClone(2).sayText, "Expected Clone 2 of Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).size, 80, 1, "Expected Clone 1 of Rot to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Rot").getClone(2).size, 80, 1, "Expected Clone 2 of Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.ok(t.getSprite("Rot").getClone(1).visible, "Expected Clone 1 of Rot to be visible");
  t.assert.ok(t.getSprite("Rot").getClone(2).visible, "Expected Clone 2 of Rot to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.assert.equal(t.getSprite("Rot").getClone(1).volume, 100, "Expected Clone 1 of Rot to have volume 100");
  t.assert.equal(t.getSprite("Rot").getClone(2).volume, 100, "Expected Clone 2 of Rot to have volume 100");
  t.dragSprite('Rot', 47, -21, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).currentCostume, 0, "Expected Clone 1 of Rot to have costume 0");
  t.assert.equal(t.getSprite("Rot").getClone(2).currentCostume, 0, "Expected Clone 2 of Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 2, "Expected Sprite Rot to have 2 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 123, 1, "Expected Sprite Scheibe to face in direction 123 +-1");
  t.assert.equal(t.getSprite("Rot").direction, -52.49585763972988, 1, "Expected Sprite Rot to face in direction -52.49585763972988 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).direction, -122.15724595605556, 1, "Expected Clone 1 of Rot to face in direction -122.15724595605556 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(2).direction, -52.49585763972988, 1, "Expected Clone 2 of Rot to face in direction -52.49585763972988 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 4, "Expected Sprite Scheibe to be at layer 4");
  t.assert.equal(t.getSprite("Rot").layerOrder, 3, "Expected Sprite Rot to be at layer 3");
  t.assert.equal(t.getSprite("Rot").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Rot to be at layer 1");
  t.assert.equal(t.getSprite("Rot").getClone(2).getLayerOrder(), 2, "Expected Clone 2 of Rot to be at layer 2");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 47, 5, "Expected Sprite Rot to have x-position 47 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -21, 5, "Expected Sprite Rot to have y-position -21 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, 63.20000000000002, 5, "Expected Clone 1 of Rot to have x-position 63.20000000000002 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, 39.733333333333334, 5, "Expected Clone 1 of Rot to have y-position 39.733333333333334 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(2).x, 210.22222222222223, 5, "Expected Clone 2 of Rot to have x-position 210.22222222222223 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(2).y, -161.33333333333334, 5, "Expected Clone 2 of Rot to have y-position -161.33333333333334 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.not(t.getSprite("Rot").getClone(1).sayText, "Expected Clone 1 of Rot not to say anything");
  t.assert.not(t.getSprite("Rot").getClone(2).sayText, "Expected Clone 2 of Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).size, 80, 1, "Expected Clone 1 of Rot to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Rot").getClone(2).size, 80, 1, "Expected Clone 2 of Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.ok(t.getSprite("Rot").getClone(1).visible, "Expected Clone 1 of Rot to be visible");
  t.assert.ok(t.getSprite("Rot").getClone(2).visible, "Expected Clone 2 of Rot to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.assert.equal(t.getSprite("Rot").getClone(1).volume, 100, "Expected Clone 1 of Rot to have volume 100");
  t.assert.equal(t.getSprite("Rot").getClone(2).volume, 100, "Expected Clone 2 of Rot to have volume 100");
  await t.runForSteps(29);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).currentCostume, 0, "Expected Clone 1 of Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 1, "Expected Sprite Rot to have 1 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 123, 1, "Expected Sprite Scheibe to face in direction 123 +-1");
  t.assert.equal(t.getSprite("Rot").direction, -52.49585763972988, 1, "Expected Sprite Rot to face in direction -52.49585763972988 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).direction, -52.49585763972988, 1, "Expected Clone 1 of Rot to face in direction -52.49585763972988 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 3, "Expected Sprite Scheibe to be at layer 3");
  t.assert.equal(t.getSprite("Rot").layerOrder, 2, "Expected Sprite Rot to be at layer 2");
  t.assert.equal(t.getSprite("Rot").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 47, 5, "Expected Sprite Rot to have x-position 47 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -21, 5, "Expected Sprite Rot to have y-position -21 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, 138.55555555555554, 5, "Expected Clone 1 of Rot to have x-position 138.55555555555554 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, -106.33333333333333, 5, "Expected Clone 1 of Rot to have y-position -106.33333333333333 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.not(t.getSprite("Rot").getClone(1).sayText, "Expected Clone 1 of Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).size, 80, 1, "Expected Clone 1 of Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.ok(t.getSprite("Rot").getClone(1).visible, "Expected Clone 1 of Rot to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.assert.equal(t.getSprite("Rot").getClone(1).volume, 100, "Expected Clone 1 of Rot to have volume 100");
  t.keyPress('right arrow', 2);
  await t.runForSteps(2);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).currentCostume, 0, "Expected Clone 1 of Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 1, "Expected Sprite Rot to have 1 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 129, 1, "Expected Sprite Scheibe to face in direction 129 +-1");
  t.assert.equal(t.getSprite("Rot").direction, -52.49585763972988, 1, "Expected Sprite Rot to face in direction -52.49585763972988 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).direction, -52.49585763972988, 1, "Expected Clone 1 of Rot to face in direction -52.49585763972988 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 3, "Expected Sprite Scheibe to be at layer 3");
  t.assert.equal(t.getSprite("Rot").layerOrder, 2, "Expected Sprite Rot to be at layer 2");
  t.assert.equal(t.getSprite("Rot").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 47, 5, "Expected Sprite Rot to have x-position 47 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -21, 5, "Expected Sprite Rot to have y-position -21 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, 131.38888888888889, 5, "Expected Clone 1 of Rot to have x-position 131.38888888888889 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, -100.83333333333333, 5, "Expected Clone 1 of Rot to have y-position -100.83333333333333 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.not(t.getSprite("Rot").getClone(1).sayText, "Expected Clone 1 of Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).size, 80, 1, "Expected Clone 1 of Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.ok(t.getSprite("Rot").getClone(1).visible, "Expected Clone 1 of Rot to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.assert.equal(t.getSprite("Rot").getClone(1).volume, 100, "Expected Clone 1 of Rot to have volume 100");
  t.dragSprite('Rot', 16.823273859507093, 6.022212985987124, 2);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 129, 1, "Expected Sprite Scheibe to face in direction 129 +-1");
  t.assert.equal(t.getSprite("Rot").direction, -52.49585763972988, 1, "Expected Sprite Rot to face in direction -52.49585763972988 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 47, 5, "Expected Sprite Rot to have x-position 47 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -21, 5, "Expected Sprite Rot to have y-position -21 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.keyPress('right arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 132, 1, "Expected Sprite Scheibe to face in direction 132 +-1");
  t.assert.equal(t.getSprite("Rot").direction, -52.49585763972988, 1, "Expected Sprite Rot to face in direction -52.49585763972988 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 47, 5, "Expected Sprite Rot to have x-position 47 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -21, 5, "Expected Sprite Rot to have y-position -21 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.keyPress('right arrow', 4);
  await t.runForSteps(4);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 144, 1, "Expected Sprite Scheibe to face in direction 144 +-1");
  t.assert.equal(t.getSprite("Rot").direction, -52.49585763972988, 1, "Expected Sprite Rot to face in direction -52.49585763972988 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 47, 5, "Expected Sprite Rot to have x-position 47 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -21, 5, "Expected Sprite Rot to have y-position -21 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.keyPress('left arrow', 3);
  await t.runForSteps(3);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 135, 1, "Expected Sprite Scheibe to face in direction 135 +-1");
  t.assert.equal(t.getSprite("Rot").direction, -52.49585763972988, 1, "Expected Sprite Rot to face in direction -52.49585763972988 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 47, 5, "Expected Sprite Rot to have x-position 47 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -21, 5, "Expected Sprite Rot to have y-position -21 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.keyPress('right arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 138, 1, "Expected Sprite Scheibe to face in direction 138 +-1");
  t.assert.equal(t.getSprite("Rot").direction, -52.49585763972988, 1, "Expected Sprite Rot to face in direction -52.49585763972988 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 47, 5, "Expected Sprite Rot to have x-position 47 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -21, 5, "Expected Sprite Rot to have y-position -21 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.keyPress('left arrow', 2);
  await t.runForSteps(2);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 132, 1, "Expected Sprite Scheibe to face in direction 132 +-1");
  t.assert.equal(t.getSprite("Rot").direction, -52.49585763972988, 1, "Expected Sprite Rot to face in direction -52.49585763972988 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 47, 5, "Expected Sprite Rot to have x-position 47 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -21, 5, "Expected Sprite Rot to have y-position -21 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.keyPress('left arrow', 4);
  await t.runForSteps(4);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 120, 1, "Expected Sprite Scheibe to face in direction 120 +-1");
  t.assert.equal(t.getSprite("Rot").direction, -52.49585763972988, 1, "Expected Sprite Rot to face in direction -52.49585763972988 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 47, 5, "Expected Sprite Rot to have x-position 47 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -21, 5, "Expected Sprite Rot to have y-position -21 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.keyPress('right arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 123, 1, "Expected Sprite Scheibe to face in direction 123 +-1");
  t.assert.equal(t.getSprite("Rot").direction, -52.49585763972988, 1, "Expected Sprite Rot to face in direction -52.49585763972988 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 47, 5, "Expected Sprite Rot to have x-position 47 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -21, 5, "Expected Sprite Rot to have y-position -21 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.keyPress('right arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 126, 1, "Expected Sprite Scheibe to face in direction 126 +-1");
  t.assert.equal(t.getSprite("Rot").direction, -52.49585763972988, 1, "Expected Sprite Rot to face in direction -52.49585763972988 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, -55, 5, "Expected Sprite Rot to have x-position -55 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -121, 5, "Expected Sprite Rot to have y-position -121 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.dragSprite('Rot', 39.330997669934284, 1.2723999878981083, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 126, 1, "Expected Sprite Scheibe to face in direction 126 +-1");
  t.assert.equal(t.getSprite("Rot").direction, -52.49585763972988, 1, "Expected Sprite Rot to face in direction -52.49585763972988 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, -201, 5, "Expected Sprite Rot to have x-position -201 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -5, 5, "Expected Sprite Rot to have y-position -5 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.dragSprite('Rot', 39.330997669934284, 1.2723999878981083, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 126, 1, "Expected Sprite Scheibe to face in direction 126 +-1");
  t.assert.equal(t.getSprite("Rot").direction, -52.49585763972988, 1, "Expected Sprite Rot to face in direction -52.49585763972988 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, -210, 5, "Expected Sprite Rot to have x-position -210 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 169, 5, "Expected Sprite Rot to have y-position 169 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.keyPress('right arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).currentCostume, 0, "Expected Clone 1 of Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 1, "Expected Sprite Rot to have 1 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 129, 1, "Expected Sprite Scheibe to face in direction 129 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 128.8257862936066, 1, "Expected Sprite Rot to face in direction 128.8257862936066 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).direction, 128.8257862936066, 1, "Expected Clone 1 of Rot to face in direction 128.8257862936066 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 3, "Expected Sprite Scheibe to be at layer 3");
  t.assert.equal(t.getSprite("Rot").layerOrder, 2, "Expected Sprite Rot to be at layer 2");
  t.assert.equal(t.getSprite("Rot").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, -210, 5, "Expected Sprite Rot to have x-position -210 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 169, 5, "Expected Sprite Rot to have y-position 169 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, -207.66666666666666, 5, "Expected Clone 1 of Rot to have x-position -207.66666666666666 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, 167.12222222222223, 5, "Expected Clone 1 of Rot to have y-position 167.12222222222223 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.not(t.getSprite("Rot").getClone(1).sayText, "Expected Clone 1 of Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).size, 80, 1, "Expected Clone 1 of Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.ok(t.getSprite("Rot").getClone(1).visible, "Expected Clone 1 of Rot to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.assert.equal(t.getSprite("Rot").getClone(1).volume, 100, "Expected Clone 1 of Rot to have volume 100");
  t.keyPress('left arrow', 4);
  await t.runForSteps(4);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).currentCostume, 0, "Expected Clone 1 of Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 1, "Expected Sprite Rot to have 1 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 117, 1, "Expected Sprite Scheibe to face in direction 117 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 128.8257862936066, 1, "Expected Sprite Rot to face in direction 128.8257862936066 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).direction, 128.8257862936066, 1, "Expected Clone 1 of Rot to face in direction 128.8257862936066 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 3, "Expected Sprite Scheibe to be at layer 3");
  t.assert.equal(t.getSprite("Rot").layerOrder, 2, "Expected Sprite Rot to be at layer 2");
  t.assert.equal(t.getSprite("Rot").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, -210, 5, "Expected Sprite Rot to have x-position -210 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 169, 5, "Expected Sprite Rot to have y-position 169 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, -196, 5, "Expected Clone 1 of Rot to have x-position -196 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, 157.73333333333335, 5, "Expected Clone 1 of Rot to have y-position 157.73333333333335 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.not(t.getSprite("Rot").getClone(1).sayText, "Expected Clone 1 of Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).size, 80, 1, "Expected Clone 1 of Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.ok(t.getSprite("Rot").getClone(1).visible, "Expected Clone 1 of Rot to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.assert.equal(t.getSprite("Rot").getClone(1).volume, 100, "Expected Clone 1 of Rot to have volume 100");
  t.dragSprite('Rot', 24.66593069971651, -28.6902367772126, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).currentCostume, 0, "Expected Clone 1 of Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 1, "Expected Sprite Rot to have 1 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 117, 1, "Expected Sprite Scheibe to face in direction 117 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 128.8257862936066, 1, "Expected Sprite Rot to face in direction 128.8257862936066 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).direction, 128.8257862936066, 1, "Expected Clone 1 of Rot to face in direction 128.8257862936066 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 3, "Expected Sprite Scheibe to be at layer 3");
  t.assert.equal(t.getSprite("Rot").layerOrder, 2, "Expected Sprite Rot to be at layer 2");
  t.assert.equal(t.getSprite("Rot").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 24.66593069971651, 5, "Expected Sprite Rot to have x-position 24.66593069971651 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -28.6902367772126, 5, "Expected Sprite Rot to have y-position -28.6902367772126 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, -193.66666666666666, 5, "Expected Clone 1 of Rot to have x-position -193.66666666666666 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, 155.85555555555555, 5, "Expected Clone 1 of Rot to have y-position 155.85555555555555 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.not(t.getSprite("Rot").getClone(1).sayText, "Expected Clone 1 of Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).size, 80, 1, "Expected Clone 1 of Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.ok(t.getSprite("Rot").getClone(1).visible, "Expected Clone 1 of Rot to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.assert.equal(t.getSprite("Rot").getClone(1).volume, 100, "Expected Clone 1 of Rot to have volume 100");
  await t.runForSteps(74);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 117, 1, "Expected Sprite Scheibe to face in direction 117 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 128.8257862936066, 1, "Expected Sprite Rot to face in direction 128.8257862936066 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, -79, 5, "Expected Sprite Rot to have x-position -79 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -11, 5, "Expected Sprite Rot to have y-position -11 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  await t.runForSteps(7);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 117, 1, "Expected Sprite Scheibe to face in direction 117 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 128.8257862936066, 1, "Expected Sprite Rot to face in direction 128.8257862936066 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, -169, 5, "Expected Sprite Rot to have x-position -169 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 107, 5, "Expected Sprite Rot to have y-position 107 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  await t.runForSteps(72);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).currentCostume, 0, "Expected Clone 1 of Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 1, "Expected Sprite Rot to have 1 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 117, 1, "Expected Sprite Scheibe to face in direction 117 +-1");
  t.assert.equal(t.getSprite("Rot").direction, -50.56509883491165, 1, "Expected Sprite Rot to face in direction -50.56509883491165 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).direction, -50.56509883491165, 1, "Expected Clone 1 of Rot to face in direction -50.56509883491165 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 3, "Expected Sprite Scheibe to be at layer 3");
  t.assert.equal(t.getSprite("Rot").layerOrder, 2, "Expected Sprite Rot to be at layer 2");
  t.assert.equal(t.getSprite("Rot").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 214, 5, "Expected Sprite Rot to have x-position 214 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -176, 5, "Expected Sprite Rot to have y-position -176 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, 128.39999999999998, 5, "Expected Clone 1 of Rot to have x-position 128.39999999999998 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, -105.6, 5, "Expected Clone 1 of Rot to have y-position -105.6 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.not(t.getSprite("Rot").getClone(1).sayText, "Expected Clone 1 of Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).size, 80, 1, "Expected Clone 1 of Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.ok(t.getSprite("Rot").getClone(1).visible, "Expected Clone 1 of Rot to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.assert.equal(t.getSprite("Rot").getClone(1).volume, 100, "Expected Clone 1 of Rot to have volume 100");
  t.dragSprite('Rot', 53.517942488362394, 1.7307667780393636, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).currentCostume, 0, "Expected Clone 1 of Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 1, "Expected Sprite Rot to have 1 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 117, 1, "Expected Sprite Scheibe to face in direction 117 +-1");
  t.assert.equal(t.getSprite("Rot").direction, -50.56509883491165, 1, "Expected Sprite Rot to face in direction -50.56509883491165 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).direction, -50.56509883491165, 1, "Expected Clone 1 of Rot to face in direction -50.56509883491165 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 3, "Expected Sprite Scheibe to be at layer 3");
  t.assert.equal(t.getSprite("Rot").layerOrder, 2, "Expected Sprite Rot to be at layer 2");
  t.assert.equal(t.getSprite("Rot").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 53.517942488362394, 5, "Expected Sprite Rot to have x-position 53.517942488362394 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 1.7307667780393636, 5, "Expected Sprite Rot to have y-position 1.7307667780393636 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, 126.02222222222223, 5, "Expected Clone 1 of Rot to have x-position 126.02222222222223 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, -103.64444444444445, 5, "Expected Clone 1 of Rot to have y-position -103.64444444444445 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.not(t.getSprite("Rot").getClone(1).sayText, "Expected Clone 1 of Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).size, 80, 1, "Expected Clone 1 of Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.ok(t.getSprite("Rot").getClone(1).visible, "Expected Clone 1 of Rot to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.assert.equal(t.getSprite("Rot").getClone(1).volume, 100, "Expected Clone 1 of Rot to have volume 100");
  t.dragSprite('Rot', -16.65284199932212, 6.3137880639613035, 1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 117, 1, "Expected Sprite Scheibe to face in direction 117 +-1");
  t.assert.equal(t.getSprite("Rot").direction, -50.56509883491165, 1, "Expected Sprite Rot to face in direction -50.56509883491165 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 53.517942488362394, 5, "Expected Sprite Rot to have x-position 53.517942488362394 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 1.7307667780393636, 5, "Expected Sprite Rot to have y-position 1.7307667780393636 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  await t.runForSteps(67);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).currentCostume, 0, "Expected Clone 1 of Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 1, "Expected Sprite Rot to have 1 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 117, 1, "Expected Sprite Scheibe to face in direction 117 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 53.267173335510634, 1, "Expected Sprite Rot to face in direction 53.267173335510634 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).direction, 53.267173335510634, 1, "Expected Clone 1 of Rot to face in direction 53.267173335510634 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 3, "Expected Sprite Scheibe to be at layer 3");
  t.assert.equal(t.getSprite("Rot").layerOrder, 2, "Expected Sprite Rot to be at layer 2");
  t.assert.equal(t.getSprite("Rot").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, -201, 5, "Expected Sprite Rot to have x-position -201 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -150, 5, "Expected Sprite Rot to have y-position -150 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, -116.13333333333334, 5, "Expected Clone 1 of Rot to have x-position -116.13333333333334 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, -86.66666666666666, 5, "Expected Clone 1 of Rot to have y-position -86.66666666666666 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.not(t.getSprite("Rot").getClone(1).sayText, "Expected Clone 1 of Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).size, 80, 1, "Expected Clone 1 of Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.ok(t.getSprite("Rot").getClone(1).visible, "Expected Clone 1 of Rot to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.assert.equal(t.getSprite("Rot").getClone(1).volume, 100, "Expected Clone 1 of Rot to have volume 100");
  t.dragSprite('Rot', -17.651096632405814, -3.1123645753854734, 1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 117, 1, "Expected Sprite Scheibe to face in direction 117 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 53.267173335510634, 1, "Expected Sprite Rot to face in direction 53.267173335510634 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, -201, 5, "Expected Sprite Rot to have x-position -201 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -150, 5, "Expected Sprite Rot to have y-position -150 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.keyPress('left arrow', 4);
  await t.runForSteps(4);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 114, 1, "Expected Sprite Scheibe to face in direction 114 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 53.267173335510634, 1, "Expected Sprite Rot to face in direction 53.267173335510634 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, -201, 5, "Expected Sprite Rot to have x-position -201 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -150, 5, "Expected Sprite Rot to have y-position -150 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.dragSprite('Rot', 52.68804155888135, -43.81348863352087, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 114, 1, "Expected Sprite Scheibe to face in direction 114 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 53.267173335510634, 1, "Expected Sprite Rot to face in direction 53.267173335510634 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 52.68804155888135, 5, "Expected Sprite Rot to have x-position 52.68804155888135 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -43.81348863352087, 5, "Expected Sprite Rot to have y-position -43.81348863352087 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.dragSprite('Rot', 59.10951975732891, -41.153625273240735, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 114, 1, "Expected Sprite Scheibe to face in direction 114 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 53.267173335510634, 1, "Expected Sprite Rot to face in direction 53.267173335510634 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 59.10951975732891, 5, "Expected Sprite Rot to have x-position 59.10951975732891 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -41.153625273240735, 5, "Expected Sprite Rot to have y-position -41.153625273240735 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  await t.runForSteps(69);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 114, 1, "Expected Sprite Scheibe to face in direction 114 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 53.267173335510634, 1, "Expected Sprite Rot to face in direction 53.267173335510634 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 59.10951975732891, 5, "Expected Sprite Rot to have x-position 59.10951975732891 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -41.153625273240735, 5, "Expected Sprite Rot to have y-position -41.153625273240735 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  await t.runForSteps(64);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 114, 1, "Expected Sprite Scheibe to face in direction 114 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 53.267173335510634, 1, "Expected Sprite Rot to face in direction 53.267173335510634 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 59.10951975732891, 5, "Expected Sprite Rot to have x-position 59.10951975732891 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -41.153625273240735, 5, "Expected Sprite Rot to have y-position -41.153625273240735 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.dragSprite('Rot', 47.820553208446924, 2.4975695091950882, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 114, 1, "Expected Sprite Scheibe to face in direction 114 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 53.267173335510634, 1, "Expected Sprite Rot to face in direction 53.267173335510634 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 47.820553208446924, 5, "Expected Sprite Rot to have x-position 47.820553208446924 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 2.4975695091950882, 5, "Expected Sprite Rot to have y-position 2.4975695091950882 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.end();
}

module.exports = [
  {
      test: test0,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687938334640',
      type: 'standard',
  }
]
