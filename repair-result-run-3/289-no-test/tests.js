const test0 = async function (t) {
  t.keyPress('right arrow', 2);
  await t.runForSteps(2);
  await t.runForSteps(1);
  t.keyPress('left arrow', 3);
  await t.runForSteps(3);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Scheibe").direction, 84, 1, "Expected Sprite Scheibe to face in direction 84 +-1");
  t.assert.withinRange(t.getSprite("Rot").x, -186, 5, "Expected Sprite Rot to have x-position -186 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -134, 5, "Expected Sprite Rot to have y-position -134 +-5");
  await t.runForSteps(47);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Rot").getClone(1).currentCostume, 0, "Expected Clone 1 of Rot to have costume 0");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 1, "Expected Sprite Rot to have 1 clones");
  t.assert.equal(t.getSprite("Rot").direction, 58.309178695400476, 1, "Expected Sprite Rot to face in direction 58.309178695400476 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).direction, 58.309178695400476, 1, "Expected Clone 1 of Rot to face in direction 58.309178695400476 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 3, "Expected Sprite Scheibe to be at layer 3");
  t.assert.equal(t.getSprite("Rot").layerOrder, 2, "Expected Sprite Rot to be at layer 2");
  t.assert.equal(t.getSprite("Rot").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Rot").x, -230, 5, "Expected Sprite Rot to have x-position -230 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -142, 5, "Expected Sprite Rot to have y-position -142 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, -189.11111111111111, 5, "Expected Clone 1 of Rot to have x-position -189.11111111111111 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, -116.75555555555556, 5, "Expected Clone 1 of Rot to have y-position -116.75555555555556 +-5");
  t.assert.not(t.getSprite("Rot").getClone(1).sayText, "Expected Clone 1 of Rot not to say anything");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).size, 80, 1, "Expected Clone 1 of Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Rot").getClone(1).visible, "Expected Clone 1 of Rot to be visible");
  t.assert.equal(t.getSprite("Rot").getClone(1).volume, 100, "Expected Clone 1 of Rot to have volume 100");
  t.dragSprite('Rot', -8.439606671041545, -15.87259162334129, 1);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.keyPress('left arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Scheibe").direction, 81, 1, "Expected Sprite Scheibe to face in direction 81 +-1");
  t.keyPress('right arrow', 2);
  await t.runForSteps(2);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Scheibe").direction, 87, 1, "Expected Sprite Scheibe to face in direction 87 +-1");
  t.keyPress('right arrow', 3);
  await t.runForSteps(3);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Scheibe").direction, 96, 1, "Expected Sprite Scheibe to face in direction 96 +-1");
  await t.runForSteps(41);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Rot").x, -99, 5, "Expected Sprite Rot to have x-position -99 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 101, 5, "Expected Sprite Rot to have y-position 101 +-5");
  t.dragSprite('Rot', 0, -52, null);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Rot").x, -106, 5, "Expected Sprite Rot to have x-position -106 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -175, 5, "Expected Sprite Rot to have y-position -175 +-5");
  t.keyPress('left arrow', 4);
  await t.runForSteps(4);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Scheibe").direction, 84, 1, "Expected Sprite Scheibe to face in direction 84 +-1");
  t.assert.withinRange(t.getSprite("Rot").x, 27, 5, "Expected Sprite Rot to have x-position 27 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 131, 5, "Expected Sprite Rot to have y-position 131 +-5");
  t.keyPress('right arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Scheibe").direction, 87, 1, "Expected Sprite Scheibe to face in direction 87 +-1");
  t.assert.withinRange(t.getSprite("Rot").x, 84, 5, "Expected Sprite Rot to have x-position 84 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 31, 5, "Expected Sprite Rot to have y-position 31 +-5");
  await t.runForSteps(18);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Rot").x, -76, 5, "Expected Sprite Rot to have x-position -76 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 118, 5, "Expected Sprite Rot to have y-position 118 +-5");
  t.keyPress('right arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Scheibe").direction, 90, 1, "Expected Sprite Scheibe to face in direction 90 +-1");
  t.assert.withinRange(t.getSprite("Rot").x, -5, 5, "Expected Sprite Rot to have x-position -5 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -127, 5, "Expected Sprite Rot to have y-position -127 +-5");
  t.dragSprite('Rot', -12.818285837254578, 52.90802749623792, null);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Rot").x, -95, 5, "Expected Sprite Rot to have x-position -95 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 178, 5, "Expected Sprite Rot to have y-position 178 +-5");
  await t.runForSteps(40);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Rot").getClone(1).currentCostume, 0, "Expected Clone 1 of Rot to have costume 0");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 1, "Expected Sprite Rot to have 1 clones");
  t.assert.equal(t.getSprite("Rot").direction, -125.40461769789727, 1, "Expected Sprite Rot to face in direction -125.40461769789727 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).direction, -125.40461769789727, 1, "Expected Clone 1 of Rot to face in direction -125.40461769789727 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 3, "Expected Sprite Scheibe to be at layer 3");
  t.assert.equal(t.getSprite("Rot").layerOrder, 2, "Expected Sprite Rot to be at layer 2");
  t.assert.equal(t.getSprite("Rot").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Rot").x, 204, 5, "Expected Sprite Rot to have x-position 204 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 145, 5, "Expected Sprite Rot to have y-position 145 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, 122.39999999999999, 5, "Expected Clone 1 of Rot to have x-position 122.39999999999999 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, 87, 5, "Expected Clone 1 of Rot to have y-position 87 +-5");
  t.assert.not(t.getSprite("Rot").getClone(1).sayText, "Expected Clone 1 of Rot not to say anything");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).size, 80, 1, "Expected Clone 1 of Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Rot").getClone(1).visible, "Expected Clone 1 of Rot to be visible");
  t.assert.equal(t.getSprite("Rot").getClone(1).volume, 100, "Expected Clone 1 of Rot to have volume 100");
  t.dragSprite('Rot', 25.460246245716597, 55.422725053552966, null);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Rot").x, 25.460246245716597, 5, "Expected Sprite Rot to have x-position 25.460246245716597 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 55.422725053552966, 5, "Expected Sprite Rot to have y-position 55.422725053552966 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, 120.13333333333334, 5, "Expected Clone 1 of Rot to have x-position 120.13333333333334 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, 85.38888888888889, 5, "Expected Clone 1 of Rot to have y-position 85.38888888888889 +-5");
  await t.runForSteps(76);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Rot").getClone(1).currentCostume, 0, "Expected Clone 1 of Rot to have costume 0");
  t.assert.equal(t.getSprite("Rot").direction, 121.03665188652522, 1, "Expected Sprite Rot to face in direction 121.03665188652522 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).direction, 121.03665188652522, 1, "Expected Clone 1 of Rot to face in direction 121.03665188652522 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Rot").x, -231, 5, "Expected Sprite Rot to have x-position -231 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 139, 5, "Expected Sprite Rot to have y-position 139 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, -107.8, 5, "Expected Clone 1 of Rot to have x-position -107.8 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, 64.86666666666667, 5, "Expected Clone 1 of Rot to have y-position 64.86666666666667 +-5");
  t.assert.not(t.getSprite("Rot").getClone(1).sayText, "Expected Clone 1 of Rot not to say anything");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).size, 80, 1, "Expected Clone 1 of Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Rot").getClone(1).visible, "Expected Clone 1 of Rot to be visible");
  t.assert.equal(t.getSprite("Rot").getClone(1).volume, 100, "Expected Clone 1 of Rot to have volume 100");
  t.dragSprite('Rot', 7, 41, null);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Rot").x, 7, 5, "Expected Sprite Rot to have x-position 7 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 41, 5, "Expected Sprite Rot to have y-position 41 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, -105.23333333333335, 5, "Expected Clone 1 of Rot to have x-position -105.23333333333335 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, 63.32222222222222, 5, "Expected Clone 1 of Rot to have y-position 63.32222222222222 +-5");
  await t.runForSteps(16);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Rot").x, -123, 5, "Expected Sprite Rot to have x-position -123 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 37, 5, "Expected Sprite Rot to have y-position 37 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, -61.60000000000002, 5, "Expected Clone 1 of Rot to have x-position -61.60000000000002 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, 37.06666666666668, 5, "Expected Clone 1 of Rot to have y-position 37.06666666666668 +-5");
  await t.runForSteps(53);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Rot").getClone(1).currentCostume, 0, "Expected Clone 1 of Rot to have costume 0");
  t.assert.equal(t.getSprite("Rot").direction, -48.754183797379085, 1, "Expected Sprite Rot to face in direction -48.754183797379085 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).direction, -48.754183797379085, 1, "Expected Clone 1 of Rot to face in direction -48.754183797379085 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Rot").x, 203, 5, "Expected Sprite Rot to have x-position 203 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -178, 5, "Expected Sprite Rot to have y-position -178 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, 178.1888888888889, 5, "Expected Clone 1 of Rot to have x-position 178.1888888888889 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, -156.24444444444444, 5, "Expected Clone 1 of Rot to have y-position -156.24444444444444 +-5");
  t.assert.not(t.getSprite("Rot").getClone(1).sayText, "Expected Clone 1 of Rot not to say anything");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).size, 80, 1, "Expected Clone 1 of Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Rot").getClone(1).visible, "Expected Clone 1 of Rot to be visible");
  t.assert.equal(t.getSprite("Rot").getClone(1).volume, 100, "Expected Clone 1 of Rot to have volume 100");
  t.dragSprite('Rot', -17.431626360777372, 3.360097029299927, 1);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  await t.runForSteps(69);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Rot").x, 92, 5, "Expected Sprite Rot to have x-position 92 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 146, 5, "Expected Sprite Rot to have y-position 146 +-5");
  await t.runForSteps(78);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Rot").getClone(1).currentCostume, 0, "Expected Clone 1 of Rot to have costume 0");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 1, "Expected Sprite Rot to have 1 clones");
  t.assert.equal(t.getSprite("Rot").direction, -53.015204554604196, 1, "Expected Sprite Rot to face in direction -53.015204554604196 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).direction, -53.015204554604196, 1, "Expected Clone 1 of Rot to face in direction -53.015204554604196 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 3, "Expected Sprite Scheibe to be at layer 3");
  t.assert.equal(t.getSprite("Rot").layerOrder, 2, "Expected Sprite Rot to be at layer 2");
  t.assert.equal(t.getSprite("Rot").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Rot").x, 239, 5, "Expected Sprite Rot to have x-position 239 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -180, 5, "Expected Sprite Rot to have y-position -180 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, 239, 5, "Expected Clone 1 of Rot to have x-position 239 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, -180, 5, "Expected Clone 1 of Rot to have y-position -180 +-5");
  t.assert.not(t.getSprite("Rot").getClone(1).sayText, "Expected Clone 1 of Rot not to say anything");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).size, 80, 1, "Expected Clone 1 of Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Rot").getClone(1).visible, "Expected Clone 1 of Rot to be visible");
  t.assert.equal(t.getSprite("Rot").getClone(1).volume, 100, "Expected Clone 1 of Rot to have volume 100");
  await t.runForSteps(98);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Rot").getClone(1).currentCostume, 0, "Expected Clone 1 of Rot to have costume 0");
  t.assert.equal(t.getSprite("Rot").direction, -123.29609489772346, 1, "Expected Sprite Rot to face in direction -123.29609489772346 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).direction, -123.29609489772346, 1, "Expected Clone 1 of Rot to face in direction -123.29609489772346 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Rot").x, 236, 5, "Expected Sprite Rot to have x-position 236 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 155, 5, "Expected Sprite Rot to have y-position 155 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, 141.6, 5, "Expected Clone 1 of Rot to have x-position 141.6 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, 93, 5, "Expected Clone 1 of Rot to have y-position 93 +-5");
  t.assert.not(t.getSprite("Rot").getClone(1).sayText, "Expected Clone 1 of Rot not to say anything");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).size, 80, 1, "Expected Clone 1 of Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Rot").getClone(1).visible, "Expected Clone 1 of Rot to be visible");
  t.assert.equal(t.getSprite("Rot").getClone(1).volume, 100, "Expected Clone 1 of Rot to have volume 100");
  await t.runForSteps(58);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Rot").getClone(1).currentCostume, 0, "Expected Clone 1 of Rot to have costume 0");
  t.assert.equal(t.getSprite("Rot").direction, 114.48068283917628, 1, "Expected Sprite Rot to face in direction 114.48068283917628 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).direction, 114.48068283917628, 1, "Expected Clone 1 of Rot to face in direction 114.48068283917628 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Rot").x, -235, 5, "Expected Sprite Rot to have x-position -235 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 107, 5, "Expected Sprite Rot to have y-position 107 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, -154.05555555555554, 5, "Expected Clone 1 of Rot to have x-position -154.05555555555554 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, 70.14444444444445, 5, "Expected Clone 1 of Rot to have y-position 70.14444444444445 +-5");
  t.assert.not(t.getSprite("Rot").getClone(1).sayText, "Expected Clone 1 of Rot not to say anything");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).size, 80, 1, "Expected Clone 1 of Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Rot").getClone(1).visible, "Expected Clone 1 of Rot to be visible");
  t.assert.equal(t.getSprite("Rot").getClone(1).volume, 100, "Expected Clone 1 of Rot to have volume 100");
  t.keyPress('right arrow', 2);
  await t.runForSteps(2);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Scheibe").direction, 96, 1, "Expected Sprite Scheibe to face in direction 96 +-1");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, -146.22222222222223, 5, "Expected Clone 1 of Rot to have x-position -146.22222222222223 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, 66.57777777777778, 5, "Expected Clone 1 of Rot to have y-position 66.57777777777778 +-5");
  t.keyPress('left arrow', 3);
  await t.runForSteps(3);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Scheibe").direction, 87, 1, "Expected Sprite Scheibe to face in direction 87 +-1");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, -135.77777777777777, 5, "Expected Clone 1 of Rot to have x-position -135.77777777777777 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, 61.82222222222222, 5, "Expected Clone 1 of Rot to have y-position 61.82222222222222 +-5");
  t.dragSprite('Rot', -8.115856045514855, -15.928260937174784, 2);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.keyPress('right arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Scheibe").direction, 90, 1, "Expected Sprite Scheibe to face in direction 90 +-1");
  await t.runForSteps(61);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Rot").x, 9, 5, "Expected Sprite Rot to have x-position 9 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 121, 5, "Expected Sprite Rot to have y-position 121 +-5");
  await t.runForSteps(83);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Rot").getClone(1).currentCostume, 0, "Expected Clone 1 of Rot to have costume 0");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 1, "Expected Sprite Rot to have 1 clones");
  t.assert.equal(t.getSprite("Rot").direction, -60.96601330899776, 1, "Expected Sprite Rot to face in direction -60.96601330899776 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).direction, -60.96601330899776, 1, "Expected Clone 1 of Rot to face in direction -60.96601330899776 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 3, "Expected Sprite Scheibe to be at layer 3");
  t.assert.equal(t.getSprite("Rot").layerOrder, 2, "Expected Sprite Rot to be at layer 2");
  t.assert.equal(t.getSprite("Rot").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Rot").x, 236, 5, "Expected Sprite Rot to have x-position 236 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -131, 5, "Expected Sprite Rot to have y-position -131 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, 201.9111111111111, 5, "Expected Clone 1 of Rot to have x-position 201.9111111111111 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, -112.07777777777778, 5, "Expected Clone 1 of Rot to have y-position -112.07777777777778 +-5");
  t.assert.not(t.getSprite("Rot").getClone(1).sayText, "Expected Clone 1 of Rot not to say anything");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).size, 80, 1, "Expected Clone 1 of Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Rot").getClone(1).visible, "Expected Clone 1 of Rot to be visible");
  t.assert.equal(t.getSprite("Rot").getClone(1).volume, 100, "Expected Clone 1 of Rot to have volume 100");
  t.keyPress('right arrow', 2);
  await t.runForSteps(2);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Scheibe").direction, 96, 1, "Expected Sprite Scheibe to face in direction 96 +-1");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, 194.04444444444445, 5, "Expected Clone 1 of Rot to have x-position 194.04444444444445 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, -107.71111111111111, 5, "Expected Clone 1 of Rot to have y-position -107.71111111111111 +-5");
  t.keyPress('left arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Scheibe").direction, 93, 1, "Expected Sprite Scheibe to face in direction 93 +-1");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, 188.8, 5, "Expected Clone 1 of Rot to have x-position 188.8 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, -104.8, 5, "Expected Clone 1 of Rot to have y-position -104.8 +-5");
  t.dragSprite('Rot', -14.179004187905587, 49.55687312898648, null);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Rot").x, -14.179004187905587, 5, "Expected Sprite Rot to have x-position -14.179004187905587 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 49.55687312898648, 5, "Expected Sprite Rot to have y-position 49.55687312898648 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, 186.17777777777778, 5, "Expected Clone 1 of Rot to have x-position 186.17777777777778 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, -103.34444444444445, 5, "Expected Clone 1 of Rot to have y-position -103.34444444444445 +-5");
  t.keyPress('left arrow', 3);
  await t.runForSteps(3);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Scheibe").direction, 84, 1, "Expected Sprite Scheibe to face in direction 84 +-1");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, 175.6888888888889, 5, "Expected Clone 1 of Rot to have x-position 175.6888888888889 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, -97.52222222222223, 5, "Expected Clone 1 of Rot to have y-position -97.52222222222223 +-5");
  t.keyPress('right arrow', 3);
  await t.runForSteps(3);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Scheibe").direction, 93, 1, "Expected Sprite Scheibe to face in direction 93 +-1");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, 165.2, 5, "Expected Clone 1 of Rot to have x-position 165.2 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, -91.7, 5, "Expected Clone 1 of Rot to have y-position -91.7 +-5");
  t.dragSprite('Rot', 26.78200500714399, 52.42114591598511, null);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Rot").x, 26.78200500714399, 5, "Expected Sprite Rot to have x-position 26.78200500714399 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 52.42114591598511, 5, "Expected Sprite Rot to have y-position 52.42114591598511 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, 162.57777777777778, 5, "Expected Clone 1 of Rot to have x-position 162.57777777777778 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, -90.24444444444444, 5, "Expected Clone 1 of Rot to have y-position -90.24444444444444 +-5");
  t.keyPress('right arrow', 3);
  await t.runForSteps(3);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Scheibe").direction, 102, 1, "Expected Sprite Scheibe to face in direction 102 +-1");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, 152.0888888888889, 5, "Expected Clone 1 of Rot to have x-position 152.0888888888889 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, -84.42222222222222, 5, "Expected Clone 1 of Rot to have y-position -84.42222222222222 +-5");
  await t.runForSteps(32);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Rot").getClone(2).currentCostume, 0, "Expected Clone 2 of Rot to have costume 0");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 2, "Expected Sprite Rot to have 2 clones");
  t.assert.equal(t.getSprite("Rot").direction, 51.098875208569105, 1, "Expected Sprite Rot to face in direction 51.098875208569105 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(2).direction, 51.098875208569105, 1, "Expected Clone 2 of Rot to face in direction 51.098875208569105 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 4, "Expected Sprite Scheibe to be at layer 4");
  t.assert.equal(t.getSprite("Rot").layerOrder, 3, "Expected Sprite Rot to be at layer 3");
  t.assert.equal(t.getSprite("Rot").getClone(2).getLayerOrder(), 2, "Expected Clone 2 of Rot to be at layer 2");
  t.assert.withinRange(t.getSprite("Rot").x, -202, 5, "Expected Sprite Rot to have x-position -202 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -163, 5, "Expected Sprite Rot to have y-position -163 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(2).x, -199.75555555555556, 5, "Expected Clone 2 of Rot to have x-position -199.75555555555556 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(2).y, -161.1888888888889, 5, "Expected Clone 2 of Rot to have y-position -161.1888888888889 +-5");
  t.assert.not(t.getSprite("Rot").getClone(2).sayText, "Expected Clone 2 of Rot not to say anything");
  t.assert.withinRange(t.getSprite("Rot").getClone(2).size, 80, 1, "Expected Clone 2 of Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Rot").getClone(2).visible, "Expected Clone 2 of Rot to be visible");
  t.assert.equal(t.getSprite("Rot").getClone(2).volume, 100, "Expected Clone 2 of Rot to have volume 100");
  t.keyPress('left arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Scheibe").direction, 99, 1, "Expected Sprite Scheibe to face in direction 99 +-1");
  t.assert.withinRange(t.getSprite("Rot").getClone(2).x, -195.26666666666668, 5, "Expected Clone 2 of Rot to have x-position -195.26666666666668 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(2).y, -157.56666666666666, 5, "Expected Clone 2 of Rot to have y-position -157.56666666666666 +-5");
  t.keyPress('right arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Scheibe").direction, 102, 1, "Expected Sprite Scheibe to face in direction 102 +-1");
  t.assert.withinRange(t.getSprite("Rot").getClone(2).x, -190.77777777777777, 5, "Expected Clone 2 of Rot to have x-position -190.77777777777777 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(2).y, -153.94444444444446, 5, "Expected Clone 2 of Rot to have y-position -153.94444444444446 +-5");
  t.dragSprite('Rot', 0, 0, 2);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 1, "Expected Sprite Rot to have 1 clones");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 3, "Expected Sprite Scheibe to be at layer 3");
  t.assert.equal(t.getSprite("Rot").layerOrder, 2, "Expected Sprite Rot to be at layer 2");
  t.assert.equal(t.getSprite("Rot").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, -188.53333333333333, 5, "Expected Clone 1 of Rot to have x-position -188.53333333333333 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, -152.13333333333333, 5, "Expected Clone 1 of Rot to have y-position -152.13333333333333 +-5");
  await t.runForSteps(99);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Rot").direction, 122.07164660897195, 1, "Expected Sprite Rot to face in direction 122.07164660897195 +-1");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Rot").x, -233, 5, "Expected Sprite Rot to have x-position -233 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 146, 5, "Expected Sprite Rot to have y-position 146 +-5");
  await t.runForSteps(44);
  await t.runForSteps(1);
  t.dragSprite('Rot', 52, -4, null);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Rot").x, 52, 5, "Expected Sprite Rot to have x-position 52 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -4, 5, "Expected Sprite Rot to have y-position -4 +-5");
  t.end();
}

module.exports = [
  {
      test: test0,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687936808627',
      type: 'standard',
  }
]
