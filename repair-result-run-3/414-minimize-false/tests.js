const test0 = async function (t) {
  t.dragSprite('Kugelfisch', -160.65636358166304, -63.380555073901874, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, 148.25471257764477, 1, "Expected Sprite Fisch to face in direction 148.25471257764477 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 90, 1, "Expected Sprite Kugelfisch to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, -49.90429975096373, 1, "Expected Sprite Qualle to face in direction -49.90429975096373 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, -189, 5, "Expected Sprite Fisch to have x-position -189 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, -128, 5, "Expected Sprite Fisch to have y-position -128 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -15, 5, "Expected Sprite Stern to have x-position -15 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, -98, 5, "Expected Sprite Stern to have y-position -98 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, -143, 5, "Expected Sprite Kugelfisch to have x-position -143 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, 80, 5, "Expected Sprite Kugelfisch to have y-position 80 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, 50, 5, "Expected Sprite Qualle to have x-position 50 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, 72, 5, "Expected Sprite Qualle to have y-position 72 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 60, 1, "Expected Sprite Kugelfisch to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  t.dragSprite('Kugelfisch', -240, -81.94465316166648, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, 148.25471257764477, 1, "Expected Sprite Fisch to face in direction 148.25471257764477 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 90, 1, "Expected Sprite Kugelfisch to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, -49.90429975096373, 1, "Expected Sprite Qualle to face in direction -49.90429975096373 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, -189, 5, "Expected Sprite Fisch to have x-position -189 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, -128, 5, "Expected Sprite Fisch to have y-position -128 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -15, 5, "Expected Sprite Stern to have x-position -15 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, -98, 5, "Expected Sprite Stern to have y-position -98 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, -238, 5, "Expected Sprite Kugelfisch to have x-position -238 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, -81.94465316166648, 5, "Expected Sprite Kugelfisch to have y-position -81.94465316166648 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, 50, 5, "Expected Sprite Qualle to have x-position 50 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, 72, 5, "Expected Sprite Qualle to have y-position 72 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 60, 1, "Expected Sprite Kugelfisch to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  t.dragSprite('Kugelfisch', -240, -175.8762879983281, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, 148.25471257764477, 1, "Expected Sprite Fisch to face in direction 148.25471257764477 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 90, 1, "Expected Sprite Kugelfisch to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, -49.90429975096373, 1, "Expected Sprite Qualle to face in direction -49.90429975096373 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, -189, 5, "Expected Sprite Fisch to have x-position -189 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, -128, 5, "Expected Sprite Fisch to have y-position -128 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -15, 5, "Expected Sprite Stern to have x-position -15 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, -98, 5, "Expected Sprite Stern to have y-position -98 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, -238, 5, "Expected Sprite Kugelfisch to have x-position -238 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, -175.8762879983281, 5, "Expected Sprite Kugelfisch to have y-position -175.8762879983281 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, 50, 5, "Expected Sprite Qualle to have x-position 50 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, 72, 5, "Expected Sprite Qualle to have y-position 72 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 60, 1, "Expected Sprite Kugelfisch to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  t.dragSprite('Qualle', -147.2097736902075, -78.91300949811267, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, 148.25471257764477, 1, "Expected Sprite Fisch to face in direction 148.25471257764477 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 90, 1, "Expected Sprite Kugelfisch to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, -49.90429975096373, 1, "Expected Sprite Qualle to face in direction -49.90429975096373 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, -189, 5, "Expected Sprite Fisch to have x-position -189 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, -128, 5, "Expected Sprite Fisch to have y-position -128 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -15, 5, "Expected Sprite Stern to have x-position -15 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, -98, 5, "Expected Sprite Stern to have y-position -98 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, -236, 5, "Expected Sprite Kugelfisch to have x-position -236 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, -175.8762879983281, 5, "Expected Sprite Kugelfisch to have y-position -175.8762879983281 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, -147.2097736902075, 5, "Expected Sprite Qualle to have x-position -147.2097736902075 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, -78.91300949811267, 5, "Expected Sprite Qualle to have y-position -78.91300949811267 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 60, 1, "Expected Sprite Kugelfisch to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  await t.runForSteps(68);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, 148.25471257764477, 1, "Expected Sprite Fisch to face in direction 148.25471257764477 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 90, 1, "Expected Sprite Kugelfisch to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, -49.90429975096373, 1, "Expected Sprite Qualle to face in direction -49.90429975096373 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, -189, 5, "Expected Sprite Fisch to have x-position -189 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, -128, 5, "Expected Sprite Fisch to have y-position -128 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -15, 5, "Expected Sprite Stern to have x-position -15 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, -98, 5, "Expected Sprite Stern to have y-position -98 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, -188, 5, "Expected Sprite Kugelfisch to have x-position -188 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, -175.8762879983281, 5, "Expected Sprite Kugelfisch to have y-position -175.8762879983281 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, -147.2097736902075, 5, "Expected Sprite Qualle to have x-position -147.2097736902075 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, -78.91300949811267, 5, "Expected Sprite Qualle to have y-position -78.91300949811267 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 60, 1, "Expected Sprite Kugelfisch to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  t.end();
}
const test1 = async function (t) {
  t.dragSprite('Qualle', -146.05419527453745, -174.94157180585978, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, 148.25471257764477, 1, "Expected Sprite Fisch to face in direction 148.25471257764477 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 90, 1, "Expected Sprite Kugelfisch to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, -49.90429975096373, 1, "Expected Sprite Qualle to face in direction -49.90429975096373 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, -189, 5, "Expected Sprite Fisch to have x-position -189 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, -128, 5, "Expected Sprite Fisch to have y-position -128 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -15, 5, "Expected Sprite Stern to have x-position -15 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, -98, 5, "Expected Sprite Stern to have y-position -98 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, -143, 5, "Expected Sprite Kugelfisch to have x-position -143 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, 80, 5, "Expected Sprite Kugelfisch to have y-position 80 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, 50, 5, "Expected Sprite Qualle to have x-position 50 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, 72, 5, "Expected Sprite Qualle to have y-position 72 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 60, 1, "Expected Sprite Kugelfisch to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  t.dragSprite('Kugelfisch', -142.37218620484882, -180, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, 148.25471257764477, 1, "Expected Sprite Fisch to face in direction 148.25471257764477 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 90, 1, "Expected Sprite Kugelfisch to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, -49.90429975096373, 1, "Expected Sprite Qualle to face in direction -49.90429975096373 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, -189, 5, "Expected Sprite Fisch to have x-position -189 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, -128, 5, "Expected Sprite Fisch to have y-position -128 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -15, 5, "Expected Sprite Stern to have x-position -15 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, -98, 5, "Expected Sprite Stern to have y-position -98 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, -140.37218620484882, 5, "Expected Sprite Kugelfisch to have x-position -140.37218620484882 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, -180, 5, "Expected Sprite Kugelfisch to have y-position -180 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, 50, 5, "Expected Sprite Qualle to have x-position 50 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, 72, 5, "Expected Sprite Qualle to have y-position 72 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 60, 1, "Expected Sprite Kugelfisch to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  t.dragSprite('Stern', -216.62550586210017, -112.25, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, 148.25471257764477, 1, "Expected Sprite Fisch to face in direction 148.25471257764477 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 90, 1, "Expected Sprite Kugelfisch to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, -49.90429975096373, 1, "Expected Sprite Qualle to face in direction -49.90429975096373 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, -189, 5, "Expected Sprite Fisch to have x-position -189 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, -128, 5, "Expected Sprite Fisch to have y-position -128 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 92, 5, "Expected Sprite Stern to have x-position 92 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 180, 5, "Expected Sprite Stern to have y-position 180 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, -138.37218620484882, 5, "Expected Sprite Kugelfisch to have x-position -138.37218620484882 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, -180, 5, "Expected Sprite Kugelfisch to have y-position -180 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, 50, 5, "Expected Sprite Qualle to have x-position 50 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, 72, 5, "Expected Sprite Qualle to have y-position 72 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 60, 1, "Expected Sprite Kugelfisch to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  t.mouseMove(-198, -104);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, 148.25471257764477, 1, "Expected Sprite Fisch to face in direction 148.25471257764477 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 90, 1, "Expected Sprite Kugelfisch to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, -49.90429975096373, 1, "Expected Sprite Qualle to face in direction -49.90429975096373 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, -189, 5, "Expected Sprite Fisch to have x-position -189 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, -128, 5, "Expected Sprite Fisch to have y-position -128 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 92, 5, "Expected Sprite Stern to have x-position 92 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 180, 5, "Expected Sprite Stern to have y-position 180 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, -136.37218620484882, 5, "Expected Sprite Kugelfisch to have x-position -136.37218620484882 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, -180, 5, "Expected Sprite Kugelfisch to have y-position -180 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, 50, 5, "Expected Sprite Qualle to have x-position 50 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, 72, 5, "Expected Sprite Qualle to have y-position 72 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 60, 1, "Expected Sprite Kugelfisch to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  t.dragSprite('Stern', -220.661413491562, -131.83888431726214, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, 148.25471257764477, 1, "Expected Sprite Fisch to face in direction 148.25471257764477 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 90, 1, "Expected Sprite Kugelfisch to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, -49.90429975096373, 1, "Expected Sprite Qualle to face in direction -49.90429975096373 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, -189, 5, "Expected Sprite Fisch to have x-position -189 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, -128, 5, "Expected Sprite Fisch to have y-position -128 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -146, 5, "Expected Sprite Stern to have x-position -146 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, -126, 5, "Expected Sprite Stern to have y-position -126 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, -134.37218620484882, 5, "Expected Sprite Kugelfisch to have x-position -134.37218620484882 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, -180, 5, "Expected Sprite Kugelfisch to have y-position -180 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, 50, 5, "Expected Sprite Qualle to have x-position 50 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, 72, 5, "Expected Sprite Qualle to have y-position 72 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 60, 1, "Expected Sprite Kugelfisch to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  t.dragSprite('Stern', -171.62645025490534, -154.41811649173223, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, 148.25471257764477, 1, "Expected Sprite Fisch to face in direction 148.25471257764477 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 90, 1, "Expected Sprite Kugelfisch to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, -49.90429975096373, 1, "Expected Sprite Qualle to face in direction -49.90429975096373 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, -189, 5, "Expected Sprite Fisch to have x-position -189 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, -128, 5, "Expected Sprite Fisch to have y-position -128 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 60, 5, "Expected Sprite Stern to have x-position 60 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, -28, 5, "Expected Sprite Stern to have y-position -28 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, -132.37218620484882, 5, "Expected Sprite Kugelfisch to have x-position -132.37218620484882 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, -180, 5, "Expected Sprite Kugelfisch to have y-position -180 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, 50, 5, "Expected Sprite Qualle to have x-position 50 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, 72, 5, "Expected Sprite Qualle to have y-position 72 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 60, 1, "Expected Sprite Kugelfisch to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  t.dragSprite('Qualle', -209.1440850141485, -55.679659343790576, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, 148.25471257764477, 1, "Expected Sprite Fisch to face in direction 148.25471257764477 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 90, 1, "Expected Sprite Kugelfisch to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, -49.90429975096373, 1, "Expected Sprite Qualle to face in direction -49.90429975096373 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, -189, 5, "Expected Sprite Fisch to have x-position -189 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, -128, 5, "Expected Sprite Fisch to have y-position -128 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 60, 5, "Expected Sprite Stern to have x-position 60 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, -28, 5, "Expected Sprite Stern to have y-position -28 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, -130.37218620484882, 5, "Expected Sprite Kugelfisch to have x-position -130.37218620484882 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, -180, 5, "Expected Sprite Kugelfisch to have y-position -180 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, -209.1440850141485, 5, "Expected Sprite Qualle to have x-position -209.1440850141485 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, -55.679659343790576, 5, "Expected Sprite Qualle to have y-position -55.679659343790576 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 60, 1, "Expected Sprite Kugelfisch to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  t.mouseMove(53, -81);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, 148.25471257764477, 1, "Expected Sprite Fisch to face in direction 148.25471257764477 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 90, 1, "Expected Sprite Kugelfisch to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, -49.90429975096373, 1, "Expected Sprite Qualle to face in direction -49.90429975096373 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, -189, 5, "Expected Sprite Fisch to have x-position -189 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, -128, 5, "Expected Sprite Fisch to have y-position -128 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 60, 5, "Expected Sprite Stern to have x-position 60 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, -28, 5, "Expected Sprite Stern to have y-position -28 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, -128.37218620484882, 5, "Expected Sprite Kugelfisch to have x-position -128.37218620484882 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, -180, 5, "Expected Sprite Kugelfisch to have y-position -180 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, -209.1440850141485, 5, "Expected Sprite Qualle to have x-position -209.1440850141485 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, -55.679659343790576, 5, "Expected Sprite Qualle to have y-position -55.679659343790576 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 60, 1, "Expected Sprite Kugelfisch to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  t.dragSprite('Kugelfisch', -183.9398653307372, -57.97100671608422, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, 148.25471257764477, 1, "Expected Sprite Fisch to face in direction 148.25471257764477 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 90, 1, "Expected Sprite Kugelfisch to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, -49.90429975096373, 1, "Expected Sprite Qualle to face in direction -49.90429975096373 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, -189, 5, "Expected Sprite Fisch to have x-position -189 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, -128, 5, "Expected Sprite Fisch to have y-position -128 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 60, 5, "Expected Sprite Stern to have x-position 60 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, -28, 5, "Expected Sprite Stern to have y-position -28 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, -181.9398653307372, 5, "Expected Sprite Kugelfisch to have x-position -181.9398653307372 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, -57.97100671608422, 5, "Expected Sprite Kugelfisch to have y-position -57.97100671608422 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, -209.1440850141485, 5, "Expected Sprite Qualle to have x-position -209.1440850141485 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, -55.679659343790576, 5, "Expected Sprite Qualle to have y-position -55.679659343790576 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 60, 1, "Expected Sprite Kugelfisch to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  t.mouseMove(-69, 143);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, 148.25471257764477, 1, "Expected Sprite Fisch to face in direction 148.25471257764477 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 90, 1, "Expected Sprite Kugelfisch to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, -49.90429975096373, 1, "Expected Sprite Qualle to face in direction -49.90429975096373 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, -189, 5, "Expected Sprite Fisch to have x-position -189 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, -128, 5, "Expected Sprite Fisch to have y-position -128 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 60, 5, "Expected Sprite Stern to have x-position 60 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, -28, 5, "Expected Sprite Stern to have y-position -28 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, -179.9398653307372, 5, "Expected Sprite Kugelfisch to have x-position -179.9398653307372 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, -57.97100671608422, 5, "Expected Sprite Kugelfisch to have y-position -57.97100671608422 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, -209.1440850141485, 5, "Expected Sprite Qualle to have x-position -209.1440850141485 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, -55.679659343790576, 5, "Expected Sprite Qualle to have y-position -55.679659343790576 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 60, 1, "Expected Sprite Kugelfisch to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  await t.runForSteps(69);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, 142.96961039432136, 1, "Expected Sprite Fisch to face in direction 142.96961039432136 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 180, 1, "Expected Sprite Kugelfisch to face in direction 180 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, 35.19826743486048, 1, "Expected Sprite Qualle to face in direction 35.19826743486048 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, -69, 5, "Expected Sprite Fisch to have x-position -69 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, 143, 5, "Expected Sprite Fisch to have y-position 143 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 60, 5, "Expected Sprite Stern to have x-position 60 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, -28, 5, "Expected Sprite Stern to have y-position -28 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, -59.939865330737206, 5, "Expected Sprite Kugelfisch to have x-position -59.939865330737206 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, -75.97100671608422, 5, "Expected Sprite Kugelfisch to have y-position -75.97100671608422 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, -134.21109619653927, 5, "Expected Sprite Qualle to have x-position -134.21109619653927 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, 50.551443384459766, 5, "Expected Sprite Qualle to have y-position 50.551443384459766 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 70, 1, "Expected Sprite Kugelfisch to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  t.dragSprite('Qualle', -77.41210366720469, 180, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, 142.96961039432136, 1, "Expected Sprite Fisch to face in direction 142.96961039432136 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 180, 1, "Expected Sprite Kugelfisch to face in direction 180 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, 167.19129779608454, 1, "Expected Sprite Qualle to face in direction 167.19129779608454 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, -69, 5, "Expected Sprite Fisch to have x-position -69 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, 143, 5, "Expected Sprite Fisch to have y-position 143 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 60, 5, "Expected Sprite Stern to have x-position 60 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, -28, 5, "Expected Sprite Stern to have y-position -28 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, -59.939865330737206, 5, "Expected Sprite Kugelfisch to have x-position -59.939865330737206 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, -77.97100671608422, 5, "Expected Sprite Kugelfisch to have y-position -77.97100671608422 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, -76.83569249991032, 5, "Expected Sprite Qualle to have x-position -76.83569249991032 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, 177.46469919610743, 5, "Expected Sprite Qualle to have y-position 177.46469919610743 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 70, 1, "Expected Sprite Kugelfisch to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  t.end();
}

module.exports = [
  {
      test: test0,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687938381968',
      type: 'standard',
  },
  {
      test: test1,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687938381968',
      type: 'standard',
  }
]
