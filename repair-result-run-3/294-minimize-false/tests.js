const test0 = async function (t) {
  await t.runForSteps(47);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Spieler").currentCostume, 0, "Expected Sprite Spieler to have costume 0");
  t.assert.equal(t.getSprite("Freundin").currentCostume, 0, "Expected Sprite Freundin to have costume 0");
  t.assert.equal(t.getSprite("Münzen").currentCostume, 0, "Expected Sprite Münzen to have costume 0");
  t.assert.equal(t.getSprite("Eis").currentCostume, 0, "Expected Sprite Eis to have costume 0");
  t.assert.equal(t.getSprite("Spieler").getCloneCount(), 0, "Expected Sprite Spieler to have 0 clones");
  t.assert.equal(t.getSprite("Freundin").getCloneCount(), 0, "Expected Sprite Freundin to have 0 clones");
  t.assert.equal(t.getSprite("Münzen").getCloneCount(), 0, "Expected Sprite Münzen to have 0 clones");
  t.assert.equal(t.getSprite("Eis").getCloneCount(), 0, "Expected Sprite Eis to have 0 clones");
  t.assert.equal(t.getSprite("Spieler").direction, -90, 1, "Expected Sprite Spieler to face in direction -90 +-1");
  t.assert.equal(t.getSprite("Freundin").direction, 90, 1, "Expected Sprite Freundin to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Münzen").direction, 90, 1, "Expected Sprite Münzen to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Eis").direction, 90, 1, "Expected Sprite Eis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Spieler").effects.color, 0, "Expected effect color of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.fisheye, 0, "Expected effect fisheye of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.whirl, 0, "Expected effect whirl of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.pixelate, 0, "Expected effect pixelate of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.mosaic, 0, "Expected effect mosaic of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.brightness, 0, "Expected effect brightness of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.ghost, 0, "Expected effect ghost of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.color, 0, "Expected effect color of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.fisheye, 0, "Expected effect fisheye of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.whirl, 0, "Expected effect whirl of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.pixelate, 0, "Expected effect pixelate of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.mosaic, 0, "Expected effect mosaic of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.brightness, 0, "Expected effect brightness of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.ghost, 0, "Expected effect ghost of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.color, 0, "Expected effect color of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.fisheye, 0, "Expected effect fisheye of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.whirl, 0, "Expected effect whirl of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.pixelate, 0, "Expected effect pixelate of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.mosaic, 0, "Expected effect mosaic of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.brightness, 0, "Expected effect brightness of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.ghost, 0, "Expected effect ghost of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Eis").effects.color, 0, "Expected effect color of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.fisheye, 0, "Expected effect fisheye of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.whirl, 0, "Expected effect whirl of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.pixelate, 0, "Expected effect pixelate of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.mosaic, 0, "Expected effect mosaic of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.brightness, 0, "Expected effect brightness of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.ghost, 0, "Expected effect ghost of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Spieler").layerOrder, 3, "Expected Sprite Spieler to be at layer 3");
  t.assert.equal(t.getSprite("Freundin").layerOrder, 5, "Expected Sprite Freundin to be at layer 5");
  t.assert.equal(t.getSprite("Münzen").layerOrder, 4, "Expected Sprite Münzen to be at layer 4");
  t.assert.equal(t.getSprite("Eis").layerOrder, 2, "Expected Sprite Eis to be at layer 2");
  t.assert.withinRange(t.getSprite("Spieler").x, -218, 5, "Expected Sprite Spieler to have x-position -218 +-5");
  t.assert.withinRange(t.getSprite("Spieler").y, -155, 5, "Expected Sprite Spieler to have y-position -155 +-5");
  t.assert.withinRange(t.getSprite("Freundin").x, 60, 5, "Expected Sprite Freundin to have x-position 60 +-5");
  t.assert.withinRange(t.getSprite("Freundin").y, -131, 5, "Expected Sprite Freundin to have y-position -131 +-5");
  t.assert.withinRange(t.getSprite("Münzen").x, -49, 5, "Expected Sprite Münzen to have x-position -49 +-5");
  t.assert.withinRange(t.getSprite("Münzen").y, 130, 5, "Expected Sprite Münzen to have y-position 130 +-5");
  t.assert.withinRange(t.getSprite("Eis").x, 195, 5, "Expected Sprite Eis to have x-position 195 +-5");
  t.assert.withinRange(t.getSprite("Eis").y, -158, 5, "Expected Sprite Eis to have y-position -158 +-5");
  t.assert.not(t.getSprite("Spieler").sayText, "Expected Sprite Spieler not to say anything");
  t.assert.not(t.getSprite("Freundin").sayText, "Expected Sprite Freundin not to say anything");
  t.assert.not(t.getSprite("Münzen").sayText, "Expected Sprite Münzen not to say anything");
  t.assert.not(t.getSprite("Eis").sayText, "Expected Sprite Eis not to say anything");
  t.assert.withinRange(t.getSprite("Spieler").size, 8, 1, "Expected Sprite Spieler to have size 8 +-1");
  t.assert.withinRange(t.getSprite("Freundin").size, 50, 1, "Expected Sprite Freundin to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Münzen").size, 50, 1, "Expected Sprite Münzen to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Eis").size, 20, 1, "Expected Sprite Eis to have size 20 +-1");
  t.assert.ok(t.getSprite("Spieler").visible, "Expected Sprite Spieler to be visible");
  t.assert.ok(t.getSprite("Freundin").visible, "Expected Sprite Freundin to be visible");
  t.assert.ok(t.getSprite("Münzen").visible, "Expected Sprite Münzen to be visible");
  t.assert.ok(t.getSprite("Eis").visible, "Expected Sprite Eis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Spieler").volume, 100, "Expected Sprite Spieler to have volume 100");
  t.assert.equal(t.getSprite("Freundin").volume, 100, "Expected Sprite Freundin to have volume 100");
  t.assert.equal(t.getSprite("Münzen").volume, 100, "Expected Sprite Münzen to have volume 100");
  t.assert.equal(t.getSprite("Eis").volume, 100, "Expected Sprite Eis to have volume 100");
  await t.runForSteps(57);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Spieler").currentCostume, 0, "Expected Sprite Spieler to have costume 0");
  t.assert.equal(t.getSprite("Freundin").currentCostume, 0, "Expected Sprite Freundin to have costume 0");
  t.assert.equal(t.getSprite("Münzen").currentCostume, 0, "Expected Sprite Münzen to have costume 0");
  t.assert.equal(t.getSprite("Eis").currentCostume, 0, "Expected Sprite Eis to have costume 0");
  t.assert.equal(t.getSprite("Spieler").getCloneCount(), 0, "Expected Sprite Spieler to have 0 clones");
  t.assert.equal(t.getSprite("Freundin").getCloneCount(), 0, "Expected Sprite Freundin to have 0 clones");
  t.assert.equal(t.getSprite("Münzen").getCloneCount(), 0, "Expected Sprite Münzen to have 0 clones");
  t.assert.equal(t.getSprite("Eis").getCloneCount(), 0, "Expected Sprite Eis to have 0 clones");
  t.assert.equal(t.getSprite("Spieler").direction, -90, 1, "Expected Sprite Spieler to face in direction -90 +-1");
  t.assert.equal(t.getSprite("Freundin").direction, 90, 1, "Expected Sprite Freundin to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Münzen").direction, 90, 1, "Expected Sprite Münzen to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Eis").direction, 90, 1, "Expected Sprite Eis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Spieler").effects.color, 0, "Expected effect color of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.fisheye, 0, "Expected effect fisheye of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.whirl, 0, "Expected effect whirl of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.pixelate, 0, "Expected effect pixelate of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.mosaic, 0, "Expected effect mosaic of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.brightness, 0, "Expected effect brightness of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.ghost, 0, "Expected effect ghost of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.color, 0, "Expected effect color of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.fisheye, 0, "Expected effect fisheye of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.whirl, 0, "Expected effect whirl of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.pixelate, 0, "Expected effect pixelate of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.mosaic, 0, "Expected effect mosaic of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.brightness, 0, "Expected effect brightness of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.ghost, 0, "Expected effect ghost of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.color, 0, "Expected effect color of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.fisheye, 0, "Expected effect fisheye of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.whirl, 0, "Expected effect whirl of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.pixelate, 0, "Expected effect pixelate of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.mosaic, 0, "Expected effect mosaic of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.brightness, 0, "Expected effect brightness of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.ghost, 0, "Expected effect ghost of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Eis").effects.color, 0, "Expected effect color of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.fisheye, 0, "Expected effect fisheye of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.whirl, 0, "Expected effect whirl of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.pixelate, 0, "Expected effect pixelate of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.mosaic, 0, "Expected effect mosaic of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.brightness, 0, "Expected effect brightness of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.ghost, 0, "Expected effect ghost of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Spieler").layerOrder, 3, "Expected Sprite Spieler to be at layer 3");
  t.assert.equal(t.getSprite("Freundin").layerOrder, 5, "Expected Sprite Freundin to be at layer 5");
  t.assert.equal(t.getSprite("Münzen").layerOrder, 4, "Expected Sprite Münzen to be at layer 4");
  t.assert.equal(t.getSprite("Eis").layerOrder, 2, "Expected Sprite Eis to be at layer 2");
  t.assert.withinRange(t.getSprite("Spieler").x, -163, 5, "Expected Sprite Spieler to have x-position -163 +-5");
  t.assert.withinRange(t.getSprite("Spieler").y, -50, 5, "Expected Sprite Spieler to have y-position -50 +-5");
  t.assert.withinRange(t.getSprite("Freundin").x, 60, 5, "Expected Sprite Freundin to have x-position 60 +-5");
  t.assert.withinRange(t.getSprite("Freundin").y, -131, 5, "Expected Sprite Freundin to have y-position -131 +-5");
  t.assert.withinRange(t.getSprite("Münzen").x, -49, 5, "Expected Sprite Münzen to have x-position -49 +-5");
  t.assert.withinRange(t.getSprite("Münzen").y, 130, 5, "Expected Sprite Münzen to have y-position 130 +-5");
  t.assert.withinRange(t.getSprite("Eis").x, 195, 5, "Expected Sprite Eis to have x-position 195 +-5");
  t.assert.withinRange(t.getSprite("Eis").y, -158, 5, "Expected Sprite Eis to have y-position -158 +-5");
  t.assert.not(t.getSprite("Spieler").sayText, "Expected Sprite Spieler not to say anything");
  t.assert.not(t.getSprite("Freundin").sayText, "Expected Sprite Freundin not to say anything");
  t.assert.not(t.getSprite("Münzen").sayText, "Expected Sprite Münzen not to say anything");
  t.assert.not(t.getSprite("Eis").sayText, "Expected Sprite Eis not to say anything");
  t.assert.withinRange(t.getSprite("Spieler").size, 8, 1, "Expected Sprite Spieler to have size 8 +-1");
  t.assert.withinRange(t.getSprite("Freundin").size, 50, 1, "Expected Sprite Freundin to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Münzen").size, 50, 1, "Expected Sprite Münzen to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Eis").size, 20, 1, "Expected Sprite Eis to have size 20 +-1");
  t.assert.ok(t.getSprite("Spieler").visible, "Expected Sprite Spieler to be visible");
  t.assert.ok(t.getSprite("Freundin").visible, "Expected Sprite Freundin to be visible");
  t.assert.ok(t.getSprite("Münzen").visible, "Expected Sprite Münzen to be visible");
  t.assert.ok(t.getSprite("Eis").visible, "Expected Sprite Eis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Spieler").volume, 100, "Expected Sprite Spieler to have volume 100");
  t.assert.equal(t.getSprite("Freundin").volume, 100, "Expected Sprite Freundin to have volume 100");
  t.assert.equal(t.getSprite("Münzen").volume, 100, "Expected Sprite Münzen to have volume 100");
  t.assert.equal(t.getSprite("Eis").volume, 100, "Expected Sprite Eis to have volume 100");
  t.dragSprite('Spieler', -153.44177666078724, -42.35061538895937, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Spieler").currentCostume, 0, "Expected Sprite Spieler to have costume 0");
  t.assert.equal(t.getSprite("Freundin").currentCostume, 0, "Expected Sprite Freundin to have costume 0");
  t.assert.equal(t.getSprite("Münzen").currentCostume, 0, "Expected Sprite Münzen to have costume 0");
  t.assert.equal(t.getSprite("Eis").currentCostume, 0, "Expected Sprite Eis to have costume 0");
  t.assert.equal(t.getSprite("Spieler").getCloneCount(), 0, "Expected Sprite Spieler to have 0 clones");
  t.assert.equal(t.getSprite("Freundin").getCloneCount(), 0, "Expected Sprite Freundin to have 0 clones");
  t.assert.equal(t.getSprite("Münzen").getCloneCount(), 0, "Expected Sprite Münzen to have 0 clones");
  t.assert.equal(t.getSprite("Eis").getCloneCount(), 0, "Expected Sprite Eis to have 0 clones");
  t.assert.equal(t.getSprite("Spieler").direction, -90, 1, "Expected Sprite Spieler to face in direction -90 +-1");
  t.assert.equal(t.getSprite("Freundin").direction, 90, 1, "Expected Sprite Freundin to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Münzen").direction, 90, 1, "Expected Sprite Münzen to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Eis").direction, 90, 1, "Expected Sprite Eis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Spieler").effects.color, 0, "Expected effect color of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.fisheye, 0, "Expected effect fisheye of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.whirl, 0, "Expected effect whirl of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.pixelate, 0, "Expected effect pixelate of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.mosaic, 0, "Expected effect mosaic of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.brightness, 0, "Expected effect brightness of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.ghost, 0, "Expected effect ghost of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.color, 0, "Expected effect color of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.fisheye, 0, "Expected effect fisheye of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.whirl, 0, "Expected effect whirl of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.pixelate, 0, "Expected effect pixelate of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.mosaic, 0, "Expected effect mosaic of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.brightness, 0, "Expected effect brightness of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.ghost, 0, "Expected effect ghost of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.color, 0, "Expected effect color of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.fisheye, 0, "Expected effect fisheye of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.whirl, 0, "Expected effect whirl of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.pixelate, 0, "Expected effect pixelate of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.mosaic, 0, "Expected effect mosaic of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.brightness, 0, "Expected effect brightness of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.ghost, 0, "Expected effect ghost of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Eis").effects.color, 0, "Expected effect color of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.fisheye, 0, "Expected effect fisheye of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.whirl, 0, "Expected effect whirl of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.pixelate, 0, "Expected effect pixelate of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.mosaic, 0, "Expected effect mosaic of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.brightness, 0, "Expected effect brightness of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.ghost, 0, "Expected effect ghost of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Spieler").layerOrder, 3, "Expected Sprite Spieler to be at layer 3");
  t.assert.equal(t.getSprite("Freundin").layerOrder, 5, "Expected Sprite Freundin to be at layer 5");
  t.assert.equal(t.getSprite("Münzen").layerOrder, 4, "Expected Sprite Münzen to be at layer 4");
  t.assert.equal(t.getSprite("Eis").layerOrder, 2, "Expected Sprite Eis to be at layer 2");
  t.assert.withinRange(t.getSprite("Spieler").x, -158.44177666078724, 5, "Expected Sprite Spieler to have x-position -158.44177666078724 +-5");
  t.assert.withinRange(t.getSprite("Spieler").y, -42.35061538895937, 5, "Expected Sprite Spieler to have y-position -42.35061538895937 +-5");
  t.assert.withinRange(t.getSprite("Freundin").x, 60, 5, "Expected Sprite Freundin to have x-position 60 +-5");
  t.assert.withinRange(t.getSprite("Freundin").y, -131, 5, "Expected Sprite Freundin to have y-position -131 +-5");
  t.assert.withinRange(t.getSprite("Münzen").x, -49, 5, "Expected Sprite Münzen to have x-position -49 +-5");
  t.assert.withinRange(t.getSprite("Münzen").y, 130, 5, "Expected Sprite Münzen to have y-position 130 +-5");
  t.assert.withinRange(t.getSprite("Eis").x, 195, 5, "Expected Sprite Eis to have x-position 195 +-5");
  t.assert.withinRange(t.getSprite("Eis").y, -158, 5, "Expected Sprite Eis to have y-position -158 +-5");
  t.assert.not(t.getSprite("Spieler").sayText, "Expected Sprite Spieler not to say anything");
  t.assert.not(t.getSprite("Freundin").sayText, "Expected Sprite Freundin not to say anything");
  t.assert.not(t.getSprite("Münzen").sayText, "Expected Sprite Münzen not to say anything");
  t.assert.not(t.getSprite("Eis").sayText, "Expected Sprite Eis not to say anything");
  t.assert.withinRange(t.getSprite("Spieler").size, 8, 1, "Expected Sprite Spieler to have size 8 +-1");
  t.assert.withinRange(t.getSprite("Freundin").size, 50, 1, "Expected Sprite Freundin to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Münzen").size, 50, 1, "Expected Sprite Münzen to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Eis").size, 20, 1, "Expected Sprite Eis to have size 20 +-1");
  t.assert.ok(t.getSprite("Spieler").visible, "Expected Sprite Spieler to be visible");
  t.assert.ok(t.getSprite("Freundin").visible, "Expected Sprite Freundin to be visible");
  t.assert.ok(t.getSprite("Münzen").visible, "Expected Sprite Münzen to be visible");
  t.assert.ok(t.getSprite("Eis").visible, "Expected Sprite Eis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Spieler").volume, 100, "Expected Sprite Spieler to have volume 100");
  t.assert.equal(t.getSprite("Freundin").volume, 100, "Expected Sprite Freundin to have volume 100");
  t.assert.equal(t.getSprite("Münzen").volume, 100, "Expected Sprite Münzen to have volume 100");
  t.assert.equal(t.getSprite("Eis").volume, 100, "Expected Sprite Eis to have volume 100");
  t.dragSprite('Spieler', -189.06134246945783, -50.22678435010521, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Spieler").currentCostume, 0, "Expected Sprite Spieler to have costume 0");
  t.assert.equal(t.getSprite("Freundin").currentCostume, 0, "Expected Sprite Freundin to have costume 0");
  t.assert.equal(t.getSprite("Münzen").currentCostume, 0, "Expected Sprite Münzen to have costume 0");
  t.assert.equal(t.getSprite("Eis").currentCostume, 0, "Expected Sprite Eis to have costume 0");
  t.assert.equal(t.getSprite("Spieler").getCloneCount(), 0, "Expected Sprite Spieler to have 0 clones");
  t.assert.equal(t.getSprite("Freundin").getCloneCount(), 0, "Expected Sprite Freundin to have 0 clones");
  t.assert.equal(t.getSprite("Münzen").getCloneCount(), 0, "Expected Sprite Münzen to have 0 clones");
  t.assert.equal(t.getSprite("Eis").getCloneCount(), 0, "Expected Sprite Eis to have 0 clones");
  t.assert.equal(t.getSprite("Spieler").direction, -90, 1, "Expected Sprite Spieler to face in direction -90 +-1");
  t.assert.equal(t.getSprite("Freundin").direction, 90, 1, "Expected Sprite Freundin to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Münzen").direction, 90, 1, "Expected Sprite Münzen to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Eis").direction, 90, 1, "Expected Sprite Eis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Spieler").effects.color, 0, "Expected effect color of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.fisheye, 0, "Expected effect fisheye of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.whirl, 0, "Expected effect whirl of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.pixelate, 0, "Expected effect pixelate of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.mosaic, 0, "Expected effect mosaic of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.brightness, 0, "Expected effect brightness of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.ghost, 0, "Expected effect ghost of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.color, 0, "Expected effect color of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.fisheye, 0, "Expected effect fisheye of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.whirl, 0, "Expected effect whirl of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.pixelate, 0, "Expected effect pixelate of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.mosaic, 0, "Expected effect mosaic of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.brightness, 0, "Expected effect brightness of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.ghost, 0, "Expected effect ghost of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.color, 0, "Expected effect color of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.fisheye, 0, "Expected effect fisheye of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.whirl, 0, "Expected effect whirl of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.pixelate, 0, "Expected effect pixelate of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.mosaic, 0, "Expected effect mosaic of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.brightness, 0, "Expected effect brightness of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.ghost, 0, "Expected effect ghost of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Eis").effects.color, 0, "Expected effect color of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.fisheye, 0, "Expected effect fisheye of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.whirl, 0, "Expected effect whirl of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.pixelate, 0, "Expected effect pixelate of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.mosaic, 0, "Expected effect mosaic of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.brightness, 0, "Expected effect brightness of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.ghost, 0, "Expected effect ghost of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Spieler").layerOrder, 3, "Expected Sprite Spieler to be at layer 3");
  t.assert.equal(t.getSprite("Freundin").layerOrder, 5, "Expected Sprite Freundin to be at layer 5");
  t.assert.equal(t.getSprite("Münzen").layerOrder, 4, "Expected Sprite Münzen to be at layer 4");
  t.assert.equal(t.getSprite("Eis").layerOrder, 2, "Expected Sprite Eis to be at layer 2");
  t.assert.withinRange(t.getSprite("Spieler").x, -194.06134246945783, 5, "Expected Sprite Spieler to have x-position -194.06134246945783 +-5");
  t.assert.withinRange(t.getSprite("Spieler").y, -50.22678435010521, 5, "Expected Sprite Spieler to have y-position -50.22678435010521 +-5");
  t.assert.withinRange(t.getSprite("Freundin").x, 60, 5, "Expected Sprite Freundin to have x-position 60 +-5");
  t.assert.withinRange(t.getSprite("Freundin").y, -131, 5, "Expected Sprite Freundin to have y-position -131 +-5");
  t.assert.withinRange(t.getSprite("Münzen").x, -49, 5, "Expected Sprite Münzen to have x-position -49 +-5");
  t.assert.withinRange(t.getSprite("Münzen").y, 130, 5, "Expected Sprite Münzen to have y-position 130 +-5");
  t.assert.withinRange(t.getSprite("Eis").x, 195, 5, "Expected Sprite Eis to have x-position 195 +-5");
  t.assert.withinRange(t.getSprite("Eis").y, -158, 5, "Expected Sprite Eis to have y-position -158 +-5");
  t.assert.not(t.getSprite("Spieler").sayText, "Expected Sprite Spieler not to say anything");
  t.assert.not(t.getSprite("Freundin").sayText, "Expected Sprite Freundin not to say anything");
  t.assert.not(t.getSprite("Münzen").sayText, "Expected Sprite Münzen not to say anything");
  t.assert.not(t.getSprite("Eis").sayText, "Expected Sprite Eis not to say anything");
  t.assert.withinRange(t.getSprite("Spieler").size, 8, 1, "Expected Sprite Spieler to have size 8 +-1");
  t.assert.withinRange(t.getSprite("Freundin").size, 50, 1, "Expected Sprite Freundin to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Münzen").size, 50, 1, "Expected Sprite Münzen to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Eis").size, 20, 1, "Expected Sprite Eis to have size 20 +-1");
  t.assert.ok(t.getSprite("Spieler").visible, "Expected Sprite Spieler to be visible");
  t.assert.ok(t.getSprite("Freundin").visible, "Expected Sprite Freundin to be visible");
  t.assert.ok(t.getSprite("Münzen").visible, "Expected Sprite Münzen to be visible");
  t.assert.ok(t.getSprite("Eis").visible, "Expected Sprite Eis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Spieler").volume, 100, "Expected Sprite Spieler to have volume 100");
  t.assert.equal(t.getSprite("Freundin").volume, 100, "Expected Sprite Freundin to have volume 100");
  t.assert.equal(t.getSprite("Münzen").volume, 100, "Expected Sprite Münzen to have volume 100");
  t.assert.equal(t.getSprite("Eis").volume, 100, "Expected Sprite Eis to have volume 100");
  t.dragSprite('Spieler', 195, -158, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Spieler").currentCostume, 0, "Expected Sprite Spieler to have costume 0");
  t.assert.equal(t.getSprite("Freundin").currentCostume, 0, "Expected Sprite Freundin to have costume 0");
  t.assert.equal(t.getSprite("Münzen").currentCostume, 0, "Expected Sprite Münzen to have costume 0");
  t.assert.equal(t.getSprite("Eis").currentCostume, 0, "Expected Sprite Eis to have costume 0");
  t.assert.equal(t.getSprite("Spieler").getCloneCount(), 0, "Expected Sprite Spieler to have 0 clones");
  t.assert.equal(t.getSprite("Freundin").getCloneCount(), 0, "Expected Sprite Freundin to have 0 clones");
  t.assert.equal(t.getSprite("Münzen").getCloneCount(), 0, "Expected Sprite Münzen to have 0 clones");
  t.assert.equal(t.getSprite("Eis").getCloneCount(), 0, "Expected Sprite Eis to have 0 clones");
  t.assert.equal(t.getSprite("Spieler").direction, -90, 1, "Expected Sprite Spieler to face in direction -90 +-1");
  t.assert.equal(t.getSprite("Freundin").direction, 90, 1, "Expected Sprite Freundin to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Münzen").direction, 90, 1, "Expected Sprite Münzen to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Eis").direction, 90, 1, "Expected Sprite Eis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Spieler").effects.color, 0, "Expected effect color of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.fisheye, 0, "Expected effect fisheye of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.whirl, 0, "Expected effect whirl of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.pixelate, 0, "Expected effect pixelate of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.mosaic, 0, "Expected effect mosaic of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.brightness, 0, "Expected effect brightness of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.ghost, 0, "Expected effect ghost of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.color, 0, "Expected effect color of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.fisheye, 0, "Expected effect fisheye of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.whirl, 0, "Expected effect whirl of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.pixelate, 0, "Expected effect pixelate of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.mosaic, 0, "Expected effect mosaic of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.brightness, 0, "Expected effect brightness of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.ghost, 0, "Expected effect ghost of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.color, 0, "Expected effect color of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.fisheye, 0, "Expected effect fisheye of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.whirl, 0, "Expected effect whirl of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.pixelate, 0, "Expected effect pixelate of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.mosaic, 0, "Expected effect mosaic of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.brightness, 0, "Expected effect brightness of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.ghost, 0, "Expected effect ghost of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Eis").effects.color, 0, "Expected effect color of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.fisheye, 0, "Expected effect fisheye of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.whirl, 0, "Expected effect whirl of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.pixelate, 0, "Expected effect pixelate of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.mosaic, 0, "Expected effect mosaic of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.brightness, 0, "Expected effect brightness of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.ghost, 0, "Expected effect ghost of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Spieler").layerOrder, 3, "Expected Sprite Spieler to be at layer 3");
  t.assert.equal(t.getSprite("Freundin").layerOrder, 5, "Expected Sprite Freundin to be at layer 5");
  t.assert.equal(t.getSprite("Münzen").layerOrder, 4, "Expected Sprite Münzen to be at layer 4");
  t.assert.equal(t.getSprite("Eis").layerOrder, 2, "Expected Sprite Eis to be at layer 2");
  t.assert.withinRange(t.getSprite("Spieler").x, 195, 5, "Expected Sprite Spieler to have x-position 195 +-5");
  t.assert.withinRange(t.getSprite("Spieler").y, -158, 5, "Expected Sprite Spieler to have y-position -158 +-5");
  t.assert.withinRange(t.getSprite("Freundin").x, 60, 5, "Expected Sprite Freundin to have x-position 60 +-5");
  t.assert.withinRange(t.getSprite("Freundin").y, -131, 5, "Expected Sprite Freundin to have y-position -131 +-5");
  t.assert.withinRange(t.getSprite("Münzen").x, -49, 5, "Expected Sprite Münzen to have x-position -49 +-5");
  t.assert.withinRange(t.getSprite("Münzen").y, 130, 5, "Expected Sprite Münzen to have y-position 130 +-5");
  t.assert.withinRange(t.getSprite("Eis").x, 195, 5, "Expected Sprite Eis to have x-position 195 +-5");
  t.assert.withinRange(t.getSprite("Eis").y, -158, 5, "Expected Sprite Eis to have y-position -158 +-5");
  t.assert.not(t.getSprite("Spieler").sayText, "Expected Sprite Spieler not to say anything");
  t.assert.not(t.getSprite("Freundin").sayText, "Expected Sprite Freundin not to say anything");
  t.assert.not(t.getSprite("Münzen").sayText, "Expected Sprite Münzen not to say anything");
  t.assert.not(t.getSprite("Eis").sayText, "Expected Sprite Eis not to say anything");
  t.assert.withinRange(t.getSprite("Spieler").size, 8, 1, "Expected Sprite Spieler to have size 8 +-1");
  t.assert.withinRange(t.getSprite("Freundin").size, 50, 1, "Expected Sprite Freundin to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Münzen").size, 50, 1, "Expected Sprite Münzen to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Eis").size, 20, 1, "Expected Sprite Eis to have size 20 +-1");
  t.assert.ok(t.getSprite("Spieler").visible, "Expected Sprite Spieler to be visible");
  t.assert.ok(t.getSprite("Freundin").visible, "Expected Sprite Freundin to be visible");
  t.assert.ok(t.getSprite("Münzen").visible, "Expected Sprite Münzen to be visible");
  t.assert.ok(t.getSprite("Eis").visible, "Expected Sprite Eis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Spieler").volume, 100, "Expected Sprite Spieler to have volume 100");
  t.assert.equal(t.getSprite("Freundin").volume, 100, "Expected Sprite Freundin to have volume 100");
  t.assert.equal(t.getSprite("Münzen").volume, 100, "Expected Sprite Münzen to have volume 100");
  t.assert.equal(t.getSprite("Eis").volume, 100, "Expected Sprite Eis to have volume 100");
  t.end();
}
const test1 = async function (t) {
  t.dragSprite('Spieler', -133.2236405467551, -97.80209378638347, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Spieler").currentCostume, 0, "Expected Sprite Spieler to have costume 0");
  t.assert.equal(t.getSprite("Freundin").currentCostume, 0, "Expected Sprite Freundin to have costume 0");
  t.assert.equal(t.getSprite("Münzen").currentCostume, 0, "Expected Sprite Münzen to have costume 0");
  t.assert.equal(t.getSprite("Eis").currentCostume, 0, "Expected Sprite Eis to have costume 0");
  t.assert.equal(t.getSprite("Spieler").getCloneCount(), 0, "Expected Sprite Spieler to have 0 clones");
  t.assert.equal(t.getSprite("Freundin").getCloneCount(), 0, "Expected Sprite Freundin to have 0 clones");
  t.assert.equal(t.getSprite("Münzen").getCloneCount(), 0, "Expected Sprite Münzen to have 0 clones");
  t.assert.equal(t.getSprite("Eis").getCloneCount(), 0, "Expected Sprite Eis to have 0 clones");
  t.assert.equal(t.getSprite("Spieler").direction, -90, 1, "Expected Sprite Spieler to face in direction -90 +-1");
  t.assert.equal(t.getSprite("Freundin").direction, 90, 1, "Expected Sprite Freundin to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Münzen").direction, 90, 1, "Expected Sprite Münzen to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Eis").direction, 90, 1, "Expected Sprite Eis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Spieler").effects.color, 0, "Expected effect color of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.fisheye, 0, "Expected effect fisheye of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.whirl, 0, "Expected effect whirl of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.pixelate, 0, "Expected effect pixelate of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.mosaic, 0, "Expected effect mosaic of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.brightness, 0, "Expected effect brightness of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.ghost, 0, "Expected effect ghost of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.color, 0, "Expected effect color of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.fisheye, 0, "Expected effect fisheye of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.whirl, 0, "Expected effect whirl of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.pixelate, 0, "Expected effect pixelate of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.mosaic, 0, "Expected effect mosaic of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.brightness, 0, "Expected effect brightness of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.ghost, 0, "Expected effect ghost of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.color, 0, "Expected effect color of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.fisheye, 0, "Expected effect fisheye of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.whirl, 0, "Expected effect whirl of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.pixelate, 0, "Expected effect pixelate of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.mosaic, 0, "Expected effect mosaic of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.brightness, 0, "Expected effect brightness of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.ghost, 0, "Expected effect ghost of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Eis").effects.color, 0, "Expected effect color of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.fisheye, 0, "Expected effect fisheye of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.whirl, 0, "Expected effect whirl of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.pixelate, 0, "Expected effect pixelate of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.mosaic, 0, "Expected effect mosaic of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.brightness, 0, "Expected effect brightness of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.ghost, 0, "Expected effect ghost of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Spieler").layerOrder, 3, "Expected Sprite Spieler to be at layer 3");
  t.assert.equal(t.getSprite("Freundin").layerOrder, 5, "Expected Sprite Freundin to be at layer 5");
  t.assert.equal(t.getSprite("Münzen").layerOrder, 4, "Expected Sprite Münzen to be at layer 4");
  t.assert.equal(t.getSprite("Eis").layerOrder, 2, "Expected Sprite Eis to be at layer 2");
  t.assert.withinRange(t.getSprite("Spieler").x, -128, 5, "Expected Sprite Spieler to have x-position -128 +-5");
  t.assert.withinRange(t.getSprite("Spieler").y, -155, 5, "Expected Sprite Spieler to have y-position -155 +-5");
  t.assert.withinRange(t.getSprite("Freundin").x, 60, 5, "Expected Sprite Freundin to have x-position 60 +-5");
  t.assert.withinRange(t.getSprite("Freundin").y, -131, 5, "Expected Sprite Freundin to have y-position -131 +-5");
  t.assert.withinRange(t.getSprite("Münzen").x, -49, 5, "Expected Sprite Münzen to have x-position -49 +-5");
  t.assert.withinRange(t.getSprite("Münzen").y, 130, 5, "Expected Sprite Münzen to have y-position 130 +-5");
  t.assert.withinRange(t.getSprite("Eis").x, 195, 5, "Expected Sprite Eis to have x-position 195 +-5");
  t.assert.withinRange(t.getSprite("Eis").y, -158, 5, "Expected Sprite Eis to have y-position -158 +-5");
  t.assert.not(t.getSprite("Spieler").sayText, "Expected Sprite Spieler not to say anything");
  t.assert.equal(t.getSprite("Freundin").sayText, "Auf geht's!", "Expected Sprite Freundin to say Auf geht's!");
  t.assert.not(t.getSprite("Münzen").sayText, "Expected Sprite Münzen not to say anything");
  t.assert.not(t.getSprite("Eis").sayText, "Expected Sprite Eis not to say anything");
  t.assert.withinRange(t.getSprite("Spieler").size, 8, 1, "Expected Sprite Spieler to have size 8 +-1");
  t.assert.withinRange(t.getSprite("Freundin").size, 50, 1, "Expected Sprite Freundin to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Münzen").size, 50, 1, "Expected Sprite Münzen to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Eis").size, 20, 1, "Expected Sprite Eis to have size 20 +-1");
  t.assert.ok(t.getSprite("Spieler").visible, "Expected Sprite Spieler to be visible");
  t.assert.ok(t.getSprite("Freundin").visible, "Expected Sprite Freundin to be visible");
  t.assert.ok(t.getSprite("Münzen").visible, "Expected Sprite Münzen to be visible");
  t.assert.ok(t.getSprite("Eis").visible, "Expected Sprite Eis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Spieler").volume, 100, "Expected Sprite Spieler to have volume 100");
  t.assert.equal(t.getSprite("Freundin").volume, 100, "Expected Sprite Freundin to have volume 100");
  t.assert.equal(t.getSprite("Münzen").volume, 100, "Expected Sprite Münzen to have volume 100");
  t.assert.equal(t.getSprite("Eis").volume, 100, "Expected Sprite Eis to have volume 100");
  t.dragSprite('Spieler', -126, -75, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Spieler").currentCostume, 0, "Expected Sprite Spieler to have costume 0");
  t.assert.equal(t.getSprite("Freundin").currentCostume, 0, "Expected Sprite Freundin to have costume 0");
  t.assert.equal(t.getSprite("Münzen").currentCostume, 0, "Expected Sprite Münzen to have costume 0");
  t.assert.equal(t.getSprite("Eis").currentCostume, 0, "Expected Sprite Eis to have costume 0");
  t.assert.equal(t.getSprite("Spieler").getCloneCount(), 0, "Expected Sprite Spieler to have 0 clones");
  t.assert.equal(t.getSprite("Freundin").getCloneCount(), 0, "Expected Sprite Freundin to have 0 clones");
  t.assert.equal(t.getSprite("Münzen").getCloneCount(), 0, "Expected Sprite Münzen to have 0 clones");
  t.assert.equal(t.getSprite("Eis").getCloneCount(), 0, "Expected Sprite Eis to have 0 clones");
  t.assert.equal(t.getSprite("Spieler").direction, -90, 1, "Expected Sprite Spieler to face in direction -90 +-1");
  t.assert.equal(t.getSprite("Freundin").direction, 90, 1, "Expected Sprite Freundin to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Münzen").direction, 90, 1, "Expected Sprite Münzen to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Eis").direction, 90, 1, "Expected Sprite Eis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Spieler").effects.color, 0, "Expected effect color of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.fisheye, 0, "Expected effect fisheye of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.whirl, 0, "Expected effect whirl of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.pixelate, 0, "Expected effect pixelate of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.mosaic, 0, "Expected effect mosaic of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.brightness, 0, "Expected effect brightness of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.ghost, 0, "Expected effect ghost of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.color, 0, "Expected effect color of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.fisheye, 0, "Expected effect fisheye of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.whirl, 0, "Expected effect whirl of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.pixelate, 0, "Expected effect pixelate of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.mosaic, 0, "Expected effect mosaic of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.brightness, 0, "Expected effect brightness of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.ghost, 0, "Expected effect ghost of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.color, 0, "Expected effect color of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.fisheye, 0, "Expected effect fisheye of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.whirl, 0, "Expected effect whirl of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.pixelate, 0, "Expected effect pixelate of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.mosaic, 0, "Expected effect mosaic of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.brightness, 0, "Expected effect brightness of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.ghost, 0, "Expected effect ghost of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Eis").effects.color, 0, "Expected effect color of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.fisheye, 0, "Expected effect fisheye of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.whirl, 0, "Expected effect whirl of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.pixelate, 0, "Expected effect pixelate of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.mosaic, 0, "Expected effect mosaic of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.brightness, 0, "Expected effect brightness of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.ghost, 0, "Expected effect ghost of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Spieler").layerOrder, 3, "Expected Sprite Spieler to be at layer 3");
  t.assert.equal(t.getSprite("Freundin").layerOrder, 5, "Expected Sprite Freundin to be at layer 5");
  t.assert.equal(t.getSprite("Münzen").layerOrder, 4, "Expected Sprite Münzen to be at layer 4");
  t.assert.equal(t.getSprite("Eis").layerOrder, 2, "Expected Sprite Eis to be at layer 2");
  t.assert.withinRange(t.getSprite("Spieler").x, -126, 5, "Expected Sprite Spieler to have x-position -126 +-5");
  t.assert.withinRange(t.getSprite("Spieler").y, -75, 5, "Expected Sprite Spieler to have y-position -75 +-5");
  t.assert.withinRange(t.getSprite("Freundin").x, 60, 5, "Expected Sprite Freundin to have x-position 60 +-5");
  t.assert.withinRange(t.getSprite("Freundin").y, -131, 5, "Expected Sprite Freundin to have y-position -131 +-5");
  t.assert.withinRange(t.getSprite("Münzen").x, -49, 5, "Expected Sprite Münzen to have x-position -49 +-5");
  t.assert.withinRange(t.getSprite("Münzen").y, 130, 5, "Expected Sprite Münzen to have y-position 130 +-5");
  t.assert.withinRange(t.getSprite("Eis").x, 195, 5, "Expected Sprite Eis to have x-position 195 +-5");
  t.assert.withinRange(t.getSprite("Eis").y, -158, 5, "Expected Sprite Eis to have y-position -158 +-5");
  t.assert.not(t.getSprite("Spieler").sayText, "Expected Sprite Spieler not to say anything");
  t.assert.equal(t.getSprite("Freundin").sayText, "Auf geht's!", "Expected Sprite Freundin to say Auf geht's!");
  t.assert.not(t.getSprite("Münzen").sayText, "Expected Sprite Münzen not to say anything");
  t.assert.not(t.getSprite("Eis").sayText, "Expected Sprite Eis not to say anything");
  t.assert.withinRange(t.getSprite("Spieler").size, 8, 1, "Expected Sprite Spieler to have size 8 +-1");
  t.assert.withinRange(t.getSprite("Freundin").size, 50, 1, "Expected Sprite Freundin to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Münzen").size, 50, 1, "Expected Sprite Münzen to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Eis").size, 20, 1, "Expected Sprite Eis to have size 20 +-1");
  t.assert.ok(t.getSprite("Spieler").visible, "Expected Sprite Spieler to be visible");
  t.assert.ok(t.getSprite("Freundin").visible, "Expected Sprite Freundin to be visible");
  t.assert.ok(t.getSprite("Münzen").visible, "Expected Sprite Münzen to be visible");
  t.assert.ok(t.getSprite("Eis").visible, "Expected Sprite Eis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Spieler").volume, 100, "Expected Sprite Spieler to have volume 100");
  t.assert.equal(t.getSprite("Freundin").volume, 100, "Expected Sprite Freundin to have volume 100");
  t.assert.equal(t.getSprite("Münzen").volume, 100, "Expected Sprite Münzen to have volume 100");
  t.assert.equal(t.getSprite("Eis").volume, 100, "Expected Sprite Eis to have volume 100");
  t.dragSprite('Spieler', 177.69519300178885, -152.38522188952598, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Spieler").currentCostume, 0, "Expected Sprite Spieler to have costume 0");
  t.assert.equal(t.getSprite("Freundin").currentCostume, 0, "Expected Sprite Freundin to have costume 0");
  t.assert.equal(t.getSprite("Münzen").currentCostume, 0, "Expected Sprite Münzen to have costume 0");
  t.assert.equal(t.getSprite("Eis").currentCostume, 0, "Expected Sprite Eis to have costume 0");
  t.assert.equal(t.getSprite("Spieler").getCloneCount(), 0, "Expected Sprite Spieler to have 0 clones");
  t.assert.equal(t.getSprite("Freundin").getCloneCount(), 0, "Expected Sprite Freundin to have 0 clones");
  t.assert.equal(t.getSprite("Münzen").getCloneCount(), 0, "Expected Sprite Münzen to have 0 clones");
  t.assert.equal(t.getSprite("Eis").getCloneCount(), 0, "Expected Sprite Eis to have 0 clones");
  t.assert.equal(t.getSprite("Spieler").direction, -90, 1, "Expected Sprite Spieler to face in direction -90 +-1");
  t.assert.equal(t.getSprite("Freundin").direction, 90, 1, "Expected Sprite Freundin to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Münzen").direction, 90, 1, "Expected Sprite Münzen to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Eis").direction, 90, 1, "Expected Sprite Eis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Spieler").effects.color, 0, "Expected effect color of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.fisheye, 0, "Expected effect fisheye of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.whirl, 0, "Expected effect whirl of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.pixelate, 0, "Expected effect pixelate of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.mosaic, 0, "Expected effect mosaic of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.brightness, 0, "Expected effect brightness of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.ghost, 0, "Expected effect ghost of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.color, 0, "Expected effect color of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.fisheye, 0, "Expected effect fisheye of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.whirl, 0, "Expected effect whirl of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.pixelate, 0, "Expected effect pixelate of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.mosaic, 0, "Expected effect mosaic of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.brightness, 0, "Expected effect brightness of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.ghost, 0, "Expected effect ghost of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.color, 0, "Expected effect color of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.fisheye, 0, "Expected effect fisheye of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.whirl, 0, "Expected effect whirl of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.pixelate, 0, "Expected effect pixelate of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.mosaic, 0, "Expected effect mosaic of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.brightness, 0, "Expected effect brightness of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.ghost, 0, "Expected effect ghost of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Eis").effects.color, 0, "Expected effect color of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.fisheye, 0, "Expected effect fisheye of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.whirl, 0, "Expected effect whirl of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.pixelate, 0, "Expected effect pixelate of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.mosaic, 0, "Expected effect mosaic of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.brightness, 0, "Expected effect brightness of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.ghost, 0, "Expected effect ghost of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Spieler").layerOrder, 3, "Expected Sprite Spieler to be at layer 3");
  t.assert.equal(t.getSprite("Freundin").layerOrder, 5, "Expected Sprite Freundin to be at layer 5");
  t.assert.equal(t.getSprite("Münzen").layerOrder, 4, "Expected Sprite Münzen to be at layer 4");
  t.assert.equal(t.getSprite("Eis").layerOrder, 2, "Expected Sprite Eis to be at layer 2");
  t.assert.withinRange(t.getSprite("Spieler").x, 177.69519300178885, 5, "Expected Sprite Spieler to have x-position 177.69519300178885 +-5");
  t.assert.withinRange(t.getSprite("Spieler").y, -152.38522188952598, 5, "Expected Sprite Spieler to have y-position -152.38522188952598 +-5");
  t.assert.withinRange(t.getSprite("Freundin").x, 60, 5, "Expected Sprite Freundin to have x-position 60 +-5");
  t.assert.withinRange(t.getSprite("Freundin").y, -131, 5, "Expected Sprite Freundin to have y-position -131 +-5");
  t.assert.withinRange(t.getSprite("Münzen").x, -49, 5, "Expected Sprite Münzen to have x-position -49 +-5");
  t.assert.withinRange(t.getSprite("Münzen").y, 130, 5, "Expected Sprite Münzen to have y-position 130 +-5");
  t.assert.withinRange(t.getSprite("Eis").x, 195, 5, "Expected Sprite Eis to have x-position 195 +-5");
  t.assert.withinRange(t.getSprite("Eis").y, -158, 5, "Expected Sprite Eis to have y-position -158 +-5");
  t.assert.not(t.getSprite("Spieler").sayText, "Expected Sprite Spieler not to say anything");
  t.assert.equal(t.getSprite("Freundin").sayText, "Auf geht's!", "Expected Sprite Freundin to say Auf geht's!");
  t.assert.not(t.getSprite("Münzen").sayText, "Expected Sprite Münzen not to say anything");
  t.assert.not(t.getSprite("Eis").sayText, "Expected Sprite Eis not to say anything");
  t.assert.withinRange(t.getSprite("Spieler").size, 8, 1, "Expected Sprite Spieler to have size 8 +-1");
  t.assert.withinRange(t.getSprite("Freundin").size, 50, 1, "Expected Sprite Freundin to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Münzen").size, 50, 1, "Expected Sprite Münzen to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Eis").size, 20, 1, "Expected Sprite Eis to have size 20 +-1");
  t.assert.ok(t.getSprite("Spieler").visible, "Expected Sprite Spieler to be visible");
  t.assert.ok(t.getSprite("Freundin").visible, "Expected Sprite Freundin to be visible");
  t.assert.ok(t.getSprite("Münzen").visible, "Expected Sprite Münzen to be visible");
  t.assert.ok(t.getSprite("Eis").visible, "Expected Sprite Eis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Spieler").volume, 100, "Expected Sprite Spieler to have volume 100");
  t.assert.equal(t.getSprite("Freundin").volume, 100, "Expected Sprite Freundin to have volume 100");
  t.assert.equal(t.getSprite("Münzen").volume, 100, "Expected Sprite Münzen to have volume 100");
  t.assert.equal(t.getSprite("Eis").volume, 100, "Expected Sprite Eis to have volume 100");
  t.dragSprite('Münzen', 88.43105776647782, -180, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Spieler").currentCostume, 0, "Expected Sprite Spieler to have costume 0");
  t.assert.equal(t.getSprite("Freundin").currentCostume, 0, "Expected Sprite Freundin to have costume 0");
  t.assert.equal(t.getSprite("Münzen").currentCostume, 0, "Expected Sprite Münzen to have costume 0");
  t.assert.equal(t.getSprite("Eis").currentCostume, 0, "Expected Sprite Eis to have costume 0");
  t.assert.equal(t.getSprite("Spieler").getCloneCount(), 0, "Expected Sprite Spieler to have 0 clones");
  t.assert.equal(t.getSprite("Freundin").getCloneCount(), 0, "Expected Sprite Freundin to have 0 clones");
  t.assert.equal(t.getSprite("Münzen").getCloneCount(), 0, "Expected Sprite Münzen to have 0 clones");
  t.assert.equal(t.getSprite("Eis").getCloneCount(), 0, "Expected Sprite Eis to have 0 clones");
  t.assert.equal(t.getSprite("Spieler").direction, -90, 1, "Expected Sprite Spieler to face in direction -90 +-1");
  t.assert.equal(t.getSprite("Freundin").direction, 90, 1, "Expected Sprite Freundin to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Münzen").direction, 90, 1, "Expected Sprite Münzen to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Eis").direction, 90, 1, "Expected Sprite Eis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Spieler").effects.color, 0, "Expected effect color of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.fisheye, 0, "Expected effect fisheye of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.whirl, 0, "Expected effect whirl of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.pixelate, 0, "Expected effect pixelate of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.mosaic, 0, "Expected effect mosaic of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.brightness, 0, "Expected effect brightness of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.ghost, 0, "Expected effect ghost of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.color, 0, "Expected effect color of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.fisheye, 0, "Expected effect fisheye of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.whirl, 0, "Expected effect whirl of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.pixelate, 0, "Expected effect pixelate of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.mosaic, 0, "Expected effect mosaic of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.brightness, 0, "Expected effect brightness of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.ghost, 0, "Expected effect ghost of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.color, 0, "Expected effect color of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.fisheye, 0, "Expected effect fisheye of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.whirl, 0, "Expected effect whirl of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.pixelate, 0, "Expected effect pixelate of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.mosaic, 0, "Expected effect mosaic of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.brightness, 0, "Expected effect brightness of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.ghost, 0, "Expected effect ghost of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Eis").effects.color, 0, "Expected effect color of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.fisheye, 0, "Expected effect fisheye of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.whirl, 0, "Expected effect whirl of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.pixelate, 0, "Expected effect pixelate of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.mosaic, 0, "Expected effect mosaic of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.brightness, 0, "Expected effect brightness of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.ghost, 0, "Expected effect ghost of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Spieler").layerOrder, 3, "Expected Sprite Spieler to be at layer 3");
  t.assert.equal(t.getSprite("Freundin").layerOrder, 5, "Expected Sprite Freundin to be at layer 5");
  t.assert.equal(t.getSprite("Münzen").layerOrder, 4, "Expected Sprite Münzen to be at layer 4");
  t.assert.equal(t.getSprite("Eis").layerOrder, 2, "Expected Sprite Eis to be at layer 2");
  t.assert.withinRange(t.getSprite("Spieler").x, 177.69519300178885, 5, "Expected Sprite Spieler to have x-position 177.69519300178885 +-5");
  t.assert.withinRange(t.getSprite("Spieler").y, -152.38522188952598, 5, "Expected Sprite Spieler to have y-position -152.38522188952598 +-5");
  t.assert.withinRange(t.getSprite("Freundin").x, 60, 5, "Expected Sprite Freundin to have x-position 60 +-5");
  t.assert.withinRange(t.getSprite("Freundin").y, -131, 5, "Expected Sprite Freundin to have y-position -131 +-5");
  t.assert.withinRange(t.getSprite("Münzen").x, 88.43105776647782, 5, "Expected Sprite Münzen to have x-position 88.43105776647782 +-5");
  t.assert.withinRange(t.getSprite("Münzen").y, -180, 5, "Expected Sprite Münzen to have y-position -180 +-5");
  t.assert.withinRange(t.getSprite("Eis").x, 195, 5, "Expected Sprite Eis to have x-position 195 +-5");
  t.assert.withinRange(t.getSprite("Eis").y, -158, 5, "Expected Sprite Eis to have y-position -158 +-5");
  t.assert.not(t.getSprite("Spieler").sayText, "Expected Sprite Spieler not to say anything");
  t.assert.equal(t.getSprite("Freundin").sayText, "Auf geht's!", "Expected Sprite Freundin to say Auf geht's!");
  t.assert.not(t.getSprite("Münzen").sayText, "Expected Sprite Münzen not to say anything");
  t.assert.not(t.getSprite("Eis").sayText, "Expected Sprite Eis not to say anything");
  t.assert.withinRange(t.getSprite("Spieler").size, 8, 1, "Expected Sprite Spieler to have size 8 +-1");
  t.assert.withinRange(t.getSprite("Freundin").size, 50, 1, "Expected Sprite Freundin to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Münzen").size, 50, 1, "Expected Sprite Münzen to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Eis").size, 20, 1, "Expected Sprite Eis to have size 20 +-1");
  t.assert.ok(t.getSprite("Spieler").visible, "Expected Sprite Spieler to be visible");
  t.assert.ok(t.getSprite("Freundin").visible, "Expected Sprite Freundin to be visible");
  t.assert.ok(t.getSprite("Münzen").visible, "Expected Sprite Münzen to be visible");
  t.assert.ok(t.getSprite("Eis").visible, "Expected Sprite Eis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Spieler").volume, 100, "Expected Sprite Spieler to have volume 100");
  t.assert.equal(t.getSprite("Freundin").volume, 100, "Expected Sprite Freundin to have volume 100");
  t.assert.equal(t.getSprite("Münzen").volume, 100, "Expected Sprite Münzen to have volume 100");
  t.assert.equal(t.getSprite("Eis").volume, 100, "Expected Sprite Eis to have volume 100");
  t.dragSprite('Spieler', -117.93712429112468, -97.23952882584113, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Spieler").currentCostume, 0, "Expected Sprite Spieler to have costume 0");
  t.assert.equal(t.getSprite("Freundin").currentCostume, 0, "Expected Sprite Freundin to have costume 0");
  t.assert.equal(t.getSprite("Münzen").currentCostume, 0, "Expected Sprite Münzen to have costume 0");
  t.assert.equal(t.getSprite("Eis").currentCostume, 0, "Expected Sprite Eis to have costume 0");
  t.assert.equal(t.getSprite("Spieler").getCloneCount(), 0, "Expected Sprite Spieler to have 0 clones");
  t.assert.equal(t.getSprite("Freundin").getCloneCount(), 0, "Expected Sprite Freundin to have 0 clones");
  t.assert.equal(t.getSprite("Münzen").getCloneCount(), 0, "Expected Sprite Münzen to have 0 clones");
  t.assert.equal(t.getSprite("Eis").getCloneCount(), 0, "Expected Sprite Eis to have 0 clones");
  t.assert.equal(t.getSprite("Spieler").direction, -90, 1, "Expected Sprite Spieler to face in direction -90 +-1");
  t.assert.equal(t.getSprite("Freundin").direction, 90, 1, "Expected Sprite Freundin to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Münzen").direction, 90, 1, "Expected Sprite Münzen to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Eis").direction, 90, 1, "Expected Sprite Eis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Spieler").effects.color, 0, "Expected effect color of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.fisheye, 0, "Expected effect fisheye of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.whirl, 0, "Expected effect whirl of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.pixelate, 0, "Expected effect pixelate of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.mosaic, 0, "Expected effect mosaic of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.brightness, 0, "Expected effect brightness of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.ghost, 0, "Expected effect ghost of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.color, 0, "Expected effect color of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.fisheye, 0, "Expected effect fisheye of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.whirl, 0, "Expected effect whirl of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.pixelate, 0, "Expected effect pixelate of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.mosaic, 0, "Expected effect mosaic of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.brightness, 0, "Expected effect brightness of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.ghost, 0, "Expected effect ghost of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.color, 0, "Expected effect color of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.fisheye, 0, "Expected effect fisheye of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.whirl, 0, "Expected effect whirl of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.pixelate, 0, "Expected effect pixelate of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.mosaic, 0, "Expected effect mosaic of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.brightness, 0, "Expected effect brightness of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.ghost, 0, "Expected effect ghost of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Eis").effects.color, 0, "Expected effect color of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.fisheye, 0, "Expected effect fisheye of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.whirl, 0, "Expected effect whirl of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.pixelate, 0, "Expected effect pixelate of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.mosaic, 0, "Expected effect mosaic of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.brightness, 0, "Expected effect brightness of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.ghost, 0, "Expected effect ghost of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Spieler").layerOrder, 3, "Expected Sprite Spieler to be at layer 3");
  t.assert.equal(t.getSprite("Freundin").layerOrder, 5, "Expected Sprite Freundin to be at layer 5");
  t.assert.equal(t.getSprite("Münzen").layerOrder, 4, "Expected Sprite Münzen to be at layer 4");
  t.assert.equal(t.getSprite("Eis").layerOrder, 2, "Expected Sprite Eis to be at layer 2");
  t.assert.withinRange(t.getSprite("Spieler").x, -117.93712429112468, 5, "Expected Sprite Spieler to have x-position -117.93712429112468 +-5");
  t.assert.withinRange(t.getSprite("Spieler").y, -97.23952882584113, 5, "Expected Sprite Spieler to have y-position -97.23952882584113 +-5");
  t.assert.withinRange(t.getSprite("Freundin").x, 60, 5, "Expected Sprite Freundin to have x-position 60 +-5");
  t.assert.withinRange(t.getSprite("Freundin").y, -131, 5, "Expected Sprite Freundin to have y-position -131 +-5");
  t.assert.withinRange(t.getSprite("Münzen").x, 88.43105776647782, 5, "Expected Sprite Münzen to have x-position 88.43105776647782 +-5");
  t.assert.withinRange(t.getSprite("Münzen").y, -180, 5, "Expected Sprite Münzen to have y-position -180 +-5");
  t.assert.withinRange(t.getSprite("Eis").x, 195, 5, "Expected Sprite Eis to have x-position 195 +-5");
  t.assert.withinRange(t.getSprite("Eis").y, -158, 5, "Expected Sprite Eis to have y-position -158 +-5");
  t.assert.not(t.getSprite("Spieler").sayText, "Expected Sprite Spieler not to say anything");
  t.assert.equal(t.getSprite("Freundin").sayText, "Auf geht's!", "Expected Sprite Freundin to say Auf geht's!");
  t.assert.not(t.getSprite("Münzen").sayText, "Expected Sprite Münzen not to say anything");
  t.assert.not(t.getSprite("Eis").sayText, "Expected Sprite Eis not to say anything");
  t.assert.withinRange(t.getSprite("Spieler").size, 8, 1, "Expected Sprite Spieler to have size 8 +-1");
  t.assert.withinRange(t.getSprite("Freundin").size, 50, 1, "Expected Sprite Freundin to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Münzen").size, 50, 1, "Expected Sprite Münzen to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Eis").size, 20, 1, "Expected Sprite Eis to have size 20 +-1");
  t.assert.ok(t.getSprite("Spieler").visible, "Expected Sprite Spieler to be visible");
  t.assert.ok(t.getSprite("Freundin").visible, "Expected Sprite Freundin to be visible");
  t.assert.ok(t.getSprite("Münzen").visible, "Expected Sprite Münzen to be visible");
  t.assert.ok(t.getSprite("Eis").visible, "Expected Sprite Eis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Spieler").volume, 100, "Expected Sprite Spieler to have volume 100");
  t.assert.equal(t.getSprite("Freundin").volume, 100, "Expected Sprite Freundin to have volume 100");
  t.assert.equal(t.getSprite("Münzen").volume, 100, "Expected Sprite Münzen to have volume 100");
  t.assert.equal(t.getSprite("Eis").volume, 100, "Expected Sprite Eis to have volume 100");
  t.dragSprite('Münzen', -139.1401426525336, 3.942794683751316, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Spieler").currentCostume, 0, "Expected Sprite Spieler to have costume 0");
  t.assert.equal(t.getSprite("Freundin").currentCostume, 0, "Expected Sprite Freundin to have costume 0");
  t.assert.equal(t.getSprite("Münzen").currentCostume, 0, "Expected Sprite Münzen to have costume 0");
  t.assert.equal(t.getSprite("Eis").currentCostume, 0, "Expected Sprite Eis to have costume 0");
  t.assert.equal(t.getSprite("Spieler").getCloneCount(), 0, "Expected Sprite Spieler to have 0 clones");
  t.assert.equal(t.getSprite("Freundin").getCloneCount(), 0, "Expected Sprite Freundin to have 0 clones");
  t.assert.equal(t.getSprite("Münzen").getCloneCount(), 0, "Expected Sprite Münzen to have 0 clones");
  t.assert.equal(t.getSprite("Eis").getCloneCount(), 0, "Expected Sprite Eis to have 0 clones");
  t.assert.equal(t.getSprite("Spieler").direction, -90, 1, "Expected Sprite Spieler to face in direction -90 +-1");
  t.assert.equal(t.getSprite("Freundin").direction, 90, 1, "Expected Sprite Freundin to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Münzen").direction, 90, 1, "Expected Sprite Münzen to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Eis").direction, 90, 1, "Expected Sprite Eis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Spieler").effects.color, 0, "Expected effect color of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.fisheye, 0, "Expected effect fisheye of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.whirl, 0, "Expected effect whirl of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.pixelate, 0, "Expected effect pixelate of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.mosaic, 0, "Expected effect mosaic of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.brightness, 0, "Expected effect brightness of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.ghost, 0, "Expected effect ghost of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.color, 0, "Expected effect color of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.fisheye, 0, "Expected effect fisheye of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.whirl, 0, "Expected effect whirl of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.pixelate, 0, "Expected effect pixelate of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.mosaic, 0, "Expected effect mosaic of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.brightness, 0, "Expected effect brightness of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.ghost, 0, "Expected effect ghost of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.color, 0, "Expected effect color of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.fisheye, 0, "Expected effect fisheye of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.whirl, 0, "Expected effect whirl of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.pixelate, 0, "Expected effect pixelate of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.mosaic, 0, "Expected effect mosaic of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.brightness, 0, "Expected effect brightness of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.ghost, 0, "Expected effect ghost of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Eis").effects.color, 0, "Expected effect color of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.fisheye, 0, "Expected effect fisheye of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.whirl, 0, "Expected effect whirl of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.pixelate, 0, "Expected effect pixelate of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.mosaic, 0, "Expected effect mosaic of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.brightness, 0, "Expected effect brightness of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.ghost, 0, "Expected effect ghost of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Spieler").layerOrder, 3, "Expected Sprite Spieler to be at layer 3");
  t.assert.equal(t.getSprite("Freundin").layerOrder, 5, "Expected Sprite Freundin to be at layer 5");
  t.assert.equal(t.getSprite("Münzen").layerOrder, 4, "Expected Sprite Münzen to be at layer 4");
  t.assert.equal(t.getSprite("Eis").layerOrder, 2, "Expected Sprite Eis to be at layer 2");
  t.assert.withinRange(t.getSprite("Spieler").x, -117.93712429112468, 5, "Expected Sprite Spieler to have x-position -117.93712429112468 +-5");
  t.assert.withinRange(t.getSprite("Spieler").y, -97.23952882584113, 5, "Expected Sprite Spieler to have y-position -97.23952882584113 +-5");
  t.assert.withinRange(t.getSprite("Freundin").x, 60, 5, "Expected Sprite Freundin to have x-position 60 +-5");
  t.assert.withinRange(t.getSprite("Freundin").y, -131, 5, "Expected Sprite Freundin to have y-position -131 +-5");
  t.assert.withinRange(t.getSprite("Münzen").x, -139.1401426525336, 5, "Expected Sprite Münzen to have x-position -139.1401426525336 +-5");
  t.assert.withinRange(t.getSprite("Münzen").y, 3.942794683751316, 5, "Expected Sprite Münzen to have y-position 3.942794683751316 +-5");
  t.assert.withinRange(t.getSprite("Eis").x, 195, 5, "Expected Sprite Eis to have x-position 195 +-5");
  t.assert.withinRange(t.getSprite("Eis").y, -158, 5, "Expected Sprite Eis to have y-position -158 +-5");
  t.assert.not(t.getSprite("Spieler").sayText, "Expected Sprite Spieler not to say anything");
  t.assert.equal(t.getSprite("Freundin").sayText, "Auf geht's!", "Expected Sprite Freundin to say Auf geht's!");
  t.assert.not(t.getSprite("Münzen").sayText, "Expected Sprite Münzen not to say anything");
  t.assert.not(t.getSprite("Eis").sayText, "Expected Sprite Eis not to say anything");
  t.assert.withinRange(t.getSprite("Spieler").size, 8, 1, "Expected Sprite Spieler to have size 8 +-1");
  t.assert.withinRange(t.getSprite("Freundin").size, 50, 1, "Expected Sprite Freundin to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Münzen").size, 50, 1, "Expected Sprite Münzen to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Eis").size, 20, 1, "Expected Sprite Eis to have size 20 +-1");
  t.assert.ok(t.getSprite("Spieler").visible, "Expected Sprite Spieler to be visible");
  t.assert.ok(t.getSprite("Freundin").visible, "Expected Sprite Freundin to be visible");
  t.assert.ok(t.getSprite("Münzen").visible, "Expected Sprite Münzen to be visible");
  t.assert.ok(t.getSprite("Eis").visible, "Expected Sprite Eis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Spieler").volume, 100, "Expected Sprite Spieler to have volume 100");
  t.assert.equal(t.getSprite("Freundin").volume, 100, "Expected Sprite Freundin to have volume 100");
  t.assert.equal(t.getSprite("Münzen").volume, 100, "Expected Sprite Münzen to have volume 100");
  t.assert.equal(t.getSprite("Eis").volume, 100, "Expected Sprite Eis to have volume 100");
  t.dragSprite('Spieler', -112.44178745038047, -92.64938461104063, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Spieler").currentCostume, 0, "Expected Sprite Spieler to have costume 0");
  t.assert.equal(t.getSprite("Freundin").currentCostume, 0, "Expected Sprite Freundin to have costume 0");
  t.assert.equal(t.getSprite("Münzen").currentCostume, 0, "Expected Sprite Münzen to have costume 0");
  t.assert.equal(t.getSprite("Eis").currentCostume, 0, "Expected Sprite Eis to have costume 0");
  t.assert.equal(t.getSprite("Spieler").getCloneCount(), 0, "Expected Sprite Spieler to have 0 clones");
  t.assert.equal(t.getSprite("Freundin").getCloneCount(), 0, "Expected Sprite Freundin to have 0 clones");
  t.assert.equal(t.getSprite("Münzen").getCloneCount(), 0, "Expected Sprite Münzen to have 0 clones");
  t.assert.equal(t.getSprite("Eis").getCloneCount(), 0, "Expected Sprite Eis to have 0 clones");
  t.assert.equal(t.getSprite("Spieler").direction, -90, 1, "Expected Sprite Spieler to face in direction -90 +-1");
  t.assert.equal(t.getSprite("Freundin").direction, 90, 1, "Expected Sprite Freundin to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Münzen").direction, 90, 1, "Expected Sprite Münzen to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Eis").direction, 90, 1, "Expected Sprite Eis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Spieler").effects.color, 0, "Expected effect color of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.fisheye, 0, "Expected effect fisheye of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.whirl, 0, "Expected effect whirl of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.pixelate, 0, "Expected effect pixelate of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.mosaic, 0, "Expected effect mosaic of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.brightness, 0, "Expected effect brightness of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.ghost, 0, "Expected effect ghost of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.color, 0, "Expected effect color of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.fisheye, 0, "Expected effect fisheye of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.whirl, 0, "Expected effect whirl of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.pixelate, 0, "Expected effect pixelate of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.mosaic, 0, "Expected effect mosaic of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.brightness, 0, "Expected effect brightness of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.ghost, 0, "Expected effect ghost of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.color, 0, "Expected effect color of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.fisheye, 0, "Expected effect fisheye of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.whirl, 0, "Expected effect whirl of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.pixelate, 0, "Expected effect pixelate of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.mosaic, 0, "Expected effect mosaic of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.brightness, 0, "Expected effect brightness of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.ghost, 0, "Expected effect ghost of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Eis").effects.color, 0, "Expected effect color of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.fisheye, 0, "Expected effect fisheye of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.whirl, 0, "Expected effect whirl of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.pixelate, 0, "Expected effect pixelate of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.mosaic, 0, "Expected effect mosaic of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.brightness, 0, "Expected effect brightness of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.ghost, 0, "Expected effect ghost of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Spieler").layerOrder, 3, "Expected Sprite Spieler to be at layer 3");
  t.assert.equal(t.getSprite("Freundin").layerOrder, 5, "Expected Sprite Freundin to be at layer 5");
  t.assert.equal(t.getSprite("Münzen").layerOrder, 4, "Expected Sprite Münzen to be at layer 4");
  t.assert.equal(t.getSprite("Eis").layerOrder, 2, "Expected Sprite Eis to be at layer 2");
  t.assert.withinRange(t.getSprite("Spieler").x, -112.44178745038047, 5, "Expected Sprite Spieler to have x-position -112.44178745038047 +-5");
  t.assert.withinRange(t.getSprite("Spieler").y, -92.64938461104063, 5, "Expected Sprite Spieler to have y-position -92.64938461104063 +-5");
  t.assert.withinRange(t.getSprite("Freundin").x, 60, 5, "Expected Sprite Freundin to have x-position 60 +-5");
  t.assert.withinRange(t.getSprite("Freundin").y, -131, 5, "Expected Sprite Freundin to have y-position -131 +-5");
  t.assert.withinRange(t.getSprite("Münzen").x, -139.1401426525336, 5, "Expected Sprite Münzen to have x-position -139.1401426525336 +-5");
  t.assert.withinRange(t.getSprite("Münzen").y, 3.942794683751316, 5, "Expected Sprite Münzen to have y-position 3.942794683751316 +-5");
  t.assert.withinRange(t.getSprite("Eis").x, 195, 5, "Expected Sprite Eis to have x-position 195 +-5");
  t.assert.withinRange(t.getSprite("Eis").y, -158, 5, "Expected Sprite Eis to have y-position -158 +-5");
  t.assert.not(t.getSprite("Spieler").sayText, "Expected Sprite Spieler not to say anything");
  t.assert.equal(t.getSprite("Freundin").sayText, "Auf geht's!", "Expected Sprite Freundin to say Auf geht's!");
  t.assert.not(t.getSprite("Münzen").sayText, "Expected Sprite Münzen not to say anything");
  t.assert.not(t.getSprite("Eis").sayText, "Expected Sprite Eis not to say anything");
  t.assert.withinRange(t.getSprite("Spieler").size, 8, 1, "Expected Sprite Spieler to have size 8 +-1");
  t.assert.withinRange(t.getSprite("Freundin").size, 50, 1, "Expected Sprite Freundin to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Münzen").size, 50, 1, "Expected Sprite Münzen to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Eis").size, 20, 1, "Expected Sprite Eis to have size 20 +-1");
  t.assert.ok(t.getSprite("Spieler").visible, "Expected Sprite Spieler to be visible");
  t.assert.ok(t.getSprite("Freundin").visible, "Expected Sprite Freundin to be visible");
  t.assert.ok(t.getSprite("Münzen").visible, "Expected Sprite Münzen to be visible");
  t.assert.ok(t.getSprite("Eis").visible, "Expected Sprite Eis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Spieler").volume, 100, "Expected Sprite Spieler to have volume 100");
  t.assert.equal(t.getSprite("Freundin").volume, 100, "Expected Sprite Freundin to have volume 100");
  t.assert.equal(t.getSprite("Münzen").volume, 100, "Expected Sprite Münzen to have volume 100");
  t.assert.equal(t.getSprite("Eis").volume, 100, "Expected Sprite Eis to have volume 100");
  await t.runForSteps(83);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Spieler").currentCostume, 0, "Expected Sprite Spieler to have costume 0");
  t.assert.equal(t.getSprite("Freundin").currentCostume, 0, "Expected Sprite Freundin to have costume 0");
  t.assert.equal(t.getSprite("Münzen").currentCostume, 0, "Expected Sprite Münzen to have costume 0");
  t.assert.equal(t.getSprite("Eis").currentCostume, 0, "Expected Sprite Eis to have costume 0");
  t.assert.equal(t.getSprite("Spieler").getCloneCount(), 0, "Expected Sprite Spieler to have 0 clones");
  t.assert.equal(t.getSprite("Freundin").getCloneCount(), 0, "Expected Sprite Freundin to have 0 clones");
  t.assert.equal(t.getSprite("Münzen").getCloneCount(), 0, "Expected Sprite Münzen to have 0 clones");
  t.assert.equal(t.getSprite("Eis").getCloneCount(), 0, "Expected Sprite Eis to have 0 clones");
  t.assert.equal(t.getSprite("Spieler").direction, 180, 1, "Expected Sprite Spieler to face in direction 180 +-1");
  t.assert.equal(t.getSprite("Freundin").direction, 90, 1, "Expected Sprite Freundin to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Münzen").direction, 90, 1, "Expected Sprite Münzen to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Eis").direction, 90, 1, "Expected Sprite Eis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Spieler").effects.color, 0, "Expected effect color of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.fisheye, 0, "Expected effect fisheye of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.whirl, 0, "Expected effect whirl of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.pixelate, 0, "Expected effect pixelate of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.mosaic, 0, "Expected effect mosaic of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.brightness, 0, "Expected effect brightness of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.ghost, 0, "Expected effect ghost of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.color, 0, "Expected effect color of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.fisheye, 0, "Expected effect fisheye of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.whirl, 0, "Expected effect whirl of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.pixelate, 0, "Expected effect pixelate of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.mosaic, 0, "Expected effect mosaic of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.brightness, 0, "Expected effect brightness of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.ghost, 0, "Expected effect ghost of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.color, 0, "Expected effect color of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.fisheye, 0, "Expected effect fisheye of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.whirl, 0, "Expected effect whirl of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.pixelate, 0, "Expected effect pixelate of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.mosaic, 0, "Expected effect mosaic of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.brightness, 0, "Expected effect brightness of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.ghost, 0, "Expected effect ghost of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Eis").effects.color, 0, "Expected effect color of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.fisheye, 0, "Expected effect fisheye of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.whirl, 0, "Expected effect whirl of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.pixelate, 0, "Expected effect pixelate of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.mosaic, 0, "Expected effect mosaic of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.brightness, 0, "Expected effect brightness of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.ghost, 0, "Expected effect ghost of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Spieler").layerOrder, 3, "Expected Sprite Spieler to be at layer 3");
  t.assert.equal(t.getSprite("Freundin").layerOrder, 5, "Expected Sprite Freundin to be at layer 5");
  t.assert.equal(t.getSprite("Münzen").layerOrder, 4, "Expected Sprite Münzen to be at layer 4");
  t.assert.equal(t.getSprite("Eis").layerOrder, 2, "Expected Sprite Eis to be at layer 2");
  t.assert.withinRange(t.getSprite("Spieler").x, -112.44178745038047, 5, "Expected Sprite Spieler to have x-position -112.44178745038047 +-5");
  t.assert.withinRange(t.getSprite("Spieler").y, -97.64938461104063, 5, "Expected Sprite Spieler to have y-position -97.64938461104063 +-5");
  t.assert.withinRange(t.getSprite("Freundin").x, 60, 5, "Expected Sprite Freundin to have x-position 60 +-5");
  t.assert.withinRange(t.getSprite("Freundin").y, -131, 5, "Expected Sprite Freundin to have y-position -131 +-5");
  t.assert.withinRange(t.getSprite("Münzen").x, -139.1401426525336, 5, "Expected Sprite Münzen to have x-position -139.1401426525336 +-5");
  t.assert.withinRange(t.getSprite("Münzen").y, 3.942794683751316, 5, "Expected Sprite Münzen to have y-position 3.942794683751316 +-5");
  t.assert.withinRange(t.getSprite("Eis").x, 195, 5, "Expected Sprite Eis to have x-position 195 +-5");
  t.assert.withinRange(t.getSprite("Eis").y, -158, 5, "Expected Sprite Eis to have y-position -158 +-5");
  t.assert.not(t.getSprite("Spieler").sayText, "Expected Sprite Spieler not to say anything");
  t.assert.not(t.getSprite("Freundin").sayText, "Expected Sprite Freundin not to say anything");
  t.assert.not(t.getSprite("Münzen").sayText, "Expected Sprite Münzen not to say anything");
  t.assert.not(t.getSprite("Eis").sayText, "Expected Sprite Eis not to say anything");
  t.assert.withinRange(t.getSprite("Spieler").size, 8, 1, "Expected Sprite Spieler to have size 8 +-1");
  t.assert.withinRange(t.getSprite("Freundin").size, 50, 1, "Expected Sprite Freundin to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Münzen").size, 50, 1, "Expected Sprite Münzen to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Eis").size, 20, 1, "Expected Sprite Eis to have size 20 +-1");
  t.assert.ok(t.getSprite("Spieler").visible, "Expected Sprite Spieler to be visible");
  t.assert.ok(t.getSprite("Freundin").visible, "Expected Sprite Freundin to be visible");
  t.assert.ok(t.getSprite("Münzen").visible, "Expected Sprite Münzen to be visible");
  t.assert.ok(t.getSprite("Eis").visible, "Expected Sprite Eis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Spieler").volume, 100, "Expected Sprite Spieler to have volume 100");
  t.assert.equal(t.getSprite("Freundin").volume, 100, "Expected Sprite Freundin to have volume 100");
  t.assert.equal(t.getSprite("Münzen").volume, 100, "Expected Sprite Münzen to have volume 100");
  t.assert.equal(t.getSprite("Eis").volume, 100, "Expected Sprite Eis to have volume 100");
  t.dragSprite('Münzen', -112, -97, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Spieler").currentCostume, 0, "Expected Sprite Spieler to have costume 0");
  t.assert.equal(t.getSprite("Freundin").currentCostume, 0, "Expected Sprite Freundin to have costume 0");
  t.assert.equal(t.getSprite("Münzen").currentCostume, 0, "Expected Sprite Münzen to have costume 0");
  t.assert.equal(t.getSprite("Eis").currentCostume, 0, "Expected Sprite Eis to have costume 0");
  t.assert.equal(t.getSprite("Spieler").getCloneCount(), 0, "Expected Sprite Spieler to have 0 clones");
  t.assert.equal(t.getSprite("Freundin").getCloneCount(), 0, "Expected Sprite Freundin to have 0 clones");
  t.assert.equal(t.getSprite("Münzen").getCloneCount(), 0, "Expected Sprite Münzen to have 0 clones");
  t.assert.equal(t.getSprite("Eis").getCloneCount(), 0, "Expected Sprite Eis to have 0 clones");
  t.assert.equal(t.getSprite("Spieler").direction, 90, 1, "Expected Sprite Spieler to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Freundin").direction, 90, 1, "Expected Sprite Freundin to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Münzen").direction, 90, 1, "Expected Sprite Münzen to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Eis").direction, 90, 1, "Expected Sprite Eis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Spieler").effects.color, 0, "Expected effect color of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.fisheye, 0, "Expected effect fisheye of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.whirl, 0, "Expected effect whirl of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.pixelate, 0, "Expected effect pixelate of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.mosaic, 0, "Expected effect mosaic of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.brightness, 0, "Expected effect brightness of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.ghost, 0, "Expected effect ghost of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.color, 0, "Expected effect color of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.fisheye, 0, "Expected effect fisheye of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.whirl, 0, "Expected effect whirl of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.pixelate, 0, "Expected effect pixelate of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.mosaic, 0, "Expected effect mosaic of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.brightness, 0, "Expected effect brightness of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.ghost, 0, "Expected effect ghost of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.color, 0, "Expected effect color of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.fisheye, 0, "Expected effect fisheye of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.whirl, 0, "Expected effect whirl of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.pixelate, 0, "Expected effect pixelate of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.mosaic, 0, "Expected effect mosaic of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.brightness, 0, "Expected effect brightness of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.ghost, 0, "Expected effect ghost of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Eis").effects.color, 0, "Expected effect color of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.fisheye, 0, "Expected effect fisheye of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.whirl, 0, "Expected effect whirl of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.pixelate, 0, "Expected effect pixelate of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.mosaic, 0, "Expected effect mosaic of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.brightness, 0, "Expected effect brightness of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.ghost, 0, "Expected effect ghost of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Spieler").layerOrder, 3, "Expected Sprite Spieler to be at layer 3");
  t.assert.equal(t.getSprite("Freundin").layerOrder, 5, "Expected Sprite Freundin to be at layer 5");
  t.assert.equal(t.getSprite("Münzen").layerOrder, 4, "Expected Sprite Münzen to be at layer 4");
  t.assert.equal(t.getSprite("Eis").layerOrder, 2, "Expected Sprite Eis to be at layer 2");
  t.assert.withinRange(t.getSprite("Spieler").x, -107.44178745038047, 5, "Expected Sprite Spieler to have x-position -107.44178745038047 +-5");
  t.assert.withinRange(t.getSprite("Spieler").y, -97.64938461104063, 5, "Expected Sprite Spieler to have y-position -97.64938461104063 +-5");
  t.assert.withinRange(t.getSprite("Freundin").x, 60, 5, "Expected Sprite Freundin to have x-position 60 +-5");
  t.assert.withinRange(t.getSprite("Freundin").y, -131, 5, "Expected Sprite Freundin to have y-position -131 +-5");
  t.assert.withinRange(t.getSprite("Münzen").x, -112, 5, "Expected Sprite Münzen to have x-position -112 +-5");
  t.assert.withinRange(t.getSprite("Münzen").y, -97, 5, "Expected Sprite Münzen to have y-position -97 +-5");
  t.assert.withinRange(t.getSprite("Eis").x, 195, 5, "Expected Sprite Eis to have x-position 195 +-5");
  t.assert.withinRange(t.getSprite("Eis").y, -158, 5, "Expected Sprite Eis to have y-position -158 +-5");
  t.assert.not(t.getSprite("Spieler").sayText, "Expected Sprite Spieler not to say anything");
  t.assert.equal(t.getSprite("Freundin").sayText, "Super!", "Expected Sprite Freundin to say Super!");
  t.assert.not(t.getSprite("Münzen").sayText, "Expected Sprite Münzen not to say anything");
  t.assert.not(t.getSprite("Eis").sayText, "Expected Sprite Eis not to say anything");
  t.assert.withinRange(t.getSprite("Spieler").size, 8, 1, "Expected Sprite Spieler to have size 8 +-1");
  t.assert.withinRange(t.getSprite("Freundin").size, 50, 1, "Expected Sprite Freundin to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Münzen").size, 50, 1, "Expected Sprite Münzen to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Eis").size, 20, 1, "Expected Sprite Eis to have size 20 +-1");
  t.assert.ok(t.getSprite("Spieler").visible, "Expected Sprite Spieler to be visible");
  t.assert.ok(t.getSprite("Freundin").visible, "Expected Sprite Freundin to be visible");
  t.assert.not(t.getSprite("Münzen").visible, "Expected Sprite Münzen not to be visible");
  t.assert.ok(t.getSprite("Eis").visible, "Expected Sprite Eis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Spieler").volume, 100, "Expected Sprite Spieler to have volume 100");
  t.assert.equal(t.getSprite("Freundin").volume, 100, "Expected Sprite Freundin to have volume 100");
  t.assert.equal(t.getSprite("Münzen").volume, 100, "Expected Sprite Münzen to have volume 100");
  t.assert.equal(t.getSprite("Eis").volume, 100, "Expected Sprite Eis to have volume 100");
  await t.runForSteps(55);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Spieler").currentCostume, 0, "Expected Sprite Spieler to have costume 0");
  t.assert.equal(t.getSprite("Freundin").currentCostume, 0, "Expected Sprite Freundin to have costume 0");
  t.assert.equal(t.getSprite("Münzen").currentCostume, 0, "Expected Sprite Münzen to have costume 0");
  t.assert.equal(t.getSprite("Eis").currentCostume, 0, "Expected Sprite Eis to have costume 0");
  t.assert.equal(t.getSprite("Spieler").getCloneCount(), 0, "Expected Sprite Spieler to have 0 clones");
  t.assert.equal(t.getSprite("Freundin").getCloneCount(), 0, "Expected Sprite Freundin to have 0 clones");
  t.assert.equal(t.getSprite("Münzen").getCloneCount(), 0, "Expected Sprite Münzen to have 0 clones");
  t.assert.equal(t.getSprite("Eis").getCloneCount(), 0, "Expected Sprite Eis to have 0 clones");
  t.assert.equal(t.getSprite("Spieler").direction, 90, 1, "Expected Sprite Spieler to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Freundin").direction, 90, 1, "Expected Sprite Freundin to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Münzen").direction, 90, 1, "Expected Sprite Münzen to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Eis").direction, 90, 1, "Expected Sprite Eis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Spieler").effects.color, 0, "Expected effect color of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.fisheye, 0, "Expected effect fisheye of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.whirl, 0, "Expected effect whirl of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.pixelate, 0, "Expected effect pixelate of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.mosaic, 0, "Expected effect mosaic of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.brightness, 0, "Expected effect brightness of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.ghost, 0, "Expected effect ghost of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.color, 0, "Expected effect color of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.fisheye, 0, "Expected effect fisheye of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.whirl, 0, "Expected effect whirl of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.pixelate, 0, "Expected effect pixelate of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.mosaic, 0, "Expected effect mosaic of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.brightness, 0, "Expected effect brightness of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.ghost, 0, "Expected effect ghost of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.color, 0, "Expected effect color of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.fisheye, 0, "Expected effect fisheye of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.whirl, 0, "Expected effect whirl of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.pixelate, 0, "Expected effect pixelate of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.mosaic, 0, "Expected effect mosaic of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.brightness, 0, "Expected effect brightness of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.ghost, 0, "Expected effect ghost of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Eis").effects.color, 0, "Expected effect color of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.fisheye, 0, "Expected effect fisheye of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.whirl, 0, "Expected effect whirl of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.pixelate, 0, "Expected effect pixelate of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.mosaic, 0, "Expected effect mosaic of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.brightness, 0, "Expected effect brightness of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.ghost, 0, "Expected effect ghost of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Spieler").layerOrder, 3, "Expected Sprite Spieler to be at layer 3");
  t.assert.equal(t.getSprite("Freundin").layerOrder, 5, "Expected Sprite Freundin to be at layer 5");
  t.assert.equal(t.getSprite("Münzen").layerOrder, 4, "Expected Sprite Münzen to be at layer 4");
  t.assert.equal(t.getSprite("Eis").layerOrder, 2, "Expected Sprite Eis to be at layer 2");
  t.assert.withinRange(t.getSprite("Spieler").x, -107.44178745038047, 5, "Expected Sprite Spieler to have x-position -107.44178745038047 +-5");
  t.assert.withinRange(t.getSprite("Spieler").y, -97.64938461104063, 5, "Expected Sprite Spieler to have y-position -97.64938461104063 +-5");
  t.assert.withinRange(t.getSprite("Freundin").x, 60, 5, "Expected Sprite Freundin to have x-position 60 +-5");
  t.assert.withinRange(t.getSprite("Freundin").y, -131, 5, "Expected Sprite Freundin to have y-position -131 +-5");
  t.assert.withinRange(t.getSprite("Münzen").x, -112, 5, "Expected Sprite Münzen to have x-position -112 +-5");
  t.assert.withinRange(t.getSprite("Münzen").y, -97, 5, "Expected Sprite Münzen to have y-position -97 +-5");
  t.assert.withinRange(t.getSprite("Eis").x, 195, 5, "Expected Sprite Eis to have x-position 195 +-5");
  t.assert.withinRange(t.getSprite("Eis").y, -158, 5, "Expected Sprite Eis to have y-position -158 +-5");
  t.assert.not(t.getSprite("Spieler").sayText, "Expected Sprite Spieler not to say anything");
  t.assert.equal(t.getSprite("Freundin").sayText, "Super!", "Expected Sprite Freundin to say Super!");
  t.assert.not(t.getSprite("Münzen").sayText, "Expected Sprite Münzen not to say anything");
  t.assert.not(t.getSprite("Eis").sayText, "Expected Sprite Eis not to say anything");
  t.assert.withinRange(t.getSprite("Spieler").size, 8, 1, "Expected Sprite Spieler to have size 8 +-1");
  t.assert.withinRange(t.getSprite("Freundin").size, 50, 1, "Expected Sprite Freundin to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Münzen").size, 50, 1, "Expected Sprite Münzen to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Eis").size, 20, 1, "Expected Sprite Eis to have size 20 +-1");
  t.assert.ok(t.getSprite("Spieler").visible, "Expected Sprite Spieler to be visible");
  t.assert.ok(t.getSprite("Freundin").visible, "Expected Sprite Freundin to be visible");
  t.assert.not(t.getSprite("Münzen").visible, "Expected Sprite Münzen not to be visible");
  t.assert.ok(t.getSprite("Eis").visible, "Expected Sprite Eis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Spieler").volume, 100, "Expected Sprite Spieler to have volume 100");
  t.assert.equal(t.getSprite("Freundin").volume, 100, "Expected Sprite Freundin to have volume 100");
  t.assert.equal(t.getSprite("Münzen").volume, 100, "Expected Sprite Münzen to have volume 100");
  t.assert.equal(t.getSprite("Eis").volume, 100, "Expected Sprite Eis to have volume 100");
  await t.runForSteps(79);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Spieler").currentCostume, 0, "Expected Sprite Spieler to have costume 0");
  t.assert.equal(t.getSprite("Freundin").currentCostume, 0, "Expected Sprite Freundin to have costume 0");
  t.assert.equal(t.getSprite("Münzen").currentCostume, 0, "Expected Sprite Münzen to have costume 0");
  t.assert.equal(t.getSprite("Eis").currentCostume, 0, "Expected Sprite Eis to have costume 0");
  t.assert.equal(t.getSprite("Spieler").getCloneCount(), 0, "Expected Sprite Spieler to have 0 clones");
  t.assert.equal(t.getSprite("Freundin").getCloneCount(), 0, "Expected Sprite Freundin to have 0 clones");
  t.assert.equal(t.getSprite("Münzen").getCloneCount(), 0, "Expected Sprite Münzen to have 0 clones");
  t.assert.equal(t.getSprite("Eis").getCloneCount(), 0, "Expected Sprite Eis to have 0 clones");
  t.assert.equal(t.getSprite("Spieler").direction, 90, 1, "Expected Sprite Spieler to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Freundin").direction, 90, 1, "Expected Sprite Freundin to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Münzen").direction, 90, 1, "Expected Sprite Münzen to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Eis").direction, 90, 1, "Expected Sprite Eis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Spieler").effects.color, 0, "Expected effect color of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.fisheye, 0, "Expected effect fisheye of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.whirl, 0, "Expected effect whirl of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.pixelate, 0, "Expected effect pixelate of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.mosaic, 0, "Expected effect mosaic of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.brightness, 0, "Expected effect brightness of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.ghost, 0, "Expected effect ghost of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.color, 0, "Expected effect color of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.fisheye, 0, "Expected effect fisheye of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.whirl, 0, "Expected effect whirl of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.pixelate, 0, "Expected effect pixelate of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.mosaic, 0, "Expected effect mosaic of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.brightness, 0, "Expected effect brightness of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.ghost, 0, "Expected effect ghost of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.color, 0, "Expected effect color of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.fisheye, 0, "Expected effect fisheye of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.whirl, 0, "Expected effect whirl of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.pixelate, 0, "Expected effect pixelate of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.mosaic, 0, "Expected effect mosaic of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.brightness, 0, "Expected effect brightness of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.ghost, 0, "Expected effect ghost of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Eis").effects.color, 0, "Expected effect color of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.fisheye, 0, "Expected effect fisheye of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.whirl, 0, "Expected effect whirl of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.pixelate, 0, "Expected effect pixelate of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.mosaic, 0, "Expected effect mosaic of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.brightness, 0, "Expected effect brightness of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.ghost, 0, "Expected effect ghost of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Spieler").layerOrder, 3, "Expected Sprite Spieler to be at layer 3");
  t.assert.equal(t.getSprite("Freundin").layerOrder, 5, "Expected Sprite Freundin to be at layer 5");
  t.assert.equal(t.getSprite("Münzen").layerOrder, 4, "Expected Sprite Münzen to be at layer 4");
  t.assert.equal(t.getSprite("Eis").layerOrder, 2, "Expected Sprite Eis to be at layer 2");
  t.assert.withinRange(t.getSprite("Spieler").x, -107.44178745038047, 5, "Expected Sprite Spieler to have x-position -107.44178745038047 +-5");
  t.assert.withinRange(t.getSprite("Spieler").y, -97.64938461104063, 5, "Expected Sprite Spieler to have y-position -97.64938461104063 +-5");
  t.assert.withinRange(t.getSprite("Freundin").x, 60, 5, "Expected Sprite Freundin to have x-position 60 +-5");
  t.assert.withinRange(t.getSprite("Freundin").y, -131, 5, "Expected Sprite Freundin to have y-position -131 +-5");
  t.assert.withinRange(t.getSprite("Münzen").x, -112, 5, "Expected Sprite Münzen to have x-position -112 +-5");
  t.assert.withinRange(t.getSprite("Münzen").y, -97, 5, "Expected Sprite Münzen to have y-position -97 +-5");
  t.assert.withinRange(t.getSprite("Eis").x, 195, 5, "Expected Sprite Eis to have x-position 195 +-5");
  t.assert.withinRange(t.getSprite("Eis").y, -158, 5, "Expected Sprite Eis to have y-position -158 +-5");
  t.assert.not(t.getSprite("Spieler").sayText, "Expected Sprite Spieler not to say anything");
  t.assert.not(t.getSprite("Freundin").sayText, "Expected Sprite Freundin not to say anything");
  t.assert.not(t.getSprite("Münzen").sayText, "Expected Sprite Münzen not to say anything");
  t.assert.not(t.getSprite("Eis").sayText, "Expected Sprite Eis not to say anything");
  t.assert.withinRange(t.getSprite("Spieler").size, 8, 1, "Expected Sprite Spieler to have size 8 +-1");
  t.assert.withinRange(t.getSprite("Freundin").size, 50, 1, "Expected Sprite Freundin to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Münzen").size, 50, 1, "Expected Sprite Münzen to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Eis").size, 20, 1, "Expected Sprite Eis to have size 20 +-1");
  t.assert.ok(t.getSprite("Spieler").visible, "Expected Sprite Spieler to be visible");
  t.assert.ok(t.getSprite("Freundin").visible, "Expected Sprite Freundin to be visible");
  t.assert.not(t.getSprite("Münzen").visible, "Expected Sprite Münzen not to be visible");
  t.assert.ok(t.getSprite("Eis").visible, "Expected Sprite Eis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Spieler").volume, 100, "Expected Sprite Spieler to have volume 100");
  t.assert.equal(t.getSprite("Freundin").volume, 100, "Expected Sprite Freundin to have volume 100");
  t.assert.equal(t.getSprite("Münzen").volume, 100, "Expected Sprite Münzen to have volume 100");
  t.assert.equal(t.getSprite("Eis").volume, 100, "Expected Sprite Eis to have volume 100");
  t.dragSprite('Spieler', 177.28326794716853, -156.25887847921058, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Spieler").currentCostume, 0, "Expected Sprite Spieler to have costume 0");
  t.assert.equal(t.getSprite("Freundin").currentCostume, 0, "Expected Sprite Freundin to have costume 0");
  t.assert.equal(t.getSprite("Münzen").currentCostume, 0, "Expected Sprite Münzen to have costume 0");
  t.assert.equal(t.getSprite("Eis").currentCostume, 0, "Expected Sprite Eis to have costume 0");
  t.assert.equal(t.getSprite("Spieler").getCloneCount(), 0, "Expected Sprite Spieler to have 0 clones");
  t.assert.equal(t.getSprite("Freundin").getCloneCount(), 0, "Expected Sprite Freundin to have 0 clones");
  t.assert.equal(t.getSprite("Münzen").getCloneCount(), 0, "Expected Sprite Münzen to have 0 clones");
  t.assert.equal(t.getSprite("Eis").getCloneCount(), 0, "Expected Sprite Eis to have 0 clones");
  t.assert.equal(t.getSprite("Spieler").direction, 90, 1, "Expected Sprite Spieler to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Freundin").direction, 90, 1, "Expected Sprite Freundin to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Münzen").direction, 90, 1, "Expected Sprite Münzen to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Eis").direction, 90, 1, "Expected Sprite Eis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Spieler").effects.color, 0, "Expected effect color of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.fisheye, 0, "Expected effect fisheye of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.whirl, 0, "Expected effect whirl of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.pixelate, 0, "Expected effect pixelate of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.mosaic, 0, "Expected effect mosaic of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.brightness, 0, "Expected effect brightness of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.ghost, 0, "Expected effect ghost of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.color, 0, "Expected effect color of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.fisheye, 0, "Expected effect fisheye of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.whirl, 0, "Expected effect whirl of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.pixelate, 0, "Expected effect pixelate of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.mosaic, 0, "Expected effect mosaic of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.brightness, 0, "Expected effect brightness of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.ghost, 0, "Expected effect ghost of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.color, 0, "Expected effect color of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.fisheye, 0, "Expected effect fisheye of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.whirl, 0, "Expected effect whirl of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.pixelate, 0, "Expected effect pixelate of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.mosaic, 0, "Expected effect mosaic of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.brightness, 0, "Expected effect brightness of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.ghost, 0, "Expected effect ghost of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Eis").effects.color, 0, "Expected effect color of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.fisheye, 0, "Expected effect fisheye of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.whirl, 0, "Expected effect whirl of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.pixelate, 0, "Expected effect pixelate of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.mosaic, 0, "Expected effect mosaic of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.brightness, 0, "Expected effect brightness of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.ghost, 0, "Expected effect ghost of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Spieler").layerOrder, 3, "Expected Sprite Spieler to be at layer 3");
  t.assert.equal(t.getSprite("Freundin").layerOrder, 5, "Expected Sprite Freundin to be at layer 5");
  t.assert.equal(t.getSprite("Münzen").layerOrder, 4, "Expected Sprite Münzen to be at layer 4");
  t.assert.equal(t.getSprite("Eis").layerOrder, 2, "Expected Sprite Eis to be at layer 2");
  t.assert.withinRange(t.getSprite("Spieler").x, 177.28326794716853, 5, "Expected Sprite Spieler to have x-position 177.28326794716853 +-5");
  t.assert.withinRange(t.getSprite("Spieler").y, -156.25887847921058, 5, "Expected Sprite Spieler to have y-position -156.25887847921058 +-5");
  t.assert.withinRange(t.getSprite("Freundin").x, 60, 5, "Expected Sprite Freundin to have x-position 60 +-5");
  t.assert.withinRange(t.getSprite("Freundin").y, -131, 5, "Expected Sprite Freundin to have y-position -131 +-5");
  t.assert.withinRange(t.getSprite("Münzen").x, -112, 5, "Expected Sprite Münzen to have x-position -112 +-5");
  t.assert.withinRange(t.getSprite("Münzen").y, -97, 5, "Expected Sprite Münzen to have y-position -97 +-5");
  t.assert.withinRange(t.getSprite("Eis").x, 195, 5, "Expected Sprite Eis to have x-position 195 +-5");
  t.assert.withinRange(t.getSprite("Eis").y, -158, 5, "Expected Sprite Eis to have y-position -158 +-5");
  t.assert.not(t.getSprite("Spieler").sayText, "Expected Sprite Spieler not to say anything");
  t.assert.not(t.getSprite("Freundin").sayText, "Expected Sprite Freundin not to say anything");
  t.assert.not(t.getSprite("Münzen").sayText, "Expected Sprite Münzen not to say anything");
  t.assert.not(t.getSprite("Eis").sayText, "Expected Sprite Eis not to say anything");
  t.assert.withinRange(t.getSprite("Spieler").size, 8, 1, "Expected Sprite Spieler to have size 8 +-1");
  t.assert.withinRange(t.getSprite("Freundin").size, 50, 1, "Expected Sprite Freundin to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Münzen").size, 50, 1, "Expected Sprite Münzen to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Eis").size, 20, 1, "Expected Sprite Eis to have size 20 +-1");
  t.assert.ok(t.getSprite("Spieler").visible, "Expected Sprite Spieler to be visible");
  t.assert.ok(t.getSprite("Freundin").visible, "Expected Sprite Freundin to be visible");
  t.assert.not(t.getSprite("Münzen").visible, "Expected Sprite Münzen not to be visible");
  t.assert.ok(t.getSprite("Eis").visible, "Expected Sprite Eis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Spieler").volume, 100, "Expected Sprite Spieler to have volume 100");
  t.assert.equal(t.getSprite("Freundin").volume, 100, "Expected Sprite Freundin to have volume 100");
  t.assert.equal(t.getSprite("Münzen").volume, 100, "Expected Sprite Münzen to have volume 100");
  t.assert.equal(t.getSprite("Eis").volume, 100, "Expected Sprite Eis to have volume 100");
  t.end();
}

module.exports = [
  {
      test: test0,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687936730736',
      type: 'standard',
  },
  {
      test: test1,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687936730736',
      type: 'standard',
  }
]
