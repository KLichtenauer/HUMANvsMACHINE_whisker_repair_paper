const test0 = async function (t) {
  await t.runForSteps(74);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kreatur").currentCostume, 2, "Expected Sprite Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Gobo").currentCostume, 0, "Expected Sprite Gobo to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).currentCostume, 2, "Expected Clone 1 of Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).currentCostume, 0, "Expected Clone 2 of Kreatur to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).currentCostume, 1, "Expected Clone 3 of Kreatur to have costume 1");
  t.assert.equal(t.getSprite("Kreatur").getCloneCount(), 3, "Expected Sprite Kreatur to have 3 clones");
  t.assert.equal(t.getSprite("Gobo").getCloneCount(), 0, "Expected Sprite Gobo to have 0 clones");
  t.assert.equal(t.getSprite("Kreatur").direction, 90, 1, "Expected Sprite Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Gobo").direction, 90, 1, "Expected Sprite Gobo to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).direction, 90, 1, "Expected Clone 1 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).direction, 90, 1, "Expected Clone 2 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).direction, 90, 1, "Expected Clone 3 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").effects.color, 0, "Expected effect color of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.fisheye, 0, "Expected effect fisheye of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.whirl, 0, "Expected effect whirl of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.pixelate, 0, "Expected effect pixelate of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.mosaic, 0, "Expected effect mosaic of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.brightness, 0, "Expected effect brightness of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.ghost, 0, "Expected effect ghost of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.color, 0, "Expected effect color of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.fisheye, 0, "Expected effect fisheye of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.whirl, 0, "Expected effect whirl of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.pixelate, 0, "Expected effect pixelate of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.mosaic, 0, "Expected effect mosaic of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.brightness, 0, "Expected effect brightness of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.ghost, 0, "Expected effect ghost of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").layerOrder, 4, "Expected Sprite Kreatur to be at layer 4");
  t.assert.equal(t.getSprite("Gobo").layerOrder, 5, "Expected Sprite Gobo to be at layer 5");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Kreatur to be at layer 1");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).getLayerOrder(), 2, "Expected Clone 2 of Kreatur to be at layer 2");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).getLayerOrder(), 3, "Expected Clone 3 of Kreatur to be at layer 3");
  t.assert.withinRange(t.getSprite("Kreatur").x, 46, 5, "Expected Sprite Kreatur to have x-position 46 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").y, -81, 5, "Expected Sprite Kreatur to have y-position -81 +-5");
  t.assert.withinRange(t.getSprite("Gobo").x, -110, 5, "Expected Sprite Gobo to have x-position -110 +-5");
  t.assert.withinRange(t.getSprite("Gobo").y, 110, 5, "Expected Sprite Gobo to have y-position 110 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).x, -19, 5, "Expected Clone 1 of Kreatur to have x-position -19 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).y, 142, 5, "Expected Clone 1 of Kreatur to have y-position 142 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).x, 157, 5, "Expected Clone 2 of Kreatur to have x-position 157 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).y, 43, 5, "Expected Clone 2 of Kreatur to have y-position 43 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).x, 166, 5, "Expected Clone 3 of Kreatur to have x-position 166 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).y, 80, 5, "Expected Clone 3 of Kreatur to have y-position 80 +-5");
  t.assert.not(t.getSprite("Kreatur").sayText, "Expected Sprite Kreatur not to say anything");
  t.assert.not(t.getSprite("Gobo").sayText, "Expected Sprite Gobo not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(1).sayText, "Expected Clone 1 of Kreatur not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(2).sayText, "Expected Clone 2 of Kreatur not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(3).sayText, "Expected Clone 3 of Kreatur not to say anything");
  t.assert.withinRange(t.getSprite("Kreatur").size, 499, 1, "Expected Sprite Kreatur to have size 499 +-1");
  t.assert.withinRange(t.getSprite("Gobo").size, 60, 1, "Expected Sprite Gobo to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).size, 92, 1, "Expected Clone 1 of Kreatur to have size 92 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).size, 76, 1, "Expected Clone 2 of Kreatur to have size 76 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).size, 76, 1, "Expected Clone 3 of Kreatur to have size 76 +-1");
  t.assert.not(t.getSprite("Kreatur").visible, "Expected Sprite Kreatur not to be visible");
  t.assert.not(t.getSprite("Gobo").visible, "Expected Sprite Gobo not to be visible");
  t.assert.ok(t.getSprite("Kreatur").getClone(1).visible, "Expected Clone 1 of Kreatur to be visible");
  t.assert.not(t.getSprite("Kreatur").getClone(2).visible, "Expected Clone 2 of Kreatur not to be visible");
  t.assert.ok(t.getSprite("Kreatur").getClone(3).visible, "Expected Clone 3 of Kreatur to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").volume, 100, "Expected Sprite Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Gobo").volume, 100, "Expected Sprite Gobo to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).volume, 100, "Expected Clone 1 of Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).volume, 100, "Expected Clone 2 of Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).volume, 100, "Expected Clone 3 of Kreatur to have volume 100");
  t.clickCloneByCoords(166, 80, 1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kreatur").currentCostume, 2, "Expected Sprite Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Gobo").currentCostume, 0, "Expected Sprite Gobo to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).currentCostume, 2, "Expected Clone 1 of Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).currentCostume, 0, "Expected Clone 2 of Kreatur to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).currentCostume, 1, "Expected Clone 3 of Kreatur to have costume 1");
  t.assert.equal(t.getSprite("Kreatur").getCloneCount(), 3, "Expected Sprite Kreatur to have 3 clones");
  t.assert.equal(t.getSprite("Gobo").getCloneCount(), 0, "Expected Sprite Gobo to have 0 clones");
  t.assert.equal(t.getSprite("Kreatur").direction, 90, 1, "Expected Sprite Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Gobo").direction, 90, 1, "Expected Sprite Gobo to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).direction, 90, 1, "Expected Clone 1 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).direction, 90, 1, "Expected Clone 2 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).direction, 90, 1, "Expected Clone 3 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").effects.color, 0, "Expected effect color of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.fisheye, 0, "Expected effect fisheye of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.whirl, 0, "Expected effect whirl of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.pixelate, 0, "Expected effect pixelate of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.mosaic, 0, "Expected effect mosaic of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.brightness, 0, "Expected effect brightness of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.ghost, 0, "Expected effect ghost of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.color, 0, "Expected effect color of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.fisheye, 0, "Expected effect fisheye of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.whirl, 0, "Expected effect whirl of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.pixelate, 0, "Expected effect pixelate of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.mosaic, 0, "Expected effect mosaic of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.brightness, 0, "Expected effect brightness of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.ghost, 0, "Expected effect ghost of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").layerOrder, 4, "Expected Sprite Kreatur to be at layer 4");
  t.assert.equal(t.getSprite("Gobo").layerOrder, 5, "Expected Sprite Gobo to be at layer 5");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Kreatur to be at layer 1");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).getLayerOrder(), 2, "Expected Clone 2 of Kreatur to be at layer 2");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).getLayerOrder(), 3, "Expected Clone 3 of Kreatur to be at layer 3");
  t.assert.withinRange(t.getSprite("Kreatur").x, 46, 5, "Expected Sprite Kreatur to have x-position 46 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").y, -81, 5, "Expected Sprite Kreatur to have y-position -81 +-5");
  t.assert.withinRange(t.getSprite("Gobo").x, -110, 5, "Expected Sprite Gobo to have x-position -110 +-5");
  t.assert.withinRange(t.getSprite("Gobo").y, 110, 5, "Expected Sprite Gobo to have y-position 110 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).x, -19, 5, "Expected Clone 1 of Kreatur to have x-position -19 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).y, 142, 5, "Expected Clone 1 of Kreatur to have y-position 142 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).x, 157, 5, "Expected Clone 2 of Kreatur to have x-position 157 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).y, 43, 5, "Expected Clone 2 of Kreatur to have y-position 43 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).x, 166, 5, "Expected Clone 3 of Kreatur to have x-position 166 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).y, 80, 5, "Expected Clone 3 of Kreatur to have y-position 80 +-5");
  t.assert.not(t.getSprite("Kreatur").sayText, "Expected Sprite Kreatur not to say anything");
  t.assert.not(t.getSprite("Gobo").sayText, "Expected Sprite Gobo not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(1).sayText, "Expected Clone 1 of Kreatur not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(2).sayText, "Expected Clone 2 of Kreatur not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(3).sayText, "Expected Clone 3 of Kreatur not to say anything");
  t.assert.withinRange(t.getSprite("Kreatur").size, 499, 1, "Expected Sprite Kreatur to have size 499 +-1");
  t.assert.withinRange(t.getSprite("Gobo").size, 60, 1, "Expected Sprite Gobo to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).size, 92, 1, "Expected Clone 1 of Kreatur to have size 92 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).size, 76, 1, "Expected Clone 2 of Kreatur to have size 76 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).size, 76, 1, "Expected Clone 3 of Kreatur to have size 76 +-1");
  t.assert.not(t.getSprite("Kreatur").visible, "Expected Sprite Kreatur not to be visible");
  t.assert.not(t.getSprite("Gobo").visible, "Expected Sprite Gobo not to be visible");
  t.assert.ok(t.getSprite("Kreatur").getClone(1).visible, "Expected Clone 1 of Kreatur to be visible");
  t.assert.not(t.getSprite("Kreatur").getClone(2).visible, "Expected Clone 2 of Kreatur not to be visible");
  t.assert.not(t.getSprite("Kreatur").getClone(3).visible, "Expected Clone 3 of Kreatur not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").volume, 100, "Expected Sprite Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Gobo").volume, 100, "Expected Sprite Gobo to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).volume, 100, "Expected Clone 1 of Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).volume, 100, "Expected Clone 2 of Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).volume, 100, "Expected Clone 3 of Kreatur to have volume 100");
  await t.runForSteps(66);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kreatur").currentCostume, 2, "Expected Sprite Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Gobo").currentCostume, 0, "Expected Sprite Gobo to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).currentCostume, 2, "Expected Clone 1 of Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).currentCostume, 0, "Expected Clone 2 of Kreatur to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).currentCostume, 1, "Expected Clone 3 of Kreatur to have costume 1");
  t.assert.equal(t.getSprite("Kreatur").getCloneCount(), 3, "Expected Sprite Kreatur to have 3 clones");
  t.assert.equal(t.getSprite("Gobo").getCloneCount(), 0, "Expected Sprite Gobo to have 0 clones");
  t.assert.equal(t.getSprite("Kreatur").direction, 90, 1, "Expected Sprite Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Gobo").direction, 90, 1, "Expected Sprite Gobo to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).direction, 90, 1, "Expected Clone 1 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).direction, 90, 1, "Expected Clone 2 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).direction, 90, 1, "Expected Clone 3 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").effects.color, 0, "Expected effect color of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.fisheye, 0, "Expected effect fisheye of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.whirl, 0, "Expected effect whirl of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.pixelate, 0, "Expected effect pixelate of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.mosaic, 0, "Expected effect mosaic of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.brightness, 0, "Expected effect brightness of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.ghost, 0, "Expected effect ghost of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.color, 0, "Expected effect color of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.fisheye, 0, "Expected effect fisheye of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.whirl, 0, "Expected effect whirl of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.pixelate, 0, "Expected effect pixelate of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.mosaic, 0, "Expected effect mosaic of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.brightness, 0, "Expected effect brightness of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.ghost, 0, "Expected effect ghost of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").layerOrder, 4, "Expected Sprite Kreatur to be at layer 4");
  t.assert.equal(t.getSprite("Gobo").layerOrder, 5, "Expected Sprite Gobo to be at layer 5");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Kreatur to be at layer 1");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).getLayerOrder(), 2, "Expected Clone 2 of Kreatur to be at layer 2");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).getLayerOrder(), 3, "Expected Clone 3 of Kreatur to be at layer 3");
  t.assert.withinRange(t.getSprite("Kreatur").x, 46, 5, "Expected Sprite Kreatur to have x-position 46 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").y, -81, 5, "Expected Sprite Kreatur to have y-position -81 +-5");
  t.assert.withinRange(t.getSprite("Gobo").x, -110, 5, "Expected Sprite Gobo to have x-position -110 +-5");
  t.assert.withinRange(t.getSprite("Gobo").y, 110, 5, "Expected Sprite Gobo to have y-position 110 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).x, -19, 5, "Expected Clone 1 of Kreatur to have x-position -19 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).y, 142, 5, "Expected Clone 1 of Kreatur to have y-position 142 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).x, 211, 5, "Expected Clone 2 of Kreatur to have x-position 211 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).y, -4, 5, "Expected Clone 2 of Kreatur to have y-position -4 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).x, 166, 5, "Expected Clone 3 of Kreatur to have x-position 166 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).y, 80, 5, "Expected Clone 3 of Kreatur to have y-position 80 +-5");
  t.assert.not(t.getSprite("Kreatur").sayText, "Expected Sprite Kreatur not to say anything");
  t.assert.not(t.getSprite("Gobo").sayText, "Expected Sprite Gobo not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(1).sayText, "Expected Clone 1 of Kreatur not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(2).sayText, "Expected Clone 2 of Kreatur not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(3).sayText, "Expected Clone 3 of Kreatur not to say anything");
  t.assert.withinRange(t.getSprite("Kreatur").size, 499, 1, "Expected Sprite Kreatur to have size 499 +-1");
  t.assert.withinRange(t.getSprite("Gobo").size, 60, 1, "Expected Sprite Gobo to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).size, 64, 1, "Expected Clone 1 of Kreatur to have size 64 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).size, 76, 1, "Expected Clone 2 of Kreatur to have size 76 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).size, 67, 1, "Expected Clone 3 of Kreatur to have size 67 +-1");
  t.assert.not(t.getSprite("Kreatur").visible, "Expected Sprite Kreatur not to be visible");
  t.assert.not(t.getSprite("Gobo").visible, "Expected Sprite Gobo not to be visible");
  t.assert.not(t.getSprite("Kreatur").getClone(1).visible, "Expected Clone 1 of Kreatur not to be visible");
  t.assert.ok(t.getSprite("Kreatur").getClone(2).visible, "Expected Clone 2 of Kreatur to be visible");
  t.assert.not(t.getSprite("Kreatur").getClone(3).visible, "Expected Clone 3 of Kreatur not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").volume, 100, "Expected Sprite Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Gobo").volume, 100, "Expected Sprite Gobo to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).volume, 100, "Expected Clone 1 of Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).volume, 100, "Expected Clone 2 of Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).volume, 100, "Expected Clone 3 of Kreatur to have volume 100");
  t.clickCloneByCoords(211, -4, 1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kreatur").currentCostume, 2, "Expected Sprite Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Gobo").currentCostume, 0, "Expected Sprite Gobo to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).currentCostume, 2, "Expected Clone 1 of Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).currentCostume, 0, "Expected Clone 2 of Kreatur to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).currentCostume, 1, "Expected Clone 3 of Kreatur to have costume 1");
  t.assert.equal(t.getSprite("Kreatur").getCloneCount(), 3, "Expected Sprite Kreatur to have 3 clones");
  t.assert.equal(t.getSprite("Gobo").getCloneCount(), 0, "Expected Sprite Gobo to have 0 clones");
  t.assert.equal(t.getSprite("Kreatur").direction, 90, 1, "Expected Sprite Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Gobo").direction, 90, 1, "Expected Sprite Gobo to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).direction, 90, 1, "Expected Clone 1 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).direction, 90, 1, "Expected Clone 2 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).direction, 90, 1, "Expected Clone 3 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").effects.color, 0, "Expected effect color of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.fisheye, 0, "Expected effect fisheye of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.whirl, 0, "Expected effect whirl of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.pixelate, 0, "Expected effect pixelate of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.mosaic, 0, "Expected effect mosaic of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.brightness, 0, "Expected effect brightness of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.ghost, 0, "Expected effect ghost of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.color, 0, "Expected effect color of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.fisheye, 0, "Expected effect fisheye of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.whirl, 0, "Expected effect whirl of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.pixelate, 0, "Expected effect pixelate of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.mosaic, 0, "Expected effect mosaic of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.brightness, 0, "Expected effect brightness of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.ghost, 0, "Expected effect ghost of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").layerOrder, 4, "Expected Sprite Kreatur to be at layer 4");
  t.assert.equal(t.getSprite("Gobo").layerOrder, 5, "Expected Sprite Gobo to be at layer 5");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Kreatur to be at layer 1");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).getLayerOrder(), 2, "Expected Clone 2 of Kreatur to be at layer 2");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).getLayerOrder(), 3, "Expected Clone 3 of Kreatur to be at layer 3");
  t.assert.withinRange(t.getSprite("Kreatur").x, 46, 5, "Expected Sprite Kreatur to have x-position 46 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").y, -81, 5, "Expected Sprite Kreatur to have y-position -81 +-5");
  t.assert.withinRange(t.getSprite("Gobo").x, -110, 5, "Expected Sprite Gobo to have x-position -110 +-5");
  t.assert.withinRange(t.getSprite("Gobo").y, 110, 5, "Expected Sprite Gobo to have y-position 110 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).x, -19, 5, "Expected Clone 1 of Kreatur to have x-position -19 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).y, 142, 5, "Expected Clone 1 of Kreatur to have y-position 142 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).x, 211, 5, "Expected Clone 2 of Kreatur to have x-position 211 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).y, -4, 5, "Expected Clone 2 of Kreatur to have y-position -4 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).x, 166, 5, "Expected Clone 3 of Kreatur to have x-position 166 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).y, 80, 5, "Expected Clone 3 of Kreatur to have y-position 80 +-5");
  t.assert.not(t.getSprite("Kreatur").sayText, "Expected Sprite Kreatur not to say anything");
  t.assert.not(t.getSprite("Gobo").sayText, "Expected Sprite Gobo not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(1).sayText, "Expected Clone 1 of Kreatur not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(2).sayText, "Expected Clone 2 of Kreatur not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(3).sayText, "Expected Clone 3 of Kreatur not to say anything");
  t.assert.withinRange(t.getSprite("Kreatur").size, 499, 1, "Expected Sprite Kreatur to have size 499 +-1");
  t.assert.withinRange(t.getSprite("Gobo").size, 60, 1, "Expected Sprite Gobo to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).size, 64, 1, "Expected Clone 1 of Kreatur to have size 64 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).size, 76, 1, "Expected Clone 2 of Kreatur to have size 76 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).size, 67, 1, "Expected Clone 3 of Kreatur to have size 67 +-1");
  t.assert.not(t.getSprite("Kreatur").visible, "Expected Sprite Kreatur not to be visible");
  t.assert.not(t.getSprite("Gobo").visible, "Expected Sprite Gobo not to be visible");
  t.assert.not(t.getSprite("Kreatur").getClone(1).visible, "Expected Clone 1 of Kreatur not to be visible");
  t.assert.not(t.getSprite("Kreatur").getClone(2).visible, "Expected Clone 2 of Kreatur not to be visible");
  t.assert.not(t.getSprite("Kreatur").getClone(3).visible, "Expected Clone 3 of Kreatur not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").volume, 100, "Expected Sprite Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Gobo").volume, 100, "Expected Sprite Gobo to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).volume, 100, "Expected Clone 1 of Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).volume, 100, "Expected Clone 2 of Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).volume, 100, "Expected Clone 3 of Kreatur to have volume 100");
  await t.runForSteps(47);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kreatur").currentCostume, 2, "Expected Sprite Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Gobo").currentCostume, 0, "Expected Sprite Gobo to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).currentCostume, 2, "Expected Clone 1 of Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).currentCostume, 0, "Expected Clone 2 of Kreatur to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).currentCostume, 1, "Expected Clone 3 of Kreatur to have costume 1");
  t.assert.equal(t.getSprite("Kreatur").getCloneCount(), 3, "Expected Sprite Kreatur to have 3 clones");
  t.assert.equal(t.getSprite("Gobo").getCloneCount(), 0, "Expected Sprite Gobo to have 0 clones");
  t.assert.equal(t.getSprite("Kreatur").direction, 90, 1, "Expected Sprite Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Gobo").direction, 90, 1, "Expected Sprite Gobo to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).direction, 90, 1, "Expected Clone 1 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).direction, 90, 1, "Expected Clone 2 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).direction, 90, 1, "Expected Clone 3 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").effects.color, 0, "Expected effect color of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.fisheye, 0, "Expected effect fisheye of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.whirl, 0, "Expected effect whirl of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.pixelate, 0, "Expected effect pixelate of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.mosaic, 0, "Expected effect mosaic of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.brightness, 0, "Expected effect brightness of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.ghost, 0, "Expected effect ghost of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.color, 0, "Expected effect color of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.fisheye, 0, "Expected effect fisheye of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.whirl, 0, "Expected effect whirl of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.pixelate, 0, "Expected effect pixelate of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.mosaic, 0, "Expected effect mosaic of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.brightness, 0, "Expected effect brightness of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.ghost, 0, "Expected effect ghost of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").layerOrder, 4, "Expected Sprite Kreatur to be at layer 4");
  t.assert.equal(t.getSprite("Gobo").layerOrder, 5, "Expected Sprite Gobo to be at layer 5");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Kreatur to be at layer 1");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).getLayerOrder(), 2, "Expected Clone 2 of Kreatur to be at layer 2");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).getLayerOrder(), 3, "Expected Clone 3 of Kreatur to be at layer 3");
  t.assert.withinRange(t.getSprite("Kreatur").x, 46, 5, "Expected Sprite Kreatur to have x-position 46 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").y, -81, 5, "Expected Sprite Kreatur to have y-position -81 +-5");
  t.assert.withinRange(t.getSprite("Gobo").x, -110, 5, "Expected Sprite Gobo to have x-position -110 +-5");
  t.assert.withinRange(t.getSprite("Gobo").y, 110, 5, "Expected Sprite Gobo to have y-position 110 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).x, 151, 5, "Expected Clone 1 of Kreatur to have x-position 151 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).y, -149, 5, "Expected Clone 1 of Kreatur to have y-position -149 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).x, 30, 5, "Expected Clone 2 of Kreatur to have x-position 30 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).y, 140, 5, "Expected Clone 2 of Kreatur to have y-position 140 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).x, 44, 5, "Expected Clone 3 of Kreatur to have x-position 44 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).y, 116, 5, "Expected Clone 3 of Kreatur to have y-position 116 +-5");
  t.assert.not(t.getSprite("Kreatur").sayText, "Expected Sprite Kreatur not to say anything");
  t.assert.not(t.getSprite("Gobo").sayText, "Expected Sprite Gobo not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(1).sayText, "Expected Clone 1 of Kreatur not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(2).sayText, "Expected Clone 2 of Kreatur not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(3).sayText, "Expected Clone 3 of Kreatur not to say anything");
  t.assert.withinRange(t.getSprite("Kreatur").size, 499, 1, "Expected Sprite Kreatur to have size 499 +-1");
  t.assert.withinRange(t.getSprite("Gobo").size, 60, 1, "Expected Sprite Gobo to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).size, 64, 1, "Expected Clone 1 of Kreatur to have size 64 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).size, 74, 1, "Expected Clone 2 of Kreatur to have size 74 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).size, 67, 1, "Expected Clone 3 of Kreatur to have size 67 +-1");
  t.assert.not(t.getSprite("Kreatur").visible, "Expected Sprite Kreatur not to be visible");
  t.assert.not(t.getSprite("Gobo").visible, "Expected Sprite Gobo not to be visible");
  t.assert.ok(t.getSprite("Kreatur").getClone(1).visible, "Expected Clone 1 of Kreatur to be visible");
  t.assert.ok(t.getSprite("Kreatur").getClone(2).visible, "Expected Clone 2 of Kreatur to be visible");
  t.assert.ok(t.getSprite("Kreatur").getClone(3).visible, "Expected Clone 3 of Kreatur to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").volume, 100, "Expected Sprite Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Gobo").volume, 100, "Expected Sprite Gobo to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).volume, 100, "Expected Clone 1 of Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).volume, 100, "Expected Clone 2 of Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).volume, 100, "Expected Clone 3 of Kreatur to have volume 100");
  t.clickCloneByCoords(44, 116, 1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kreatur").currentCostume, 2, "Expected Sprite Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Gobo").currentCostume, 0, "Expected Sprite Gobo to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).currentCostume, 2, "Expected Clone 1 of Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).currentCostume, 0, "Expected Clone 2 of Kreatur to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).currentCostume, 1, "Expected Clone 3 of Kreatur to have costume 1");
  t.assert.equal(t.getSprite("Kreatur").getCloneCount(), 3, "Expected Sprite Kreatur to have 3 clones");
  t.assert.equal(t.getSprite("Gobo").getCloneCount(), 0, "Expected Sprite Gobo to have 0 clones");
  t.assert.equal(t.getSprite("Kreatur").direction, 90, 1, "Expected Sprite Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Gobo").direction, 90, 1, "Expected Sprite Gobo to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).direction, 90, 1, "Expected Clone 1 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).direction, 90, 1, "Expected Clone 2 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).direction, 90, 1, "Expected Clone 3 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").effects.color, 0, "Expected effect color of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.fisheye, 0, "Expected effect fisheye of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.whirl, 0, "Expected effect whirl of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.pixelate, 0, "Expected effect pixelate of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.mosaic, 0, "Expected effect mosaic of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.brightness, 0, "Expected effect brightness of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.ghost, 0, "Expected effect ghost of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.color, 0, "Expected effect color of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.fisheye, 0, "Expected effect fisheye of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.whirl, 0, "Expected effect whirl of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.pixelate, 0, "Expected effect pixelate of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.mosaic, 0, "Expected effect mosaic of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.brightness, 0, "Expected effect brightness of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.ghost, 0, "Expected effect ghost of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").layerOrder, 4, "Expected Sprite Kreatur to be at layer 4");
  t.assert.equal(t.getSprite("Gobo").layerOrder, 5, "Expected Sprite Gobo to be at layer 5");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Kreatur to be at layer 1");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).getLayerOrder(), 2, "Expected Clone 2 of Kreatur to be at layer 2");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).getLayerOrder(), 3, "Expected Clone 3 of Kreatur to be at layer 3");
  t.assert.withinRange(t.getSprite("Kreatur").x, 46, 5, "Expected Sprite Kreatur to have x-position 46 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").y, -81, 5, "Expected Sprite Kreatur to have y-position -81 +-5");
  t.assert.withinRange(t.getSprite("Gobo").x, -110, 5, "Expected Sprite Gobo to have x-position -110 +-5");
  t.assert.withinRange(t.getSprite("Gobo").y, 110, 5, "Expected Sprite Gobo to have y-position 110 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).x, 151, 5, "Expected Clone 1 of Kreatur to have x-position 151 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).y, -149, 5, "Expected Clone 1 of Kreatur to have y-position -149 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).x, 30, 5, "Expected Clone 2 of Kreatur to have x-position 30 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).y, 140, 5, "Expected Clone 2 of Kreatur to have y-position 140 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).x, 44, 5, "Expected Clone 3 of Kreatur to have x-position 44 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).y, 116, 5, "Expected Clone 3 of Kreatur to have y-position 116 +-5");
  t.assert.not(t.getSprite("Kreatur").sayText, "Expected Sprite Kreatur not to say anything");
  t.assert.not(t.getSprite("Gobo").sayText, "Expected Sprite Gobo not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(1).sayText, "Expected Clone 1 of Kreatur not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(2).sayText, "Expected Clone 2 of Kreatur not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(3).sayText, "Expected Clone 3 of Kreatur not to say anything");
  t.assert.withinRange(t.getSprite("Kreatur").size, 499, 1, "Expected Sprite Kreatur to have size 499 +-1");
  t.assert.withinRange(t.getSprite("Gobo").size, 60, 1, "Expected Sprite Gobo to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).size, 64, 1, "Expected Clone 1 of Kreatur to have size 64 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).size, 74, 1, "Expected Clone 2 of Kreatur to have size 74 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).size, 67, 1, "Expected Clone 3 of Kreatur to have size 67 +-1");
  t.assert.not(t.getSprite("Kreatur").visible, "Expected Sprite Kreatur not to be visible");
  t.assert.not(t.getSprite("Gobo").visible, "Expected Sprite Gobo not to be visible");
  t.assert.ok(t.getSprite("Kreatur").getClone(1).visible, "Expected Clone 1 of Kreatur to be visible");
  t.assert.ok(t.getSprite("Kreatur").getClone(2).visible, "Expected Clone 2 of Kreatur to be visible");
  t.assert.not(t.getSprite("Kreatur").getClone(3).visible, "Expected Clone 3 of Kreatur not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").volume, 100, "Expected Sprite Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Gobo").volume, 100, "Expected Sprite Gobo to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).volume, 100, "Expected Clone 1 of Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).volume, 100, "Expected Clone 2 of Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).volume, 100, "Expected Clone 3 of Kreatur to have volume 100");
  t.clickCloneByCoords(30, 140, 1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kreatur").currentCostume, 2, "Expected Sprite Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Gobo").currentCostume, 0, "Expected Sprite Gobo to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).currentCostume, 2, "Expected Clone 1 of Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).currentCostume, 0, "Expected Clone 2 of Kreatur to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).currentCostume, 1, "Expected Clone 3 of Kreatur to have costume 1");
  t.assert.equal(t.getSprite("Kreatur").getCloneCount(), 3, "Expected Sprite Kreatur to have 3 clones");
  t.assert.equal(t.getSprite("Gobo").getCloneCount(), 0, "Expected Sprite Gobo to have 0 clones");
  t.assert.equal(t.getSprite("Kreatur").direction, 90, 1, "Expected Sprite Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Gobo").direction, 90, 1, "Expected Sprite Gobo to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).direction, 90, 1, "Expected Clone 1 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).direction, 90, 1, "Expected Clone 2 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).direction, 90, 1, "Expected Clone 3 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").effects.color, 0, "Expected effect color of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.fisheye, 0, "Expected effect fisheye of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.whirl, 0, "Expected effect whirl of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.pixelate, 0, "Expected effect pixelate of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.mosaic, 0, "Expected effect mosaic of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.brightness, 0, "Expected effect brightness of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.ghost, 0, "Expected effect ghost of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.color, 0, "Expected effect color of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.fisheye, 0, "Expected effect fisheye of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.whirl, 0, "Expected effect whirl of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.pixelate, 0, "Expected effect pixelate of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.mosaic, 0, "Expected effect mosaic of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.brightness, 0, "Expected effect brightness of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.ghost, 0, "Expected effect ghost of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").layerOrder, 4, "Expected Sprite Kreatur to be at layer 4");
  t.assert.equal(t.getSprite("Gobo").layerOrder, 5, "Expected Sprite Gobo to be at layer 5");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Kreatur to be at layer 1");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).getLayerOrder(), 2, "Expected Clone 2 of Kreatur to be at layer 2");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).getLayerOrder(), 3, "Expected Clone 3 of Kreatur to be at layer 3");
  t.assert.withinRange(t.getSprite("Kreatur").x, 46, 5, "Expected Sprite Kreatur to have x-position 46 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").y, -81, 5, "Expected Sprite Kreatur to have y-position -81 +-5");
  t.assert.withinRange(t.getSprite("Gobo").x, -110, 5, "Expected Sprite Gobo to have x-position -110 +-5");
  t.assert.withinRange(t.getSprite("Gobo").y, 110, 5, "Expected Sprite Gobo to have y-position 110 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).x, 151, 5, "Expected Clone 1 of Kreatur to have x-position 151 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).y, -149, 5, "Expected Clone 1 of Kreatur to have y-position -149 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).x, 30, 5, "Expected Clone 2 of Kreatur to have x-position 30 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).y, 140, 5, "Expected Clone 2 of Kreatur to have y-position 140 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).x, 44, 5, "Expected Clone 3 of Kreatur to have x-position 44 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).y, 116, 5, "Expected Clone 3 of Kreatur to have y-position 116 +-5");
  t.assert.not(t.getSprite("Kreatur").sayText, "Expected Sprite Kreatur not to say anything");
  t.assert.equal(t.getSprite("Gobo").sayText, "Schon drei Punkte!", "Expected Sprite Gobo to say Schon drei Punkte!");
  t.assert.not(t.getSprite("Kreatur").getClone(1).sayText, "Expected Clone 1 of Kreatur not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(2).sayText, "Expected Clone 2 of Kreatur not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(3).sayText, "Expected Clone 3 of Kreatur not to say anything");
  t.assert.withinRange(t.getSprite("Kreatur").size, 499, 1, "Expected Sprite Kreatur to have size 499 +-1");
  t.assert.withinRange(t.getSprite("Gobo").size, 60, 1, "Expected Sprite Gobo to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).size, 64, 1, "Expected Clone 1 of Kreatur to have size 64 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).size, 74, 1, "Expected Clone 2 of Kreatur to have size 74 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).size, 67, 1, "Expected Clone 3 of Kreatur to have size 67 +-1");
  t.assert.not(t.getSprite("Kreatur").visible, "Expected Sprite Kreatur not to be visible");
  t.assert.ok(t.getSprite("Gobo").visible, "Expected Sprite Gobo to be visible");
  t.assert.ok(t.getSprite("Kreatur").getClone(1).visible, "Expected Clone 1 of Kreatur to be visible");
  t.assert.ok(t.getSprite("Kreatur").getClone(2).visible, "Expected Clone 2 of Kreatur to be visible");
  t.assert.not(t.getSprite("Kreatur").getClone(3).visible, "Expected Clone 3 of Kreatur not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").volume, 100, "Expected Sprite Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Gobo").volume, 100, "Expected Sprite Gobo to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).volume, 100, "Expected Clone 1 of Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).volume, 100, "Expected Clone 2 of Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).volume, 100, "Expected Clone 3 of Kreatur to have volume 100");
  t.clickCloneByCoords(151, -149, 1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kreatur").currentCostume, 2, "Expected Sprite Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Gobo").currentCostume, 0, "Expected Sprite Gobo to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).currentCostume, 2, "Expected Clone 1 of Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).currentCostume, 0, "Expected Clone 2 of Kreatur to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).currentCostume, 1, "Expected Clone 3 of Kreatur to have costume 1");
  t.assert.equal(t.getSprite("Kreatur").getCloneCount(), 3, "Expected Sprite Kreatur to have 3 clones");
  t.assert.equal(t.getSprite("Gobo").getCloneCount(), 0, "Expected Sprite Gobo to have 0 clones");
  t.assert.equal(t.getSprite("Kreatur").direction, 90, 1, "Expected Sprite Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Gobo").direction, 90, 1, "Expected Sprite Gobo to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).direction, 90, 1, "Expected Clone 1 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).direction, 90, 1, "Expected Clone 2 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).direction, 90, 1, "Expected Clone 3 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").effects.color, 0, "Expected effect color of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.fisheye, 0, "Expected effect fisheye of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.whirl, 0, "Expected effect whirl of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.pixelate, 0, "Expected effect pixelate of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.mosaic, 0, "Expected effect mosaic of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.brightness, 0, "Expected effect brightness of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.ghost, 0, "Expected effect ghost of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.color, 0, "Expected effect color of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.fisheye, 0, "Expected effect fisheye of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.whirl, 0, "Expected effect whirl of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.pixelate, 0, "Expected effect pixelate of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.mosaic, 0, "Expected effect mosaic of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.brightness, 0, "Expected effect brightness of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.ghost, 0, "Expected effect ghost of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").layerOrder, 4, "Expected Sprite Kreatur to be at layer 4");
  t.assert.equal(t.getSprite("Gobo").layerOrder, 5, "Expected Sprite Gobo to be at layer 5");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Kreatur to be at layer 1");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).getLayerOrder(), 2, "Expected Clone 2 of Kreatur to be at layer 2");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).getLayerOrder(), 3, "Expected Clone 3 of Kreatur to be at layer 3");
  t.assert.withinRange(t.getSprite("Kreatur").x, 46, 5, "Expected Sprite Kreatur to have x-position 46 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").y, -81, 5, "Expected Sprite Kreatur to have y-position -81 +-5");
  t.assert.withinRange(t.getSprite("Gobo").x, -110, 5, "Expected Sprite Gobo to have x-position -110 +-5");
  t.assert.withinRange(t.getSprite("Gobo").y, 110, 5, "Expected Sprite Gobo to have y-position 110 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).x, 151, 5, "Expected Clone 1 of Kreatur to have x-position 151 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).y, -149, 5, "Expected Clone 1 of Kreatur to have y-position -149 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).x, 30, 5, "Expected Clone 2 of Kreatur to have x-position 30 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).y, 140, 5, "Expected Clone 2 of Kreatur to have y-position 140 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).x, 44, 5, "Expected Clone 3 of Kreatur to have x-position 44 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).y, 116, 5, "Expected Clone 3 of Kreatur to have y-position 116 +-5");
  t.assert.not(t.getSprite("Kreatur").sayText, "Expected Sprite Kreatur not to say anything");
  t.assert.equal(t.getSprite("Gobo").sayText, "Schon drei Punkte!", "Expected Sprite Gobo to say Schon drei Punkte!");
  t.assert.not(t.getSprite("Kreatur").getClone(1).sayText, "Expected Clone 1 of Kreatur not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(2).sayText, "Expected Clone 2 of Kreatur not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(3).sayText, "Expected Clone 3 of Kreatur not to say anything");
  t.assert.withinRange(t.getSprite("Kreatur").size, 499, 1, "Expected Sprite Kreatur to have size 499 +-1");
  t.assert.withinRange(t.getSprite("Gobo").size, 60, 1, "Expected Sprite Gobo to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).size, 64, 1, "Expected Clone 1 of Kreatur to have size 64 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).size, 74, 1, "Expected Clone 2 of Kreatur to have size 74 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).size, 67, 1, "Expected Clone 3 of Kreatur to have size 67 +-1");
  t.assert.not(t.getSprite("Kreatur").visible, "Expected Sprite Kreatur not to be visible");
  t.assert.ok(t.getSprite("Gobo").visible, "Expected Sprite Gobo to be visible");
  t.assert.not(t.getSprite("Kreatur").getClone(1).visible, "Expected Clone 1 of Kreatur not to be visible");
  t.assert.ok(t.getSprite("Kreatur").getClone(2).visible, "Expected Clone 2 of Kreatur to be visible");
  t.assert.not(t.getSprite("Kreatur").getClone(3).visible, "Expected Clone 3 of Kreatur not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").volume, 100, "Expected Sprite Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Gobo").volume, 100, "Expected Sprite Gobo to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).volume, 100, "Expected Clone 1 of Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).volume, 100, "Expected Clone 2 of Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).volume, 100, "Expected Clone 3 of Kreatur to have volume 100");
  t.clickCloneByCoords(30, 140, 1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kreatur").currentCostume, 2, "Expected Sprite Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Gobo").currentCostume, 0, "Expected Sprite Gobo to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).currentCostume, 2, "Expected Clone 1 of Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).currentCostume, 0, "Expected Clone 2 of Kreatur to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).currentCostume, 1, "Expected Clone 3 of Kreatur to have costume 1");
  t.assert.equal(t.getSprite("Kreatur").getCloneCount(), 3, "Expected Sprite Kreatur to have 3 clones");
  t.assert.equal(t.getSprite("Gobo").getCloneCount(), 0, "Expected Sprite Gobo to have 0 clones");
  t.assert.equal(t.getSprite("Kreatur").direction, 90, 1, "Expected Sprite Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Gobo").direction, 90, 1, "Expected Sprite Gobo to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).direction, 90, 1, "Expected Clone 1 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).direction, 90, 1, "Expected Clone 2 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).direction, 90, 1, "Expected Clone 3 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").effects.color, 0, "Expected effect color of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.fisheye, 0, "Expected effect fisheye of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.whirl, 0, "Expected effect whirl of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.pixelate, 0, "Expected effect pixelate of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.mosaic, 0, "Expected effect mosaic of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.brightness, 0, "Expected effect brightness of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.ghost, 0, "Expected effect ghost of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.color, 0, "Expected effect color of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.fisheye, 0, "Expected effect fisheye of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.whirl, 0, "Expected effect whirl of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.pixelate, 0, "Expected effect pixelate of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.mosaic, 0, "Expected effect mosaic of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.brightness, 0, "Expected effect brightness of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.ghost, 0, "Expected effect ghost of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").layerOrder, 4, "Expected Sprite Kreatur to be at layer 4");
  t.assert.equal(t.getSprite("Gobo").layerOrder, 5, "Expected Sprite Gobo to be at layer 5");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Kreatur to be at layer 1");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).getLayerOrder(), 2, "Expected Clone 2 of Kreatur to be at layer 2");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).getLayerOrder(), 3, "Expected Clone 3 of Kreatur to be at layer 3");
  t.assert.withinRange(t.getSprite("Kreatur").x, 46, 5, "Expected Sprite Kreatur to have x-position 46 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").y, -81, 5, "Expected Sprite Kreatur to have y-position -81 +-5");
  t.assert.withinRange(t.getSprite("Gobo").x, -110, 5, "Expected Sprite Gobo to have x-position -110 +-5");
  t.assert.withinRange(t.getSprite("Gobo").y, 110, 5, "Expected Sprite Gobo to have y-position 110 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).x, 151, 5, "Expected Clone 1 of Kreatur to have x-position 151 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).y, -149, 5, "Expected Clone 1 of Kreatur to have y-position -149 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).x, 30, 5, "Expected Clone 2 of Kreatur to have x-position 30 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).y, 140, 5, "Expected Clone 2 of Kreatur to have y-position 140 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).x, 44, 5, "Expected Clone 3 of Kreatur to have x-position 44 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).y, 116, 5, "Expected Clone 3 of Kreatur to have y-position 116 +-5");
  t.assert.not(t.getSprite("Kreatur").sayText, "Expected Sprite Kreatur not to say anything");
  t.assert.equal(t.getSprite("Gobo").sayText, "Schon drei Punkte!", "Expected Sprite Gobo to say Schon drei Punkte!");
  t.assert.not(t.getSprite("Kreatur").getClone(1).sayText, "Expected Clone 1 of Kreatur not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(2).sayText, "Expected Clone 2 of Kreatur not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(3).sayText, "Expected Clone 3 of Kreatur not to say anything");
  t.assert.withinRange(t.getSprite("Kreatur").size, 499, 1, "Expected Sprite Kreatur to have size 499 +-1");
  t.assert.withinRange(t.getSprite("Gobo").size, 60, 1, "Expected Sprite Gobo to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).size, 64, 1, "Expected Clone 1 of Kreatur to have size 64 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).size, 74, 1, "Expected Clone 2 of Kreatur to have size 74 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).size, 67, 1, "Expected Clone 3 of Kreatur to have size 67 +-1");
  t.assert.not(t.getSprite("Kreatur").visible, "Expected Sprite Kreatur not to be visible");
  t.assert.ok(t.getSprite("Gobo").visible, "Expected Sprite Gobo to be visible");
  t.assert.not(t.getSprite("Kreatur").getClone(1).visible, "Expected Clone 1 of Kreatur not to be visible");
  t.assert.not(t.getSprite("Kreatur").getClone(2).visible, "Expected Clone 2 of Kreatur not to be visible");
  t.assert.not(t.getSprite("Kreatur").getClone(3).visible, "Expected Clone 3 of Kreatur not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").volume, 100, "Expected Sprite Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Gobo").volume, 100, "Expected Sprite Gobo to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).volume, 100, "Expected Clone 1 of Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).volume, 100, "Expected Clone 2 of Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).volume, 100, "Expected Clone 3 of Kreatur to have volume 100");
  await t.runForSteps(12);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kreatur").currentCostume, 2, "Expected Sprite Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Gobo").currentCostume, 0, "Expected Sprite Gobo to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).currentCostume, 2, "Expected Clone 1 of Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).currentCostume, 0, "Expected Clone 2 of Kreatur to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).currentCostume, 1, "Expected Clone 3 of Kreatur to have costume 1");
  t.assert.equal(t.getSprite("Kreatur").getCloneCount(), 3, "Expected Sprite Kreatur to have 3 clones");
  t.assert.equal(t.getSprite("Gobo").getCloneCount(), 0, "Expected Sprite Gobo to have 0 clones");
  t.assert.equal(t.getSprite("Kreatur").direction, 90, 1, "Expected Sprite Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Gobo").direction, 90, 1, "Expected Sprite Gobo to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).direction, 90, 1, "Expected Clone 1 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).direction, 90, 1, "Expected Clone 2 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).direction, 90, 1, "Expected Clone 3 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").effects.color, 0, "Expected effect color of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.fisheye, 0, "Expected effect fisheye of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.whirl, 0, "Expected effect whirl of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.pixelate, 0, "Expected effect pixelate of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.mosaic, 0, "Expected effect mosaic of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.brightness, 0, "Expected effect brightness of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.ghost, 0, "Expected effect ghost of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.color, 0, "Expected effect color of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.fisheye, 0, "Expected effect fisheye of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.whirl, 0, "Expected effect whirl of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.pixelate, 0, "Expected effect pixelate of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.mosaic, 0, "Expected effect mosaic of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.brightness, 0, "Expected effect brightness of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.ghost, 0, "Expected effect ghost of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").layerOrder, 4, "Expected Sprite Kreatur to be at layer 4");
  t.assert.equal(t.getSprite("Gobo").layerOrder, 5, "Expected Sprite Gobo to be at layer 5");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Kreatur to be at layer 1");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).getLayerOrder(), 2, "Expected Clone 2 of Kreatur to be at layer 2");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).getLayerOrder(), 3, "Expected Clone 3 of Kreatur to be at layer 3");
  t.assert.withinRange(t.getSprite("Kreatur").x, 46, 5, "Expected Sprite Kreatur to have x-position 46 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").y, -81, 5, "Expected Sprite Kreatur to have y-position -81 +-5");
  t.assert.withinRange(t.getSprite("Gobo").x, -110, 5, "Expected Sprite Gobo to have x-position -110 +-5");
  t.assert.withinRange(t.getSprite("Gobo").y, 110, 5, "Expected Sprite Gobo to have y-position 110 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).x, 151, 5, "Expected Clone 1 of Kreatur to have x-position 151 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).y, -149, 5, "Expected Clone 1 of Kreatur to have y-position -149 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).x, 30, 5, "Expected Clone 2 of Kreatur to have x-position 30 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).y, 140, 5, "Expected Clone 2 of Kreatur to have y-position 140 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).x, 44, 5, "Expected Clone 3 of Kreatur to have x-position 44 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).y, 116, 5, "Expected Clone 3 of Kreatur to have y-position 116 +-5");
  t.assert.not(t.getSprite("Kreatur").sayText, "Expected Sprite Kreatur not to say anything");
  t.assert.equal(t.getSprite("Gobo").sayText, "Schon drei Punkte!", "Expected Sprite Gobo to say Schon drei Punkte!");
  t.assert.not(t.getSprite("Kreatur").getClone(1).sayText, "Expected Clone 1 of Kreatur not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(2).sayText, "Expected Clone 2 of Kreatur not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(3).sayText, "Expected Clone 3 of Kreatur not to say anything");
  t.assert.withinRange(t.getSprite("Kreatur").size, 499, 1, "Expected Sprite Kreatur to have size 499 +-1");
  t.assert.withinRange(t.getSprite("Gobo").size, 60, 1, "Expected Sprite Gobo to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).size, 64, 1, "Expected Clone 1 of Kreatur to have size 64 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).size, 74, 1, "Expected Clone 2 of Kreatur to have size 74 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).size, 67, 1, "Expected Clone 3 of Kreatur to have size 67 +-1");
  t.assert.not(t.getSprite("Kreatur").visible, "Expected Sprite Kreatur not to be visible");
  t.assert.ok(t.getSprite("Gobo").visible, "Expected Sprite Gobo to be visible");
  t.assert.not(t.getSprite("Kreatur").getClone(1).visible, "Expected Clone 1 of Kreatur not to be visible");
  t.assert.not(t.getSprite("Kreatur").getClone(2).visible, "Expected Clone 2 of Kreatur not to be visible");
  t.assert.not(t.getSprite("Kreatur").getClone(3).visible, "Expected Clone 3 of Kreatur not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").volume, 100, "Expected Sprite Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Gobo").volume, 100, "Expected Sprite Gobo to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).volume, 100, "Expected Clone 1 of Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).volume, 100, "Expected Clone 2 of Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).volume, 100, "Expected Clone 3 of Kreatur to have volume 100");
  await t.runForSteps(17);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kreatur").currentCostume, 2, "Expected Sprite Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Gobo").currentCostume, 0, "Expected Sprite Gobo to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).currentCostume, 2, "Expected Clone 1 of Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).currentCostume, 0, "Expected Clone 2 of Kreatur to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).currentCostume, 1, "Expected Clone 3 of Kreatur to have costume 1");
  t.assert.equal(t.getSprite("Kreatur").getCloneCount(), 3, "Expected Sprite Kreatur to have 3 clones");
  t.assert.equal(t.getSprite("Gobo").getCloneCount(), 0, "Expected Sprite Gobo to have 0 clones");
  t.assert.equal(t.getSprite("Kreatur").direction, 90, 1, "Expected Sprite Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Gobo").direction, 90, 1, "Expected Sprite Gobo to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).direction, 90, 1, "Expected Clone 1 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).direction, 90, 1, "Expected Clone 2 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).direction, 90, 1, "Expected Clone 3 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").effects.color, 0, "Expected effect color of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.fisheye, 0, "Expected effect fisheye of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.whirl, 0, "Expected effect whirl of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.pixelate, 0, "Expected effect pixelate of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.mosaic, 0, "Expected effect mosaic of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.brightness, 0, "Expected effect brightness of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.ghost, 0, "Expected effect ghost of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.color, 0, "Expected effect color of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.fisheye, 0, "Expected effect fisheye of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.whirl, 0, "Expected effect whirl of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.pixelate, 0, "Expected effect pixelate of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.mosaic, 0, "Expected effect mosaic of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.brightness, 0, "Expected effect brightness of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.ghost, 0, "Expected effect ghost of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").layerOrder, 4, "Expected Sprite Kreatur to be at layer 4");
  t.assert.equal(t.getSprite("Gobo").layerOrder, 5, "Expected Sprite Gobo to be at layer 5");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Kreatur to be at layer 1");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).getLayerOrder(), 2, "Expected Clone 2 of Kreatur to be at layer 2");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).getLayerOrder(), 3, "Expected Clone 3 of Kreatur to be at layer 3");
  t.assert.withinRange(t.getSprite("Kreatur").x, 46, 5, "Expected Sprite Kreatur to have x-position 46 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").y, -81, 5, "Expected Sprite Kreatur to have y-position -81 +-5");
  t.assert.withinRange(t.getSprite("Gobo").x, -110, 5, "Expected Sprite Gobo to have x-position -110 +-5");
  t.assert.withinRange(t.getSprite("Gobo").y, 110, 5, "Expected Sprite Gobo to have y-position 110 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).x, 151, 5, "Expected Clone 1 of Kreatur to have x-position 151 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).y, -149, 5, "Expected Clone 1 of Kreatur to have y-position -149 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).x, 30, 5, "Expected Clone 2 of Kreatur to have x-position 30 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).y, 140, 5, "Expected Clone 2 of Kreatur to have y-position 140 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).x, 44, 5, "Expected Clone 3 of Kreatur to have x-position 44 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).y, 116, 5, "Expected Clone 3 of Kreatur to have y-position 116 +-5");
  t.assert.not(t.getSprite("Kreatur").sayText, "Expected Sprite Kreatur not to say anything");
  t.assert.equal(t.getSprite("Gobo").sayText, "Schon drei Punkte!", "Expected Sprite Gobo to say Schon drei Punkte!");
  t.assert.not(t.getSprite("Kreatur").getClone(1).sayText, "Expected Clone 1 of Kreatur not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(2).sayText, "Expected Clone 2 of Kreatur not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(3).sayText, "Expected Clone 3 of Kreatur not to say anything");
  t.assert.withinRange(t.getSprite("Kreatur").size, 499, 1, "Expected Sprite Kreatur to have size 499 +-1");
  t.assert.withinRange(t.getSprite("Gobo").size, 60, 1, "Expected Sprite Gobo to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).size, 76, 1, "Expected Clone 1 of Kreatur to have size 76 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).size, 74, 1, "Expected Clone 2 of Kreatur to have size 74 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).size, 67, 1, "Expected Clone 3 of Kreatur to have size 67 +-1");
  t.assert.not(t.getSprite("Kreatur").visible, "Expected Sprite Kreatur not to be visible");
  t.assert.ok(t.getSprite("Gobo").visible, "Expected Sprite Gobo to be visible");
  t.assert.not(t.getSprite("Kreatur").getClone(1).visible, "Expected Clone 1 of Kreatur not to be visible");
  t.assert.not(t.getSprite("Kreatur").getClone(2).visible, "Expected Clone 2 of Kreatur not to be visible");
  t.assert.not(t.getSprite("Kreatur").getClone(3).visible, "Expected Clone 3 of Kreatur not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").volume, 100, "Expected Sprite Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Gobo").volume, 100, "Expected Sprite Gobo to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).volume, 100, "Expected Clone 1 of Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).volume, 100, "Expected Clone 2 of Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).volume, 100, "Expected Clone 3 of Kreatur to have volume 100");
  await t.runForSteps(42);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kreatur").currentCostume, 2, "Expected Sprite Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Gobo").currentCostume, 0, "Expected Sprite Gobo to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).currentCostume, 2, "Expected Clone 1 of Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).currentCostume, 0, "Expected Clone 2 of Kreatur to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).currentCostume, 1, "Expected Clone 3 of Kreatur to have costume 1");
  t.assert.equal(t.getSprite("Kreatur").getCloneCount(), 3, "Expected Sprite Kreatur to have 3 clones");
  t.assert.equal(t.getSprite("Gobo").getCloneCount(), 0, "Expected Sprite Gobo to have 0 clones");
  t.assert.equal(t.getSprite("Kreatur").direction, 90, 1, "Expected Sprite Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Gobo").direction, 90, 1, "Expected Sprite Gobo to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).direction, 90, 1, "Expected Clone 1 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).direction, 90, 1, "Expected Clone 2 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).direction, 90, 1, "Expected Clone 3 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").effects.color, 0, "Expected effect color of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.fisheye, 0, "Expected effect fisheye of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.whirl, 0, "Expected effect whirl of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.pixelate, 0, "Expected effect pixelate of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.mosaic, 0, "Expected effect mosaic of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.brightness, 0, "Expected effect brightness of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.ghost, 0, "Expected effect ghost of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.color, 0, "Expected effect color of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.fisheye, 0, "Expected effect fisheye of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.whirl, 0, "Expected effect whirl of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.pixelate, 0, "Expected effect pixelate of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.mosaic, 0, "Expected effect mosaic of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.brightness, 0, "Expected effect brightness of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.ghost, 0, "Expected effect ghost of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").layerOrder, 4, "Expected Sprite Kreatur to be at layer 4");
  t.assert.equal(t.getSprite("Gobo").layerOrder, 5, "Expected Sprite Gobo to be at layer 5");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Kreatur to be at layer 1");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).getLayerOrder(), 2, "Expected Clone 2 of Kreatur to be at layer 2");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).getLayerOrder(), 3, "Expected Clone 3 of Kreatur to be at layer 3");
  t.assert.withinRange(t.getSprite("Kreatur").x, 46, 5, "Expected Sprite Kreatur to have x-position 46 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").y, -81, 5, "Expected Sprite Kreatur to have y-position -81 +-5");
  t.assert.withinRange(t.getSprite("Gobo").x, -110, 5, "Expected Sprite Gobo to have x-position -110 +-5");
  t.assert.withinRange(t.getSprite("Gobo").y, 110, 5, "Expected Sprite Gobo to have y-position 110 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).x, 183, 5, "Expected Clone 1 of Kreatur to have x-position 183 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).y, -176, 5, "Expected Clone 1 of Kreatur to have y-position -176 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).x, 118, 5, "Expected Clone 2 of Kreatur to have x-position 118 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).y, -179, 5, "Expected Clone 2 of Kreatur to have y-position -179 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).x, 44, 5, "Expected Clone 3 of Kreatur to have x-position 44 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).y, 116, 5, "Expected Clone 3 of Kreatur to have y-position 116 +-5");
  t.assert.not(t.getSprite("Kreatur").sayText, "Expected Sprite Kreatur not to say anything");
  t.assert.not(t.getSprite("Gobo").sayText, "Expected Sprite Gobo not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(1).sayText, "Expected Clone 1 of Kreatur not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(2).sayText, "Expected Clone 2 of Kreatur not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(3).sayText, "Expected Clone 3 of Kreatur not to say anything");
  t.assert.withinRange(t.getSprite("Kreatur").size, 499, 1, "Expected Sprite Kreatur to have size 499 +-1");
  t.assert.withinRange(t.getSprite("Gobo").size, 60, 1, "Expected Sprite Gobo to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).size, 76, 1, "Expected Clone 1 of Kreatur to have size 76 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).size, 74, 1, "Expected Clone 2 of Kreatur to have size 74 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).size, 71, 1, "Expected Clone 3 of Kreatur to have size 71 +-1");
  t.assert.not(t.getSprite("Kreatur").visible, "Expected Sprite Kreatur not to be visible");
  t.assert.not(t.getSprite("Gobo").visible, "Expected Sprite Gobo not to be visible");
  t.assert.ok(t.getSprite("Kreatur").getClone(1).visible, "Expected Clone 1 of Kreatur to be visible");
  t.assert.ok(t.getSprite("Kreatur").getClone(2).visible, "Expected Clone 2 of Kreatur to be visible");
  t.assert.not(t.getSprite("Kreatur").getClone(3).visible, "Expected Clone 3 of Kreatur not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").volume, 100, "Expected Sprite Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Gobo").volume, 100, "Expected Sprite Gobo to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).volume, 100, "Expected Clone 1 of Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).volume, 100, "Expected Clone 2 of Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).volume, 100, "Expected Clone 3 of Kreatur to have volume 100");
  t.clickCloneByCoords(183, -176, 1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kreatur").currentCostume, 2, "Expected Sprite Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Gobo").currentCostume, 0, "Expected Sprite Gobo to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).currentCostume, 2, "Expected Clone 1 of Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).currentCostume, 0, "Expected Clone 2 of Kreatur to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).currentCostume, 1, "Expected Clone 3 of Kreatur to have costume 1");
  t.assert.equal(t.getSprite("Kreatur").getCloneCount(), 3, "Expected Sprite Kreatur to have 3 clones");
  t.assert.equal(t.getSprite("Gobo").getCloneCount(), 0, "Expected Sprite Gobo to have 0 clones");
  t.assert.equal(t.getSprite("Kreatur").direction, 90, 1, "Expected Sprite Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Gobo").direction, 90, 1, "Expected Sprite Gobo to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).direction, 90, 1, "Expected Clone 1 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).direction, 90, 1, "Expected Clone 2 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).direction, 90, 1, "Expected Clone 3 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").effects.color, 0, "Expected effect color of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.fisheye, 0, "Expected effect fisheye of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.whirl, 0, "Expected effect whirl of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.pixelate, 0, "Expected effect pixelate of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.mosaic, 0, "Expected effect mosaic of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.brightness, 0, "Expected effect brightness of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.ghost, 0, "Expected effect ghost of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.color, 0, "Expected effect color of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.fisheye, 0, "Expected effect fisheye of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.whirl, 0, "Expected effect whirl of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.pixelate, 0, "Expected effect pixelate of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.mosaic, 0, "Expected effect mosaic of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.brightness, 0, "Expected effect brightness of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.ghost, 0, "Expected effect ghost of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").layerOrder, 4, "Expected Sprite Kreatur to be at layer 4");
  t.assert.equal(t.getSprite("Gobo").layerOrder, 5, "Expected Sprite Gobo to be at layer 5");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Kreatur to be at layer 1");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).getLayerOrder(), 2, "Expected Clone 2 of Kreatur to be at layer 2");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).getLayerOrder(), 3, "Expected Clone 3 of Kreatur to be at layer 3");
  t.assert.withinRange(t.getSprite("Kreatur").x, 46, 5, "Expected Sprite Kreatur to have x-position 46 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").y, -81, 5, "Expected Sprite Kreatur to have y-position -81 +-5");
  t.assert.withinRange(t.getSprite("Gobo").x, -110, 5, "Expected Sprite Gobo to have x-position -110 +-5");
  t.assert.withinRange(t.getSprite("Gobo").y, 110, 5, "Expected Sprite Gobo to have y-position 110 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).x, 183, 5, "Expected Clone 1 of Kreatur to have x-position 183 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).y, -176, 5, "Expected Clone 1 of Kreatur to have y-position -176 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).x, 118, 5, "Expected Clone 2 of Kreatur to have x-position 118 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).y, -179, 5, "Expected Clone 2 of Kreatur to have y-position -179 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).x, 44, 5, "Expected Clone 3 of Kreatur to have x-position 44 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).y, 116, 5, "Expected Clone 3 of Kreatur to have y-position 116 +-5");
  t.assert.not(t.getSprite("Kreatur").sayText, "Expected Sprite Kreatur not to say anything");
  t.assert.not(t.getSprite("Gobo").sayText, "Expected Sprite Gobo not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(1).sayText, "Expected Clone 1 of Kreatur not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(2).sayText, "Expected Clone 2 of Kreatur not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(3).sayText, "Expected Clone 3 of Kreatur not to say anything");
  t.assert.withinRange(t.getSprite("Kreatur").size, 499, 1, "Expected Sprite Kreatur to have size 499 +-1");
  t.assert.withinRange(t.getSprite("Gobo").size, 60, 1, "Expected Sprite Gobo to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).size, 76, 1, "Expected Clone 1 of Kreatur to have size 76 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).size, 74, 1, "Expected Clone 2 of Kreatur to have size 74 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).size, 71, 1, "Expected Clone 3 of Kreatur to have size 71 +-1");
  t.assert.not(t.getSprite("Kreatur").visible, "Expected Sprite Kreatur not to be visible");
  t.assert.not(t.getSprite("Gobo").visible, "Expected Sprite Gobo not to be visible");
  t.assert.not(t.getSprite("Kreatur").getClone(1).visible, "Expected Clone 1 of Kreatur not to be visible");
  t.assert.ok(t.getSprite("Kreatur").getClone(2).visible, "Expected Clone 2 of Kreatur to be visible");
  t.assert.not(t.getSprite("Kreatur").getClone(3).visible, "Expected Clone 3 of Kreatur not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").volume, 100, "Expected Sprite Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Gobo").volume, 100, "Expected Sprite Gobo to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).volume, 100, "Expected Clone 1 of Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).volume, 100, "Expected Clone 2 of Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).volume, 100, "Expected Clone 3 of Kreatur to have volume 100");
  t.clickCloneByCoords(118, -179, 1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kreatur").currentCostume, 2, "Expected Sprite Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Gobo").currentCostume, 0, "Expected Sprite Gobo to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).currentCostume, 2, "Expected Clone 1 of Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).currentCostume, 0, "Expected Clone 2 of Kreatur to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).currentCostume, 1, "Expected Clone 3 of Kreatur to have costume 1");
  t.assert.equal(t.getSprite("Kreatur").getCloneCount(), 3, "Expected Sprite Kreatur to have 3 clones");
  t.assert.equal(t.getSprite("Gobo").getCloneCount(), 0, "Expected Sprite Gobo to have 0 clones");
  t.assert.equal(t.getSprite("Kreatur").direction, 90, 1, "Expected Sprite Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Gobo").direction, 90, 1, "Expected Sprite Gobo to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).direction, 90, 1, "Expected Clone 1 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).direction, 90, 1, "Expected Clone 2 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).direction, 90, 1, "Expected Clone 3 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").effects.color, 0, "Expected effect color of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.fisheye, 0, "Expected effect fisheye of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.whirl, 0, "Expected effect whirl of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.pixelate, 0, "Expected effect pixelate of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.mosaic, 0, "Expected effect mosaic of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.brightness, 0, "Expected effect brightness of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.ghost, 0, "Expected effect ghost of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.color, 0, "Expected effect color of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.fisheye, 0, "Expected effect fisheye of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.whirl, 0, "Expected effect whirl of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.pixelate, 0, "Expected effect pixelate of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.mosaic, 0, "Expected effect mosaic of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.brightness, 0, "Expected effect brightness of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.ghost, 0, "Expected effect ghost of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").layerOrder, 4, "Expected Sprite Kreatur to be at layer 4");
  t.assert.equal(t.getSprite("Gobo").layerOrder, 5, "Expected Sprite Gobo to be at layer 5");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Kreatur to be at layer 1");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).getLayerOrder(), 2, "Expected Clone 2 of Kreatur to be at layer 2");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).getLayerOrder(), 3, "Expected Clone 3 of Kreatur to be at layer 3");
  t.assert.withinRange(t.getSprite("Kreatur").x, 46, 5, "Expected Sprite Kreatur to have x-position 46 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").y, -81, 5, "Expected Sprite Kreatur to have y-position -81 +-5");
  t.assert.withinRange(t.getSprite("Gobo").x, -110, 5, "Expected Sprite Gobo to have x-position -110 +-5");
  t.assert.withinRange(t.getSprite("Gobo").y, 110, 5, "Expected Sprite Gobo to have y-position 110 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).x, 183, 5, "Expected Clone 1 of Kreatur to have x-position 183 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).y, -176, 5, "Expected Clone 1 of Kreatur to have y-position -176 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).x, 118, 5, "Expected Clone 2 of Kreatur to have x-position 118 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).y, -179, 5, "Expected Clone 2 of Kreatur to have y-position -179 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).x, 44, 5, "Expected Clone 3 of Kreatur to have x-position 44 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).y, 116, 5, "Expected Clone 3 of Kreatur to have y-position 116 +-5");
  t.assert.not(t.getSprite("Kreatur").sayText, "Expected Sprite Kreatur not to say anything");
  t.assert.not(t.getSprite("Gobo").sayText, "Expected Sprite Gobo not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(1).sayText, "Expected Clone 1 of Kreatur not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(2).sayText, "Expected Clone 2 of Kreatur not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(3).sayText, "Expected Clone 3 of Kreatur not to say anything");
  t.assert.withinRange(t.getSprite("Kreatur").size, 499, 1, "Expected Sprite Kreatur to have size 499 +-1");
  t.assert.withinRange(t.getSprite("Gobo").size, 60, 1, "Expected Sprite Gobo to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).size, 76, 1, "Expected Clone 1 of Kreatur to have size 76 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).size, 74, 1, "Expected Clone 2 of Kreatur to have size 74 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).size, 71, 1, "Expected Clone 3 of Kreatur to have size 71 +-1");
  t.assert.not(t.getSprite("Kreatur").visible, "Expected Sprite Kreatur not to be visible");
  t.assert.not(t.getSprite("Gobo").visible, "Expected Sprite Gobo not to be visible");
  t.assert.not(t.getSprite("Kreatur").getClone(1).visible, "Expected Clone 1 of Kreatur not to be visible");
  t.assert.ok(t.getSprite("Kreatur").getClone(2).visible, "Expected Clone 2 of Kreatur to be visible");
  t.assert.not(t.getSprite("Kreatur").getClone(3).visible, "Expected Clone 3 of Kreatur not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").volume, 100, "Expected Sprite Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Gobo").volume, 100, "Expected Sprite Gobo to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).volume, 100, "Expected Clone 1 of Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).volume, 100, "Expected Clone 2 of Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).volume, 100, "Expected Clone 3 of Kreatur to have volume 100");
  t.clickCloneByCoords(118, -179, 1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kreatur").currentCostume, 2, "Expected Sprite Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Gobo").currentCostume, 0, "Expected Sprite Gobo to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).currentCostume, 2, "Expected Clone 1 of Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).currentCostume, 0, "Expected Clone 2 of Kreatur to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).currentCostume, 1, "Expected Clone 3 of Kreatur to have costume 1");
  t.assert.equal(t.getSprite("Kreatur").getCloneCount(), 3, "Expected Sprite Kreatur to have 3 clones");
  t.assert.equal(t.getSprite("Gobo").getCloneCount(), 0, "Expected Sprite Gobo to have 0 clones");
  t.assert.equal(t.getSprite("Kreatur").direction, 90, 1, "Expected Sprite Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Gobo").direction, 90, 1, "Expected Sprite Gobo to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).direction, 90, 1, "Expected Clone 1 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).direction, 90, 1, "Expected Clone 2 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).direction, 90, 1, "Expected Clone 3 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").effects.color, 0, "Expected effect color of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.fisheye, 0, "Expected effect fisheye of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.whirl, 0, "Expected effect whirl of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.pixelate, 0, "Expected effect pixelate of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.mosaic, 0, "Expected effect mosaic of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.brightness, 0, "Expected effect brightness of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.ghost, 0, "Expected effect ghost of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.color, 0, "Expected effect color of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.fisheye, 0, "Expected effect fisheye of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.whirl, 0, "Expected effect whirl of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.pixelate, 0, "Expected effect pixelate of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.mosaic, 0, "Expected effect mosaic of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.brightness, 0, "Expected effect brightness of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.ghost, 0, "Expected effect ghost of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").layerOrder, 4, "Expected Sprite Kreatur to be at layer 4");
  t.assert.equal(t.getSprite("Gobo").layerOrder, 5, "Expected Sprite Gobo to be at layer 5");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Kreatur to be at layer 1");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).getLayerOrder(), 2, "Expected Clone 2 of Kreatur to be at layer 2");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).getLayerOrder(), 3, "Expected Clone 3 of Kreatur to be at layer 3");
  t.assert.withinRange(t.getSprite("Kreatur").x, 46, 5, "Expected Sprite Kreatur to have x-position 46 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").y, -81, 5, "Expected Sprite Kreatur to have y-position -81 +-5");
  t.assert.withinRange(t.getSprite("Gobo").x, -110, 5, "Expected Sprite Gobo to have x-position -110 +-5");
  t.assert.withinRange(t.getSprite("Gobo").y, 110, 5, "Expected Sprite Gobo to have y-position 110 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).x, 183, 5, "Expected Clone 1 of Kreatur to have x-position 183 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).y, -176, 5, "Expected Clone 1 of Kreatur to have y-position -176 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).x, 118, 5, "Expected Clone 2 of Kreatur to have x-position 118 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).y, -179, 5, "Expected Clone 2 of Kreatur to have y-position -179 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).x, 44, 5, "Expected Clone 3 of Kreatur to have x-position 44 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).y, 116, 5, "Expected Clone 3 of Kreatur to have y-position 116 +-5");
  t.assert.not(t.getSprite("Kreatur").sayText, "Expected Sprite Kreatur not to say anything");
  t.assert.not(t.getSprite("Gobo").sayText, "Expected Sprite Gobo not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(1).sayText, "Expected Clone 1 of Kreatur not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(2).sayText, "Expected Clone 2 of Kreatur not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(3).sayText, "Expected Clone 3 of Kreatur not to say anything");
  t.assert.withinRange(t.getSprite("Kreatur").size, 499, 1, "Expected Sprite Kreatur to have size 499 +-1");
  t.assert.withinRange(t.getSprite("Gobo").size, 60, 1, "Expected Sprite Gobo to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).size, 76, 1, "Expected Clone 1 of Kreatur to have size 76 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).size, 74, 1, "Expected Clone 2 of Kreatur to have size 74 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).size, 71, 1, "Expected Clone 3 of Kreatur to have size 71 +-1");
  t.assert.not(t.getSprite("Kreatur").visible, "Expected Sprite Kreatur not to be visible");
  t.assert.not(t.getSprite("Gobo").visible, "Expected Sprite Gobo not to be visible");
  t.assert.not(t.getSprite("Kreatur").getClone(1).visible, "Expected Clone 1 of Kreatur not to be visible");
  t.assert.not(t.getSprite("Kreatur").getClone(2).visible, "Expected Clone 2 of Kreatur not to be visible");
  t.assert.not(t.getSprite("Kreatur").getClone(3).visible, "Expected Clone 3 of Kreatur not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").volume, 100, "Expected Sprite Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Gobo").volume, 100, "Expected Sprite Gobo to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).volume, 100, "Expected Clone 1 of Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).volume, 100, "Expected Clone 2 of Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).volume, 100, "Expected Clone 3 of Kreatur to have volume 100");
  await t.runForSteps(21);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kreatur").currentCostume, 2, "Expected Sprite Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Gobo").currentCostume, 0, "Expected Sprite Gobo to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).currentCostume, 2, "Expected Clone 1 of Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).currentCostume, 0, "Expected Clone 2 of Kreatur to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).currentCostume, 1, "Expected Clone 3 of Kreatur to have costume 1");
  t.assert.equal(t.getSprite("Kreatur").getCloneCount(), 3, "Expected Sprite Kreatur to have 3 clones");
  t.assert.equal(t.getSprite("Gobo").getCloneCount(), 0, "Expected Sprite Gobo to have 0 clones");
  t.assert.equal(t.getSprite("Kreatur").direction, 90, 1, "Expected Sprite Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Gobo").direction, 90, 1, "Expected Sprite Gobo to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).direction, 90, 1, "Expected Clone 1 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).direction, 90, 1, "Expected Clone 2 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).direction, 90, 1, "Expected Clone 3 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").effects.color, 0, "Expected effect color of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.fisheye, 0, "Expected effect fisheye of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.whirl, 0, "Expected effect whirl of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.pixelate, 0, "Expected effect pixelate of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.mosaic, 0, "Expected effect mosaic of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.brightness, 0, "Expected effect brightness of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.ghost, 0, "Expected effect ghost of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.color, 0, "Expected effect color of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.fisheye, 0, "Expected effect fisheye of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.whirl, 0, "Expected effect whirl of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.pixelate, 0, "Expected effect pixelate of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.mosaic, 0, "Expected effect mosaic of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.brightness, 0, "Expected effect brightness of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.ghost, 0, "Expected effect ghost of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").layerOrder, 4, "Expected Sprite Kreatur to be at layer 4");
  t.assert.equal(t.getSprite("Gobo").layerOrder, 5, "Expected Sprite Gobo to be at layer 5");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Kreatur to be at layer 1");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).getLayerOrder(), 2, "Expected Clone 2 of Kreatur to be at layer 2");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).getLayerOrder(), 3, "Expected Clone 3 of Kreatur to be at layer 3");
  t.assert.withinRange(t.getSprite("Kreatur").x, 46, 5, "Expected Sprite Kreatur to have x-position 46 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").y, -81, 5, "Expected Sprite Kreatur to have y-position -81 +-5");
  t.assert.withinRange(t.getSprite("Gobo").x, -110, 5, "Expected Sprite Gobo to have x-position -110 +-5");
  t.assert.withinRange(t.getSprite("Gobo").y, 110, 5, "Expected Sprite Gobo to have y-position 110 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).x, 183, 5, "Expected Clone 1 of Kreatur to have x-position 183 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).y, -176, 5, "Expected Clone 1 of Kreatur to have y-position -176 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).x, 118, 5, "Expected Clone 2 of Kreatur to have x-position 118 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).y, -179, 5, "Expected Clone 2 of Kreatur to have y-position -179 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).x, 213, 5, "Expected Clone 3 of Kreatur to have x-position 213 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).y, 132, 5, "Expected Clone 3 of Kreatur to have y-position 132 +-5");
  t.assert.not(t.getSprite("Kreatur").sayText, "Expected Sprite Kreatur not to say anything");
  t.assert.not(t.getSprite("Gobo").sayText, "Expected Sprite Gobo not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(1).sayText, "Expected Clone 1 of Kreatur not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(2).sayText, "Expected Clone 2 of Kreatur not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(3).sayText, "Expected Clone 3 of Kreatur not to say anything");
  t.assert.withinRange(t.getSprite("Kreatur").size, 499, 1, "Expected Sprite Kreatur to have size 499 +-1");
  t.assert.withinRange(t.getSprite("Gobo").size, 60, 1, "Expected Sprite Gobo to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).size, 76, 1, "Expected Clone 1 of Kreatur to have size 76 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).size, 61, 1, "Expected Clone 2 of Kreatur to have size 61 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).size, 71, 1, "Expected Clone 3 of Kreatur to have size 71 +-1");
  t.assert.not(t.getSprite("Kreatur").visible, "Expected Sprite Kreatur not to be visible");
  t.assert.not(t.getSprite("Gobo").visible, "Expected Sprite Gobo not to be visible");
  t.assert.not(t.getSprite("Kreatur").getClone(1).visible, "Expected Clone 1 of Kreatur not to be visible");
  t.assert.not(t.getSprite("Kreatur").getClone(2).visible, "Expected Clone 2 of Kreatur not to be visible");
  t.assert.ok(t.getSprite("Kreatur").getClone(3).visible, "Expected Clone 3 of Kreatur to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").volume, 100, "Expected Sprite Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Gobo").volume, 100, "Expected Sprite Gobo to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).volume, 100, "Expected Clone 1 of Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).volume, 100, "Expected Clone 2 of Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).volume, 100, "Expected Clone 3 of Kreatur to have volume 100");
  await t.runForSteps(100);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kreatur").currentCostume, 2, "Expected Sprite Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Gobo").currentCostume, 0, "Expected Sprite Gobo to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getCloneCount(), 0, "Expected Sprite Kreatur to have 0 clones");
  t.assert.equal(t.getSprite("Gobo").getCloneCount(), 0, "Expected Sprite Gobo to have 0 clones");
  t.assert.equal(t.getSprite("Kreatur").direction, 90, 1, "Expected Sprite Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Gobo").direction, 90, 1, "Expected Sprite Gobo to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").effects.color, 0, "Expected effect color of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.fisheye, 0, "Expected effect fisheye of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.whirl, 0, "Expected effect whirl of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.pixelate, 0, "Expected effect pixelate of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.mosaic, 0, "Expected effect mosaic of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.brightness, 0, "Expected effect brightness of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.ghost, 0, "Expected effect ghost of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.color, 0, "Expected effect color of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.fisheye, 0, "Expected effect fisheye of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.whirl, 0, "Expected effect whirl of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.pixelate, 0, "Expected effect pixelate of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.mosaic, 0, "Expected effect mosaic of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.brightness, 0, "Expected effect brightness of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.ghost, 0, "Expected effect ghost of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Kreatur").layerOrder, 1, "Expected Sprite Kreatur to be at layer 1");
  t.assert.equal(t.getSprite("Gobo").layerOrder, 2, "Expected Sprite Gobo to be at layer 2");
  t.assert.withinRange(t.getSprite("Kreatur").x, 46, 5, "Expected Sprite Kreatur to have x-position 46 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").y, -81, 5, "Expected Sprite Kreatur to have y-position -81 +-5");
  t.assert.withinRange(t.getSprite("Gobo").x, -110, 5, "Expected Sprite Gobo to have x-position -110 +-5");
  t.assert.withinRange(t.getSprite("Gobo").y, 110, 5, "Expected Sprite Gobo to have y-position 110 +-5");
  t.assert.not(t.getSprite("Kreatur").sayText, "Expected Sprite Kreatur not to say anything");
  t.assert.not(t.getSprite("Gobo").sayText, "Expected Sprite Gobo not to say anything");
  t.assert.withinRange(t.getSprite("Kreatur").size, 499, 1, "Expected Sprite Kreatur to have size 499 +-1");
  t.assert.withinRange(t.getSprite("Gobo").size, 60, 1, "Expected Sprite Gobo to have size 60 +-1");
  t.assert.not(t.getSprite("Kreatur").visible, "Expected Sprite Kreatur not to be visible");
  t.assert.not(t.getSprite("Gobo").visible, "Expected Sprite Gobo not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").volume, 100, "Expected Sprite Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Gobo").volume, 100, "Expected Sprite Gobo to have volume 100");
  t.end();
}

module.exports = [
  {
      test: test0,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687936708192',
      type: 'standard',
  }
]
