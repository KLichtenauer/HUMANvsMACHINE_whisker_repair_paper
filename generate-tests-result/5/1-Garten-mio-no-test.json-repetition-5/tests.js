const test0 = async function (t) {
  t.keyPress('up arrow', 4);
  await t.runForSteps(4);
  await t.runForSteps(1);
  t.keyPress('right arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.keyPress('up arrow', 2);
  await t.runForSteps(2);
  await t.runForSteps(1);
  t.keyPress('up arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.keyPress('up arrow', 3);
  await t.runForSteps(3);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Blume").direction, 90, 1, "Expected Sprite Blume to face in direction 90 +-1");
  t.dragSprite('Blume', -106.9167387672476, 23.090571418664858, null);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Blume").x, -106.9167387672476, 5, "Expected Sprite Blume to have x-position -106.9167387672476 +-5");
  t.assert.withinRange(t.getSprite("Blume").y, 23.090571418664858, 5, "Expected Sprite Blume to have y-position 23.090571418664858 +-5");
  t.keyPress('left arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.keyPress('up arrow', 2);
  await t.runForSteps(2);
  await t.runForSteps(1);
  t.keyPress('down arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.keyPress('left arrow', 3);
  await t.runForSteps(3);
  await t.runForSteps(1);
  t.keyPress('right arrow', 4);
  await t.runForSteps(4);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Blume").direction, 95, 1, "Expected Sprite Blume to face in direction 95 +-1");
  t.keyPress('right arrow', 2);
  await t.runForSteps(2);
  await t.runForSteps(1);
  t.keyPress('down arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.keyPress('up arrow', 3);
  await t.runForSteps(3);
  await t.runForSteps(1);
  t.keyPress('down arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.keyPress('down arrow', 2);
  await t.runForSteps(2);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Blume").direction, 90, 1, "Expected Sprite Blume to face in direction 90 +-1");
  t.keyPress('up arrow', 4);
  await t.runForSteps(4);
  await t.runForSteps(1);
  await t.runForSteps(13);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Kaktus").getClone(1).currentCostume, 0, "Expected Clone 1 of Kaktus to have costume 0");
  t.assert.equal(t.getSprite("Kaktus").getCloneCount(), 1, "Expected Sprite Kaktus to have 1 clones");
  t.assert.equal(t.getSprite("Blume").direction, 95, 1, "Expected Sprite Blume to face in direction 95 +-1");
  t.assert.equal(t.getSprite("Kaktus").getClone(1).direction, 90, 1, "Expected Clone 1 of Kaktus to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kaktus").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Gärtnerin").layerOrder, 3, "Expected Sprite Gärtnerin to be at layer 3");
  t.assert.equal(t.getSprite("Blume").layerOrder, 4, "Expected Sprite Blume to be at layer 4");
  t.assert.equal(t.getSprite("Kaktus").layerOrder, 2, "Expected Sprite Kaktus to be at layer 2");
  t.assert.equal(t.getSprite("Kaktus").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Kaktus to be at layer 1");
  t.assert.withinRange(t.getSprite("Blume").x, -87, 5, "Expected Sprite Blume to have x-position -87 +-5");
  t.assert.withinRange(t.getSprite("Blume").y, 107, 5, "Expected Sprite Blume to have y-position 107 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(1).x, 71, 5, "Expected Clone 1 of Kaktus to have x-position 71 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(1).y, -70, 5, "Expected Clone 1 of Kaktus to have y-position -70 +-5");
  t.assert.not(t.getSprite("Gärtnerin").sayText, "Expected Sprite Gärtnerin not to say anything");
  t.assert.not(t.getSprite("Kaktus").getClone(1).sayText, "Expected Clone 1 of Kaktus not to say anything");
  t.assert.withinRange(t.getSprite("Gärtnerin").size, 20, 1, "Expected Sprite Gärtnerin to have size 20 +-1");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(1).size, 20, 1, "Expected Clone 1 of Kaktus to have size 20 +-1");
  t.assert.ok(t.getSprite("Kaktus").getClone(1).visible, "Expected Clone 1 of Kaktus to be visible");
  t.assert.equal(t.getSprite("Kaktus").getClone(1).volume, 100, "Expected Clone 1 of Kaktus to have volume 100");
  t.keyPress('right arrow', 2);
  await t.runForSteps(2);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Gärtnerin").x, -160, 5, "Expected Sprite Gärtnerin to have x-position -160 +-5");
  t.assert.withinRange(t.getSprite("Gärtnerin").y, 60, 5, "Expected Sprite Gärtnerin to have y-position 60 +-5");
  t.dragSprite('Gärtnerin', 23.876966553589924, -34.16850049205318, null);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Gärtnerin").x, 23.876966553589924, 5, "Expected Sprite Gärtnerin to have x-position 23.876966553589924 +-5");
  t.assert.withinRange(t.getSprite("Gärtnerin").y, -34.16850049205318, 5, "Expected Sprite Gärtnerin to have y-position -34.16850049205318 +-5");
  t.dragSprite('Blume', 23, -34, null);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Blume").x, -230, 5, "Expected Sprite Blume to have x-position -230 +-5");
  t.assert.withinRange(t.getSprite("Blume").y, 43, 5, "Expected Sprite Blume to have y-position 43 +-5");
  t.keyPress('left arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Gärtnerin").x, 18.876966553589924, 5, "Expected Sprite Gärtnerin to have x-position 18.876966553589924 +-5");
  t.assert.withinRange(t.getSprite("Gärtnerin").y, -34.16850049205318, 5, "Expected Sprite Gärtnerin to have y-position -34.16850049205318 +-5");
  t.keyPress('left arrow', 2);
  await t.runForSteps(2);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Gärtnerin").x, 8.876966553589924, 5, "Expected Sprite Gärtnerin to have x-position 8.876966553589924 +-5");
  t.assert.withinRange(t.getSprite("Gärtnerin").y, -34.16850049205318, 5, "Expected Sprite Gärtnerin to have y-position -34.16850049205318 +-5");
  await t.runForSteps(87);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Kaktus").getClone(2).currentCostume, 0, "Expected Clone 2 of Kaktus to have costume 0");
  t.assert.equal(t.getSprite("Kaktus").getCloneCount(), 2, "Expected Sprite Kaktus to have 2 clones");
  t.assert.equal(t.getSprite("Kaktus").getClone(2).direction, 90, 1, "Expected Clone 2 of Kaktus to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kaktus").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Gärtnerin").layerOrder, 4, "Expected Sprite Gärtnerin to be at layer 4");
  t.assert.equal(t.getSprite("Blume").layerOrder, 5, "Expected Sprite Blume to be at layer 5");
  t.assert.equal(t.getSprite("Kaktus").layerOrder, 3, "Expected Sprite Kaktus to be at layer 3");
  t.assert.equal(t.getSprite("Kaktus").getClone(2).getLayerOrder(), 2, "Expected Clone 2 of Kaktus to be at layer 2");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(2).x, 166, 5, "Expected Clone 2 of Kaktus to have x-position 166 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(2).y, -149, 5, "Expected Clone 2 of Kaktus to have y-position -149 +-5");
  t.assert.not(t.getSprite("Kaktus").getClone(2).sayText, "Expected Clone 2 of Kaktus not to say anything");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(2).size, 20, 1, "Expected Clone 2 of Kaktus to have size 20 +-1");
  t.assert.ok(t.getSprite("Kaktus").getClone(2).visible, "Expected Clone 2 of Kaktus to be visible");
  t.assert.equal(t.getSprite("Kaktus").getClone(2).volume, 100, "Expected Clone 2 of Kaktus to have volume 100");
  t.dragSprite('Blume', -52.94540984199075, -62.898748970170615, null);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Blume").x, -52.94540984199075, 5, "Expected Sprite Blume to have x-position -52.94540984199075 +-5");
  t.assert.withinRange(t.getSprite("Blume").y, -62.898748970170615, 5, "Expected Sprite Blume to have y-position -62.898748970170615 +-5");
  await t.runForSteps(25);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Kaktus").getClone(3).currentCostume, 0, "Expected Clone 3 of Kaktus to have costume 0");
  t.assert.equal(t.getSprite("Kaktus").getCloneCount(), 3, "Expected Sprite Kaktus to have 3 clones");
  t.assert.equal(t.getSprite("Kaktus").getClone(3).direction, 90, 1, "Expected Clone 3 of Kaktus to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kaktus").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Gärtnerin").layerOrder, 5, "Expected Sprite Gärtnerin to be at layer 5");
  t.assert.equal(t.getSprite("Blume").layerOrder, 6, "Expected Sprite Blume to be at layer 6");
  t.assert.equal(t.getSprite("Kaktus").layerOrder, 4, "Expected Sprite Kaktus to be at layer 4");
  t.assert.equal(t.getSprite("Kaktus").getClone(3).getLayerOrder(), 3, "Expected Clone 3 of Kaktus to be at layer 3");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(3).x, 192, 5, "Expected Clone 3 of Kaktus to have x-position 192 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(3).y, -70, 5, "Expected Clone 3 of Kaktus to have y-position -70 +-5");
  t.assert.not(t.getSprite("Kaktus").getClone(3).sayText, "Expected Clone 3 of Kaktus not to say anything");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(3).size, 20, 1, "Expected Clone 3 of Kaktus to have size 20 +-1");
  t.assert.ok(t.getSprite("Kaktus").getClone(3).visible, "Expected Clone 3 of Kaktus to be visible");
  t.assert.equal(t.getSprite("Kaktus").getClone(3).volume, 100, "Expected Clone 3 of Kaktus to have volume 100");
  await t.runForSteps(7);
  await t.runForSteps(1);
  t.keyPress('down arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Gärtnerin").x, 8.876966553589924, 5, "Expected Sprite Gärtnerin to have x-position 8.876966553589924 +-5");
  t.assert.withinRange(t.getSprite("Gärtnerin").y, -39.16850049205318, 5, "Expected Sprite Gärtnerin to have y-position -39.16850049205318 +-5");
  t.keyPress('right arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Blume").direction, 90, 1, "Expected Sprite Blume to face in direction 90 +-1");
  t.assert.withinRange(t.getSprite("Gärtnerin").x, 13.876966553589924, 5, "Expected Sprite Gärtnerin to have x-position 13.876966553589924 +-5");
  t.assert.withinRange(t.getSprite("Gärtnerin").y, -39.16850049205318, 5, "Expected Sprite Gärtnerin to have y-position -39.16850049205318 +-5");
  await t.runForSteps(23);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Blume").direction, 95, 1, "Expected Sprite Blume to face in direction 95 +-1");
  t.keyPress('right arrow', 2);
  await t.runForSteps(2);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Gärtnerin").x, 23.876966553589924, 5, "Expected Sprite Gärtnerin to have x-position 23.876966553589924 +-5");
  t.assert.withinRange(t.getSprite("Gärtnerin").y, -39.16850049205318, 5, "Expected Sprite Gärtnerin to have y-position -39.16850049205318 +-5");
  t.keyPress('right arrow', 2);
  await t.runForSteps(2);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Gärtnerin").effects.color, 25, "Expected effect color of Sprite Gärtnerin to be 25");
  t.assert.withinRange(t.getSprite("Gärtnerin").x, 33.876966553589924, 5, "Expected Sprite Gärtnerin to have x-position 33.876966553589924 +-5");
  t.assert.withinRange(t.getSprite("Gärtnerin").y, -39.16850049205318, 5, "Expected Sprite Gärtnerin to have y-position -39.16850049205318 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").x, 103.81461610922649, 5, "Expected Sprite Kaktus to have x-position 103.81461610922649 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").y, 58.34719165846578, 5, "Expected Sprite Kaktus to have y-position 58.34719165846578 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(1).x, 70.38128277589317, 5, "Expected Clone 1 of Kaktus to have x-position 70.38128277589317 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(1).y, -69.48614167486755, 5, "Expected Clone 1 of Kaktus to have y-position -69.48614167486755 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(2).x, 163.79794944255983, 5, "Expected Clone 2 of Kaktus to have x-position 163.79794944255983 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(2).y, -147.1694750082009, 5, "Expected Clone 2 of Kaktus to have y-position -147.1694750082009 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(3).x, 189.3646161092265, 5, "Expected Clone 3 of Kaktus to have x-position 189.3646161092265 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(3).y, -69.48614167486755, 5, "Expected Clone 3 of Kaktus to have y-position -69.48614167486755 +-5");
  t.assert.equal(t.getSprite("Gärtnerin").sayText, "Autsch!", "Expected Sprite Gärtnerin to say Autsch!");
  t.assert.equal(t.getSprite("Blume").sayText, "Ohje!", "Expected Sprite Blume to say Ohje!");
  t.end();
}
const test1 = async function (t) {
  await t.runForSteps(82);
  await t.runForSteps(1);
  await t.runForSteps(18);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Blume").direction, 95, 1, "Expected Sprite Blume to face in direction 95 +-1");
  t.dragSprite('Gärtnerin', 111.82809810828722, -84.14298437951786, null);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Gärtnerin").x, 111.82809810828722, 5, "Expected Sprite Gärtnerin to have x-position 111.82809810828722 +-5");
  t.assert.withinRange(t.getSprite("Gärtnerin").y, -84.14298437951786, 5, "Expected Sprite Gärtnerin to have y-position -84.14298437951786 +-5");
  t.dragSprite('Gärtnerin', 9.526675062365015, -141.62644723923387, null);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Gärtnerin").x, 9.526675062365015, 5, "Expected Sprite Gärtnerin to have x-position 9.526675062365015 +-5");
  t.assert.withinRange(t.getSprite("Gärtnerin").y, -141.62644723923387, 5, "Expected Sprite Gärtnerin to have y-position -141.62644723923387 +-5");
  t.keyPress('left arrow', 4);
  await t.runForSteps(4);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Blume").direction, 90, 1, "Expected Sprite Blume to face in direction 90 +-1");
  t.assert.withinRange(t.getSprite("Gärtnerin").x, -10.473324937634985, 5, "Expected Sprite Gärtnerin to have x-position -10.473324937634985 +-5");
  t.assert.withinRange(t.getSprite("Gärtnerin").y, -141.62644723923387, 5, "Expected Sprite Gärtnerin to have y-position -141.62644723923387 +-5");
  t.keyPress('down arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Gärtnerin").x, -10.473324937634985, 5, "Expected Sprite Gärtnerin to have x-position -10.473324937634985 +-5");
  t.assert.withinRange(t.getSprite("Gärtnerin").y, -146.62644723923387, 5, "Expected Sprite Gärtnerin to have y-position -146.62644723923387 +-5");
  t.dragSprite('Gärtnerin', 100.4400614140099, -143.94340435312242, null);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Gärtnerin").x, 100.4400614140099, 5, "Expected Sprite Gärtnerin to have x-position 100.4400614140099 +-5");
  t.assert.withinRange(t.getSprite("Gärtnerin").y, -143.94340435312242, 5, "Expected Sprite Gärtnerin to have y-position -143.94340435312242 +-5");
  t.keyPress('left arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Gärtnerin").x, 95.4400614140099, 5, "Expected Sprite Gärtnerin to have x-position 95.4400614140099 +-5");
  t.assert.withinRange(t.getSprite("Gärtnerin").y, -143.94340435312242, 5, "Expected Sprite Gärtnerin to have y-position -143.94340435312242 +-5");
  await t.runForSteps(49);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Kaktus").getClone(2).currentCostume, 0, "Expected Clone 2 of Kaktus to have costume 0");
  t.assert.equal(t.getSprite("Kaktus").getCloneCount(), 2, "Expected Sprite Kaktus to have 2 clones");
  t.assert.equal(t.getSprite("Blume").direction, 95, 1, "Expected Sprite Blume to face in direction 95 +-1");
  t.assert.equal(t.getSprite("Kaktus").getClone(2).direction, 90, 1, "Expected Clone 2 of Kaktus to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kaktus").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Gärtnerin").layerOrder, 4, "Expected Sprite Gärtnerin to be at layer 4");
  t.assert.equal(t.getSprite("Blume").layerOrder, 5, "Expected Sprite Blume to be at layer 5");
  t.assert.equal(t.getSprite("Kaktus").layerOrder, 3, "Expected Sprite Kaktus to be at layer 3");
  t.assert.equal(t.getSprite("Kaktus").getClone(2).getLayerOrder(), 2, "Expected Clone 2 of Kaktus to be at layer 2");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(2).x, -223, 5, "Expected Clone 2 of Kaktus to have x-position -223 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(2).y, -78, 5, "Expected Clone 2 of Kaktus to have y-position -78 +-5");
  t.assert.not(t.getSprite("Kaktus").getClone(2).sayText, "Expected Clone 2 of Kaktus not to say anything");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(2).size, 20, 1, "Expected Clone 2 of Kaktus to have size 20 +-1");
  t.assert.ok(t.getSprite("Kaktus").getClone(2).visible, "Expected Clone 2 of Kaktus to be visible");
  t.assert.equal(t.getSprite("Kaktus").getClone(2).volume, 100, "Expected Clone 2 of Kaktus to have volume 100");
  t.keyPress('left arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Gärtnerin").x, 90.4400614140099, 5, "Expected Sprite Gärtnerin to have x-position 90.4400614140099 +-5");
  t.assert.withinRange(t.getSprite("Gärtnerin").y, -143.94340435312242, 5, "Expected Sprite Gärtnerin to have y-position -143.94340435312242 +-5");
  await t.runForSteps(58);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Kaktus").getClone(3).currentCostume, 0, "Expected Clone 3 of Kaktus to have costume 0");
  t.assert.equal(t.getSprite("Kaktus").getCloneCount(), 3, "Expected Sprite Kaktus to have 3 clones");
  t.assert.equal(t.getSprite("Kaktus").getClone(3).direction, 90, 1, "Expected Clone 3 of Kaktus to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kaktus").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Gärtnerin").layerOrder, 5, "Expected Sprite Gärtnerin to be at layer 5");
  t.assert.equal(t.getSprite("Blume").layerOrder, 6, "Expected Sprite Blume to be at layer 6");
  t.assert.equal(t.getSprite("Kaktus").layerOrder, 4, "Expected Sprite Kaktus to be at layer 4");
  t.assert.equal(t.getSprite("Kaktus").getClone(3).getLayerOrder(), 3, "Expected Clone 3 of Kaktus to be at layer 3");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(3).x, -169, 5, "Expected Clone 3 of Kaktus to have x-position -169 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(3).y, 4, 5, "Expected Clone 3 of Kaktus to have y-position 4 +-5");
  t.assert.not(t.getSprite("Kaktus").getClone(3).sayText, "Expected Clone 3 of Kaktus not to say anything");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(3).size, 20, 1, "Expected Clone 3 of Kaktus to have size 20 +-1");
  t.assert.ok(t.getSprite("Kaktus").getClone(3).visible, "Expected Clone 3 of Kaktus to be visible");
  t.assert.equal(t.getSprite("Kaktus").getClone(3).volume, 100, "Expected Clone 3 of Kaktus to have volume 100");
  await t.runForSteps(17);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Blume").direction, 90, 1, "Expected Sprite Blume to face in direction 90 +-1");
  t.dragSprite('Gärtnerin', 110.63002115494702, -81.32792551109584, null);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Kaktus").getClone(4).currentCostume, 0, "Expected Clone 4 of Kaktus to have costume 0");
  t.assert.equal(t.getSprite("Kaktus").getCloneCount(), 4, "Expected Sprite Kaktus to have 4 clones");
  t.assert.equal(t.getSprite("Kaktus").getClone(4).direction, 90, 1, "Expected Clone 4 of Kaktus to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kaktus").getClone(4).effects.color, 0, "Expected effect color of Clone 4 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(4).effects.fisheye, 0, "Expected effect fisheye of Clone 4 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(4).effects.whirl, 0, "Expected effect whirl of Clone 4 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(4).effects.pixelate, 0, "Expected effect pixelate of Clone 4 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(4).effects.mosaic, 0, "Expected effect mosaic of Clone 4 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(4).effects.brightness, 0, "Expected effect brightness of Clone 4 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(4).effects.ghost, 0, "Expected effect ghost of Clone 4 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Gärtnerin").layerOrder, 6, "Expected Sprite Gärtnerin to be at layer 6");
  t.assert.equal(t.getSprite("Blume").layerOrder, 7, "Expected Sprite Blume to be at layer 7");
  t.assert.equal(t.getSprite("Kaktus").layerOrder, 5, "Expected Sprite Kaktus to be at layer 5");
  t.assert.equal(t.getSprite("Kaktus").getClone(4).getLayerOrder(), 4, "Expected Clone 4 of Kaktus to be at layer 4");
  t.assert.withinRange(t.getSprite("Gärtnerin").x, 110.63002115494702, 5, "Expected Sprite Gärtnerin to have x-position 110.63002115494702 +-5");
  t.assert.withinRange(t.getSprite("Gärtnerin").y, -81.32792551109584, 5, "Expected Sprite Gärtnerin to have y-position -81.32792551109584 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(4).x, -215, 5, "Expected Clone 4 of Kaktus to have x-position -215 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(4).y, -81, 5, "Expected Clone 4 of Kaktus to have y-position -81 +-5");
  t.assert.not(t.getSprite("Kaktus").getClone(4).sayText, "Expected Clone 4 of Kaktus not to say anything");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(4).size, 20, 1, "Expected Clone 4 of Kaktus to have size 20 +-1");
  t.assert.ok(t.getSprite("Kaktus").getClone(4).visible, "Expected Clone 4 of Kaktus to be visible");
  t.assert.equal(t.getSprite("Kaktus").getClone(4).volume, 100, "Expected Clone 4 of Kaktus to have volume 100");
  t.keyPress('up arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Gärtnerin").x, 110.63002115494702, 5, "Expected Sprite Gärtnerin to have x-position 110.63002115494702 +-5");
  t.assert.withinRange(t.getSprite("Gärtnerin").y, -76.32792551109584, 5, "Expected Sprite Gärtnerin to have y-position -76.32792551109584 +-5");
  t.dragSprite('Gärtnerin', 32.634280304966595, -51.4266168267785, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Gärtnerin").effects.color, 25, "Expected effect color of Sprite Gärtnerin to be 25");
  t.assert.withinRange(t.getSprite("Gärtnerin").x, 32.634280304966595, 5, "Expected Sprite Gärtnerin to have x-position 32.634280304966595 +-5");
  t.assert.withinRange(t.getSprite("Gärtnerin").y, -51.4266168267785, 5, "Expected Sprite Gärtnerin to have y-position -51.4266168267785 +-5");
  t.assert.equal(t.getSprite("Gärtnerin").sayText, "Autsch!", "Expected Sprite Gärtnerin to say Autsch!");
  t.assert.equal(t.getSprite("Blume").sayText, "Ohje!", "Expected Sprite Blume to say Ohje!");
  await t.runForSteps(30);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Gärtnerin").effects.color, 50, "Expected effect color of Sprite Gärtnerin to be 50");
  t.assert.withinRange(t.getSprite("Kaktus").x, 67.61104482423274, 5, "Expected Sprite Kaktus to have x-position 67.61104482423274 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").y, 2.4295813061644367, 5, "Expected Sprite Kaktus to have y-position 2.4295813061644367 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(1).x, 43.927711490899405, 5, "Expected Clone 1 of Kaktus to have x-position 43.927711490899405 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(1).y, -77.32041869383556, 5, "Expected Clone 1 of Kaktus to have y-position -77.32041869383556 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(2).x, -90.92228850910058, 5, "Expected Clone 2 of Kaktus to have x-position -90.92228850910058 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(2).y, -64.27041869383555, 5, "Expected Clone 2 of Kaktus to have y-position -64.27041869383555 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(3).x, -64.82228850910059, 5, "Expected Clone 3 of Kaktus to have x-position -64.82228850910059 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(3).y, -24.637085360502226, 5, "Expected Clone 3 of Kaktus to have y-position -24.637085360502226 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(4).x, -87.05562184243392, 5, "Expected Clone 4 of Kaktus to have x-position -87.05562184243392 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(4).y, -65.72041869383555, 5, "Expected Clone 4 of Kaktus to have y-position -65.72041869383555 +-5");
  await t.runForSteps(50);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Gärtnerin").effects.color, 150, "Expected effect color of Sprite Gärtnerin to be 150");
  t.assert.withinRange(t.getSprite("Kaktus").x, 32.634280304966595, 5, "Expected Sprite Kaktus to have x-position 32.634280304966595 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").y, -51.4266168267785, 5, "Expected Sprite Kaktus to have y-position -51.4266168267785 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(1).x, 32.634280304966595, 5, "Expected Clone 1 of Kaktus to have x-position 32.634280304966595 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(1).y, -51.4266168267785, 5, "Expected Clone 1 of Kaktus to have y-position -51.4266168267785 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(2).x, 32.634280304966595, 5, "Expected Clone 2 of Kaktus to have x-position 32.634280304966595 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(2).y, -51.4266168267785, 5, "Expected Clone 2 of Kaktus to have y-position -51.4266168267785 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(3).x, 32.634280304966595, 5, "Expected Clone 3 of Kaktus to have x-position 32.634280304966595 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(3).y, -51.4266168267785, 5, "Expected Clone 3 of Kaktus to have y-position -51.4266168267785 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(4).x, 32.634280304966595, 5, "Expected Clone 4 of Kaktus to have x-position 32.634280304966595 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(4).y, -51.4266168267785, 5, "Expected Clone 4 of Kaktus to have y-position -51.4266168267785 +-5");
  await t.runForSteps(78);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Gärtnerin").effects.color, 250, "Expected effect color of Sprite Gärtnerin to be 250");
  t.end();
}

module.exports = [
  {
      test: test0,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687938416420',
      type: 'standard',
  },
  {
      test: test1,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687938416420',
      type: 'standard',
  }
]
