const test0 = async function (t) {
  t.keyPress('right arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.dragSprite('Raumschiff', -174.50788900267554, -59.869294618899175, null);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Stern").getClone(3).currentCostume, 0, "Expected Clone 3 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 3, "Expected Sprite Stern to have 3 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 120, 1, "Expected Sprite Schwarzes Loch to face in direction 120 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(3).direction, 90, 1, "Expected Clone 3 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 7, "Expected Sprite Raumschiff to be at layer 7");
  t.assert.equal(t.getSprite("Stern").layerOrder, 6, "Expected Sprite Stern to be at layer 6");
  t.assert.equal(t.getSprite("Stern").getClone(3).getLayerOrder(), 5, "Expected Clone 3 of Stern to be at layer 5");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -174.50788900267554, 5, "Expected Sprite Raumschiff to have x-position -174.50788900267554 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -58.869294618899175, 5, "Expected Sprite Raumschiff to have y-position -58.869294618899175 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, 4.622501868990582, 5, "Expected Sprite Schwarzes Loch to have x-position 4.622501868990582 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -72.578341604963, 5, "Expected Sprite Schwarzes Loch to have y-position -72.578341604963 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 139.36666666666667, 5, "Expected Clone 1 of Stern to have x-position 139.36666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 19.533333333333335, 5, "Expected Clone 1 of Stern to have y-position 19.533333333333335 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 139.66666666666666, 5, "Expected Clone 2 of Stern to have x-position 139.66666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 20.133333333333333, 5, "Expected Clone 2 of Stern to have y-position 20.133333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 140, 5, "Expected Clone 3 of Stern to have x-position 140 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 20, 5, "Expected Clone 3 of Stern to have y-position 20 +-5");
  t.assert.not(t.getSprite("Stern").getClone(3).sayText, "Expected Clone 3 of Stern not to say anything");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).size, 50, 1, "Expected Clone 3 of Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Stern").getClone(3).visible, "Expected Clone 3 of Stern to be visible");
  t.assert.equal(t.getSprite("Stern").getClone(3).volume, 100, "Expected Clone 3 of Stern to have volume 100");
  t.dragSprite('Raumschiff', 309, -217, null);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 130, 1, "Expected Sprite Schwarzes Loch to face in direction 130 +-1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 239, 5, "Expected Sprite Raumschiff to have x-position 239 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -194, 5, "Expected Sprite Raumschiff to have y-position -194 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, 8.952628887912777, 5, "Expected Sprite Schwarzes Loch to have x-position 8.952628887912777 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -75.078341604963, 5, "Expected Sprite Schwarzes Loch to have y-position -75.078341604963 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 139.05, 5, "Expected Clone 1 of Stern to have x-position 139.05 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 19.3, 5, "Expected Clone 1 of Stern to have y-position 19.3 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 139.33333333333334, 5, "Expected Clone 2 of Stern to have x-position 139.33333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 20.266666666666666, 5, "Expected Clone 2 of Stern to have y-position 20.266666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 139.8, 5, "Expected Clone 3 of Stern to have x-position 139.8 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 19.983333333333334, 5, "Expected Clone 3 of Stern to have y-position 19.983333333333334 +-5");
  t.assert.equal(t.getSprite("Raumschiff").sayText, "Überstanden!", "Expected Sprite Raumschiff to say Überstanden!");
  t.assert.equal(t.getSprite("Stern").getVariable("xPosition").value, "-210", "Expected xPosition to have value -210 in Sprite Stern");
  t.assert.equal(t.getSprite("Stern").getVariable("yPosition").value, "150", "Expected yPosition to have value 150 in Sprite Stern");
  t.dragSprite('Raumschiff', -163.85282697095863, -25.257548837249843, null);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Stern").getClone(4).currentCostume, 0, "Expected Clone 4 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 4, "Expected Sprite Stern to have 4 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 140, 1, "Expected Sprite Schwarzes Loch to face in direction 140 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(4).direction, 90, 1, "Expected Clone 4 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.color, 0, "Expected effect color of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.fisheye, 0, "Expected effect fisheye of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.whirl, 0, "Expected effect whirl of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.pixelate, 0, "Expected effect pixelate of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.mosaic, 0, "Expected effect mosaic of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.brightness, 0, "Expected effect brightness of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.ghost, 0, "Expected effect ghost of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 8, "Expected Sprite Raumschiff to be at layer 8");
  t.assert.equal(t.getSprite("Stern").layerOrder, 7, "Expected Sprite Stern to be at layer 7");
  t.assert.equal(t.getSprite("Stern").getClone(4).getLayerOrder(), 6, "Expected Clone 4 of Stern to be at layer 6");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -148.0910660719267, 5, "Expected Sprite Raumschiff to have x-position -148.0910660719267 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -31.64896387600818, 5, "Expected Sprite Raumschiff to have y-position -31.64896387600818 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, 12.782851103507667, 5, "Expected Sprite Schwarzes Loch to have x-position 12.782851103507667 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -78.2922796533957, 5, "Expected Sprite Schwarzes Loch to have y-position -78.2922796533957 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 138.73333333333332, 5, "Expected Clone 1 of Stern to have x-position 138.73333333333332 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 19.066666666666666, 5, "Expected Clone 1 of Stern to have y-position 19.066666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 139, 5, "Expected Clone 2 of Stern to have x-position 139 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 20.4, 5, "Expected Clone 2 of Stern to have y-position 20.4 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 139.6, 5, "Expected Clone 3 of Stern to have x-position 139.6 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 19.966666666666665, 5, "Expected Clone 3 of Stern to have y-position 19.966666666666665 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -210, 5, "Expected Clone 4 of Stern to have x-position -210 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 150, 5, "Expected Clone 4 of Stern to have y-position 150 +-5");
  t.assert.not(t.getSprite("Stern").getClone(4).sayText, "Expected Clone 4 of Stern not to say anything");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).size, 50, 1, "Expected Clone 4 of Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Stern").getClone(4).visible, "Expected Clone 4 of Stern to be visible");
  t.assert.equal(t.getSprite("Stern").getClone(4).volume, 100, "Expected Clone 4 of Stern to have volume 100");
  t.keyPress('right arrow', 2);
  await t.runForSteps(2);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Stern").getClone(5).currentCostume, 0, "Expected Clone 5 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).currentCostume, 0, "Expected Clone 6 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 6, "Expected Sprite Stern to have 6 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 30, 1, "Expected Sprite Raumschiff to face in direction 30 +-1");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 170, 1, "Expected Sprite Schwarzes Loch to face in direction 170 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(5).direction, 90, 1, "Expected Clone 5 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(6).direction, 90, 1, "Expected Clone 6 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.color, 0, "Expected effect color of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.fisheye, 0, "Expected effect fisheye of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.whirl, 0, "Expected effect whirl of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.pixelate, 0, "Expected effect pixelate of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.mosaic, 0, "Expected effect mosaic of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.brightness, 0, "Expected effect brightness of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.ghost, 0, "Expected effect ghost of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.color, 0, "Expected effect color of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.fisheye, 0, "Expected effect fisheye of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.whirl, 0, "Expected effect whirl of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.pixelate, 0, "Expected effect pixelate of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.mosaic, 0, "Expected effect mosaic of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.brightness, 0, "Expected effect brightness of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.ghost, 0, "Expected effect ghost of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 10, "Expected Sprite Raumschiff to be at layer 10");
  t.assert.equal(t.getSprite("Stern").layerOrder, 9, "Expected Sprite Stern to be at layer 9");
  t.assert.equal(t.getSprite("Stern").getClone(5).getLayerOrder(), 7, "Expected Clone 5 of Stern to be at layer 7");
  t.assert.equal(t.getSprite("Stern").getClone(6).getLayerOrder(), 8, "Expected Clone 6 of Stern to be at layer 8");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -100.80578337483081, 5, "Expected Sprite Raumschiff to have x-position -100.80578337483081 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -50.8232089922832, 5, "Expected Sprite Raumschiff to have y-position -50.8232089922832 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, 20.20688986856871, 5, "Expected Sprite Schwarzes Loch to have x-position 20.20688986856871 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -91.15109199184232, 5, "Expected Sprite Schwarzes Loch to have y-position -91.15109199184232 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 137.78333333333333, 5, "Expected Clone 1 of Stern to have x-position 137.78333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 18.366666666666667, 5, "Expected Clone 1 of Stern to have y-position 18.366666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 138, 5, "Expected Clone 2 of Stern to have x-position 138 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 20.8, 5, "Expected Clone 2 of Stern to have y-position 20.8 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 139, 5, "Expected Clone 3 of Stern to have x-position 139 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 19.916666666666668, 5, "Expected Clone 3 of Stern to have y-position 19.916666666666668 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -210.8, 5, "Expected Clone 4 of Stern to have x-position -210.8 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 149.05, 5, "Expected Clone 4 of Stern to have y-position 149.05 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -210.26666666666668, 5, "Expected Clone 5 of Stern to have x-position -210.26666666666668 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 150.46666666666667, 5, "Expected Clone 5 of Stern to have y-position 150.46666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).x, -209.81666666666666, 5, "Expected Clone 6 of Stern to have x-position -209.81666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).y, 149.78333333333333, 5, "Expected Clone 6 of Stern to have y-position 149.78333333333333 +-5");
  t.assert.not(t.getSprite("Stern").getClone(5).sayText, "Expected Clone 5 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(6).sayText, "Expected Clone 6 of Stern not to say anything");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).size, 50, 1, "Expected Clone 5 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).size, 50, 1, "Expected Clone 6 of Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Stern").getClone(5).visible, "Expected Clone 5 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(6).visible, "Expected Clone 6 of Stern to be visible");
  t.assert.equal(t.getSprite("Stern").getClone(5).volume, 100, "Expected Clone 5 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(6).volume, 100, "Expected Clone 6 of Stern to have volume 100");
  t.dragSprite('Raumschiff', 240, -180, null);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 180, 1, "Expected Sprite Schwarzes Loch to face in direction 180 +-1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 251.5, 5, "Expected Sprite Raumschiff to have x-position 251.5 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -186.16666666666666, 5, "Expected Sprite Raumschiff to have y-position -186.16666666666666 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, 21.07513075690336, 5, "Expected Sprite Schwarzes Loch to have x-position 21.07513075690336 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -96.07513075690336, 5, "Expected Sprite Schwarzes Loch to have y-position -96.07513075690336 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 137.46666666666667, 5, "Expected Clone 1 of Stern to have x-position 137.46666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 18.133333333333333, 5, "Expected Clone 1 of Stern to have y-position 18.133333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 137.66666666666666, 5, "Expected Clone 2 of Stern to have x-position 137.66666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 20.933333333333334, 5, "Expected Clone 2 of Stern to have y-position 20.933333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 138.8, 5, "Expected Clone 3 of Stern to have x-position 138.8 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 19.9, 5, "Expected Clone 3 of Stern to have y-position 19.9 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -211.06666666666666, 5, "Expected Clone 4 of Stern to have x-position -211.06666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 148.73333333333332, 5, "Expected Clone 4 of Stern to have y-position 148.73333333333332 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -210.4, 5, "Expected Clone 5 of Stern to have x-position -210.4 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 150.7, 5, "Expected Clone 5 of Stern to have y-position 150.7 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).x, -209.63333333333333, 5, "Expected Clone 6 of Stern to have x-position -209.63333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).y, 149.56666666666666, 5, "Expected Clone 6 of Stern to have y-position 149.56666666666666 +-5");
  await t.runForSteps(90);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 90, 1, "Expected Sprite Schwarzes Loch to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 4, "Expected Sprite Raumschiff to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 3, "Expected Sprite Stern to be at layer 3");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 251, 5, "Expected Sprite Raumschiff to have x-position 251 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -196.2679491924311, 5, "Expected Sprite Raumschiff to have y-position -196.2679491924311 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, -10, 5, "Expected Sprite Schwarzes Loch to have x-position -10 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -70, 5, "Expected Sprite Schwarzes Loch to have y-position -70 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 5, 1, "Expected Sprite Raumschiff to have size 5 +-1");
  t.end();
}
const test1 = async function (t) {
  t.dragSprite('Raumschiff', 100.71582809323864, 49.64816442936943, null);
  await t.runForSteps(1);
  t.dragSprite('Raumschiff', 240, -180, null);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Stern").getClone(2).currentCostume, 0, "Expected Clone 2 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 2, "Expected Sprite Stern to have 2 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 110, 1, "Expected Sprite Schwarzes Loch to face in direction 110 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(2).direction, 90, 1, "Expected Clone 2 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 6, "Expected Sprite Raumschiff to be at layer 6");
  t.assert.equal(t.getSprite("Stern").layerOrder, 5, "Expected Sprite Stern to be at layer 5");
  t.assert.equal(t.getSprite("Stern").getClone(2).getLayerOrder(), 4, "Expected Clone 2 of Stern to be at layer 4");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 239.7411809548975, 5, "Expected Sprite Raumschiff to have x-position 239.7411809548975 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -179.03407417371093, 5, "Expected Sprite Raumschiff to have y-position -179.03407417371093 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, -0.07596123493896023, 5, "Expected Sprite Schwarzes Loch to have x-position -0.07596123493896023 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -70.86824088833465, 5, "Expected Sprite Schwarzes Loch to have y-position -70.86824088833465 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 139.68333333333334, 5, "Expected Clone 1 of Stern to have x-position 139.68333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 19.766666666666666, 5, "Expected Clone 1 of Stern to have y-position 19.766666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 140, 5, "Expected Clone 2 of Stern to have x-position 140 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 20, 5, "Expected Clone 2 of Stern to have y-position 20 +-5");
  t.assert.not(t.getSprite("Stern").getClone(2).sayText, "Expected Clone 2 of Stern not to say anything");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).size, 50, 1, "Expected Clone 2 of Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Stern").getClone(2).visible, "Expected Clone 2 of Stern to be visible");
  t.assert.equal(t.getSprite("Stern").getClone(2).volume, 100, "Expected Clone 2 of Stern to have volume 100");
  t.keyPress('right arrow', 4);
  await t.runForSteps(4);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Stern").getClone(3).currentCostume, 0, "Expected Clone 3 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).currentCostume, 0, "Expected Clone 4 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).currentCostume, 0, "Expected Clone 5 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).currentCostume, 0, "Expected Clone 6 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 6, "Expected Sprite Stern to have 6 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 45, 1, "Expected Sprite Raumschiff to face in direction 45 +-1");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 160, 1, "Expected Sprite Schwarzes Loch to face in direction 160 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(3).direction, 90, 1, "Expected Clone 3 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(4).direction, 90, 1, "Expected Clone 4 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(5).direction, 90, 1, "Expected Clone 5 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(6).direction, 90, 1, "Expected Clone 6 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.color, 0, "Expected effect color of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.fisheye, 0, "Expected effect fisheye of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.whirl, 0, "Expected effect whirl of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.pixelate, 0, "Expected effect pixelate of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.mosaic, 0, "Expected effect mosaic of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.brightness, 0, "Expected effect brightness of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.ghost, 0, "Expected effect ghost of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.color, 0, "Expected effect color of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.fisheye, 0, "Expected effect fisheye of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.whirl, 0, "Expected effect whirl of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.pixelate, 0, "Expected effect pixelate of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.mosaic, 0, "Expected effect mosaic of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.brightness, 0, "Expected effect brightness of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.ghost, 0, "Expected effect ghost of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.color, 0, "Expected effect color of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.fisheye, 0, "Expected effect fisheye of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.whirl, 0, "Expected effect whirl of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.pixelate, 0, "Expected effect pixelate of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.mosaic, 0, "Expected effect mosaic of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.brightness, 0, "Expected effect brightness of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.ghost, 0, "Expected effect ghost of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 10, "Expected Sprite Raumschiff to be at layer 10");
  t.assert.equal(t.getSprite("Stern").layerOrder, 9, "Expected Sprite Stern to be at layer 9");
  t.assert.equal(t.getSprite("Stern").getClone(3).getLayerOrder(), 5, "Expected Clone 3 of Stern to be at layer 5");
  t.assert.equal(t.getSprite("Stern").getClone(4).getLayerOrder(), 6, "Expected Clone 4 of Stern to be at layer 6");
  t.assert.equal(t.getSprite("Stern").getClone(5).getLayerOrder(), 7, "Expected Clone 5 of Stern to be at layer 7");
  t.assert.equal(t.getSprite("Stern").getClone(6).getLayerOrder(), 8, "Expected Clone 6 of Stern to be at layer 8");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 246.43412571881547, 5, "Expected Sprite Raumschiff to have x-position 246.43412571881547 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -181.06133351267968, 5, "Expected Sprite Raumschiff to have y-position -181.06133351267968 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, 18.496789151940366, 5, "Expected Sprite Schwarzes Loch to have x-position 18.496789151940366 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -86.45262888791278, 5, "Expected Sprite Schwarzes Loch to have y-position -86.45262888791278 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 138.1, 5, "Expected Clone 1 of Stern to have x-position 138.1 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 18.6, 5, "Expected Clone 1 of Stern to have y-position 18.6 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 138.33333333333334, 5, "Expected Clone 2 of Stern to have x-position 138.33333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 20.666666666666668, 5, "Expected Clone 2 of Stern to have y-position 20.666666666666668 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 139.2, 5, "Expected Clone 3 of Stern to have x-position 139.2 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 19.933333333333334, 5, "Expected Clone 3 of Stern to have y-position 19.933333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -210.53333333333333, 5, "Expected Clone 4 of Stern to have x-position -210.53333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 149.36666666666667, 5, "Expected Clone 4 of Stern to have y-position 149.36666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -210.13333333333333, 5, "Expected Clone 5 of Stern to have x-position -210.13333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 150.23333333333332, 5, "Expected Clone 5 of Stern to have y-position 150.23333333333332 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).x, -210, 5, "Expected Clone 6 of Stern to have x-position -210 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).y, 150, 5, "Expected Clone 6 of Stern to have y-position 150 +-5");
  t.assert.equal(t.getSprite("Raumschiff").sayText, "Überstanden!", "Expected Sprite Raumschiff to say Überstanden!");
  t.assert.not(t.getSprite("Stern").getClone(3).sayText, "Expected Clone 3 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(4).sayText, "Expected Clone 4 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(5).sayText, "Expected Clone 5 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(6).sayText, "Expected Clone 6 of Stern not to say anything");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).size, 50, 1, "Expected Clone 3 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).size, 50, 1, "Expected Clone 4 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).size, 50, 1, "Expected Clone 5 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).size, 50, 1, "Expected Clone 6 of Stern to have size 50 +-1");
  t.assert.equal(t.getSprite("Stern").getVariable("xPosition").value, "-210", "Expected xPosition to have value -210 in Sprite Stern");
  t.assert.equal(t.getSprite("Stern").getVariable("yPosition").value, "150", "Expected yPosition to have value 150 in Sprite Stern");
  t.assert.ok(t.getSprite("Stern").getClone(3).visible, "Expected Clone 3 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(4).visible, "Expected Clone 4 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(5).visible, "Expected Clone 5 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(6).visible, "Expected Clone 6 of Stern to be visible");
  t.assert.equal(t.getSprite("Stern").getClone(3).volume, 100, "Expected Clone 3 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(4).volume, 100, "Expected Clone 4 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(5).volume, 100, "Expected Clone 5 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(6).volume, 100, "Expected Clone 6 of Stern to have volume 100");
  t.dragSprite('Raumschiff', 132.42959594726562, 85.79506838336326, null);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 170, 1, "Expected Sprite Schwarzes Loch to face in direction 170 +-1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 155.97231648763022, 5, "Expected Sprite Raumschiff to have x-position 155.97231648763022 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 45.42239259891482, 5, "Expected Sprite Raumschiff to have y-position 45.42239259891482 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, 20.20688986856871, 5, "Expected Sprite Schwarzes Loch to have x-position 20.20688986856871 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -91.15109199184232, 5, "Expected Sprite Schwarzes Loch to have y-position -91.15109199184232 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 137.78333333333333, 5, "Expected Clone 1 of Stern to have x-position 137.78333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 18.366666666666667, 5, "Expected Clone 1 of Stern to have y-position 18.366666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 138, 5, "Expected Clone 2 of Stern to have x-position 138 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 20.8, 5, "Expected Clone 2 of Stern to have y-position 20.8 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 139, 5, "Expected Clone 3 of Stern to have x-position 139 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 19.916666666666668, 5, "Expected Clone 3 of Stern to have y-position 19.916666666666668 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -210.8, 5, "Expected Clone 4 of Stern to have x-position -210.8 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 149.05, 5, "Expected Clone 4 of Stern to have y-position 149.05 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -210.26666666666668, 5, "Expected Clone 5 of Stern to have x-position -210.26666666666668 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 150.46666666666667, 5, "Expected Clone 5 of Stern to have y-position 150.46666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).x, -209.81666666666666, 5, "Expected Clone 6 of Stern to have x-position -209.81666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).y, 149.78333333333333, 5, "Expected Clone 6 of Stern to have y-position 149.78333333333333 +-5");
  t.dragSprite('Raumschiff', 240, -180, null);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 180, 1, "Expected Sprite Schwarzes Loch to face in direction 180 +-1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 251.5, 5, "Expected Sprite Raumschiff to have x-position 251.5 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -186.16666666666666, 5, "Expected Sprite Raumschiff to have y-position -186.16666666666666 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, 21.07513075690336, 5, "Expected Sprite Schwarzes Loch to have x-position 21.07513075690336 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -96.07513075690336, 5, "Expected Sprite Schwarzes Loch to have y-position -96.07513075690336 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 137.46666666666667, 5, "Expected Clone 1 of Stern to have x-position 137.46666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 18.133333333333333, 5, "Expected Clone 1 of Stern to have y-position 18.133333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 137.66666666666666, 5, "Expected Clone 2 of Stern to have x-position 137.66666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 20.933333333333334, 5, "Expected Clone 2 of Stern to have y-position 20.933333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 138.8, 5, "Expected Clone 3 of Stern to have x-position 138.8 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 19.9, 5, "Expected Clone 3 of Stern to have y-position 19.9 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -211.06666666666666, 5, "Expected Clone 4 of Stern to have x-position -211.06666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 148.73333333333332, 5, "Expected Clone 4 of Stern to have y-position 148.73333333333332 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -210.4, 5, "Expected Clone 5 of Stern to have x-position -210.4 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 150.7, 5, "Expected Clone 5 of Stern to have y-position 150.7 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).x, -209.63333333333333, 5, "Expected Clone 6 of Stern to have x-position -209.63333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).y, 149.56666666666666, 5, "Expected Clone 6 of Stern to have y-position 149.56666666666666 +-5");
  t.keyPress('right arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Raumschiff").direction, 60, 1, "Expected Sprite Raumschiff to face in direction 60 +-1");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, -160, 1, "Expected Sprite Schwarzes Loch to face in direction -160 +-1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 256.1, 5, "Expected Sprite Raumschiff to have x-position 256.1 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -188.63333333333333, 5, "Expected Sprite Raumschiff to have y-position -188.63333333333333 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, 20.20688986856871, 5, "Expected Sprite Schwarzes Loch to have x-position 20.20688986856871 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -105.9991695219644, 5, "Expected Sprite Schwarzes Loch to have y-position -105.9991695219644 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 136.83333333333334, 5, "Expected Clone 1 of Stern to have x-position 136.83333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 17.666666666666668, 5, "Expected Clone 1 of Stern to have y-position 17.666666666666668 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 137, 5, "Expected Clone 2 of Stern to have x-position 137 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 21.2, 5, "Expected Clone 2 of Stern to have y-position 21.2 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 138.4, 5, "Expected Clone 3 of Stern to have x-position 138.4 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 19.866666666666667, 5, "Expected Clone 3 of Stern to have y-position 19.866666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -211.6, 5, "Expected Clone 4 of Stern to have x-position -211.6 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 148.1, 5, "Expected Clone 4 of Stern to have y-position 148.1 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -210.66666666666666, 5, "Expected Clone 5 of Stern to have x-position -210.66666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 151.16666666666666, 5, "Expected Clone 5 of Stern to have y-position 151.16666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).x, -209.26666666666668, 5, "Expected Clone 6 of Stern to have x-position -209.26666666666668 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).y, 149.13333333333333, 5, "Expected Clone 6 of Stern to have y-position 149.13333333333333 +-5");
  await t.runForSteps(4);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, -110, 1, "Expected Sprite Schwarzes Loch to face in direction -110 +-1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 257, 5, "Expected Sprite Raumschiff to have x-position 257 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -192, 5, "Expected Sprite Raumschiff to have y-position -192 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, 4.622501868990581, 5, "Expected Sprite Schwarzes Loch to have x-position 4.622501868990581 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -124.57191990884373, 5, "Expected Sprite Schwarzes Loch to have y-position -124.57191990884373 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 135.25, 5, "Expected Clone 1 of Stern to have x-position 135.25 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 16.5, 5, "Expected Clone 1 of Stern to have y-position 16.5 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 135.33333333333334, 5, "Expected Clone 2 of Stern to have x-position 135.33333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 21.866666666666667, 5, "Expected Clone 2 of Stern to have y-position 21.866666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 137.4, 5, "Expected Clone 3 of Stern to have x-position 137.4 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 19.783333333333335, 5, "Expected Clone 3 of Stern to have y-position 19.783333333333335 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -212.93333333333334, 5, "Expected Clone 4 of Stern to have x-position -212.93333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 146.51666666666668, 5, "Expected Clone 4 of Stern to have y-position 146.51666666666668 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -211.33333333333334, 5, "Expected Clone 5 of Stern to have x-position -211.33333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 152.33333333333334, 5, "Expected Clone 5 of Stern to have y-position 152.33333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).x, -208.35, 5, "Expected Clone 6 of Stern to have x-position -208.35 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).y, 148.05, 5, "Expected Clone 6 of Stern to have y-position 148.05 +-5");
  t.keyPress('right arrow', 2);
  await t.runForSteps(2);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Raumschiff").direction, 90, 1, "Expected Sprite Raumschiff to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, -80, 1, "Expected Sprite Schwarzes Loch to face in direction -80 +-1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 253, 5, "Expected Sprite Raumschiff to have x-position 253 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -179, 5, "Expected Sprite Raumschiff to have y-position -179 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, -10.000000000000002, 5, "Expected Sprite Schwarzes Loch to have x-position -10.000000000000002 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -127.15026151380673, 5, "Expected Sprite Schwarzes Loch to have y-position -127.15026151380673 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 134.3, 5, "Expected Clone 1 of Stern to have x-position 134.3 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 15.8, 5, "Expected Clone 1 of Stern to have y-position 15.8 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 134.33333333333334, 5, "Expected Clone 2 of Stern to have x-position 134.33333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 22.266666666666666, 5, "Expected Clone 2 of Stern to have y-position 22.266666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 136.8, 5, "Expected Clone 3 of Stern to have x-position 136.8 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 19.733333333333334, 5, "Expected Clone 3 of Stern to have y-position 19.733333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -213.73333333333332, 5, "Expected Clone 4 of Stern to have x-position -213.73333333333332 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 145.56666666666666, 5, "Expected Clone 4 of Stern to have y-position 145.56666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -211.73333333333332, 5, "Expected Clone 5 of Stern to have x-position -211.73333333333332 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 153.03333333333333, 5, "Expected Clone 5 of Stern to have y-position 153.03333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).x, -207.8, 5, "Expected Clone 6 of Stern to have x-position -207.8 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).y, 147.4, 5, "Expected Clone 6 of Stern to have y-position 147.4 +-5");
  await t.runForSteps(2);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, -50, 1, "Expected Sprite Schwarzes Loch to face in direction -50 +-1");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, -23.952628887912777, 5, "Expected Sprite Schwarzes Loch to have x-position -23.952628887912777 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -122.07191990884373, 5, "Expected Sprite Schwarzes Loch to have y-position -122.07191990884373 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 133.35, 5, "Expected Clone 1 of Stern to have x-position 133.35 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 15.100000000000001, 5, "Expected Clone 1 of Stern to have y-position 15.100000000000001 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 133.33333333333334, 5, "Expected Clone 2 of Stern to have x-position 133.33333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 22.666666666666668, 5, "Expected Clone 2 of Stern to have y-position 22.666666666666668 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 136.2, 5, "Expected Clone 3 of Stern to have x-position 136.2 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 19.683333333333334, 5, "Expected Clone 3 of Stern to have y-position 19.683333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -214.53333333333333, 5, "Expected Clone 4 of Stern to have x-position -214.53333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 144.61666666666667, 5, "Expected Clone 4 of Stern to have y-position 144.61666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -212.13333333333333, 5, "Expected Clone 5 of Stern to have x-position -212.13333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 153.73333333333332, 5, "Expected Clone 5 of Stern to have y-position 153.73333333333332 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).x, -207.25, 5, "Expected Clone 6 of Stern to have x-position -207.25 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).y, 146.75, 5, "Expected Clone 6 of Stern to have y-position 146.75 +-5");
  await t.runForSteps(4);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 0, 1, "Expected Sprite Schwarzes Loch to face in direction 0 +-1");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, -36.07513075690336, 5, "Expected Sprite Schwarzes Loch to have x-position -36.07513075690336 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -101.07513075690336, 5, "Expected Sprite Schwarzes Loch to have y-position -101.07513075690336 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 131.76666666666665, 5, "Expected Clone 1 of Stern to have x-position 131.76666666666665 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 13.933333333333334, 5, "Expected Clone 1 of Stern to have y-position 13.933333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 131.66666666666666, 5, "Expected Clone 2 of Stern to have x-position 131.66666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 23.333333333333332, 5, "Expected Clone 2 of Stern to have y-position 23.333333333333332 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 135.2, 5, "Expected Clone 3 of Stern to have x-position 135.2 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 19.6, 5, "Expected Clone 3 of Stern to have y-position 19.6 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -215.86666666666667, 5, "Expected Clone 4 of Stern to have x-position -215.86666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 143.03333333333333, 5, "Expected Clone 4 of Stern to have y-position 143.03333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -212.8, 5, "Expected Clone 5 of Stern to have x-position -212.8 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 154.9, 5, "Expected Clone 5 of Stern to have y-position 154.9 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).x, -206.33333333333334, 5, "Expected Clone 6 of Stern to have x-position -206.33333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).y, 145.66666666666666, 5, "Expected Clone 6 of Stern to have y-position 145.66666666666666 +-5");
  await t.runForSteps(89);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 180, 1, "Expected Sprite Schwarzes Loch to face in direction 180 +-1");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, 21.07513075690336, 5, "Expected Sprite Schwarzes Loch to have x-position 21.07513075690336 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -96.07513075690336, 5, "Expected Sprite Schwarzes Loch to have y-position -96.07513075690336 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 140.25, 5, "Expected Clone 1 of Stern to have x-position 140.25 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 29.833333333333332, 5, "Expected Clone 1 of Stern to have y-position 29.833333333333332 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 122.7, 5, "Expected Clone 2 of Stern to have x-position 122.7 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 3.6999999999999993, 5, "Expected Clone 2 of Stern to have y-position 3.6999999999999993 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 144.78333333333333, 5, "Expected Clone 3 of Stern to have x-position 144.78333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 33.13333333333333, 5, "Expected Clone 3 of Stern to have y-position 33.13333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -226.85, 5, "Expected Clone 4 of Stern to have x-position -226.85 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 144.6, 5, "Expected Clone 4 of Stern to have y-position 144.6 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -218, 5, "Expected Clone 5 of Stern to have x-position -218 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 135.66666666666666, 5, "Expected Clone 5 of Stern to have y-position 135.66666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).x, -203.08333333333334, 5, "Expected Clone 6 of Stern to have x-position -203.08333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).y, 148.43333333333334, 5, "Expected Clone 6 of Stern to have y-position 148.43333333333334 +-5");
  t.dragSprite('Raumschiff', 77.37296811969938, 78.49977370422806, null);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, -170, 1, "Expected Sprite Schwarzes Loch to face in direction -170 +-1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 78.37296811969938, 5, "Expected Sprite Raumschiff to have x-position 78.37296811969938 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 78.49977370422806, 5, "Expected Sprite Raumschiff to have y-position 78.49977370422806 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, 21.07513075690336, 5, "Expected Sprite Schwarzes Loch to have x-position 21.07513075690336 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -101.07513075690336, 5, "Expected Sprite Schwarzes Loch to have y-position -101.07513075690336 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 140.6, 5, "Expected Clone 1 of Stern to have x-position 140.6 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 30.266666666666666, 5, "Expected Clone 1 of Stern to have y-position 30.266666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 122.75, 5, "Expected Clone 2 of Stern to have x-position 122.75 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 3.25, 5, "Expected Clone 2 of Stern to have y-position 3.25 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 145.1, 5, "Expected Clone 3 of Stern to have x-position 145.1 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 33.4, 5, "Expected Clone 3 of Stern to have y-position 33.4 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -226.86666666666667, 5, "Expected Clone 4 of Stern to have x-position -226.86666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 144.86666666666667, 5, "Expected Clone 4 of Stern to have y-position 144.86666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -218, 5, "Expected Clone 5 of Stern to have x-position -218 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 135.1, 5, "Expected Clone 5 of Stern to have y-position 135.1 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).x, -203.16666666666666, 5, "Expected Clone 6 of Stern to have x-position -203.16666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).y, 148.66666666666666, 5, "Expected Clone 6 of Stern to have y-position 148.66666666666666 +-5");
  await t.runForSteps(40);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 110, 1, "Expected Sprite Schwarzes Loch to face in direction 110 +-1");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 4, "Expected Sprite Raumschiff to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 3, "Expected Sprite Stern to be at layer 3");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 106.37296811969938, 5, "Expected Sprite Raumschiff to have x-position 106.37296811969938 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 78.49977370422806, 5, "Expected Sprite Raumschiff to have y-position 78.49977370422806 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, -0.07596123493896023, 5, "Expected Sprite Schwarzes Loch to have x-position -0.07596123493896023 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -70.86824088833465, 5, "Expected Sprite Schwarzes Loch to have y-position -70.86824088833465 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.end();
}

module.exports = [
  {
      test: test0,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687938432955',
      type: 'standard',
  },
  {
      test: test1,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687938432955',
      type: 'standard',
  }
]
