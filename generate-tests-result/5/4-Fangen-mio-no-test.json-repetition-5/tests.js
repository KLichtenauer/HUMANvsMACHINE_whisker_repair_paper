const test0 = async function (t) {
  await t.runForSteps(55);
  await t.runForSteps(1);
  t.keyPress('right arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Scheibe").direction, 93, 1, "Expected Sprite Scheibe to face in direction 93 +-1");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, -123.07777777777778, 5, "Expected Clone 1 of Rot to have x-position -123.07777777777778 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, 86.56666666666666, 5, "Expected Clone 1 of Rot to have y-position 86.56666666666666 +-5");
  await t.runForSteps(42);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Rot").x, 232, 5, "Expected Sprite Rot to have x-position 232 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 83, 5, "Expected Sprite Rot to have y-position 83 +-5");
  t.dragSprite('Rot', 18.23299739535305, -75.26087700810959, null);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Rot").x, -226, 5, "Expected Sprite Rot to have x-position -226 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -64, 5, "Expected Sprite Rot to have y-position -64 +-5");
  t.dragSprite('Rot', 11.000000000000002, -29.593528747558594, null);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Rot").x, -209, 5, "Expected Sprite Rot to have x-position -209 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 10, 5, "Expected Sprite Rot to have y-position 10 +-5");
  t.dragSprite('Rot', 11, -53, null);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Rot").x, 173, 5, "Expected Sprite Rot to have x-position 173 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -140, 5, "Expected Sprite Rot to have y-position -140 +-5");
  t.keyPress('right arrow', 3);
  await t.runForSteps(3);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Scheibe").direction, 102, 1, "Expected Sprite Scheibe to face in direction 102 +-1");
  t.assert.withinRange(t.getSprite("Rot").x, -112, 5, "Expected Sprite Rot to have x-position -112 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -65, 5, "Expected Sprite Rot to have y-position -65 +-5");
  await t.runForSteps(85);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Rot").getClone(1).currentCostume, 0, "Expected Clone 1 of Rot to have costume 0");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 1, "Expected Sprite Rot to have 1 clones");
  t.assert.equal(t.getSprite("Rot").direction, 117.3635469273917, 1, "Expected Sprite Rot to face in direction 117.3635469273917 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).direction, 117.3635469273917, 1, "Expected Clone 1 of Rot to face in direction 117.3635469273917 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 3, "Expected Sprite Scheibe to be at layer 3");
  t.assert.equal(t.getSprite("Rot").layerOrder, 2, "Expected Sprite Rot to be at layer 2");
  t.assert.equal(t.getSprite("Rot").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Rot").x, -228, 5, "Expected Sprite Rot to have x-position -228 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 118, 5, "Expected Sprite Rot to have y-position 118 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, -83.6, 5, "Expected Clone 1 of Rot to have x-position -83.6 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, 43.266666666666666, 5, "Expected Clone 1 of Rot to have y-position 43.266666666666666 +-5");
  t.assert.not(t.getSprite("Rot").getClone(1).sayText, "Expected Clone 1 of Rot not to say anything");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).size, 80, 1, "Expected Clone 1 of Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Rot").getClone(1).visible, "Expected Clone 1 of Rot to be visible");
  t.assert.equal(t.getSprite("Rot").getClone(1).volume, 100, "Expected Clone 1 of Rot to have volume 100");
  t.dragSprite('Rot', -10.273749436837258, -14.652014100477196, 1);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.dragSprite('Rot', 7.068244264505683, -75.29809482188658, null);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Rot").x, 7.068244264505683, 5, "Expected Sprite Rot to have x-position 7.068244264505683 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -75.29809482188658, 5, "Expected Sprite Rot to have y-position -75.29809482188658 +-5");
  t.keyPress('right arrow', 2);
  await t.runForSteps(2);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Scheibe").direction, 108, 1, "Expected Sprite Scheibe to face in direction 108 +-1");
  t.assert.withinRange(t.getSprite("Rot").x, 92, 5, "Expected Sprite Rot to have x-position 92 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 72, 5, "Expected Sprite Rot to have y-position 72 +-5");
  t.keyPress('left arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Scheibe").direction, 105, 1, "Expected Sprite Scheibe to face in direction 105 +-1");
  t.assert.withinRange(t.getSprite("Rot").x, 198, 5, "Expected Sprite Rot to have x-position 198 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 155, 5, "Expected Sprite Rot to have y-position 155 +-5");
  await t.runForSteps(19);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Rot").getClone(1).currentCostume, 0, "Expected Clone 1 of Rot to have costume 0");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 1, "Expected Sprite Rot to have 1 clones");
  t.assert.equal(t.getSprite("Rot").direction, -128.0548442446745, 1, "Expected Sprite Rot to face in direction -128.0548442446745 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).direction, -128.0548442446745, 1, "Expected Clone 1 of Rot to face in direction -128.0548442446745 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 3, "Expected Sprite Scheibe to be at layer 3");
  t.assert.equal(t.getSprite("Rot").layerOrder, 2, "Expected Sprite Rot to be at layer 2");
  t.assert.equal(t.getSprite("Rot").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, 156.2, 5, "Expected Clone 1 of Rot to have x-position 156.2 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, 122.27777777777777, 5, "Expected Clone 1 of Rot to have y-position 122.27777777777777 +-5");
  t.assert.not(t.getSprite("Rot").getClone(1).sayText, "Expected Clone 1 of Rot not to say anything");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).size, 80, 1, "Expected Clone 1 of Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Rot").getClone(1).visible, "Expected Clone 1 of Rot to be visible");
  t.assert.equal(t.getSprite("Rot").getClone(1).volume, 100, "Expected Clone 1 of Rot to have volume 100");
  t.dragSprite('Rot', -13.081272457052536, -12.198483912078563, 1);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  await t.runForSteps(3);
  await t.runForSteps(1);
  await t.runForSteps(21);
  await t.runForSteps(1);
  t.keyPress('left arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Scheibe").direction, 102, 1, "Expected Sprite Scheibe to face in direction 102 +-1");
  t.keyPress('right arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Scheibe").direction, 105, 1, "Expected Sprite Scheibe to face in direction 105 +-1");
  await t.runForSteps(25);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Rot").getClone(1).currentCostume, 0, "Expected Clone 1 of Rot to have costume 0");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 1, "Expected Sprite Rot to have 1 clones");
  t.assert.equal(t.getSprite("Rot").direction, -50.844565877386884, 1, "Expected Sprite Rot to face in direction -50.844565877386884 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).direction, -50.844565877386884, 1, "Expected Clone 1 of Rot to face in direction -50.844565877386884 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 3, "Expected Sprite Scheibe to be at layer 3");
  t.assert.equal(t.getSprite("Rot").layerOrder, 2, "Expected Sprite Rot to be at layer 2");
  t.assert.equal(t.getSprite("Rot").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Rot").x, 210, 5, "Expected Sprite Rot to have x-position 210 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -171, 5, "Expected Sprite Rot to have y-position -171 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, 205.33333333333334, 5, "Expected Clone 1 of Rot to have x-position 205.33333333333334 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, -167.2, 5, "Expected Clone 1 of Rot to have y-position -167.2 +-5");
  t.assert.not(t.getSprite("Rot").getClone(1).sayText, "Expected Clone 1 of Rot not to say anything");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).size, 80, 1, "Expected Clone 1 of Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Rot").getClone(1).visible, "Expected Clone 1 of Rot to be visible");
  t.assert.equal(t.getSprite("Rot").getClone(1).volume, 100, "Expected Clone 1 of Rot to have volume 100");
  t.dragSprite('Rot', -17.804834786030096, -1.2289629040570487, 1);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  await t.runForSteps(67);
  await t.runForSteps(1);
  t.end();
}

module.exports = [
  {
      test: test0,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687938490172',
      type: 'standard',
  }
]
