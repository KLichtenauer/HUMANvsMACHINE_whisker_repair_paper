const test0 = async function (t) {
  await t.runForSteps(92);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Spieler").currentCostume, 0, "Expected Sprite Spieler to have costume 0");
  t.assert.equal(t.getSprite("Freundin").currentCostume, 0, "Expected Sprite Freundin to have costume 0");
  t.assert.equal(t.getSprite("Münzen").currentCostume, 0, "Expected Sprite Münzen to have costume 0");
  t.assert.equal(t.getSprite("Eis").currentCostume, 0, "Expected Sprite Eis to have costume 0");
  t.assert.equal(t.getSprite("Spieler").getCloneCount(), 0, "Expected Sprite Spieler to have 0 clones");
  t.assert.equal(t.getSprite("Freundin").getCloneCount(), 0, "Expected Sprite Freundin to have 0 clones");
  t.assert.equal(t.getSprite("Münzen").getCloneCount(), 0, "Expected Sprite Münzen to have 0 clones");
  t.assert.equal(t.getSprite("Eis").getCloneCount(), 0, "Expected Sprite Eis to have 0 clones");
  t.assert.equal(t.getSprite("Spieler").direction, 0, 1, "Expected Sprite Spieler to face in direction 0 +-1");
  t.assert.equal(t.getSprite("Freundin").direction, 90, 1, "Expected Sprite Freundin to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Münzen").direction, 90, 1, "Expected Sprite Münzen to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Eis").direction, 90, 1, "Expected Sprite Eis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Spieler").effects.color, 0, "Expected effect color of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.fisheye, 0, "Expected effect fisheye of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.whirl, 0, "Expected effect whirl of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.pixelate, 0, "Expected effect pixelate of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.mosaic, 0, "Expected effect mosaic of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.brightness, 0, "Expected effect brightness of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.ghost, 0, "Expected effect ghost of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.color, 0, "Expected effect color of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.fisheye, 0, "Expected effect fisheye of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.whirl, 0, "Expected effect whirl of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.pixelate, 0, "Expected effect pixelate of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.mosaic, 0, "Expected effect mosaic of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.brightness, 0, "Expected effect brightness of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.ghost, 0, "Expected effect ghost of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.color, 0, "Expected effect color of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.fisheye, 0, "Expected effect fisheye of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.whirl, 0, "Expected effect whirl of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.pixelate, 0, "Expected effect pixelate of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.mosaic, 0, "Expected effect mosaic of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.brightness, 0, "Expected effect brightness of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.ghost, 0, "Expected effect ghost of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Eis").effects.color, 0, "Expected effect color of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.fisheye, 0, "Expected effect fisheye of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.whirl, 0, "Expected effect whirl of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.pixelate, 0, "Expected effect pixelate of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.mosaic, 0, "Expected effect mosaic of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.brightness, 0, "Expected effect brightness of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.ghost, 0, "Expected effect ghost of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Spieler").layerOrder, 3, "Expected Sprite Spieler to be at layer 3");
  t.assert.equal(t.getSprite("Freundin").layerOrder, 5, "Expected Sprite Freundin to be at layer 5");
  t.assert.equal(t.getSprite("Münzen").layerOrder, 4, "Expected Sprite Münzen to be at layer 4");
  t.assert.equal(t.getSprite("Eis").layerOrder, 2, "Expected Sprite Eis to be at layer 2");
  t.assert.withinRange(t.getSprite("Spieler").x, -98, 5, "Expected Sprite Spieler to have x-position -98 +-5");
  t.assert.withinRange(t.getSprite("Spieler").y, -50, 5, "Expected Sprite Spieler to have y-position -50 +-5");
  t.assert.withinRange(t.getSprite("Freundin").x, 60, 5, "Expected Sprite Freundin to have x-position 60 +-5");
  t.assert.withinRange(t.getSprite("Freundin").y, -131, 5, "Expected Sprite Freundin to have y-position -131 +-5");
  t.assert.withinRange(t.getSprite("Münzen").x, -27, 5, "Expected Sprite Münzen to have x-position -27 +-5");
  t.assert.withinRange(t.getSprite("Münzen").y, 130, 5, "Expected Sprite Münzen to have y-position 130 +-5");
  t.assert.withinRange(t.getSprite("Eis").x, 195, 5, "Expected Sprite Eis to have x-position 195 +-5");
  t.assert.withinRange(t.getSprite("Eis").y, -158, 5, "Expected Sprite Eis to have y-position -158 +-5");
  t.assert.not(t.getSprite("Spieler").sayText, "Expected Sprite Spieler not to say anything");
  t.assert.not(t.getSprite("Freundin").sayText, "Expected Sprite Freundin not to say anything");
  t.assert.not(t.getSprite("Münzen").sayText, "Expected Sprite Münzen not to say anything");
  t.assert.not(t.getSprite("Eis").sayText, "Expected Sprite Eis not to say anything");
  t.assert.withinRange(t.getSprite("Spieler").size, 8, 1, "Expected Sprite Spieler to have size 8 +-1");
  t.assert.withinRange(t.getSprite("Freundin").size, 50, 1, "Expected Sprite Freundin to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Münzen").size, 50, 1, "Expected Sprite Münzen to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Eis").size, 20, 1, "Expected Sprite Eis to have size 20 +-1");
  t.assert.ok(t.getSprite("Spieler").visible, "Expected Sprite Spieler to be visible");
  t.assert.ok(t.getSprite("Freundin").visible, "Expected Sprite Freundin to be visible");
  t.assert.ok(t.getSprite("Münzen").visible, "Expected Sprite Münzen to be visible");
  t.assert.ok(t.getSprite("Eis").visible, "Expected Sprite Eis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Spieler").volume, 100, "Expected Sprite Spieler to have volume 100");
  t.assert.equal(t.getSprite("Freundin").volume, 100, "Expected Sprite Freundin to have volume 100");
  t.assert.equal(t.getSprite("Münzen").volume, 100, "Expected Sprite Münzen to have volume 100");
  t.assert.equal(t.getSprite("Eis").volume, 100, "Expected Sprite Eis to have volume 100");
  t.dragSprite('Münzen', 14.575818089513191, -98.1208351855538, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Spieler").currentCostume, 0, "Expected Sprite Spieler to have costume 0");
  t.assert.equal(t.getSprite("Freundin").currentCostume, 0, "Expected Sprite Freundin to have costume 0");
  t.assert.equal(t.getSprite("Münzen").currentCostume, 0, "Expected Sprite Münzen to have costume 0");
  t.assert.equal(t.getSprite("Eis").currentCostume, 0, "Expected Sprite Eis to have costume 0");
  t.assert.equal(t.getSprite("Spieler").getCloneCount(), 0, "Expected Sprite Spieler to have 0 clones");
  t.assert.equal(t.getSprite("Freundin").getCloneCount(), 0, "Expected Sprite Freundin to have 0 clones");
  t.assert.equal(t.getSprite("Münzen").getCloneCount(), 0, "Expected Sprite Münzen to have 0 clones");
  t.assert.equal(t.getSprite("Eis").getCloneCount(), 0, "Expected Sprite Eis to have 0 clones");
  t.assert.equal(t.getSprite("Spieler").direction, -90, 1, "Expected Sprite Spieler to face in direction -90 +-1");
  t.assert.equal(t.getSprite("Freundin").direction, 90, 1, "Expected Sprite Freundin to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Münzen").direction, 90, 1, "Expected Sprite Münzen to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Eis").direction, 90, 1, "Expected Sprite Eis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Spieler").effects.color, 0, "Expected effect color of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.fisheye, 0, "Expected effect fisheye of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.whirl, 0, "Expected effect whirl of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.pixelate, 0, "Expected effect pixelate of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.mosaic, 0, "Expected effect mosaic of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.brightness, 0, "Expected effect brightness of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.ghost, 0, "Expected effect ghost of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.color, 0, "Expected effect color of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.fisheye, 0, "Expected effect fisheye of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.whirl, 0, "Expected effect whirl of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.pixelate, 0, "Expected effect pixelate of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.mosaic, 0, "Expected effect mosaic of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.brightness, 0, "Expected effect brightness of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.ghost, 0, "Expected effect ghost of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.color, 0, "Expected effect color of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.fisheye, 0, "Expected effect fisheye of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.whirl, 0, "Expected effect whirl of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.pixelate, 0, "Expected effect pixelate of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.mosaic, 0, "Expected effect mosaic of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.brightness, 0, "Expected effect brightness of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.ghost, 0, "Expected effect ghost of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Eis").effects.color, 0, "Expected effect color of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.fisheye, 0, "Expected effect fisheye of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.whirl, 0, "Expected effect whirl of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.pixelate, 0, "Expected effect pixelate of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.mosaic, 0, "Expected effect mosaic of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.brightness, 0, "Expected effect brightness of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.ghost, 0, "Expected effect ghost of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Spieler").layerOrder, 3, "Expected Sprite Spieler to be at layer 3");
  t.assert.equal(t.getSprite("Freundin").layerOrder, 5, "Expected Sprite Freundin to be at layer 5");
  t.assert.equal(t.getSprite("Münzen").layerOrder, 4, "Expected Sprite Münzen to be at layer 4");
  t.assert.equal(t.getSprite("Eis").layerOrder, 2, "Expected Sprite Eis to be at layer 2");
  t.assert.withinRange(t.getSprite("Spieler").x, -103, 5, "Expected Sprite Spieler to have x-position -103 +-5");
  t.assert.withinRange(t.getSprite("Spieler").y, -50, 5, "Expected Sprite Spieler to have y-position -50 +-5");
  t.assert.withinRange(t.getSprite("Freundin").x, 60, 5, "Expected Sprite Freundin to have x-position 60 +-5");
  t.assert.withinRange(t.getSprite("Freundin").y, -131, 5, "Expected Sprite Freundin to have y-position -131 +-5");
  t.assert.withinRange(t.getSprite("Münzen").x, 14.575818089513191, 5, "Expected Sprite Münzen to have x-position 14.575818089513191 +-5");
  t.assert.withinRange(t.getSprite("Münzen").y, -98.1208351855538, 5, "Expected Sprite Münzen to have y-position -98.1208351855538 +-5");
  t.assert.withinRange(t.getSprite("Eis").x, 195, 5, "Expected Sprite Eis to have x-position 195 +-5");
  t.assert.withinRange(t.getSprite("Eis").y, -158, 5, "Expected Sprite Eis to have y-position -158 +-5");
  t.assert.not(t.getSprite("Spieler").sayText, "Expected Sprite Spieler not to say anything");
  t.assert.not(t.getSprite("Freundin").sayText, "Expected Sprite Freundin not to say anything");
  t.assert.not(t.getSprite("Münzen").sayText, "Expected Sprite Münzen not to say anything");
  t.assert.not(t.getSprite("Eis").sayText, "Expected Sprite Eis not to say anything");
  t.assert.withinRange(t.getSprite("Spieler").size, 8, 1, "Expected Sprite Spieler to have size 8 +-1");
  t.assert.withinRange(t.getSprite("Freundin").size, 50, 1, "Expected Sprite Freundin to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Münzen").size, 50, 1, "Expected Sprite Münzen to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Eis").size, 20, 1, "Expected Sprite Eis to have size 20 +-1");
  t.assert.ok(t.getSprite("Spieler").visible, "Expected Sprite Spieler to be visible");
  t.assert.ok(t.getSprite("Freundin").visible, "Expected Sprite Freundin to be visible");
  t.assert.ok(t.getSprite("Münzen").visible, "Expected Sprite Münzen to be visible");
  t.assert.ok(t.getSprite("Eis").visible, "Expected Sprite Eis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Spieler").volume, 100, "Expected Sprite Spieler to have volume 100");
  t.assert.equal(t.getSprite("Freundin").volume, 100, "Expected Sprite Freundin to have volume 100");
  t.assert.equal(t.getSprite("Münzen").volume, 100, "Expected Sprite Münzen to have volume 100");
  t.assert.equal(t.getSprite("Eis").volume, 100, "Expected Sprite Eis to have volume 100");
  t.dragSprite('Spieler', -126.74917559804136, -36.12890859425701, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Spieler").currentCostume, 0, "Expected Sprite Spieler to have costume 0");
  t.assert.equal(t.getSprite("Freundin").currentCostume, 0, "Expected Sprite Freundin to have costume 0");
  t.assert.equal(t.getSprite("Münzen").currentCostume, 0, "Expected Sprite Münzen to have costume 0");
  t.assert.equal(t.getSprite("Eis").currentCostume, 0, "Expected Sprite Eis to have costume 0");
  t.assert.equal(t.getSprite("Spieler").getCloneCount(), 0, "Expected Sprite Spieler to have 0 clones");
  t.assert.equal(t.getSprite("Freundin").getCloneCount(), 0, "Expected Sprite Freundin to have 0 clones");
  t.assert.equal(t.getSprite("Münzen").getCloneCount(), 0, "Expected Sprite Münzen to have 0 clones");
  t.assert.equal(t.getSprite("Eis").getCloneCount(), 0, "Expected Sprite Eis to have 0 clones");
  t.assert.equal(t.getSprite("Spieler").direction, 180, 1, "Expected Sprite Spieler to face in direction 180 +-1");
  t.assert.equal(t.getSprite("Freundin").direction, 90, 1, "Expected Sprite Freundin to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Münzen").direction, 90, 1, "Expected Sprite Münzen to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Eis").direction, 90, 1, "Expected Sprite Eis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Spieler").effects.color, 0, "Expected effect color of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.fisheye, 0, "Expected effect fisheye of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.whirl, 0, "Expected effect whirl of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.pixelate, 0, "Expected effect pixelate of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.mosaic, 0, "Expected effect mosaic of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.brightness, 0, "Expected effect brightness of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.ghost, 0, "Expected effect ghost of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.color, 0, "Expected effect color of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.fisheye, 0, "Expected effect fisheye of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.whirl, 0, "Expected effect whirl of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.pixelate, 0, "Expected effect pixelate of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.mosaic, 0, "Expected effect mosaic of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.brightness, 0, "Expected effect brightness of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.ghost, 0, "Expected effect ghost of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.color, 0, "Expected effect color of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.fisheye, 0, "Expected effect fisheye of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.whirl, 0, "Expected effect whirl of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.pixelate, 0, "Expected effect pixelate of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.mosaic, 0, "Expected effect mosaic of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.brightness, 0, "Expected effect brightness of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.ghost, 0, "Expected effect ghost of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Eis").effects.color, 0, "Expected effect color of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.fisheye, 0, "Expected effect fisheye of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.whirl, 0, "Expected effect whirl of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.pixelate, 0, "Expected effect pixelate of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.mosaic, 0, "Expected effect mosaic of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.brightness, 0, "Expected effect brightness of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.ghost, 0, "Expected effect ghost of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Spieler").layerOrder, 3, "Expected Sprite Spieler to be at layer 3");
  t.assert.equal(t.getSprite("Freundin").layerOrder, 5, "Expected Sprite Freundin to be at layer 5");
  t.assert.equal(t.getSprite("Münzen").layerOrder, 4, "Expected Sprite Münzen to be at layer 4");
  t.assert.equal(t.getSprite("Eis").layerOrder, 2, "Expected Sprite Eis to be at layer 2");
  t.assert.withinRange(t.getSprite("Spieler").x, -126.74917559804136, 5, "Expected Sprite Spieler to have x-position -126.74917559804136 +-5");
  t.assert.withinRange(t.getSprite("Spieler").y, -41.12890859425701, 5, "Expected Sprite Spieler to have y-position -41.12890859425701 +-5");
  t.assert.withinRange(t.getSprite("Freundin").x, 60, 5, "Expected Sprite Freundin to have x-position 60 +-5");
  t.assert.withinRange(t.getSprite("Freundin").y, -131, 5, "Expected Sprite Freundin to have y-position -131 +-5");
  t.assert.withinRange(t.getSprite("Münzen").x, 14.575818089513191, 5, "Expected Sprite Münzen to have x-position 14.575818089513191 +-5");
  t.assert.withinRange(t.getSprite("Münzen").y, -98.1208351855538, 5, "Expected Sprite Münzen to have y-position -98.1208351855538 +-5");
  t.assert.withinRange(t.getSprite("Eis").x, 195, 5, "Expected Sprite Eis to have x-position 195 +-5");
  t.assert.withinRange(t.getSprite("Eis").y, -158, 5, "Expected Sprite Eis to have y-position -158 +-5");
  t.assert.not(t.getSprite("Spieler").sayText, "Expected Sprite Spieler not to say anything");
  t.assert.not(t.getSprite("Freundin").sayText, "Expected Sprite Freundin not to say anything");
  t.assert.not(t.getSprite("Münzen").sayText, "Expected Sprite Münzen not to say anything");
  t.assert.not(t.getSprite("Eis").sayText, "Expected Sprite Eis not to say anything");
  t.assert.withinRange(t.getSprite("Spieler").size, 8, 1, "Expected Sprite Spieler to have size 8 +-1");
  t.assert.withinRange(t.getSprite("Freundin").size, 50, 1, "Expected Sprite Freundin to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Münzen").size, 50, 1, "Expected Sprite Münzen to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Eis").size, 20, 1, "Expected Sprite Eis to have size 20 +-1");
  t.assert.ok(t.getSprite("Spieler").visible, "Expected Sprite Spieler to be visible");
  t.assert.ok(t.getSprite("Freundin").visible, "Expected Sprite Freundin to be visible");
  t.assert.ok(t.getSprite("Münzen").visible, "Expected Sprite Münzen to be visible");
  t.assert.ok(t.getSprite("Eis").visible, "Expected Sprite Eis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Spieler").volume, 100, "Expected Sprite Spieler to have volume 100");
  t.assert.equal(t.getSprite("Freundin").volume, 100, "Expected Sprite Freundin to have volume 100");
  t.assert.equal(t.getSprite("Münzen").volume, 100, "Expected Sprite Münzen to have volume 100");
  t.assert.equal(t.getSprite("Eis").volume, 100, "Expected Sprite Eis to have volume 100");
  t.dragSprite('Spieler', -121.70783158311036, -39.19788606436131, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Spieler").currentCostume, 0, "Expected Sprite Spieler to have costume 0");
  t.assert.equal(t.getSprite("Freundin").currentCostume, 0, "Expected Sprite Freundin to have costume 0");
  t.assert.equal(t.getSprite("Münzen").currentCostume, 0, "Expected Sprite Münzen to have costume 0");
  t.assert.equal(t.getSprite("Eis").currentCostume, 0, "Expected Sprite Eis to have costume 0");
  t.assert.equal(t.getSprite("Spieler").getCloneCount(), 0, "Expected Sprite Spieler to have 0 clones");
  t.assert.equal(t.getSprite("Freundin").getCloneCount(), 0, "Expected Sprite Freundin to have 0 clones");
  t.assert.equal(t.getSprite("Münzen").getCloneCount(), 0, "Expected Sprite Münzen to have 0 clones");
  t.assert.equal(t.getSprite("Eis").getCloneCount(), 0, "Expected Sprite Eis to have 0 clones");
  t.assert.equal(t.getSprite("Spieler").direction, 90, 1, "Expected Sprite Spieler to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Freundin").direction, 90, 1, "Expected Sprite Freundin to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Münzen").direction, 90, 1, "Expected Sprite Münzen to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Eis").direction, 90, 1, "Expected Sprite Eis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Spieler").effects.color, 0, "Expected effect color of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.fisheye, 0, "Expected effect fisheye of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.whirl, 0, "Expected effect whirl of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.pixelate, 0, "Expected effect pixelate of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.mosaic, 0, "Expected effect mosaic of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.brightness, 0, "Expected effect brightness of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.ghost, 0, "Expected effect ghost of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.color, 0, "Expected effect color of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.fisheye, 0, "Expected effect fisheye of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.whirl, 0, "Expected effect whirl of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.pixelate, 0, "Expected effect pixelate of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.mosaic, 0, "Expected effect mosaic of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.brightness, 0, "Expected effect brightness of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.ghost, 0, "Expected effect ghost of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.color, 0, "Expected effect color of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.fisheye, 0, "Expected effect fisheye of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.whirl, 0, "Expected effect whirl of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.pixelate, 0, "Expected effect pixelate of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.mosaic, 0, "Expected effect mosaic of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.brightness, 0, "Expected effect brightness of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.ghost, 0, "Expected effect ghost of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Eis").effects.color, 0, "Expected effect color of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.fisheye, 0, "Expected effect fisheye of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.whirl, 0, "Expected effect whirl of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.pixelate, 0, "Expected effect pixelate of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.mosaic, 0, "Expected effect mosaic of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.brightness, 0, "Expected effect brightness of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.ghost, 0, "Expected effect ghost of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Spieler").layerOrder, 3, "Expected Sprite Spieler to be at layer 3");
  t.assert.equal(t.getSprite("Freundin").layerOrder, 5, "Expected Sprite Freundin to be at layer 5");
  t.assert.equal(t.getSprite("Münzen").layerOrder, 4, "Expected Sprite Münzen to be at layer 4");
  t.assert.equal(t.getSprite("Eis").layerOrder, 2, "Expected Sprite Eis to be at layer 2");
  t.assert.withinRange(t.getSprite("Spieler").x, -116.70783158311036, 5, "Expected Sprite Spieler to have x-position -116.70783158311036 +-5");
  t.assert.withinRange(t.getSprite("Spieler").y, -39.19788606436131, 5, "Expected Sprite Spieler to have y-position -39.19788606436131 +-5");
  t.assert.withinRange(t.getSprite("Freundin").x, 60, 5, "Expected Sprite Freundin to have x-position 60 +-5");
  t.assert.withinRange(t.getSprite("Freundin").y, -131, 5, "Expected Sprite Freundin to have y-position -131 +-5");
  t.assert.withinRange(t.getSprite("Münzen").x, 14.575818089513191, 5, "Expected Sprite Münzen to have x-position 14.575818089513191 +-5");
  t.assert.withinRange(t.getSprite("Münzen").y, -98.1208351855538, 5, "Expected Sprite Münzen to have y-position -98.1208351855538 +-5");
  t.assert.withinRange(t.getSprite("Eis").x, 195, 5, "Expected Sprite Eis to have x-position 195 +-5");
  t.assert.withinRange(t.getSprite("Eis").y, -158, 5, "Expected Sprite Eis to have y-position -158 +-5");
  t.assert.not(t.getSprite("Spieler").sayText, "Expected Sprite Spieler not to say anything");
  t.assert.not(t.getSprite("Freundin").sayText, "Expected Sprite Freundin not to say anything");
  t.assert.not(t.getSprite("Münzen").sayText, "Expected Sprite Münzen not to say anything");
  t.assert.not(t.getSprite("Eis").sayText, "Expected Sprite Eis not to say anything");
  t.assert.withinRange(t.getSprite("Spieler").size, 8, 1, "Expected Sprite Spieler to have size 8 +-1");
  t.assert.withinRange(t.getSprite("Freundin").size, 50, 1, "Expected Sprite Freundin to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Münzen").size, 50, 1, "Expected Sprite Münzen to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Eis").size, 20, 1, "Expected Sprite Eis to have size 20 +-1");
  t.assert.ok(t.getSprite("Spieler").visible, "Expected Sprite Spieler to be visible");
  t.assert.ok(t.getSprite("Freundin").visible, "Expected Sprite Freundin to be visible");
  t.assert.ok(t.getSprite("Münzen").visible, "Expected Sprite Münzen to be visible");
  t.assert.ok(t.getSprite("Eis").visible, "Expected Sprite Eis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Spieler").volume, 100, "Expected Sprite Spieler to have volume 100");
  t.assert.equal(t.getSprite("Freundin").volume, 100, "Expected Sprite Freundin to have volume 100");
  t.assert.equal(t.getSprite("Münzen").volume, 100, "Expected Sprite Münzen to have volume 100");
  t.assert.equal(t.getSprite("Eis").volume, 100, "Expected Sprite Eis to have volume 100");
  t.dragSprite('Münzen', -116, -39, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Spieler").currentCostume, 0, "Expected Sprite Spieler to have costume 0");
  t.assert.equal(t.getSprite("Freundin").currentCostume, 0, "Expected Sprite Freundin to have costume 0");
  t.assert.equal(t.getSprite("Münzen").currentCostume, 0, "Expected Sprite Münzen to have costume 0");
  t.assert.equal(t.getSprite("Eis").currentCostume, 0, "Expected Sprite Eis to have costume 0");
  t.assert.equal(t.getSprite("Spieler").getCloneCount(), 0, "Expected Sprite Spieler to have 0 clones");
  t.assert.equal(t.getSprite("Freundin").getCloneCount(), 0, "Expected Sprite Freundin to have 0 clones");
  t.assert.equal(t.getSprite("Münzen").getCloneCount(), 0, "Expected Sprite Münzen to have 0 clones");
  t.assert.equal(t.getSprite("Eis").getCloneCount(), 0, "Expected Sprite Eis to have 0 clones");
  t.assert.equal(t.getSprite("Spieler").direction, 90, 1, "Expected Sprite Spieler to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Freundin").direction, 90, 1, "Expected Sprite Freundin to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Münzen").direction, 90, 1, "Expected Sprite Münzen to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Eis").direction, 90, 1, "Expected Sprite Eis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Spieler").effects.color, 0, "Expected effect color of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.fisheye, 0, "Expected effect fisheye of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.whirl, 0, "Expected effect whirl of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.pixelate, 0, "Expected effect pixelate of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.mosaic, 0, "Expected effect mosaic of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.brightness, 0, "Expected effect brightness of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.ghost, 0, "Expected effect ghost of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.color, 0, "Expected effect color of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.fisheye, 0, "Expected effect fisheye of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.whirl, 0, "Expected effect whirl of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.pixelate, 0, "Expected effect pixelate of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.mosaic, 0, "Expected effect mosaic of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.brightness, 0, "Expected effect brightness of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.ghost, 0, "Expected effect ghost of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.color, 0, "Expected effect color of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.fisheye, 0, "Expected effect fisheye of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.whirl, 0, "Expected effect whirl of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.pixelate, 0, "Expected effect pixelate of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.mosaic, 0, "Expected effect mosaic of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.brightness, 0, "Expected effect brightness of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.ghost, 0, "Expected effect ghost of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Eis").effects.color, 0, "Expected effect color of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.fisheye, 0, "Expected effect fisheye of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.whirl, 0, "Expected effect whirl of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.pixelate, 0, "Expected effect pixelate of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.mosaic, 0, "Expected effect mosaic of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.brightness, 0, "Expected effect brightness of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.ghost, 0, "Expected effect ghost of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Spieler").layerOrder, 3, "Expected Sprite Spieler to be at layer 3");
  t.assert.equal(t.getSprite("Freundin").layerOrder, 5, "Expected Sprite Freundin to be at layer 5");
  t.assert.equal(t.getSprite("Münzen").layerOrder, 4, "Expected Sprite Münzen to be at layer 4");
  t.assert.equal(t.getSprite("Eis").layerOrder, 2, "Expected Sprite Eis to be at layer 2");
  t.assert.withinRange(t.getSprite("Spieler").x, -111.70783158311036, 5, "Expected Sprite Spieler to have x-position -111.70783158311036 +-5");
  t.assert.withinRange(t.getSprite("Spieler").y, -39.19788606436131, 5, "Expected Sprite Spieler to have y-position -39.19788606436131 +-5");
  t.assert.withinRange(t.getSprite("Freundin").x, 60, 5, "Expected Sprite Freundin to have x-position 60 +-5");
  t.assert.withinRange(t.getSprite("Freundin").y, -131, 5, "Expected Sprite Freundin to have y-position -131 +-5");
  t.assert.withinRange(t.getSprite("Münzen").x, -116, 5, "Expected Sprite Münzen to have x-position -116 +-5");
  t.assert.withinRange(t.getSprite("Münzen").y, -39, 5, "Expected Sprite Münzen to have y-position -39 +-5");
  t.assert.withinRange(t.getSprite("Eis").x, 195, 5, "Expected Sprite Eis to have x-position 195 +-5");
  t.assert.withinRange(t.getSprite("Eis").y, -158, 5, "Expected Sprite Eis to have y-position -158 +-5");
  t.assert.not(t.getSprite("Spieler").sayText, "Expected Sprite Spieler not to say anything");
  t.assert.equal(t.getSprite("Freundin").sayText, "Super!", "Expected Sprite Freundin to say Super!");
  t.assert.not(t.getSprite("Münzen").sayText, "Expected Sprite Münzen not to say anything");
  t.assert.not(t.getSprite("Eis").sayText, "Expected Sprite Eis not to say anything");
  t.assert.withinRange(t.getSprite("Spieler").size, 8, 1, "Expected Sprite Spieler to have size 8 +-1");
  t.assert.withinRange(t.getSprite("Freundin").size, 50, 1, "Expected Sprite Freundin to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Münzen").size, 50, 1, "Expected Sprite Münzen to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Eis").size, 20, 1, "Expected Sprite Eis to have size 20 +-1");
  t.assert.ok(t.getSprite("Spieler").visible, "Expected Sprite Spieler to be visible");
  t.assert.ok(t.getSprite("Freundin").visible, "Expected Sprite Freundin to be visible");
  t.assert.not(t.getSprite("Münzen").visible, "Expected Sprite Münzen not to be visible");
  t.assert.ok(t.getSprite("Eis").visible, "Expected Sprite Eis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Spieler").volume, 100, "Expected Sprite Spieler to have volume 100");
  t.assert.equal(t.getSprite("Freundin").volume, 100, "Expected Sprite Freundin to have volume 100");
  t.assert.equal(t.getSprite("Münzen").volume, 100, "Expected Sprite Münzen to have volume 100");
  t.assert.equal(t.getSprite("Eis").volume, 100, "Expected Sprite Eis to have volume 100");
  t.dragSprite('Spieler', 177.45866049656445, -161.9046044025592, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Spieler").currentCostume, 0, "Expected Sprite Spieler to have costume 0");
  t.assert.equal(t.getSprite("Freundin").currentCostume, 0, "Expected Sprite Freundin to have costume 0");
  t.assert.equal(t.getSprite("Münzen").currentCostume, 0, "Expected Sprite Münzen to have costume 0");
  t.assert.equal(t.getSprite("Eis").currentCostume, 0, "Expected Sprite Eis to have costume 0");
  t.assert.equal(t.getSprite("Spieler").getCloneCount(), 0, "Expected Sprite Spieler to have 0 clones");
  t.assert.equal(t.getSprite("Freundin").getCloneCount(), 0, "Expected Sprite Freundin to have 0 clones");
  t.assert.equal(t.getSprite("Münzen").getCloneCount(), 0, "Expected Sprite Münzen to have 0 clones");
  t.assert.equal(t.getSprite("Eis").getCloneCount(), 0, "Expected Sprite Eis to have 0 clones");
  t.assert.equal(t.getSprite("Spieler").direction, 90, 1, "Expected Sprite Spieler to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Freundin").direction, 90, 1, "Expected Sprite Freundin to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Münzen").direction, 90, 1, "Expected Sprite Münzen to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Eis").direction, 90, 1, "Expected Sprite Eis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Spieler").effects.color, 0, "Expected effect color of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.fisheye, 0, "Expected effect fisheye of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.whirl, 0, "Expected effect whirl of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.pixelate, 0, "Expected effect pixelate of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.mosaic, 0, "Expected effect mosaic of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.brightness, 0, "Expected effect brightness of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.ghost, 0, "Expected effect ghost of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.color, 0, "Expected effect color of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.fisheye, 0, "Expected effect fisheye of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.whirl, 0, "Expected effect whirl of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.pixelate, 0, "Expected effect pixelate of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.mosaic, 0, "Expected effect mosaic of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.brightness, 0, "Expected effect brightness of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.ghost, 0, "Expected effect ghost of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.color, 0, "Expected effect color of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.fisheye, 0, "Expected effect fisheye of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.whirl, 0, "Expected effect whirl of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.pixelate, 0, "Expected effect pixelate of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.mosaic, 0, "Expected effect mosaic of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.brightness, 0, "Expected effect brightness of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.ghost, 0, "Expected effect ghost of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Eis").effects.color, 0, "Expected effect color of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.fisheye, 0, "Expected effect fisheye of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.whirl, 0, "Expected effect whirl of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.pixelate, 0, "Expected effect pixelate of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.mosaic, 0, "Expected effect mosaic of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.brightness, 0, "Expected effect brightness of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.ghost, 0, "Expected effect ghost of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Spieler").layerOrder, 3, "Expected Sprite Spieler to be at layer 3");
  t.assert.equal(t.getSprite("Freundin").layerOrder, 5, "Expected Sprite Freundin to be at layer 5");
  t.assert.equal(t.getSprite("Münzen").layerOrder, 4, "Expected Sprite Münzen to be at layer 4");
  t.assert.equal(t.getSprite("Eis").layerOrder, 2, "Expected Sprite Eis to be at layer 2");
  t.assert.withinRange(t.getSprite("Spieler").x, 177.45866049656445, 5, "Expected Sprite Spieler to have x-position 177.45866049656445 +-5");
  t.assert.withinRange(t.getSprite("Spieler").y, -161.9046044025592, 5, "Expected Sprite Spieler to have y-position -161.9046044025592 +-5");
  t.assert.withinRange(t.getSprite("Freundin").x, 60, 5, "Expected Sprite Freundin to have x-position 60 +-5");
  t.assert.withinRange(t.getSprite("Freundin").y, -131, 5, "Expected Sprite Freundin to have y-position -131 +-5");
  t.assert.withinRange(t.getSprite("Münzen").x, -116, 5, "Expected Sprite Münzen to have x-position -116 +-5");
  t.assert.withinRange(t.getSprite("Münzen").y, -39, 5, "Expected Sprite Münzen to have y-position -39 +-5");
  t.assert.withinRange(t.getSprite("Eis").x, 195, 5, "Expected Sprite Eis to have x-position 195 +-5");
  t.assert.withinRange(t.getSprite("Eis").y, -158, 5, "Expected Sprite Eis to have y-position -158 +-5");
  t.assert.not(t.getSprite("Spieler").sayText, "Expected Sprite Spieler not to say anything");
  t.assert.not(t.getSprite("Freundin").sayText, "Expected Sprite Freundin not to say anything");
  t.assert.not(t.getSprite("Münzen").sayText, "Expected Sprite Münzen not to say anything");
  t.assert.not(t.getSprite("Eis").sayText, "Expected Sprite Eis not to say anything");
  t.assert.withinRange(t.getSprite("Spieler").size, 8, 1, "Expected Sprite Spieler to have size 8 +-1");
  t.assert.withinRange(t.getSprite("Freundin").size, 50, 1, "Expected Sprite Freundin to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Münzen").size, 50, 1, "Expected Sprite Münzen to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Eis").size, 20, 1, "Expected Sprite Eis to have size 20 +-1");
  t.assert.ok(t.getSprite("Spieler").visible, "Expected Sprite Spieler to be visible");
  t.assert.ok(t.getSprite("Freundin").visible, "Expected Sprite Freundin to be visible");
  t.assert.not(t.getSprite("Münzen").visible, "Expected Sprite Münzen not to be visible");
  t.assert.ok(t.getSprite("Eis").visible, "Expected Sprite Eis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Spieler").volume, 100, "Expected Sprite Spieler to have volume 100");
  t.assert.equal(t.getSprite("Freundin").volume, 100, "Expected Sprite Freundin to have volume 100");
  t.assert.equal(t.getSprite("Münzen").volume, 100, "Expected Sprite Münzen to have volume 100");
  t.assert.equal(t.getSprite("Eis").volume, 100, "Expected Sprite Eis to have volume 100");
  t.end();
}

module.exports = [
  {
      test: test0,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687938355133',
      type: 'standard',
  }
]
