const test0 = async function (t) {
  t.dragSprite('Raumschiff', 82.20475733433398, 120.9015370749197, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 130.36453657309735, 1, "Expected Sprite Raumschiff to face in direction 130.36453657309735 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -198.4761213644811, 5, "Expected Sprite Raumschiff to have x-position -198.4761213644811 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 168.70470315980893, 5, "Expected Sprite Raumschiff to have y-position 168.70470315980893 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, 20, 5, "Expected Sprite Großes Schwarzes Loch to have x-position 20 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, 70, 5, "Expected Sprite Großes Schwarzes Loch to have y-position 70 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 140, 5, "Expected Sprite Stern to have x-position 140 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 10, 5, "Expected Sprite Stern to have y-position 10 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.dragSprite('Stern', -198, 168, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 130.36453657309735, 1, "Expected Sprite Raumschiff to face in direction 130.36453657309735 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -196.95224272896218, 5, "Expected Sprite Raumschiff to have x-position -196.95224272896218 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 167.40940631961786, 5, "Expected Sprite Raumschiff to have y-position 167.40940631961786 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, 18.77777777777778, 5, "Expected Sprite Großes Schwarzes Loch to have x-position 18.77777777777778 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, 68.88888888888889, 5, "Expected Sprite Großes Schwarzes Loch to have y-position 68.88888888888889 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -196.55, 5, "Expected Sprite Stern to have x-position -196.55 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 166.53333333333333, 5, "Expected Sprite Stern to have y-position 166.53333333333333 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.equal(t.getSprite("Stern").sayText, "Du schaffst das!", "Expected Sprite Stern to say Du schaffst das!");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.dragSprite('Raumschiff', 117, 167, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, -144.98496020464333, 1, "Expected Sprite Raumschiff to face in direction -144.98496020464333 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 115.85241712191612, 5, "Expected Sprite Raumschiff to have x-position 115.85241712191612 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 165.36199708854693, 5, "Expected Sprite Raumschiff to have y-position 165.36199708854693 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, 17.555555555555557, 5, "Expected Sprite Großes Schwarzes Loch to have x-position 17.555555555555557 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, 67.77777777777777, 5, "Expected Sprite Großes Schwarzes Loch to have y-position 67.77777777777777 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -199.45, 5, "Expected Sprite Stern to have x-position -199.45 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 169.46666666666667, 5, "Expected Sprite Stern to have y-position 169.46666666666667 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch not to be visible");
  t.assert.not(t.getSprite("Stern").visible, "Expected Sprite Stern not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.end();
}
const test1 = async function (t) {
  t.mouseMove(-131, -148);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 167.7576688011256, 1, "Expected Sprite Raumschiff to face in direction 167.7576688011256 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -199.5759062561032, 5, "Expected Sprite Raumschiff to have x-position -199.5759062561032 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 168.04548100638863, 5, "Expected Sprite Raumschiff to have y-position 168.04548100638863 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, 20, 5, "Expected Sprite Großes Schwarzes Loch to have x-position 20 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, 70, 5, "Expected Sprite Großes Schwarzes Loch to have y-position 70 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 140, 5, "Expected Sprite Stern to have x-position 140 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 10, 5, "Expected Sprite Stern to have y-position 10 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.dragSprite('Stern', -199, 168, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 167.7576688011256, 1, "Expected Sprite Raumschiff to face in direction 167.7576688011256 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -199.1518125122064, 5, "Expected Sprite Raumschiff to have x-position -199.1518125122064 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 166.09096201277725, 5, "Expected Sprite Raumschiff to have y-position 166.09096201277725 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, 18.77777777777778, 5, "Expected Sprite Großes Schwarzes Loch to have x-position 18.77777777777778 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, 68.88888888888889, 5, "Expected Sprite Großes Schwarzes Loch to have y-position 68.88888888888889 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -197.53333333333333, 5, "Expected Sprite Stern to have x-position -197.53333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 166.53333333333333, 5, "Expected Sprite Stern to have y-position 166.53333333333333 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.equal(t.getSprite("Stern").sayText, "Du schaffst das!", "Expected Sprite Stern to say Du schaffst das!");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  await t.runForSteps(95);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 167.75766880112548, 1, "Expected Sprite Raumschiff to face in direction 167.75766880112548 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -158.43881309811314, 5, "Expected Sprite Raumschiff to have x-position -158.43881309811314 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -21.542861373914242, 5, "Expected Sprite Raumschiff to have y-position -21.542861373914242 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, -75.22222222222223, 5, "Expected Sprite Großes Schwarzes Loch to have x-position -75.22222222222223 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, -26.88888888888889, 5, "Expected Sprite Großes Schwarzes Loch to have y-position -26.88888888888889 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -153.53333333333333, 5, "Expected Sprite Stern to have x-position -153.53333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 122.53333333333333, 5, "Expected Sprite Stern to have y-position 122.53333333333333 +-5");
  t.assert.equal(t.getSprite("Raumschiff").sayText, "Hilfe!", "Expected Sprite Raumschiff to say Hilfe!");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.not(t.getSprite("Stern").visible, "Expected Sprite Stern not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  await t.runForSteps(97);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 167.75766880112548, 1, "Expected Sprite Raumschiff to face in direction 167.75766880112548 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -155.4701568908355, 5, "Expected Sprite Raumschiff to have x-position -155.4701568908355 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -35.2244943291938, 5, "Expected Sprite Raumschiff to have y-position -35.2244943291938 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, -60.44444444444444, 5, "Expected Sprite Großes Schwarzes Loch to have x-position -60.44444444444444 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, -23.77777777777778, 5, "Expected Sprite Großes Schwarzes Loch to have y-position -23.77777777777778 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -153.53333333333333, 5, "Expected Sprite Stern to have x-position -153.53333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 122.53333333333333, 5, "Expected Sprite Stern to have y-position 122.53333333333333 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.not(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff not to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.not(t.getSprite("Stern").visible, "Expected Sprite Stern not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.end();
}

module.exports = [
  {
      test: test0,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687939069370',
      type: 'standard',
  },
  {
      test: test1,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687939069370',
      type: 'standard',
  }
]
