const test0 = async function (t) {
  await t.runForSteps(45);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Skikatze").currentCostume, 0, "Expected Sprite Skikatze to have costume 0");
  t.assert.equal(t.getSprite("Hindernis").currentCostume, 0, "Expected Sprite Hindernis to have costume 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).currentCostume, 1, "Expected Clone 1 of Hindernis to have costume 1");
  t.assert.equal(t.getSprite("Skikatze").getCloneCount(), 0, "Expected Sprite Skikatze to have 0 clones");
  t.assert.equal(t.getSprite("Hindernis").getCloneCount(), 1, "Expected Sprite Hindernis to have 1 clones");
  t.assert.equal(t.getSprite("Skikatze").direction, 90, 1, "Expected Sprite Skikatze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").direction, 90, 1, "Expected Sprite Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).direction, 90, 1, "Expected Clone 1 of Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Skikatze").effects.color, 0, "Expected effect color of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.fisheye, 0, "Expected effect fisheye of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.whirl, 0, "Expected effect whirl of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.pixelate, 0, "Expected effect pixelate of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.mosaic, 0, "Expected effect mosaic of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.brightness, 0, "Expected effect brightness of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.ghost, 0, "Expected effect ghost of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.color, 0, "Expected effect color of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.fisheye, 0, "Expected effect fisheye of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.whirl, 0, "Expected effect whirl of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.pixelate, 0, "Expected effect pixelate of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.mosaic, 0, "Expected effect mosaic of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.brightness, 0, "Expected effect brightness of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.ghost, 0, "Expected effect ghost of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Skikatze").layerOrder, 3, "Expected Sprite Skikatze to be at layer 3");
  t.assert.equal(t.getSprite("Hindernis").layerOrder, 2, "Expected Sprite Hindernis to be at layer 2");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Hindernis to be at layer 1");
  t.assert.withinRange(t.getSprite("Skikatze").x, 62, 5, "Expected Sprite Skikatze to have x-position 62 +-5");
  t.assert.withinRange(t.getSprite("Skikatze").y, 100, 5, "Expected Sprite Skikatze to have y-position 100 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").x, -70, 5, "Expected Sprite Hindernis to have x-position -70 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").y, -32.04599999999999, 5, "Expected Sprite Hindernis to have y-position -32.04599999999999 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, 137, 5, "Expected Clone 1 of Hindernis to have x-position 137 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, 0, 5, "Expected Clone 1 of Hindernis to have y-position 0 +-5");
  t.assert.not(t.getSprite("Skikatze").sayText, "Expected Sprite Skikatze not to say anything");
  t.assert.not(t.getSprite("Hindernis").sayText, "Expected Sprite Hindernis not to say anything");
  t.assert.not(t.getSprite("Hindernis").getClone(1).sayText, "Expected Clone 1 of Hindernis not to say anything");
  t.assert.withinRange(t.getSprite("Skikatze").size, 100, 1, "Expected Sprite Skikatze to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").size, 60, 1, "Expected Sprite Hindernis to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).size, 60, 1, "Expected Clone 1 of Hindernis to have size 60 +-1");
  t.assert.equal(t.getSprite("Hindernis").getVariable("Hindernis_x").value, "-70", "Expected Hindernis_x to have value -70 in Sprite Hindernis");
  t.assert.ok(t.getSprite("Skikatze").visible, "Expected Sprite Skikatze to be visible");
  t.assert.not(t.getSprite("Hindernis").visible, "Expected Sprite Hindernis not to be visible");
  t.assert.ok(t.getSprite("Hindernis").getClone(1).visible, "Expected Clone 1 of Hindernis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Skikatze").volume, 100, "Expected Sprite Skikatze to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").volume, 100, "Expected Sprite Hindernis to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).volume, 100, "Expected Clone 1 of Hindernis to have volume 100");
  t.dragSprite('Skikatze', 137, 0, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Skikatze").currentCostume, 1, "Expected Sprite Skikatze to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").currentCostume, 1, "Expected Sprite Hindernis to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).currentCostume, 0, "Expected Clone 1 of Hindernis to have costume 0");
  t.assert.equal(t.getSprite("Skikatze").getCloneCount(), 0, "Expected Sprite Skikatze to have 0 clones");
  t.assert.equal(t.getSprite("Hindernis").getCloneCount(), 1, "Expected Sprite Hindernis to have 1 clones");
  t.assert.equal(t.getSprite("Skikatze").direction, 90, 1, "Expected Sprite Skikatze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").direction, 90, 1, "Expected Sprite Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).direction, 90, 1, "Expected Clone 1 of Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Skikatze").effects.color, 0, "Expected effect color of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.fisheye, 0, "Expected effect fisheye of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.whirl, 0, "Expected effect whirl of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.pixelate, 0, "Expected effect pixelate of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.mosaic, 0, "Expected effect mosaic of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.brightness, 0, "Expected effect brightness of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.ghost, 0, "Expected effect ghost of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.color, 0, "Expected effect color of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.fisheye, 0, "Expected effect fisheye of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.whirl, 0, "Expected effect whirl of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.pixelate, 0, "Expected effect pixelate of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.mosaic, 0, "Expected effect mosaic of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.brightness, 0, "Expected effect brightness of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.ghost, 0, "Expected effect ghost of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Skikatze").layerOrder, 3, "Expected Sprite Skikatze to be at layer 3");
  t.assert.equal(t.getSprite("Hindernis").layerOrder, 2, "Expected Sprite Hindernis to be at layer 2");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Hindernis to be at layer 1");
  t.assert.withinRange(t.getSprite("Skikatze").x, 139, 5, "Expected Sprite Skikatze to have x-position 139 +-5");
  t.assert.withinRange(t.getSprite("Skikatze").y, 0, 5, "Expected Sprite Skikatze to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").x, -70, 5, "Expected Sprite Hindernis to have x-position -70 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").y, -32.04599999999999, 5, "Expected Sprite Hindernis to have y-position -32.04599999999999 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, 28, 5, "Expected Clone 1 of Hindernis to have x-position 28 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, 97.40000000000003, 5, "Expected Clone 1 of Hindernis to have y-position 97.40000000000003 +-5");
  t.assert.not(t.getSprite("Skikatze").sayText, "Expected Sprite Skikatze not to say anything");
  t.assert.not(t.getSprite("Hindernis").sayText, "Expected Sprite Hindernis not to say anything");
  t.assert.not(t.getSprite("Hindernis").getClone(1).sayText, "Expected Clone 1 of Hindernis not to say anything");
  t.assert.withinRange(t.getSprite("Skikatze").size, 100, 1, "Expected Sprite Skikatze to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").size, 60, 1, "Expected Sprite Hindernis to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).size, 60, 1, "Expected Clone 1 of Hindernis to have size 60 +-1");
  t.assert.equal(t.getSprite("Hindernis").getVariable("Hindernis_x").value, "-70", "Expected Hindernis_x to have value -70 in Sprite Hindernis");
  t.assert.ok(t.getSprite("Skikatze").visible, "Expected Sprite Skikatze to be visible");
  t.assert.not(t.getSprite("Hindernis").visible, "Expected Sprite Hindernis not to be visible");
  t.assert.ok(t.getSprite("Hindernis").getClone(1).visible, "Expected Clone 1 of Hindernis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Skikatze").volume, 100, "Expected Sprite Skikatze to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").volume, 100, "Expected Sprite Hindernis to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).volume, 100, "Expected Clone 1 of Hindernis to have volume 100");
  await t.runForSteps(33);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Skikatze").currentCostume, 1, "Expected Sprite Skikatze to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").currentCostume, 1, "Expected Sprite Hindernis to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).currentCostume, 0, "Expected Clone 1 of Hindernis to have costume 0");
  t.assert.equal(t.getSprite("Skikatze").getCloneCount(), 0, "Expected Sprite Skikatze to have 0 clones");
  t.assert.equal(t.getSprite("Hindernis").getCloneCount(), 1, "Expected Sprite Hindernis to have 1 clones");
  t.assert.equal(t.getSprite("Skikatze").direction, 90, 1, "Expected Sprite Skikatze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").direction, 90, 1, "Expected Sprite Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).direction, 90, 1, "Expected Clone 1 of Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Skikatze").effects.color, 0, "Expected effect color of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.fisheye, 0, "Expected effect fisheye of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.whirl, 0, "Expected effect whirl of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.pixelate, 0, "Expected effect pixelate of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.mosaic, 0, "Expected effect mosaic of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.brightness, 0, "Expected effect brightness of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.ghost, 0, "Expected effect ghost of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.color, 0, "Expected effect color of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.fisheye, 0, "Expected effect fisheye of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.whirl, 0, "Expected effect whirl of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.pixelate, 0, "Expected effect pixelate of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.mosaic, 0, "Expected effect mosaic of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.brightness, 0, "Expected effect brightness of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.ghost, 0, "Expected effect ghost of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Skikatze").layerOrder, 3, "Expected Sprite Skikatze to be at layer 3");
  t.assert.equal(t.getSprite("Hindernis").layerOrder, 2, "Expected Sprite Hindernis to be at layer 2");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Hindernis to be at layer 1");
  t.assert.withinRange(t.getSprite("Skikatze").x, 139, 5, "Expected Sprite Skikatze to have x-position 139 +-5");
  t.assert.withinRange(t.getSprite("Skikatze").y, 0, 5, "Expected Sprite Skikatze to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").x, -70, 5, "Expected Sprite Hindernis to have x-position -70 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").y, -32.04599999999999, 5, "Expected Sprite Hindernis to have y-position -32.04599999999999 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, 28, 5, "Expected Clone 1 of Hindernis to have x-position 28 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, 180, 5, "Expected Clone 1 of Hindernis to have y-position 180 +-5");
  t.assert.not(t.getSprite("Skikatze").sayText, "Expected Sprite Skikatze not to say anything");
  t.assert.not(t.getSprite("Hindernis").sayText, "Expected Sprite Hindernis not to say anything");
  t.assert.not(t.getSprite("Hindernis").getClone(1).sayText, "Expected Clone 1 of Hindernis not to say anything");
  t.assert.withinRange(t.getSprite("Skikatze").size, 100, 1, "Expected Sprite Skikatze to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").size, 60, 1, "Expected Sprite Hindernis to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).size, 60, 1, "Expected Clone 1 of Hindernis to have size 60 +-1");
  t.assert.equal(t.getSprite("Hindernis").getVariable("Hindernis_x").value, "-70", "Expected Hindernis_x to have value -70 in Sprite Hindernis");
  t.assert.ok(t.getSprite("Skikatze").visible, "Expected Sprite Skikatze to be visible");
  t.assert.not(t.getSprite("Hindernis").visible, "Expected Sprite Hindernis not to be visible");
  t.assert.not(t.getSprite("Hindernis").getClone(1).visible, "Expected Clone 1 of Hindernis not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Skikatze").volume, 100, "Expected Sprite Skikatze to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").volume, 100, "Expected Sprite Hindernis to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).volume, 100, "Expected Clone 1 of Hindernis to have volume 100");
  await t.runForSteps(74);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Skikatze").currentCostume, 1, "Expected Sprite Skikatze to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").currentCostume, 1, "Expected Sprite Hindernis to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).currentCostume, 0, "Expected Clone 1 of Hindernis to have costume 0");
  t.assert.equal(t.getSprite("Skikatze").getCloneCount(), 0, "Expected Sprite Skikatze to have 0 clones");
  t.assert.equal(t.getSprite("Hindernis").getCloneCount(), 1, "Expected Sprite Hindernis to have 1 clones");
  t.assert.equal(t.getSprite("Skikatze").direction, 90, 1, "Expected Sprite Skikatze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").direction, 90, 1, "Expected Sprite Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).direction, 90, 1, "Expected Clone 1 of Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Skikatze").effects.color, 0, "Expected effect color of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.fisheye, 0, "Expected effect fisheye of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.whirl, 0, "Expected effect whirl of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.pixelate, 0, "Expected effect pixelate of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.mosaic, 0, "Expected effect mosaic of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.brightness, 0, "Expected effect brightness of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.ghost, 0, "Expected effect ghost of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.color, 0, "Expected effect color of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.fisheye, 0, "Expected effect fisheye of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.whirl, 0, "Expected effect whirl of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.pixelate, 0, "Expected effect pixelate of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.mosaic, 0, "Expected effect mosaic of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.brightness, 0, "Expected effect brightness of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.ghost, 0, "Expected effect ghost of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Skikatze").layerOrder, 3, "Expected Sprite Skikatze to be at layer 3");
  t.assert.equal(t.getSprite("Hindernis").layerOrder, 2, "Expected Sprite Hindernis to be at layer 2");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Hindernis to be at layer 1");
  t.assert.withinRange(t.getSprite("Skikatze").x, 139, 5, "Expected Sprite Skikatze to have x-position 139 +-5");
  t.assert.withinRange(t.getSprite("Skikatze").y, 0, 5, "Expected Sprite Skikatze to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").x, -70, 5, "Expected Sprite Hindernis to have x-position -70 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").y, -32.04599999999999, 5, "Expected Sprite Hindernis to have y-position -32.04599999999999 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, -122, 5, "Expected Clone 1 of Hindernis to have x-position -122 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, 180, 5, "Expected Clone 1 of Hindernis to have y-position 180 +-5");
  t.assert.not(t.getSprite("Skikatze").sayText, "Expected Sprite Skikatze not to say anything");
  t.assert.not(t.getSprite("Hindernis").sayText, "Expected Sprite Hindernis not to say anything");
  t.assert.not(t.getSprite("Hindernis").getClone(1).sayText, "Expected Clone 1 of Hindernis not to say anything");
  t.assert.withinRange(t.getSprite("Skikatze").size, 100, 1, "Expected Sprite Skikatze to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").size, 60, 1, "Expected Sprite Hindernis to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).size, 60, 1, "Expected Clone 1 of Hindernis to have size 60 +-1");
  t.assert.equal(t.getSprite("Hindernis").getVariable("Hindernis_x").value, "-70", "Expected Hindernis_x to have value -70 in Sprite Hindernis");
  t.assert.ok(t.getSprite("Skikatze").visible, "Expected Sprite Skikatze to be visible");
  t.assert.not(t.getSprite("Hindernis").visible, "Expected Sprite Hindernis not to be visible");
  t.assert.not(t.getSprite("Hindernis").getClone(1).visible, "Expected Clone 1 of Hindernis not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Skikatze").volume, 100, "Expected Sprite Skikatze to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").volume, 100, "Expected Sprite Hindernis to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).volume, 100, "Expected Clone 1 of Hindernis to have volume 100");
  await t.runForSteps(88);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Skikatze").currentCostume, 1, "Expected Sprite Skikatze to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").currentCostume, 1, "Expected Sprite Hindernis to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).currentCostume, 0, "Expected Clone 1 of Hindernis to have costume 0");
  t.assert.equal(t.getSprite("Skikatze").getCloneCount(), 0, "Expected Sprite Skikatze to have 0 clones");
  t.assert.equal(t.getSprite("Hindernis").getCloneCount(), 1, "Expected Sprite Hindernis to have 1 clones");
  t.assert.equal(t.getSprite("Skikatze").direction, 90, 1, "Expected Sprite Skikatze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").direction, 90, 1, "Expected Sprite Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).direction, 90, 1, "Expected Clone 1 of Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Skikatze").effects.color, 0, "Expected effect color of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.fisheye, 0, "Expected effect fisheye of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.whirl, 0, "Expected effect whirl of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.pixelate, 0, "Expected effect pixelate of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.mosaic, 0, "Expected effect mosaic of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.brightness, 0, "Expected effect brightness of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.ghost, 0, "Expected effect ghost of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.color, 0, "Expected effect color of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.fisheye, 0, "Expected effect fisheye of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.whirl, 0, "Expected effect whirl of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.pixelate, 0, "Expected effect pixelate of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.mosaic, 0, "Expected effect mosaic of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.brightness, 0, "Expected effect brightness of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.ghost, 0, "Expected effect ghost of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Skikatze").layerOrder, 3, "Expected Sprite Skikatze to be at layer 3");
  t.assert.equal(t.getSprite("Hindernis").layerOrder, 2, "Expected Sprite Hindernis to be at layer 2");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Hindernis to be at layer 1");
  t.assert.withinRange(t.getSprite("Skikatze").x, 139, 5, "Expected Sprite Skikatze to have x-position 139 +-5");
  t.assert.withinRange(t.getSprite("Skikatze").y, 0, 5, "Expected Sprite Skikatze to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").x, -70, 5, "Expected Sprite Hindernis to have x-position -70 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").y, -32.04599999999999, 5, "Expected Sprite Hindernis to have y-position -32.04599999999999 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, -78, 5, "Expected Clone 1 of Hindernis to have x-position -78 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, 180, 5, "Expected Clone 1 of Hindernis to have y-position 180 +-5");
  t.assert.not(t.getSprite("Skikatze").sayText, "Expected Sprite Skikatze not to say anything");
  t.assert.not(t.getSprite("Hindernis").sayText, "Expected Sprite Hindernis not to say anything");
  t.assert.not(t.getSprite("Hindernis").getClone(1).sayText, "Expected Clone 1 of Hindernis not to say anything");
  t.assert.withinRange(t.getSprite("Skikatze").size, 100, 1, "Expected Sprite Skikatze to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").size, 60, 1, "Expected Sprite Hindernis to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).size, 60, 1, "Expected Clone 1 of Hindernis to have size 60 +-1");
  t.assert.equal(t.getSprite("Hindernis").getVariable("Hindernis_x").value, "-70", "Expected Hindernis_x to have value -70 in Sprite Hindernis");
  t.assert.ok(t.getSprite("Skikatze").visible, "Expected Sprite Skikatze to be visible");
  t.assert.not(t.getSprite("Hindernis").visible, "Expected Sprite Hindernis not to be visible");
  t.assert.not(t.getSprite("Hindernis").getClone(1).visible, "Expected Clone 1 of Hindernis not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Skikatze").volume, 100, "Expected Sprite Skikatze to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").volume, 100, "Expected Sprite Hindernis to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).volume, 100, "Expected Clone 1 of Hindernis to have volume 100");
  await t.runForSteps(43);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Skikatze").currentCostume, 1, "Expected Sprite Skikatze to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").currentCostume, 1, "Expected Sprite Hindernis to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).currentCostume, 0, "Expected Clone 1 of Hindernis to have costume 0");
  t.assert.equal(t.getSprite("Skikatze").getCloneCount(), 0, "Expected Sprite Skikatze to have 0 clones");
  t.assert.equal(t.getSprite("Hindernis").getCloneCount(), 1, "Expected Sprite Hindernis to have 1 clones");
  t.assert.equal(t.getSprite("Skikatze").direction, 90, 1, "Expected Sprite Skikatze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").direction, 90, 1, "Expected Sprite Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).direction, 90, 1, "Expected Clone 1 of Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Skikatze").effects.color, 0, "Expected effect color of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.fisheye, 0, "Expected effect fisheye of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.whirl, 0, "Expected effect whirl of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.pixelate, 0, "Expected effect pixelate of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.mosaic, 0, "Expected effect mosaic of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.brightness, 0, "Expected effect brightness of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.ghost, 0, "Expected effect ghost of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.color, 0, "Expected effect color of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.fisheye, 0, "Expected effect fisheye of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.whirl, 0, "Expected effect whirl of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.pixelate, 0, "Expected effect pixelate of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.mosaic, 0, "Expected effect mosaic of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.brightness, 0, "Expected effect brightness of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.ghost, 0, "Expected effect ghost of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Skikatze").layerOrder, 3, "Expected Sprite Skikatze to be at layer 3");
  t.assert.equal(t.getSprite("Hindernis").layerOrder, 2, "Expected Sprite Hindernis to be at layer 2");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Hindernis to be at layer 1");
  t.assert.withinRange(t.getSprite("Skikatze").x, 139, 5, "Expected Sprite Skikatze to have x-position 139 +-5");
  t.assert.withinRange(t.getSprite("Skikatze").y, 0, 5, "Expected Sprite Skikatze to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").x, -70, 5, "Expected Sprite Hindernis to have x-position -70 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").y, -32.04599999999999, 5, "Expected Sprite Hindernis to have y-position -32.04599999999999 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, 198, 5, "Expected Clone 1 of Hindernis to have x-position 198 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, -85.5, 5, "Expected Clone 1 of Hindernis to have y-position -85.5 +-5");
  t.assert.not(t.getSprite("Skikatze").sayText, "Expected Sprite Skikatze not to say anything");
  t.assert.not(t.getSprite("Hindernis").sayText, "Expected Sprite Hindernis not to say anything");
  t.assert.not(t.getSprite("Hindernis").getClone(1).sayText, "Expected Clone 1 of Hindernis not to say anything");
  t.assert.withinRange(t.getSprite("Skikatze").size, 100, 1, "Expected Sprite Skikatze to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").size, 60, 1, "Expected Sprite Hindernis to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).size, 60, 1, "Expected Clone 1 of Hindernis to have size 60 +-1");
  t.assert.equal(t.getSprite("Hindernis").getVariable("Hindernis_x").value, "-70", "Expected Hindernis_x to have value -70 in Sprite Hindernis");
  t.assert.ok(t.getSprite("Skikatze").visible, "Expected Sprite Skikatze to be visible");
  t.assert.not(t.getSprite("Hindernis").visible, "Expected Sprite Hindernis not to be visible");
  t.assert.ok(t.getSprite("Hindernis").getClone(1).visible, "Expected Clone 1 of Hindernis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Skikatze").volume, 100, "Expected Sprite Skikatze to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").volume, 100, "Expected Sprite Hindernis to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).volume, 100, "Expected Clone 1 of Hindernis to have volume 100");
  await t.runForSteps(18);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Skikatze").currentCostume, 1, "Expected Sprite Skikatze to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").currentCostume, 1, "Expected Sprite Hindernis to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).currentCostume, 0, "Expected Clone 1 of Hindernis to have costume 0");
  t.assert.equal(t.getSprite("Skikatze").getCloneCount(), 0, "Expected Sprite Skikatze to have 0 clones");
  t.assert.equal(t.getSprite("Hindernis").getCloneCount(), 1, "Expected Sprite Hindernis to have 1 clones");
  t.assert.equal(t.getSprite("Skikatze").direction, 90, 1, "Expected Sprite Skikatze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").direction, 90, 1, "Expected Sprite Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).direction, 90, 1, "Expected Clone 1 of Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Skikatze").effects.color, 0, "Expected effect color of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.fisheye, 0, "Expected effect fisheye of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.whirl, 0, "Expected effect whirl of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.pixelate, 0, "Expected effect pixelate of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.mosaic, 0, "Expected effect mosaic of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.brightness, 0, "Expected effect brightness of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.ghost, 0, "Expected effect ghost of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.color, 0, "Expected effect color of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.fisheye, 0, "Expected effect fisheye of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.whirl, 0, "Expected effect whirl of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.pixelate, 0, "Expected effect pixelate of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.mosaic, 0, "Expected effect mosaic of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.brightness, 0, "Expected effect brightness of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.ghost, 0, "Expected effect ghost of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Skikatze").layerOrder, 3, "Expected Sprite Skikatze to be at layer 3");
  t.assert.equal(t.getSprite("Hindernis").layerOrder, 2, "Expected Sprite Hindernis to be at layer 2");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Hindernis to be at layer 1");
  t.assert.withinRange(t.getSprite("Skikatze").x, 139, 5, "Expected Sprite Skikatze to have x-position 139 +-5");
  t.assert.withinRange(t.getSprite("Skikatze").y, 0, 5, "Expected Sprite Skikatze to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").x, -70, 5, "Expected Sprite Hindernis to have x-position -70 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").y, -32.04599999999999, 5, "Expected Sprite Hindernis to have y-position -32.04599999999999 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, 198, 5, "Expected Clone 1 of Hindernis to have x-position 198 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, 26.599999999999994, 5, "Expected Clone 1 of Hindernis to have y-position 26.599999999999994 +-5");
  t.assert.not(t.getSprite("Skikatze").sayText, "Expected Sprite Skikatze not to say anything");
  t.assert.not(t.getSprite("Hindernis").sayText, "Expected Sprite Hindernis not to say anything");
  t.assert.not(t.getSprite("Hindernis").getClone(1).sayText, "Expected Clone 1 of Hindernis not to say anything");
  t.assert.withinRange(t.getSprite("Skikatze").size, 100, 1, "Expected Sprite Skikatze to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").size, 60, 1, "Expected Sprite Hindernis to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).size, 60, 1, "Expected Clone 1 of Hindernis to have size 60 +-1");
  t.assert.equal(t.getSprite("Hindernis").getVariable("Hindernis_x").value, "-70", "Expected Hindernis_x to have value -70 in Sprite Hindernis");
  t.assert.ok(t.getSprite("Skikatze").visible, "Expected Sprite Skikatze to be visible");
  t.assert.not(t.getSprite("Hindernis").visible, "Expected Sprite Hindernis not to be visible");
  t.assert.ok(t.getSprite("Hindernis").getClone(1).visible, "Expected Clone 1 of Hindernis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Skikatze").volume, 100, "Expected Sprite Skikatze to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").volume, 100, "Expected Sprite Hindernis to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).volume, 100, "Expected Clone 1 of Hindernis to have volume 100");
  await t.runForSteps(51);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Skikatze").currentCostume, 1, "Expected Sprite Skikatze to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").currentCostume, 1, "Expected Sprite Hindernis to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).currentCostume, 0, "Expected Clone 1 of Hindernis to have costume 0");
  t.assert.equal(t.getSprite("Skikatze").getCloneCount(), 0, "Expected Sprite Skikatze to have 0 clones");
  t.assert.equal(t.getSprite("Hindernis").getCloneCount(), 1, "Expected Sprite Hindernis to have 1 clones");
  t.assert.equal(t.getSprite("Skikatze").direction, 90, 1, "Expected Sprite Skikatze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").direction, 90, 1, "Expected Sprite Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).direction, 90, 1, "Expected Clone 1 of Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Skikatze").effects.color, 0, "Expected effect color of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.fisheye, 0, "Expected effect fisheye of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.whirl, 0, "Expected effect whirl of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.pixelate, 0, "Expected effect pixelate of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.mosaic, 0, "Expected effect mosaic of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.brightness, 0, "Expected effect brightness of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.ghost, 0, "Expected effect ghost of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.color, 0, "Expected effect color of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.fisheye, 0, "Expected effect fisheye of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.whirl, 0, "Expected effect whirl of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.pixelate, 0, "Expected effect pixelate of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.mosaic, 0, "Expected effect mosaic of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.brightness, 0, "Expected effect brightness of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.ghost, 0, "Expected effect ghost of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Skikatze").layerOrder, 3, "Expected Sprite Skikatze to be at layer 3");
  t.assert.equal(t.getSprite("Hindernis").layerOrder, 2, "Expected Sprite Hindernis to be at layer 2");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Hindernis to be at layer 1");
  t.assert.withinRange(t.getSprite("Skikatze").x, 139, 5, "Expected Sprite Skikatze to have x-position 139 +-5");
  t.assert.withinRange(t.getSprite("Skikatze").y, 0, 5, "Expected Sprite Skikatze to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").x, -70, 5, "Expected Sprite Hindernis to have x-position -70 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").y, -32.04599999999999, 5, "Expected Sprite Hindernis to have y-position -32.04599999999999 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, 198, 5, "Expected Clone 1 of Hindernis to have x-position 198 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, 180, 5, "Expected Clone 1 of Hindernis to have y-position 180 +-5");
  t.assert.not(t.getSprite("Skikatze").sayText, "Expected Sprite Skikatze not to say anything");
  t.assert.not(t.getSprite("Hindernis").sayText, "Expected Sprite Hindernis not to say anything");
  t.assert.not(t.getSprite("Hindernis").getClone(1).sayText, "Expected Clone 1 of Hindernis not to say anything");
  t.assert.withinRange(t.getSprite("Skikatze").size, 100, 1, "Expected Sprite Skikatze to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").size, 60, 1, "Expected Sprite Hindernis to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).size, 60, 1, "Expected Clone 1 of Hindernis to have size 60 +-1");
  t.assert.equal(t.getSprite("Hindernis").getVariable("Hindernis_x").value, "-70", "Expected Hindernis_x to have value -70 in Sprite Hindernis");
  t.assert.ok(t.getSprite("Skikatze").visible, "Expected Sprite Skikatze to be visible");
  t.assert.not(t.getSprite("Hindernis").visible, "Expected Sprite Hindernis not to be visible");
  t.assert.not(t.getSprite("Hindernis").getClone(1).visible, "Expected Clone 1 of Hindernis not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Skikatze").volume, 100, "Expected Sprite Skikatze to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").volume, 100, "Expected Sprite Hindernis to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).volume, 100, "Expected Clone 1 of Hindernis to have volume 100");
  await t.runForSteps(96);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Skikatze").currentCostume, 1, "Expected Sprite Skikatze to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").currentCostume, 1, "Expected Sprite Hindernis to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).currentCostume, 0, "Expected Clone 1 of Hindernis to have costume 0");
  t.assert.equal(t.getSprite("Skikatze").getCloneCount(), 0, "Expected Sprite Skikatze to have 0 clones");
  t.assert.equal(t.getSprite("Hindernis").getCloneCount(), 1, "Expected Sprite Hindernis to have 1 clones");
  t.assert.equal(t.getSprite("Skikatze").direction, 90, 1, "Expected Sprite Skikatze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").direction, 90, 1, "Expected Sprite Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).direction, 90, 1, "Expected Clone 1 of Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Skikatze").effects.color, 0, "Expected effect color of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.fisheye, 0, "Expected effect fisheye of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.whirl, 0, "Expected effect whirl of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.pixelate, 0, "Expected effect pixelate of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.mosaic, 0, "Expected effect mosaic of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.brightness, 0, "Expected effect brightness of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.ghost, 0, "Expected effect ghost of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.color, 0, "Expected effect color of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.fisheye, 0, "Expected effect fisheye of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.whirl, 0, "Expected effect whirl of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.pixelate, 0, "Expected effect pixelate of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.mosaic, 0, "Expected effect mosaic of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.brightness, 0, "Expected effect brightness of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.ghost, 0, "Expected effect ghost of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Skikatze").layerOrder, 3, "Expected Sprite Skikatze to be at layer 3");
  t.assert.equal(t.getSprite("Hindernis").layerOrder, 2, "Expected Sprite Hindernis to be at layer 2");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Hindernis to be at layer 1");
  t.assert.withinRange(t.getSprite("Skikatze").x, 139, 5, "Expected Sprite Skikatze to have x-position 139 +-5");
  t.assert.withinRange(t.getSprite("Skikatze").y, 0, 5, "Expected Sprite Skikatze to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").x, -70, 5, "Expected Sprite Hindernis to have x-position -70 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").y, -32.04599999999999, 5, "Expected Sprite Hindernis to have y-position -32.04599999999999 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, 127, 5, "Expected Clone 1 of Hindernis to have x-position 127 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, -168.1, 5, "Expected Clone 1 of Hindernis to have y-position -168.1 +-5");
  t.assert.not(t.getSprite("Skikatze").sayText, "Expected Sprite Skikatze not to say anything");
  t.assert.not(t.getSprite("Hindernis").sayText, "Expected Sprite Hindernis not to say anything");
  t.assert.not(t.getSprite("Hindernis").getClone(1).sayText, "Expected Clone 1 of Hindernis not to say anything");
  t.assert.withinRange(t.getSprite("Skikatze").size, 100, 1, "Expected Sprite Skikatze to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").size, 60, 1, "Expected Sprite Hindernis to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).size, 60, 1, "Expected Clone 1 of Hindernis to have size 60 +-1");
  t.assert.equal(t.getSprite("Hindernis").getVariable("Hindernis_x").value, "-70", "Expected Hindernis_x to have value -70 in Sprite Hindernis");
  t.assert.ok(t.getSprite("Skikatze").visible, "Expected Sprite Skikatze to be visible");
  t.assert.not(t.getSprite("Hindernis").visible, "Expected Sprite Hindernis not to be visible");
  t.assert.ok(t.getSprite("Hindernis").getClone(1).visible, "Expected Clone 1 of Hindernis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Skikatze").volume, 100, "Expected Sprite Skikatze to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").volume, 100, "Expected Sprite Hindernis to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).volume, 100, "Expected Clone 1 of Hindernis to have volume 100");
  await t.runForSteps(98);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Skikatze").currentCostume, 1, "Expected Sprite Skikatze to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").currentCostume, 1, "Expected Sprite Hindernis to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).currentCostume, 0, "Expected Clone 1 of Hindernis to have costume 0");
  t.assert.equal(t.getSprite("Skikatze").getCloneCount(), 0, "Expected Sprite Skikatze to have 0 clones");
  t.assert.equal(t.getSprite("Hindernis").getCloneCount(), 1, "Expected Sprite Hindernis to have 1 clones");
  t.assert.equal(t.getSprite("Skikatze").direction, 90, 1, "Expected Sprite Skikatze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").direction, 90, 1, "Expected Sprite Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).direction, 90, 1, "Expected Clone 1 of Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Skikatze").effects.color, 0, "Expected effect color of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.fisheye, 0, "Expected effect fisheye of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.whirl, 0, "Expected effect whirl of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.pixelate, 0, "Expected effect pixelate of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.mosaic, 0, "Expected effect mosaic of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.brightness, 0, "Expected effect brightness of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.ghost, 0, "Expected effect ghost of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.color, 0, "Expected effect color of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.fisheye, 0, "Expected effect fisheye of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.whirl, 0, "Expected effect whirl of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.pixelate, 0, "Expected effect pixelate of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.mosaic, 0, "Expected effect mosaic of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.brightness, 0, "Expected effect brightness of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.ghost, 0, "Expected effect ghost of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Skikatze").layerOrder, 3, "Expected Sprite Skikatze to be at layer 3");
  t.assert.equal(t.getSprite("Hindernis").layerOrder, 2, "Expected Sprite Hindernis to be at layer 2");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Hindernis to be at layer 1");
  t.assert.withinRange(t.getSprite("Skikatze").x, 139, 5, "Expected Sprite Skikatze to have x-position 139 +-5");
  t.assert.withinRange(t.getSprite("Skikatze").y, 0, 5, "Expected Sprite Skikatze to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").x, -70, 5, "Expected Sprite Hindernis to have x-position -70 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").y, -32.04599999999999, 5, "Expected Sprite Hindernis to have y-position -32.04599999999999 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, 130, 5, "Expected Clone 1 of Hindernis to have x-position 130 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, -120.9, 5, "Expected Clone 1 of Hindernis to have y-position -120.9 +-5");
  t.assert.not(t.getSprite("Skikatze").sayText, "Expected Sprite Skikatze not to say anything");
  t.assert.not(t.getSprite("Hindernis").sayText, "Expected Sprite Hindernis not to say anything");
  t.assert.not(t.getSprite("Hindernis").getClone(1).sayText, "Expected Clone 1 of Hindernis not to say anything");
  t.assert.withinRange(t.getSprite("Skikatze").size, 100, 1, "Expected Sprite Skikatze to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").size, 60, 1, "Expected Sprite Hindernis to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).size, 60, 1, "Expected Clone 1 of Hindernis to have size 60 +-1");
  t.assert.equal(t.getSprite("Hindernis").getVariable("Hindernis_x").value, "-70", "Expected Hindernis_x to have value -70 in Sprite Hindernis");
  t.assert.ok(t.getSprite("Skikatze").visible, "Expected Sprite Skikatze to be visible");
  t.assert.not(t.getSprite("Hindernis").visible, "Expected Sprite Hindernis not to be visible");
  t.assert.ok(t.getSprite("Hindernis").getClone(1).visible, "Expected Clone 1 of Hindernis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Skikatze").volume, 100, "Expected Sprite Skikatze to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").volume, 100, "Expected Sprite Hindernis to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).volume, 100, "Expected Clone 1 of Hindernis to have volume 100");
  await t.runForSteps(3);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Skikatze").currentCostume, 1, "Expected Sprite Skikatze to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").currentCostume, 1, "Expected Sprite Hindernis to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).currentCostume, 0, "Expected Clone 1 of Hindernis to have costume 0");
  t.assert.equal(t.getSprite("Skikatze").getCloneCount(), 0, "Expected Sprite Skikatze to have 0 clones");
  t.assert.equal(t.getSprite("Hindernis").getCloneCount(), 1, "Expected Sprite Hindernis to have 1 clones");
  t.assert.equal(t.getSprite("Skikatze").direction, 90, 1, "Expected Sprite Skikatze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").direction, 90, 1, "Expected Sprite Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).direction, 90, 1, "Expected Clone 1 of Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Skikatze").effects.color, 0, "Expected effect color of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.fisheye, 0, "Expected effect fisheye of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.whirl, 0, "Expected effect whirl of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.pixelate, 0, "Expected effect pixelate of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.mosaic, 0, "Expected effect mosaic of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.brightness, 0, "Expected effect brightness of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.ghost, 0, "Expected effect ghost of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.color, 0, "Expected effect color of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.fisheye, 0, "Expected effect fisheye of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.whirl, 0, "Expected effect whirl of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.pixelate, 0, "Expected effect pixelate of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.mosaic, 0, "Expected effect mosaic of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.brightness, 0, "Expected effect brightness of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.ghost, 0, "Expected effect ghost of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Skikatze").layerOrder, 3, "Expected Sprite Skikatze to be at layer 3");
  t.assert.equal(t.getSprite("Hindernis").layerOrder, 2, "Expected Sprite Hindernis to be at layer 2");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Hindernis to be at layer 1");
  t.assert.withinRange(t.getSprite("Skikatze").x, 139, 5, "Expected Sprite Skikatze to have x-position 139 +-5");
  t.assert.withinRange(t.getSprite("Skikatze").y, 0, 5, "Expected Sprite Skikatze to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").x, -70, 5, "Expected Sprite Hindernis to have x-position -70 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").y, -32.04599999999999, 5, "Expected Sprite Hindernis to have y-position -32.04599999999999 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, 130, 5, "Expected Clone 1 of Hindernis to have x-position 130 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, -97.3, 5, "Expected Clone 1 of Hindernis to have y-position -97.3 +-5");
  t.assert.not(t.getSprite("Skikatze").sayText, "Expected Sprite Skikatze not to say anything");
  t.assert.not(t.getSprite("Hindernis").sayText, "Expected Sprite Hindernis not to say anything");
  t.assert.not(t.getSprite("Hindernis").getClone(1).sayText, "Expected Clone 1 of Hindernis not to say anything");
  t.assert.withinRange(t.getSprite("Skikatze").size, 100, 1, "Expected Sprite Skikatze to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").size, 60, 1, "Expected Sprite Hindernis to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).size, 60, 1, "Expected Clone 1 of Hindernis to have size 60 +-1");
  t.assert.equal(t.getSprite("Hindernis").getVariable("Hindernis_x").value, "-70", "Expected Hindernis_x to have value -70 in Sprite Hindernis");
  t.assert.ok(t.getSprite("Skikatze").visible, "Expected Sprite Skikatze to be visible");
  t.assert.not(t.getSprite("Hindernis").visible, "Expected Sprite Hindernis not to be visible");
  t.assert.ok(t.getSprite("Hindernis").getClone(1).visible, "Expected Clone 1 of Hindernis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Skikatze").volume, 100, "Expected Sprite Skikatze to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").volume, 100, "Expected Sprite Hindernis to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).volume, 100, "Expected Clone 1 of Hindernis to have volume 100");
  await t.runForSteps(11);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Skikatze").currentCostume, 1, "Expected Sprite Skikatze to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").currentCostume, 1, "Expected Sprite Hindernis to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).currentCostume, 0, "Expected Clone 1 of Hindernis to have costume 0");
  t.assert.equal(t.getSprite("Skikatze").getCloneCount(), 0, "Expected Sprite Skikatze to have 0 clones");
  t.assert.equal(t.getSprite("Hindernis").getCloneCount(), 1, "Expected Sprite Hindernis to have 1 clones");
  t.assert.equal(t.getSprite("Skikatze").direction, 90, 1, "Expected Sprite Skikatze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").direction, 90, 1, "Expected Sprite Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).direction, 90, 1, "Expected Clone 1 of Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Skikatze").effects.color, 0, "Expected effect color of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.fisheye, 0, "Expected effect fisheye of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.whirl, 0, "Expected effect whirl of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.pixelate, 0, "Expected effect pixelate of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.mosaic, 0, "Expected effect mosaic of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.brightness, 0, "Expected effect brightness of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.ghost, 0, "Expected effect ghost of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.color, 0, "Expected effect color of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.fisheye, 0, "Expected effect fisheye of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.whirl, 0, "Expected effect whirl of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.pixelate, 0, "Expected effect pixelate of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.mosaic, 0, "Expected effect mosaic of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.brightness, 0, "Expected effect brightness of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.ghost, 0, "Expected effect ghost of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Skikatze").layerOrder, 3, "Expected Sprite Skikatze to be at layer 3");
  t.assert.equal(t.getSprite("Hindernis").layerOrder, 2, "Expected Sprite Hindernis to be at layer 2");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Hindernis to be at layer 1");
  t.assert.withinRange(t.getSprite("Skikatze").x, 139, 5, "Expected Sprite Skikatze to have x-position 139 +-5");
  t.assert.withinRange(t.getSprite("Skikatze").y, 0, 5, "Expected Sprite Skikatze to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").x, -70, 5, "Expected Sprite Hindernis to have x-position -70 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").y, -32.04599999999999, 5, "Expected Sprite Hindernis to have y-position -32.04599999999999 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, 130, 5, "Expected Clone 1 of Hindernis to have x-position 130 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, -26.5, 5, "Expected Clone 1 of Hindernis to have y-position -26.5 +-5");
  t.assert.not(t.getSprite("Skikatze").sayText, "Expected Sprite Skikatze not to say anything");
  t.assert.not(t.getSprite("Hindernis").sayText, "Expected Sprite Hindernis not to say anything");
  t.assert.not(t.getSprite("Hindernis").getClone(1).sayText, "Expected Clone 1 of Hindernis not to say anything");
  t.assert.withinRange(t.getSprite("Skikatze").size, 100, 1, "Expected Sprite Skikatze to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").size, 60, 1, "Expected Sprite Hindernis to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).size, 60, 1, "Expected Clone 1 of Hindernis to have size 60 +-1");
  t.assert.equal(t.getSprite("Hindernis").getVariable("Hindernis_x").value, "-70", "Expected Hindernis_x to have value -70 in Sprite Hindernis");
  t.assert.ok(t.getSprite("Skikatze").visible, "Expected Sprite Skikatze to be visible");
  t.assert.not(t.getSprite("Hindernis").visible, "Expected Sprite Hindernis not to be visible");
  t.assert.ok(t.getSprite("Hindernis").getClone(1).visible, "Expected Clone 1 of Hindernis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Skikatze").volume, 100, "Expected Sprite Skikatze to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").volume, 100, "Expected Sprite Hindernis to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).volume, 100, "Expected Clone 1 of Hindernis to have volume 100");
  await t.runForSteps(34);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Skikatze").currentCostume, 1, "Expected Sprite Skikatze to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").currentCostume, 1, "Expected Sprite Hindernis to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).currentCostume, 0, "Expected Clone 1 of Hindernis to have costume 0");
  t.assert.equal(t.getSprite("Skikatze").getCloneCount(), 0, "Expected Sprite Skikatze to have 0 clones");
  t.assert.equal(t.getSprite("Hindernis").getCloneCount(), 1, "Expected Sprite Hindernis to have 1 clones");
  t.assert.equal(t.getSprite("Skikatze").direction, 90, 1, "Expected Sprite Skikatze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").direction, 90, 1, "Expected Sprite Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).direction, 90, 1, "Expected Clone 1 of Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Skikatze").effects.color, 0, "Expected effect color of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.fisheye, 0, "Expected effect fisheye of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.whirl, 0, "Expected effect whirl of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.pixelate, 0, "Expected effect pixelate of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.mosaic, 0, "Expected effect mosaic of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.brightness, 0, "Expected effect brightness of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.ghost, 0, "Expected effect ghost of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.color, 0, "Expected effect color of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.fisheye, 0, "Expected effect fisheye of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.whirl, 0, "Expected effect whirl of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.pixelate, 0, "Expected effect pixelate of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.mosaic, 0, "Expected effect mosaic of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.brightness, 0, "Expected effect brightness of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.ghost, 0, "Expected effect ghost of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Skikatze").layerOrder, 3, "Expected Sprite Skikatze to be at layer 3");
  t.assert.equal(t.getSprite("Hindernis").layerOrder, 2, "Expected Sprite Hindernis to be at layer 2");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Hindernis to be at layer 1");
  t.assert.withinRange(t.getSprite("Skikatze").x, 139, 5, "Expected Sprite Skikatze to have x-position 139 +-5");
  t.assert.withinRange(t.getSprite("Skikatze").y, 0, 5, "Expected Sprite Skikatze to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").x, -70, 5, "Expected Sprite Hindernis to have x-position -70 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").y, -32.04599999999999, 5, "Expected Sprite Hindernis to have y-position -32.04599999999999 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, 130, 5, "Expected Clone 1 of Hindernis to have x-position 130 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, 180, 5, "Expected Clone 1 of Hindernis to have y-position 180 +-5");
  t.assert.not(t.getSprite("Skikatze").sayText, "Expected Sprite Skikatze not to say anything");
  t.assert.not(t.getSprite("Hindernis").sayText, "Expected Sprite Hindernis not to say anything");
  t.assert.not(t.getSprite("Hindernis").getClone(1).sayText, "Expected Clone 1 of Hindernis not to say anything");
  t.assert.withinRange(t.getSprite("Skikatze").size, 100, 1, "Expected Sprite Skikatze to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").size, 60, 1, "Expected Sprite Hindernis to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).size, 60, 1, "Expected Clone 1 of Hindernis to have size 60 +-1");
  t.assert.equal(t.getSprite("Hindernis").getVariable("Hindernis_x").value, "-70", "Expected Hindernis_x to have value -70 in Sprite Hindernis");
  t.assert.ok(t.getSprite("Skikatze").visible, "Expected Sprite Skikatze to be visible");
  t.assert.not(t.getSprite("Hindernis").visible, "Expected Sprite Hindernis not to be visible");
  t.assert.not(t.getSprite("Hindernis").getClone(1).visible, "Expected Clone 1 of Hindernis not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Skikatze").volume, 100, "Expected Sprite Skikatze to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").volume, 100, "Expected Sprite Hindernis to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).volume, 100, "Expected Clone 1 of Hindernis to have volume 100");
  await t.runForSteps(83);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Skikatze").currentCostume, 1, "Expected Sprite Skikatze to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").currentCostume, 1, "Expected Sprite Hindernis to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).currentCostume, 0, "Expected Clone 1 of Hindernis to have costume 0");
  t.assert.equal(t.getSprite("Skikatze").getCloneCount(), 0, "Expected Sprite Skikatze to have 0 clones");
  t.assert.equal(t.getSprite("Hindernis").getCloneCount(), 1, "Expected Sprite Hindernis to have 1 clones");
  t.assert.equal(t.getSprite("Skikatze").direction, 90, 1, "Expected Sprite Skikatze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").direction, 90, 1, "Expected Sprite Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).direction, 90, 1, "Expected Clone 1 of Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Skikatze").effects.color, 0, "Expected effect color of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.fisheye, 0, "Expected effect fisheye of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.whirl, 0, "Expected effect whirl of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.pixelate, 0, "Expected effect pixelate of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.mosaic, 0, "Expected effect mosaic of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.brightness, 0, "Expected effect brightness of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.ghost, 0, "Expected effect ghost of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.color, 0, "Expected effect color of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.fisheye, 0, "Expected effect fisheye of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.whirl, 0, "Expected effect whirl of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.pixelate, 0, "Expected effect pixelate of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.mosaic, 0, "Expected effect mosaic of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.brightness, 0, "Expected effect brightness of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.ghost, 0, "Expected effect ghost of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Skikatze").layerOrder, 3, "Expected Sprite Skikatze to be at layer 3");
  t.assert.equal(t.getSprite("Hindernis").layerOrder, 2, "Expected Sprite Hindernis to be at layer 2");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Hindernis to be at layer 1");
  t.assert.withinRange(t.getSprite("Skikatze").x, 139, 5, "Expected Sprite Skikatze to have x-position 139 +-5");
  t.assert.withinRange(t.getSprite("Skikatze").y, 0, 5, "Expected Sprite Skikatze to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").x, -70, 5, "Expected Sprite Hindernis to have x-position -70 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").y, -32.04599999999999, 5, "Expected Sprite Hindernis to have y-position -32.04599999999999 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, 128, 5, "Expected Clone 1 of Hindernis to have x-position 128 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, 138.7, 5, "Expected Clone 1 of Hindernis to have y-position 138.7 +-5");
  t.assert.not(t.getSprite("Skikatze").sayText, "Expected Sprite Skikatze not to say anything");
  t.assert.not(t.getSprite("Hindernis").sayText, "Expected Sprite Hindernis not to say anything");
  t.assert.not(t.getSprite("Hindernis").getClone(1).sayText, "Expected Clone 1 of Hindernis not to say anything");
  t.assert.withinRange(t.getSprite("Skikatze").size, 100, 1, "Expected Sprite Skikatze to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").size, 60, 1, "Expected Sprite Hindernis to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).size, 60, 1, "Expected Clone 1 of Hindernis to have size 60 +-1");
  t.assert.equal(t.getSprite("Hindernis").getVariable("Hindernis_x").value, "-70", "Expected Hindernis_x to have value -70 in Sprite Hindernis");
  t.assert.ok(t.getSprite("Skikatze").visible, "Expected Sprite Skikatze to be visible");
  t.assert.not(t.getSprite("Hindernis").visible, "Expected Sprite Hindernis not to be visible");
  t.assert.ok(t.getSprite("Hindernis").getClone(1).visible, "Expected Clone 1 of Hindernis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Skikatze").volume, 100, "Expected Sprite Skikatze to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").volume, 100, "Expected Sprite Hindernis to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).volume, 100, "Expected Clone 1 of Hindernis to have volume 100");
  await t.runForSteps(28);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Skikatze").currentCostume, 1, "Expected Sprite Skikatze to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").currentCostume, 1, "Expected Sprite Hindernis to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).currentCostume, 0, "Expected Clone 1 of Hindernis to have costume 0");
  t.assert.equal(t.getSprite("Skikatze").getCloneCount(), 0, "Expected Sprite Skikatze to have 0 clones");
  t.assert.equal(t.getSprite("Hindernis").getCloneCount(), 1, "Expected Sprite Hindernis to have 1 clones");
  t.assert.equal(t.getSprite("Skikatze").direction, 90, 1, "Expected Sprite Skikatze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").direction, 90, 1, "Expected Sprite Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).direction, 90, 1, "Expected Clone 1 of Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Skikatze").effects.color, 0, "Expected effect color of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.fisheye, 0, "Expected effect fisheye of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.whirl, 0, "Expected effect whirl of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.pixelate, 0, "Expected effect pixelate of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.mosaic, 0, "Expected effect mosaic of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.brightness, 0, "Expected effect brightness of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.ghost, 0, "Expected effect ghost of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.color, 0, "Expected effect color of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.fisheye, 0, "Expected effect fisheye of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.whirl, 0, "Expected effect whirl of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.pixelate, 0, "Expected effect pixelate of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.mosaic, 0, "Expected effect mosaic of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.brightness, 0, "Expected effect brightness of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.ghost, 0, "Expected effect ghost of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Skikatze").layerOrder, 3, "Expected Sprite Skikatze to be at layer 3");
  t.assert.equal(t.getSprite("Hindernis").layerOrder, 2, "Expected Sprite Hindernis to be at layer 2");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Hindernis to be at layer 1");
  t.assert.withinRange(t.getSprite("Skikatze").x, 139, 5, "Expected Sprite Skikatze to have x-position 139 +-5");
  t.assert.withinRange(t.getSprite("Skikatze").y, 0, 5, "Expected Sprite Skikatze to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").x, -70, 5, "Expected Sprite Hindernis to have x-position -70 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").y, -32.04599999999999, 5, "Expected Sprite Hindernis to have y-position -32.04599999999999 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, 128, 5, "Expected Clone 1 of Hindernis to have x-position 128 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, 180, 5, "Expected Clone 1 of Hindernis to have y-position 180 +-5");
  t.assert.not(t.getSprite("Skikatze").sayText, "Expected Sprite Skikatze not to say anything");
  t.assert.not(t.getSprite("Hindernis").sayText, "Expected Sprite Hindernis not to say anything");
  t.assert.not(t.getSprite("Hindernis").getClone(1).sayText, "Expected Clone 1 of Hindernis not to say anything");
  t.assert.withinRange(t.getSprite("Skikatze").size, 100, 1, "Expected Sprite Skikatze to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").size, 60, 1, "Expected Sprite Hindernis to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).size, 60, 1, "Expected Clone 1 of Hindernis to have size 60 +-1");
  t.assert.equal(t.getSprite("Hindernis").getVariable("Hindernis_x").value, "-70", "Expected Hindernis_x to have value -70 in Sprite Hindernis");
  t.assert.ok(t.getSprite("Skikatze").visible, "Expected Sprite Skikatze to be visible");
  t.assert.not(t.getSprite("Hindernis").visible, "Expected Sprite Hindernis not to be visible");
  t.assert.not(t.getSprite("Hindernis").getClone(1).visible, "Expected Clone 1 of Hindernis not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Skikatze").volume, 100, "Expected Sprite Skikatze to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").volume, 100, "Expected Sprite Hindernis to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).volume, 100, "Expected Clone 1 of Hindernis to have volume 100");
  await t.runForSteps(45);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Skikatze").currentCostume, 1, "Expected Sprite Skikatze to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").currentCostume, 1, "Expected Sprite Hindernis to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).currentCostume, 0, "Expected Clone 1 of Hindernis to have costume 0");
  t.assert.equal(t.getSprite("Skikatze").getCloneCount(), 0, "Expected Sprite Skikatze to have 0 clones");
  t.assert.equal(t.getSprite("Hindernis").getCloneCount(), 1, "Expected Sprite Hindernis to have 1 clones");
  t.assert.equal(t.getSprite("Skikatze").direction, 90, 1, "Expected Sprite Skikatze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").direction, 90, 1, "Expected Sprite Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).direction, 90, 1, "Expected Clone 1 of Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Skikatze").effects.color, 0, "Expected effect color of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.fisheye, 0, "Expected effect fisheye of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.whirl, 0, "Expected effect whirl of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.pixelate, 0, "Expected effect pixelate of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.mosaic, 0, "Expected effect mosaic of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.brightness, 0, "Expected effect brightness of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.ghost, 0, "Expected effect ghost of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.color, 0, "Expected effect color of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.fisheye, 0, "Expected effect fisheye of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.whirl, 0, "Expected effect whirl of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.pixelate, 0, "Expected effect pixelate of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.mosaic, 0, "Expected effect mosaic of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.brightness, 0, "Expected effect brightness of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.ghost, 0, "Expected effect ghost of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Skikatze").layerOrder, 3, "Expected Sprite Skikatze to be at layer 3");
  t.assert.equal(t.getSprite("Hindernis").layerOrder, 2, "Expected Sprite Hindernis to be at layer 2");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Hindernis to be at layer 1");
  t.assert.withinRange(t.getSprite("Skikatze").x, 139, 5, "Expected Sprite Skikatze to have x-position 139 +-5");
  t.assert.withinRange(t.getSprite("Skikatze").y, 0, 5, "Expected Sprite Skikatze to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").x, -70, 5, "Expected Sprite Hindernis to have x-position -70 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").y, -32.04599999999999, 5, "Expected Sprite Hindernis to have y-position -32.04599999999999 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, 105, 5, "Expected Clone 1 of Hindernis to have x-position 105 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, 44.30000000000001, 5, "Expected Clone 1 of Hindernis to have y-position 44.30000000000001 +-5");
  t.assert.not(t.getSprite("Skikatze").sayText, "Expected Sprite Skikatze not to say anything");
  t.assert.not(t.getSprite("Hindernis").sayText, "Expected Sprite Hindernis not to say anything");
  t.assert.not(t.getSprite("Hindernis").getClone(1).sayText, "Expected Clone 1 of Hindernis not to say anything");
  t.assert.withinRange(t.getSprite("Skikatze").size, 100, 1, "Expected Sprite Skikatze to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").size, 60, 1, "Expected Sprite Hindernis to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).size, 60, 1, "Expected Clone 1 of Hindernis to have size 60 +-1");
  t.assert.equal(t.getSprite("Hindernis").getVariable("Hindernis_x").value, "-70", "Expected Hindernis_x to have value -70 in Sprite Hindernis");
  t.assert.ok(t.getSprite("Skikatze").visible, "Expected Sprite Skikatze to be visible");
  t.assert.not(t.getSprite("Hindernis").visible, "Expected Sprite Hindernis not to be visible");
  t.assert.ok(t.getSprite("Hindernis").getClone(1).visible, "Expected Clone 1 of Hindernis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Skikatze").volume, 100, "Expected Sprite Skikatze to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").volume, 100, "Expected Sprite Hindernis to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).volume, 100, "Expected Clone 1 of Hindernis to have volume 100");
  await t.runForSteps(13);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Skikatze").currentCostume, 1, "Expected Sprite Skikatze to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").currentCostume, 1, "Expected Sprite Hindernis to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).currentCostume, 0, "Expected Clone 1 of Hindernis to have costume 0");
  t.assert.equal(t.getSprite("Skikatze").getCloneCount(), 0, "Expected Sprite Skikatze to have 0 clones");
  t.assert.equal(t.getSprite("Hindernis").getCloneCount(), 1, "Expected Sprite Hindernis to have 1 clones");
  t.assert.equal(t.getSprite("Skikatze").direction, 90, 1, "Expected Sprite Skikatze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").direction, 90, 1, "Expected Sprite Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).direction, 90, 1, "Expected Clone 1 of Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Skikatze").effects.color, 0, "Expected effect color of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.fisheye, 0, "Expected effect fisheye of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.whirl, 0, "Expected effect whirl of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.pixelate, 0, "Expected effect pixelate of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.mosaic, 0, "Expected effect mosaic of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.brightness, 0, "Expected effect brightness of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.ghost, 0, "Expected effect ghost of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.color, 0, "Expected effect color of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.fisheye, 0, "Expected effect fisheye of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.whirl, 0, "Expected effect whirl of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.pixelate, 0, "Expected effect pixelate of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.mosaic, 0, "Expected effect mosaic of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.brightness, 0, "Expected effect brightness of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.ghost, 0, "Expected effect ghost of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Skikatze").layerOrder, 3, "Expected Sprite Skikatze to be at layer 3");
  t.assert.equal(t.getSprite("Hindernis").layerOrder, 2, "Expected Sprite Hindernis to be at layer 2");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Hindernis to be at layer 1");
  t.assert.withinRange(t.getSprite("Skikatze").x, 139, 5, "Expected Sprite Skikatze to have x-position 139 +-5");
  t.assert.withinRange(t.getSprite("Skikatze").y, 0, 5, "Expected Sprite Skikatze to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").x, -70, 5, "Expected Sprite Hindernis to have x-position -70 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").y, -32.04599999999999, 5, "Expected Sprite Hindernis to have y-position -32.04599999999999 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, 105, 5, "Expected Clone 1 of Hindernis to have x-position 105 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, 126.89999999999998, 5, "Expected Clone 1 of Hindernis to have y-position 126.89999999999998 +-5");
  t.assert.not(t.getSprite("Skikatze").sayText, "Expected Sprite Skikatze not to say anything");
  t.assert.not(t.getSprite("Hindernis").sayText, "Expected Sprite Hindernis not to say anything");
  t.assert.not(t.getSprite("Hindernis").getClone(1).sayText, "Expected Clone 1 of Hindernis not to say anything");
  t.assert.withinRange(t.getSprite("Skikatze").size, 100, 1, "Expected Sprite Skikatze to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").size, 60, 1, "Expected Sprite Hindernis to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).size, 60, 1, "Expected Clone 1 of Hindernis to have size 60 +-1");
  t.assert.equal(t.getSprite("Hindernis").getVariable("Hindernis_x").value, "-70", "Expected Hindernis_x to have value -70 in Sprite Hindernis");
  t.assert.ok(t.getSprite("Skikatze").visible, "Expected Sprite Skikatze to be visible");
  t.assert.not(t.getSprite("Hindernis").visible, "Expected Sprite Hindernis not to be visible");
  t.assert.ok(t.getSprite("Hindernis").getClone(1).visible, "Expected Clone 1 of Hindernis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Skikatze").volume, 100, "Expected Sprite Skikatze to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").volume, 100, "Expected Sprite Hindernis to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).volume, 100, "Expected Clone 1 of Hindernis to have volume 100");
  await t.runForSteps(8);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Skikatze").currentCostume, 1, "Expected Sprite Skikatze to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").currentCostume, 1, "Expected Sprite Hindernis to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).currentCostume, 0, "Expected Clone 1 of Hindernis to have costume 0");
  t.assert.equal(t.getSprite("Skikatze").getCloneCount(), 0, "Expected Sprite Skikatze to have 0 clones");
  t.assert.equal(t.getSprite("Hindernis").getCloneCount(), 1, "Expected Sprite Hindernis to have 1 clones");
  t.assert.equal(t.getSprite("Skikatze").direction, 90, 1, "Expected Sprite Skikatze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").direction, 90, 1, "Expected Sprite Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).direction, 90, 1, "Expected Clone 1 of Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Skikatze").effects.color, 0, "Expected effect color of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.fisheye, 0, "Expected effect fisheye of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.whirl, 0, "Expected effect whirl of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.pixelate, 0, "Expected effect pixelate of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.mosaic, 0, "Expected effect mosaic of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.brightness, 0, "Expected effect brightness of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.ghost, 0, "Expected effect ghost of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.color, 0, "Expected effect color of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.fisheye, 0, "Expected effect fisheye of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.whirl, 0, "Expected effect whirl of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.pixelate, 0, "Expected effect pixelate of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.mosaic, 0, "Expected effect mosaic of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.brightness, 0, "Expected effect brightness of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.ghost, 0, "Expected effect ghost of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Skikatze").layerOrder, 3, "Expected Sprite Skikatze to be at layer 3");
  t.assert.equal(t.getSprite("Hindernis").layerOrder, 2, "Expected Sprite Hindernis to be at layer 2");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Hindernis to be at layer 1");
  t.assert.withinRange(t.getSprite("Skikatze").x, 139, 5, "Expected Sprite Skikatze to have x-position 139 +-5");
  t.assert.withinRange(t.getSprite("Skikatze").y, 0, 5, "Expected Sprite Skikatze to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").x, -70, 5, "Expected Sprite Hindernis to have x-position -70 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").y, -32.04599999999999, 5, "Expected Sprite Hindernis to have y-position -32.04599999999999 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, 105, 5, "Expected Clone 1 of Hindernis to have x-position 105 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, 180, 5, "Expected Clone 1 of Hindernis to have y-position 180 +-5");
  t.assert.not(t.getSprite("Skikatze").sayText, "Expected Sprite Skikatze not to say anything");
  t.assert.not(t.getSprite("Hindernis").sayText, "Expected Sprite Hindernis not to say anything");
  t.assert.not(t.getSprite("Hindernis").getClone(1).sayText, "Expected Clone 1 of Hindernis not to say anything");
  t.assert.withinRange(t.getSprite("Skikatze").size, 100, 1, "Expected Sprite Skikatze to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").size, 60, 1, "Expected Sprite Hindernis to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).size, 60, 1, "Expected Clone 1 of Hindernis to have size 60 +-1");
  t.assert.equal(t.getSprite("Hindernis").getVariable("Hindernis_x").value, "-70", "Expected Hindernis_x to have value -70 in Sprite Hindernis");
  t.assert.ok(t.getSprite("Skikatze").visible, "Expected Sprite Skikatze to be visible");
  t.assert.not(t.getSprite("Hindernis").visible, "Expected Sprite Hindernis not to be visible");
  t.assert.not(t.getSprite("Hindernis").getClone(1).visible, "Expected Clone 1 of Hindernis not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Skikatze").volume, 100, "Expected Sprite Skikatze to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").volume, 100, "Expected Sprite Hindernis to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).volume, 100, "Expected Clone 1 of Hindernis to have volume 100");
  await t.runForSteps(12);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Skikatze").currentCostume, 1, "Expected Sprite Skikatze to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").currentCostume, 1, "Expected Sprite Hindernis to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).currentCostume, 0, "Expected Clone 1 of Hindernis to have costume 0");
  t.assert.equal(t.getSprite("Skikatze").getCloneCount(), 0, "Expected Sprite Skikatze to have 0 clones");
  t.assert.equal(t.getSprite("Hindernis").getCloneCount(), 1, "Expected Sprite Hindernis to have 1 clones");
  t.assert.equal(t.getSprite("Skikatze").direction, 90, 1, "Expected Sprite Skikatze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").direction, 90, 1, "Expected Sprite Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).direction, 90, 1, "Expected Clone 1 of Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Skikatze").effects.color, 0, "Expected effect color of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.fisheye, 0, "Expected effect fisheye of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.whirl, 0, "Expected effect whirl of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.pixelate, 0, "Expected effect pixelate of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.mosaic, 0, "Expected effect mosaic of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.brightness, 0, "Expected effect brightness of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.ghost, 0, "Expected effect ghost of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.color, 0, "Expected effect color of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.fisheye, 0, "Expected effect fisheye of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.whirl, 0, "Expected effect whirl of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.pixelate, 0, "Expected effect pixelate of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.mosaic, 0, "Expected effect mosaic of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.brightness, 0, "Expected effect brightness of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.ghost, 0, "Expected effect ghost of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Skikatze").layerOrder, 3, "Expected Sprite Skikatze to be at layer 3");
  t.assert.equal(t.getSprite("Hindernis").layerOrder, 2, "Expected Sprite Hindernis to be at layer 2");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Hindernis to be at layer 1");
  t.assert.withinRange(t.getSprite("Skikatze").x, 139, 5, "Expected Sprite Skikatze to have x-position 139 +-5");
  t.assert.withinRange(t.getSprite("Skikatze").y, 0, 5, "Expected Sprite Skikatze to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").x, -70, 5, "Expected Sprite Hindernis to have x-position -70 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").y, -32.04599999999999, 5, "Expected Sprite Hindernis to have y-position -32.04599999999999 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, 105, 5, "Expected Clone 1 of Hindernis to have x-position 105 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, 180, 5, "Expected Clone 1 of Hindernis to have y-position 180 +-5");
  t.assert.not(t.getSprite("Skikatze").sayText, "Expected Sprite Skikatze not to say anything");
  t.assert.not(t.getSprite("Hindernis").sayText, "Expected Sprite Hindernis not to say anything");
  t.assert.not(t.getSprite("Hindernis").getClone(1).sayText, "Expected Clone 1 of Hindernis not to say anything");
  t.assert.withinRange(t.getSprite("Skikatze").size, 100, 1, "Expected Sprite Skikatze to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").size, 60, 1, "Expected Sprite Hindernis to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).size, 60, 1, "Expected Clone 1 of Hindernis to have size 60 +-1");
  t.assert.equal(t.getSprite("Hindernis").getVariable("Hindernis_x").value, "-70", "Expected Hindernis_x to have value -70 in Sprite Hindernis");
  t.assert.ok(t.getSprite("Skikatze").visible, "Expected Sprite Skikatze to be visible");
  t.assert.not(t.getSprite("Hindernis").visible, "Expected Sprite Hindernis not to be visible");
  t.assert.not(t.getSprite("Hindernis").getClone(1).visible, "Expected Clone 1 of Hindernis not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Skikatze").volume, 100, "Expected Sprite Skikatze to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").volume, 100, "Expected Sprite Hindernis to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).volume, 100, "Expected Clone 1 of Hindernis to have volume 100");
  await t.runForSteps(12);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Skikatze").currentCostume, 1, "Expected Sprite Skikatze to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").currentCostume, 1, "Expected Sprite Hindernis to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).currentCostume, 0, "Expected Clone 1 of Hindernis to have costume 0");
  t.assert.equal(t.getSprite("Skikatze").getCloneCount(), 0, "Expected Sprite Skikatze to have 0 clones");
  t.assert.equal(t.getSprite("Hindernis").getCloneCount(), 1, "Expected Sprite Hindernis to have 1 clones");
  t.assert.equal(t.getSprite("Skikatze").direction, 90, 1, "Expected Sprite Skikatze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").direction, 90, 1, "Expected Sprite Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).direction, 90, 1, "Expected Clone 1 of Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Skikatze").effects.color, 0, "Expected effect color of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.fisheye, 0, "Expected effect fisheye of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.whirl, 0, "Expected effect whirl of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.pixelate, 0, "Expected effect pixelate of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.mosaic, 0, "Expected effect mosaic of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.brightness, 0, "Expected effect brightness of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.ghost, 0, "Expected effect ghost of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.color, 0, "Expected effect color of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.fisheye, 0, "Expected effect fisheye of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.whirl, 0, "Expected effect whirl of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.pixelate, 0, "Expected effect pixelate of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.mosaic, 0, "Expected effect mosaic of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.brightness, 0, "Expected effect brightness of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.ghost, 0, "Expected effect ghost of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Skikatze").layerOrder, 3, "Expected Sprite Skikatze to be at layer 3");
  t.assert.equal(t.getSprite("Hindernis").layerOrder, 2, "Expected Sprite Hindernis to be at layer 2");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Hindernis to be at layer 1");
  t.assert.withinRange(t.getSprite("Skikatze").x, 139, 5, "Expected Sprite Skikatze to have x-position 139 +-5");
  t.assert.withinRange(t.getSprite("Skikatze").y, 0, 5, "Expected Sprite Skikatze to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").x, -70, 5, "Expected Sprite Hindernis to have x-position -70 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").y, -32.04599999999999, 5, "Expected Sprite Hindernis to have y-position -32.04599999999999 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, 105, 5, "Expected Clone 1 of Hindernis to have x-position 105 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, 180, 5, "Expected Clone 1 of Hindernis to have y-position 180 +-5");
  t.assert.not(t.getSprite("Skikatze").sayText, "Expected Sprite Skikatze not to say anything");
  t.assert.not(t.getSprite("Hindernis").sayText, "Expected Sprite Hindernis not to say anything");
  t.assert.not(t.getSprite("Hindernis").getClone(1).sayText, "Expected Clone 1 of Hindernis not to say anything");
  t.assert.withinRange(t.getSprite("Skikatze").size, 100, 1, "Expected Sprite Skikatze to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").size, 60, 1, "Expected Sprite Hindernis to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).size, 60, 1, "Expected Clone 1 of Hindernis to have size 60 +-1");
  t.assert.equal(t.getSprite("Hindernis").getVariable("Hindernis_x").value, "-70", "Expected Hindernis_x to have value -70 in Sprite Hindernis");
  t.assert.ok(t.getSprite("Skikatze").visible, "Expected Sprite Skikatze to be visible");
  t.assert.not(t.getSprite("Hindernis").visible, "Expected Sprite Hindernis not to be visible");
  t.assert.not(t.getSprite("Hindernis").getClone(1).visible, "Expected Clone 1 of Hindernis not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Skikatze").volume, 100, "Expected Sprite Skikatze to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").volume, 100, "Expected Sprite Hindernis to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).volume, 100, "Expected Clone 1 of Hindernis to have volume 100");
  await t.runForSteps(29);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Skikatze").currentCostume, 1, "Expected Sprite Skikatze to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").currentCostume, 1, "Expected Sprite Hindernis to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).currentCostume, 0, "Expected Clone 1 of Hindernis to have costume 0");
  t.assert.equal(t.getSprite("Skikatze").getCloneCount(), 0, "Expected Sprite Skikatze to have 0 clones");
  t.assert.equal(t.getSprite("Hindernis").getCloneCount(), 1, "Expected Sprite Hindernis to have 1 clones");
  t.assert.equal(t.getSprite("Skikatze").direction, 90, 1, "Expected Sprite Skikatze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").direction, 90, 1, "Expected Sprite Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).direction, 90, 1, "Expected Clone 1 of Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Skikatze").effects.color, 0, "Expected effect color of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.fisheye, 0, "Expected effect fisheye of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.whirl, 0, "Expected effect whirl of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.pixelate, 0, "Expected effect pixelate of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.mosaic, 0, "Expected effect mosaic of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.brightness, 0, "Expected effect brightness of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.ghost, 0, "Expected effect ghost of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.color, 0, "Expected effect color of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.fisheye, 0, "Expected effect fisheye of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.whirl, 0, "Expected effect whirl of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.pixelate, 0, "Expected effect pixelate of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.mosaic, 0, "Expected effect mosaic of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.brightness, 0, "Expected effect brightness of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.ghost, 0, "Expected effect ghost of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Skikatze").layerOrder, 3, "Expected Sprite Skikatze to be at layer 3");
  t.assert.equal(t.getSprite("Hindernis").layerOrder, 2, "Expected Sprite Hindernis to be at layer 2");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Hindernis to be at layer 1");
  t.assert.withinRange(t.getSprite("Skikatze").x, 139, 5, "Expected Sprite Skikatze to have x-position 139 +-5");
  t.assert.withinRange(t.getSprite("Skikatze").y, 0, 5, "Expected Sprite Skikatze to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").x, -70, 5, "Expected Sprite Hindernis to have x-position -70 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").y, -32.04599999999999, 5, "Expected Sprite Hindernis to have y-position -32.04599999999999 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, -3, 5, "Expected Clone 1 of Hindernis to have x-position -3 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, -26.5, 5, "Expected Clone 1 of Hindernis to have y-position -26.5 +-5");
  t.assert.not(t.getSprite("Skikatze").sayText, "Expected Sprite Skikatze not to say anything");
  t.assert.not(t.getSprite("Hindernis").sayText, "Expected Sprite Hindernis not to say anything");
  t.assert.not(t.getSprite("Hindernis").getClone(1).sayText, "Expected Clone 1 of Hindernis not to say anything");
  t.assert.withinRange(t.getSprite("Skikatze").size, 100, 1, "Expected Sprite Skikatze to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").size, 60, 1, "Expected Sprite Hindernis to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).size, 60, 1, "Expected Clone 1 of Hindernis to have size 60 +-1");
  t.assert.equal(t.getSprite("Hindernis").getVariable("Hindernis_x").value, "-70", "Expected Hindernis_x to have value -70 in Sprite Hindernis");
  t.assert.ok(t.getSprite("Skikatze").visible, "Expected Sprite Skikatze to be visible");
  t.assert.not(t.getSprite("Hindernis").visible, "Expected Sprite Hindernis not to be visible");
  t.assert.ok(t.getSprite("Hindernis").getClone(1).visible, "Expected Clone 1 of Hindernis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Skikatze").volume, 100, "Expected Sprite Skikatze to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").volume, 100, "Expected Sprite Hindernis to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).volume, 100, "Expected Clone 1 of Hindernis to have volume 100");
  await t.runForSteps(34);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Skikatze").currentCostume, 1, "Expected Sprite Skikatze to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").currentCostume, 1, "Expected Sprite Hindernis to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).currentCostume, 0, "Expected Clone 1 of Hindernis to have costume 0");
  t.assert.equal(t.getSprite("Skikatze").getCloneCount(), 0, "Expected Sprite Skikatze to have 0 clones");
  t.assert.equal(t.getSprite("Hindernis").getCloneCount(), 1, "Expected Sprite Hindernis to have 1 clones");
  t.assert.equal(t.getSprite("Skikatze").direction, 90, 1, "Expected Sprite Skikatze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").direction, 90, 1, "Expected Sprite Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).direction, 90, 1, "Expected Clone 1 of Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Skikatze").effects.color, 0, "Expected effect color of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.fisheye, 0, "Expected effect fisheye of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.whirl, 0, "Expected effect whirl of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.pixelate, 0, "Expected effect pixelate of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.mosaic, 0, "Expected effect mosaic of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.brightness, 0, "Expected effect brightness of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.ghost, 0, "Expected effect ghost of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.color, 0, "Expected effect color of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.fisheye, 0, "Expected effect fisheye of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.whirl, 0, "Expected effect whirl of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.pixelate, 0, "Expected effect pixelate of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.mosaic, 0, "Expected effect mosaic of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.brightness, 0, "Expected effect brightness of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.ghost, 0, "Expected effect ghost of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Skikatze").layerOrder, 3, "Expected Sprite Skikatze to be at layer 3");
  t.assert.equal(t.getSprite("Hindernis").layerOrder, 2, "Expected Sprite Hindernis to be at layer 2");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Hindernis to be at layer 1");
  t.assert.withinRange(t.getSprite("Skikatze").x, 139, 5, "Expected Sprite Skikatze to have x-position 139 +-5");
  t.assert.withinRange(t.getSprite("Skikatze").y, 0, 5, "Expected Sprite Skikatze to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").x, -70, 5, "Expected Sprite Hindernis to have x-position -70 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").y, -32.04599999999999, 5, "Expected Sprite Hindernis to have y-position -32.04599999999999 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, -3, 5, "Expected Clone 1 of Hindernis to have x-position -3 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, 180, 5, "Expected Clone 1 of Hindernis to have y-position 180 +-5");
  t.assert.not(t.getSprite("Skikatze").sayText, "Expected Sprite Skikatze not to say anything");
  t.assert.not(t.getSprite("Hindernis").sayText, "Expected Sprite Hindernis not to say anything");
  t.assert.not(t.getSprite("Hindernis").getClone(1).sayText, "Expected Clone 1 of Hindernis not to say anything");
  t.assert.withinRange(t.getSprite("Skikatze").size, 100, 1, "Expected Sprite Skikatze to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").size, 60, 1, "Expected Sprite Hindernis to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).size, 60, 1, "Expected Clone 1 of Hindernis to have size 60 +-1");
  t.assert.equal(t.getSprite("Hindernis").getVariable("Hindernis_x").value, "-70", "Expected Hindernis_x to have value -70 in Sprite Hindernis");
  t.assert.ok(t.getSprite("Skikatze").visible, "Expected Sprite Skikatze to be visible");
  t.assert.not(t.getSprite("Hindernis").visible, "Expected Sprite Hindernis not to be visible");
  t.assert.not(t.getSprite("Hindernis").getClone(1).visible, "Expected Clone 1 of Hindernis not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Skikatze").volume, 100, "Expected Sprite Skikatze to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").volume, 100, "Expected Sprite Hindernis to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).volume, 100, "Expected Clone 1 of Hindernis to have volume 100");
  await t.runForSteps(59);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Skikatze").currentCostume, 1, "Expected Sprite Skikatze to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").currentCostume, 1, "Expected Sprite Hindernis to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).currentCostume, 0, "Expected Clone 1 of Hindernis to have costume 0");
  t.assert.equal(t.getSprite("Skikatze").getCloneCount(), 0, "Expected Sprite Skikatze to have 0 clones");
  t.assert.equal(t.getSprite("Hindernis").getCloneCount(), 1, "Expected Sprite Hindernis to have 1 clones");
  t.assert.equal(t.getSprite("Skikatze").direction, 90, 1, "Expected Sprite Skikatze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").direction, 90, 1, "Expected Sprite Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).direction, 90, 1, "Expected Clone 1 of Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Skikatze").effects.color, 0, "Expected effect color of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.fisheye, 0, "Expected effect fisheye of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.whirl, 0, "Expected effect whirl of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.pixelate, 0, "Expected effect pixelate of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.mosaic, 0, "Expected effect mosaic of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.brightness, 0, "Expected effect brightness of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.ghost, 0, "Expected effect ghost of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.color, 0, "Expected effect color of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.fisheye, 0, "Expected effect fisheye of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.whirl, 0, "Expected effect whirl of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.pixelate, 0, "Expected effect pixelate of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.mosaic, 0, "Expected effect mosaic of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.brightness, 0, "Expected effect brightness of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.ghost, 0, "Expected effect ghost of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Skikatze").layerOrder, 3, "Expected Sprite Skikatze to be at layer 3");
  t.assert.equal(t.getSprite("Hindernis").layerOrder, 2, "Expected Sprite Hindernis to be at layer 2");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Hindernis to be at layer 1");
  t.assert.withinRange(t.getSprite("Skikatze").x, 139, 5, "Expected Sprite Skikatze to have x-position 139 +-5");
  t.assert.withinRange(t.getSprite("Skikatze").y, 0, 5, "Expected Sprite Skikatze to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").x, -70, 5, "Expected Sprite Hindernis to have x-position -70 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").y, -32.04599999999999, 5, "Expected Sprite Hindernis to have y-position -32.04599999999999 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, -49, 5, "Expected Clone 1 of Hindernis to have x-position -49 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, -2.9000000000000057, 5, "Expected Clone 1 of Hindernis to have y-position -2.9000000000000057 +-5");
  t.assert.not(t.getSprite("Skikatze").sayText, "Expected Sprite Skikatze not to say anything");
  t.assert.not(t.getSprite("Hindernis").sayText, "Expected Sprite Hindernis not to say anything");
  t.assert.not(t.getSprite("Hindernis").getClone(1).sayText, "Expected Clone 1 of Hindernis not to say anything");
  t.assert.withinRange(t.getSprite("Skikatze").size, 100, 1, "Expected Sprite Skikatze to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").size, 60, 1, "Expected Sprite Hindernis to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).size, 60, 1, "Expected Clone 1 of Hindernis to have size 60 +-1");
  t.assert.equal(t.getSprite("Hindernis").getVariable("Hindernis_x").value, "-70", "Expected Hindernis_x to have value -70 in Sprite Hindernis");
  t.assert.ok(t.getSprite("Skikatze").visible, "Expected Sprite Skikatze to be visible");
  t.assert.not(t.getSprite("Hindernis").visible, "Expected Sprite Hindernis not to be visible");
  t.assert.ok(t.getSprite("Hindernis").getClone(1).visible, "Expected Clone 1 of Hindernis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Skikatze").volume, 100, "Expected Sprite Skikatze to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").volume, 100, "Expected Sprite Hindernis to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).volume, 100, "Expected Clone 1 of Hindernis to have volume 100");
  await t.runForSteps(73);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Skikatze").currentCostume, 1, "Expected Sprite Skikatze to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").currentCostume, 1, "Expected Sprite Hindernis to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).currentCostume, 0, "Expected Clone 1 of Hindernis to have costume 0");
  t.assert.equal(t.getSprite("Skikatze").getCloneCount(), 0, "Expected Sprite Skikatze to have 0 clones");
  t.assert.equal(t.getSprite("Hindernis").getCloneCount(), 1, "Expected Sprite Hindernis to have 1 clones");
  t.assert.equal(t.getSprite("Skikatze").direction, 90, 1, "Expected Sprite Skikatze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").direction, 90, 1, "Expected Sprite Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).direction, 90, 1, "Expected Clone 1 of Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Skikatze").effects.color, 0, "Expected effect color of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.fisheye, 0, "Expected effect fisheye of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.whirl, 0, "Expected effect whirl of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.pixelate, 0, "Expected effect pixelate of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.mosaic, 0, "Expected effect mosaic of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.brightness, 0, "Expected effect brightness of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.ghost, 0, "Expected effect ghost of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.color, 0, "Expected effect color of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.fisheye, 0, "Expected effect fisheye of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.whirl, 0, "Expected effect whirl of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.pixelate, 0, "Expected effect pixelate of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.mosaic, 0, "Expected effect mosaic of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.brightness, 0, "Expected effect brightness of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.ghost, 0, "Expected effect ghost of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Skikatze").layerOrder, 3, "Expected Sprite Skikatze to be at layer 3");
  t.assert.equal(t.getSprite("Hindernis").layerOrder, 2, "Expected Sprite Hindernis to be at layer 2");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Hindernis to be at layer 1");
  t.assert.withinRange(t.getSprite("Skikatze").x, 139, 5, "Expected Sprite Skikatze to have x-position 139 +-5");
  t.assert.withinRange(t.getSprite("Skikatze").y, 0, 5, "Expected Sprite Skikatze to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").x, -70, 5, "Expected Sprite Hindernis to have x-position -70 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").y, -32.04599999999999, 5, "Expected Sprite Hindernis to have y-position -32.04599999999999 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, -50, 5, "Expected Clone 1 of Hindernis to have x-position -50 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, -103.2, 5, "Expected Clone 1 of Hindernis to have y-position -103.2 +-5");
  t.assert.not(t.getSprite("Skikatze").sayText, "Expected Sprite Skikatze not to say anything");
  t.assert.not(t.getSprite("Hindernis").sayText, "Expected Sprite Hindernis not to say anything");
  t.assert.not(t.getSprite("Hindernis").getClone(1).sayText, "Expected Clone 1 of Hindernis not to say anything");
  t.assert.withinRange(t.getSprite("Skikatze").size, 100, 1, "Expected Sprite Skikatze to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").size, 60, 1, "Expected Sprite Hindernis to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).size, 60, 1, "Expected Clone 1 of Hindernis to have size 60 +-1");
  t.assert.equal(t.getSprite("Hindernis").getVariable("Hindernis_x").value, "-70", "Expected Hindernis_x to have value -70 in Sprite Hindernis");
  t.assert.ok(t.getSprite("Skikatze").visible, "Expected Sprite Skikatze to be visible");
  t.assert.not(t.getSprite("Hindernis").visible, "Expected Sprite Hindernis not to be visible");
  t.assert.ok(t.getSprite("Hindernis").getClone(1).visible, "Expected Clone 1 of Hindernis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Skikatze").volume, 100, "Expected Sprite Skikatze to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").volume, 100, "Expected Sprite Hindernis to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).volume, 100, "Expected Clone 1 of Hindernis to have volume 100");
  await t.runForSteps(32);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Skikatze").currentCostume, 1, "Expected Sprite Skikatze to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").currentCostume, 1, "Expected Sprite Hindernis to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).currentCostume, 0, "Expected Clone 1 of Hindernis to have costume 0");
  t.assert.equal(t.getSprite("Skikatze").getCloneCount(), 0, "Expected Sprite Skikatze to have 0 clones");
  t.assert.equal(t.getSprite("Hindernis").getCloneCount(), 1, "Expected Sprite Hindernis to have 1 clones");
  t.assert.equal(t.getSprite("Skikatze").direction, 90, 1, "Expected Sprite Skikatze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").direction, 90, 1, "Expected Sprite Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).direction, 90, 1, "Expected Clone 1 of Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Skikatze").effects.color, 0, "Expected effect color of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.fisheye, 0, "Expected effect fisheye of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.whirl, 0, "Expected effect whirl of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.pixelate, 0, "Expected effect pixelate of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.mosaic, 0, "Expected effect mosaic of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.brightness, 0, "Expected effect brightness of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.ghost, 0, "Expected effect ghost of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.color, 0, "Expected effect color of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.fisheye, 0, "Expected effect fisheye of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.whirl, 0, "Expected effect whirl of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.pixelate, 0, "Expected effect pixelate of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.mosaic, 0, "Expected effect mosaic of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.brightness, 0, "Expected effect brightness of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.ghost, 0, "Expected effect ghost of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Skikatze").layerOrder, 3, "Expected Sprite Skikatze to be at layer 3");
  t.assert.equal(t.getSprite("Hindernis").layerOrder, 2, "Expected Sprite Hindernis to be at layer 2");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Hindernis to be at layer 1");
  t.assert.withinRange(t.getSprite("Skikatze").x, 139, 5, "Expected Sprite Skikatze to have x-position 139 +-5");
  t.assert.withinRange(t.getSprite("Skikatze").y, 0, 5, "Expected Sprite Skikatze to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").x, -70, 5, "Expected Sprite Hindernis to have x-position -70 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").y, -32.04599999999999, 5, "Expected Sprite Hindernis to have y-position -32.04599999999999 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, -50, 5, "Expected Clone 1 of Hindernis to have x-position -50 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, 91.5, 5, "Expected Clone 1 of Hindernis to have y-position 91.5 +-5");
  t.assert.not(t.getSprite("Skikatze").sayText, "Expected Sprite Skikatze not to say anything");
  t.assert.not(t.getSprite("Hindernis").sayText, "Expected Sprite Hindernis not to say anything");
  t.assert.not(t.getSprite("Hindernis").getClone(1).sayText, "Expected Clone 1 of Hindernis not to say anything");
  t.assert.withinRange(t.getSprite("Skikatze").size, 100, 1, "Expected Sprite Skikatze to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").size, 60, 1, "Expected Sprite Hindernis to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).size, 60, 1, "Expected Clone 1 of Hindernis to have size 60 +-1");
  t.assert.equal(t.getSprite("Hindernis").getVariable("Hindernis_x").value, "-70", "Expected Hindernis_x to have value -70 in Sprite Hindernis");
  t.assert.ok(t.getSprite("Skikatze").visible, "Expected Sprite Skikatze to be visible");
  t.assert.not(t.getSprite("Hindernis").visible, "Expected Sprite Hindernis not to be visible");
  t.assert.ok(t.getSprite("Hindernis").getClone(1).visible, "Expected Clone 1 of Hindernis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Skikatze").volume, 100, "Expected Sprite Skikatze to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").volume, 100, "Expected Sprite Hindernis to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).volume, 100, "Expected Clone 1 of Hindernis to have volume 100");
  await t.runForSteps(16);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Skikatze").currentCostume, 1, "Expected Sprite Skikatze to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").currentCostume, 1, "Expected Sprite Hindernis to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).currentCostume, 0, "Expected Clone 1 of Hindernis to have costume 0");
  t.assert.equal(t.getSprite("Skikatze").getCloneCount(), 0, "Expected Sprite Skikatze to have 0 clones");
  t.assert.equal(t.getSprite("Hindernis").getCloneCount(), 1, "Expected Sprite Hindernis to have 1 clones");
  t.assert.equal(t.getSprite("Skikatze").direction, 90, 1, "Expected Sprite Skikatze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").direction, 90, 1, "Expected Sprite Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).direction, 90, 1, "Expected Clone 1 of Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Skikatze").effects.color, 0, "Expected effect color of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.fisheye, 0, "Expected effect fisheye of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.whirl, 0, "Expected effect whirl of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.pixelate, 0, "Expected effect pixelate of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.mosaic, 0, "Expected effect mosaic of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.brightness, 0, "Expected effect brightness of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.ghost, 0, "Expected effect ghost of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.color, 0, "Expected effect color of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.fisheye, 0, "Expected effect fisheye of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.whirl, 0, "Expected effect whirl of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.pixelate, 0, "Expected effect pixelate of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.mosaic, 0, "Expected effect mosaic of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.brightness, 0, "Expected effect brightness of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.ghost, 0, "Expected effect ghost of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Skikatze").layerOrder, 3, "Expected Sprite Skikatze to be at layer 3");
  t.assert.equal(t.getSprite("Hindernis").layerOrder, 2, "Expected Sprite Hindernis to be at layer 2");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Hindernis to be at layer 1");
  t.assert.withinRange(t.getSprite("Skikatze").x, 139, 5, "Expected Sprite Skikatze to have x-position 139 +-5");
  t.assert.withinRange(t.getSprite("Skikatze").y, 0, 5, "Expected Sprite Skikatze to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").x, -70, 5, "Expected Sprite Hindernis to have x-position -70 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").y, -32.04599999999999, 5, "Expected Sprite Hindernis to have y-position -32.04599999999999 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, -50, 5, "Expected Clone 1 of Hindernis to have x-position -50 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, 180, 5, "Expected Clone 1 of Hindernis to have y-position 180 +-5");
  t.assert.not(t.getSprite("Skikatze").sayText, "Expected Sprite Skikatze not to say anything");
  t.assert.not(t.getSprite("Hindernis").sayText, "Expected Sprite Hindernis not to say anything");
  t.assert.not(t.getSprite("Hindernis").getClone(1).sayText, "Expected Clone 1 of Hindernis not to say anything");
  t.assert.withinRange(t.getSprite("Skikatze").size, 100, 1, "Expected Sprite Skikatze to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").size, 60, 1, "Expected Sprite Hindernis to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).size, 60, 1, "Expected Clone 1 of Hindernis to have size 60 +-1");
  t.assert.equal(t.getSprite("Hindernis").getVariable("Hindernis_x").value, "-70", "Expected Hindernis_x to have value -70 in Sprite Hindernis");
  t.assert.ok(t.getSprite("Skikatze").visible, "Expected Sprite Skikatze to be visible");
  t.assert.not(t.getSprite("Hindernis").visible, "Expected Sprite Hindernis not to be visible");
  t.assert.not(t.getSprite("Hindernis").getClone(1).visible, "Expected Clone 1 of Hindernis not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Skikatze").volume, 100, "Expected Sprite Skikatze to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").volume, 100, "Expected Sprite Hindernis to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).volume, 100, "Expected Clone 1 of Hindernis to have volume 100");
  await t.runForSteps(79);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Skikatze").currentCostume, 1, "Expected Sprite Skikatze to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").currentCostume, 1, "Expected Sprite Hindernis to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).currentCostume, 0, "Expected Clone 1 of Hindernis to have costume 0");
  t.assert.equal(t.getSprite("Skikatze").getCloneCount(), 0, "Expected Sprite Skikatze to have 0 clones");
  t.assert.equal(t.getSprite("Hindernis").getCloneCount(), 1, "Expected Sprite Hindernis to have 1 clones");
  t.assert.equal(t.getSprite("Skikatze").direction, 90, 1, "Expected Sprite Skikatze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").direction, 90, 1, "Expected Sprite Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).direction, 90, 1, "Expected Clone 1 of Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Skikatze").effects.color, 0, "Expected effect color of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.fisheye, 0, "Expected effect fisheye of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.whirl, 0, "Expected effect whirl of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.pixelate, 0, "Expected effect pixelate of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.mosaic, 0, "Expected effect mosaic of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.brightness, 0, "Expected effect brightness of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.ghost, 0, "Expected effect ghost of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.color, 0, "Expected effect color of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.fisheye, 0, "Expected effect fisheye of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.whirl, 0, "Expected effect whirl of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.pixelate, 0, "Expected effect pixelate of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.mosaic, 0, "Expected effect mosaic of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.brightness, 0, "Expected effect brightness of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.ghost, 0, "Expected effect ghost of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Skikatze").layerOrder, 3, "Expected Sprite Skikatze to be at layer 3");
  t.assert.equal(t.getSprite("Hindernis").layerOrder, 2, "Expected Sprite Hindernis to be at layer 2");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Hindernis to be at layer 1");
  t.assert.withinRange(t.getSprite("Skikatze").x, 139, 5, "Expected Sprite Skikatze to have x-position 139 +-5");
  t.assert.withinRange(t.getSprite("Skikatze").y, 0, 5, "Expected Sprite Skikatze to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").x, -70, 5, "Expected Sprite Hindernis to have x-position -70 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").y, -32.04599999999999, 5, "Expected Sprite Hindernis to have y-position -32.04599999999999 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, 195, 5, "Expected Clone 1 of Hindernis to have x-position 195 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, 126.89999999999998, 5, "Expected Clone 1 of Hindernis to have y-position 126.89999999999998 +-5");
  t.assert.not(t.getSprite("Skikatze").sayText, "Expected Sprite Skikatze not to say anything");
  t.assert.not(t.getSprite("Hindernis").sayText, "Expected Sprite Hindernis not to say anything");
  t.assert.not(t.getSprite("Hindernis").getClone(1).sayText, "Expected Clone 1 of Hindernis not to say anything");
  t.assert.withinRange(t.getSprite("Skikatze").size, 100, 1, "Expected Sprite Skikatze to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").size, 60, 1, "Expected Sprite Hindernis to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).size, 60, 1, "Expected Clone 1 of Hindernis to have size 60 +-1");
  t.assert.equal(t.getSprite("Hindernis").getVariable("Hindernis_x").value, "-70", "Expected Hindernis_x to have value -70 in Sprite Hindernis");
  t.assert.ok(t.getSprite("Skikatze").visible, "Expected Sprite Skikatze to be visible");
  t.assert.not(t.getSprite("Hindernis").visible, "Expected Sprite Hindernis not to be visible");
  t.assert.ok(t.getSprite("Hindernis").getClone(1).visible, "Expected Clone 1 of Hindernis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Skikatze").volume, 100, "Expected Sprite Skikatze to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").volume, 100, "Expected Sprite Hindernis to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).volume, 100, "Expected Clone 1 of Hindernis to have volume 100");
  await t.runForSteps(85);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Skikatze").currentCostume, 1, "Expected Sprite Skikatze to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").currentCostume, 1, "Expected Sprite Hindernis to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).currentCostume, 0, "Expected Clone 1 of Hindernis to have costume 0");
  t.assert.equal(t.getSprite("Skikatze").getCloneCount(), 0, "Expected Sprite Skikatze to have 0 clones");
  t.assert.equal(t.getSprite("Hindernis").getCloneCount(), 1, "Expected Sprite Hindernis to have 1 clones");
  t.assert.equal(t.getSprite("Skikatze").direction, 90, 1, "Expected Sprite Skikatze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").direction, 90, 1, "Expected Sprite Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).direction, 90, 1, "Expected Clone 1 of Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Skikatze").effects.color, 0, "Expected effect color of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.fisheye, 0, "Expected effect fisheye of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.whirl, 0, "Expected effect whirl of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.pixelate, 0, "Expected effect pixelate of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.mosaic, 0, "Expected effect mosaic of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.brightness, 0, "Expected effect brightness of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.ghost, 0, "Expected effect ghost of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.color, 0, "Expected effect color of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.fisheye, 0, "Expected effect fisheye of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.whirl, 0, "Expected effect whirl of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.pixelate, 0, "Expected effect pixelate of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.mosaic, 0, "Expected effect mosaic of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.brightness, 0, "Expected effect brightness of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.ghost, 0, "Expected effect ghost of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Skikatze").layerOrder, 3, "Expected Sprite Skikatze to be at layer 3");
  t.assert.equal(t.getSprite("Hindernis").layerOrder, 2, "Expected Sprite Hindernis to be at layer 2");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Hindernis to be at layer 1");
  t.assert.withinRange(t.getSprite("Skikatze").x, 139, 5, "Expected Sprite Skikatze to have x-position 139 +-5");
  t.assert.withinRange(t.getSprite("Skikatze").y, 0, 5, "Expected Sprite Skikatze to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").x, -70, 5, "Expected Sprite Hindernis to have x-position -70 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").y, -32.04599999999999, 5, "Expected Sprite Hindernis to have y-position -32.04599999999999 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, -184, 5, "Expected Clone 1 of Hindernis to have x-position -184 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, 97.40000000000003, 5, "Expected Clone 1 of Hindernis to have y-position 97.40000000000003 +-5");
  t.assert.not(t.getSprite("Skikatze").sayText, "Expected Sprite Skikatze not to say anything");
  t.assert.not(t.getSprite("Hindernis").sayText, "Expected Sprite Hindernis not to say anything");
  t.assert.not(t.getSprite("Hindernis").getClone(1).sayText, "Expected Clone 1 of Hindernis not to say anything");
  t.assert.withinRange(t.getSprite("Skikatze").size, 100, 1, "Expected Sprite Skikatze to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").size, 60, 1, "Expected Sprite Hindernis to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).size, 60, 1, "Expected Clone 1 of Hindernis to have size 60 +-1");
  t.assert.equal(t.getSprite("Hindernis").getVariable("Hindernis_x").value, "-70", "Expected Hindernis_x to have value -70 in Sprite Hindernis");
  t.assert.ok(t.getSprite("Skikatze").visible, "Expected Sprite Skikatze to be visible");
  t.assert.not(t.getSprite("Hindernis").visible, "Expected Sprite Hindernis not to be visible");
  t.assert.ok(t.getSprite("Hindernis").getClone(1).visible, "Expected Clone 1 of Hindernis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Skikatze").volume, 100, "Expected Sprite Skikatze to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").volume, 100, "Expected Sprite Hindernis to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).volume, 100, "Expected Clone 1 of Hindernis to have volume 100");
  await t.runForSteps(61);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Skikatze").currentCostume, 1, "Expected Sprite Skikatze to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").currentCostume, 1, "Expected Sprite Hindernis to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).currentCostume, 0, "Expected Clone 1 of Hindernis to have costume 0");
  t.assert.equal(t.getSprite("Skikatze").getCloneCount(), 0, "Expected Sprite Skikatze to have 0 clones");
  t.assert.equal(t.getSprite("Hindernis").getCloneCount(), 1, "Expected Sprite Hindernis to have 1 clones");
  t.assert.equal(t.getSprite("Skikatze").direction, 90, 1, "Expected Sprite Skikatze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").direction, 90, 1, "Expected Sprite Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).direction, 90, 1, "Expected Clone 1 of Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Skikatze").effects.color, 0, "Expected effect color of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.fisheye, 0, "Expected effect fisheye of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.whirl, 0, "Expected effect whirl of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.pixelate, 0, "Expected effect pixelate of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.mosaic, 0, "Expected effect mosaic of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.brightness, 0, "Expected effect brightness of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.ghost, 0, "Expected effect ghost of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.color, 0, "Expected effect color of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.fisheye, 0, "Expected effect fisheye of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.whirl, 0, "Expected effect whirl of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.pixelate, 0, "Expected effect pixelate of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.mosaic, 0, "Expected effect mosaic of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.brightness, 0, "Expected effect brightness of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.ghost, 0, "Expected effect ghost of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Skikatze").layerOrder, 3, "Expected Sprite Skikatze to be at layer 3");
  t.assert.equal(t.getSprite("Hindernis").layerOrder, 2, "Expected Sprite Hindernis to be at layer 2");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Hindernis to be at layer 1");
  t.assert.withinRange(t.getSprite("Skikatze").x, 139, 5, "Expected Sprite Skikatze to have x-position 139 +-5");
  t.assert.withinRange(t.getSprite("Skikatze").y, 0, 5, "Expected Sprite Skikatze to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").x, -70, 5, "Expected Sprite Hindernis to have x-position -70 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").y, -32.04599999999999, 5, "Expected Sprite Hindernis to have y-position -32.04599999999999 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, 136, 5, "Expected Clone 1 of Hindernis to have x-position 136 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, -73.7, 5, "Expected Clone 1 of Hindernis to have y-position -73.7 +-5");
  t.assert.not(t.getSprite("Skikatze").sayText, "Expected Sprite Skikatze not to say anything");
  t.assert.not(t.getSprite("Hindernis").sayText, "Expected Sprite Hindernis not to say anything");
  t.assert.not(t.getSprite("Hindernis").getClone(1).sayText, "Expected Clone 1 of Hindernis not to say anything");
  t.assert.withinRange(t.getSprite("Skikatze").size, 100, 1, "Expected Sprite Skikatze to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").size, 60, 1, "Expected Sprite Hindernis to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).size, 60, 1, "Expected Clone 1 of Hindernis to have size 60 +-1");
  t.assert.equal(t.getSprite("Hindernis").getVariable("Hindernis_x").value, "-70", "Expected Hindernis_x to have value -70 in Sprite Hindernis");
  t.assert.ok(t.getSprite("Skikatze").visible, "Expected Sprite Skikatze to be visible");
  t.assert.not(t.getSprite("Hindernis").visible, "Expected Sprite Hindernis not to be visible");
  t.assert.ok(t.getSprite("Hindernis").getClone(1).visible, "Expected Clone 1 of Hindernis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Skikatze").volume, 100, "Expected Sprite Skikatze to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").volume, 100, "Expected Sprite Hindernis to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).volume, 100, "Expected Clone 1 of Hindernis to have volume 100");
  await t.runForSteps(27);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Skikatze").currentCostume, 1, "Expected Sprite Skikatze to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").currentCostume, 1, "Expected Sprite Hindernis to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).currentCostume, 0, "Expected Clone 1 of Hindernis to have costume 0");
  t.assert.equal(t.getSprite("Skikatze").getCloneCount(), 0, "Expected Sprite Skikatze to have 0 clones");
  t.assert.equal(t.getSprite("Hindernis").getCloneCount(), 1, "Expected Sprite Hindernis to have 1 clones");
  t.assert.equal(t.getSprite("Skikatze").direction, 90, 1, "Expected Sprite Skikatze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").direction, 90, 1, "Expected Sprite Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).direction, 90, 1, "Expected Clone 1 of Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Skikatze").effects.color, 0, "Expected effect color of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.fisheye, 0, "Expected effect fisheye of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.whirl, 0, "Expected effect whirl of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.pixelate, 0, "Expected effect pixelate of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.mosaic, 0, "Expected effect mosaic of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.brightness, 0, "Expected effect brightness of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.ghost, 0, "Expected effect ghost of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.color, 0, "Expected effect color of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.fisheye, 0, "Expected effect fisheye of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.whirl, 0, "Expected effect whirl of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.pixelate, 0, "Expected effect pixelate of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.mosaic, 0, "Expected effect mosaic of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.brightness, 0, "Expected effect brightness of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.ghost, 0, "Expected effect ghost of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Skikatze").layerOrder, 3, "Expected Sprite Skikatze to be at layer 3");
  t.assert.equal(t.getSprite("Hindernis").layerOrder, 2, "Expected Sprite Hindernis to be at layer 2");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Hindernis to be at layer 1");
  t.assert.withinRange(t.getSprite("Skikatze").x, 139, 5, "Expected Sprite Skikatze to have x-position 139 +-5");
  t.assert.withinRange(t.getSprite("Skikatze").y, 0, 5, "Expected Sprite Skikatze to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").x, -70, 5, "Expected Sprite Hindernis to have x-position -70 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").y, -32.04599999999999, 5, "Expected Sprite Hindernis to have y-position -32.04599999999999 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, 136, 5, "Expected Clone 1 of Hindernis to have x-position 136 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, 91.5, 5, "Expected Clone 1 of Hindernis to have y-position 91.5 +-5");
  t.assert.not(t.getSprite("Skikatze").sayText, "Expected Sprite Skikatze not to say anything");
  t.assert.not(t.getSprite("Hindernis").sayText, "Expected Sprite Hindernis not to say anything");
  t.assert.not(t.getSprite("Hindernis").getClone(1).sayText, "Expected Clone 1 of Hindernis not to say anything");
  t.assert.withinRange(t.getSprite("Skikatze").size, 100, 1, "Expected Sprite Skikatze to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").size, 60, 1, "Expected Sprite Hindernis to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).size, 60, 1, "Expected Clone 1 of Hindernis to have size 60 +-1");
  t.assert.equal(t.getSprite("Hindernis").getVariable("Hindernis_x").value, "-70", "Expected Hindernis_x to have value -70 in Sprite Hindernis");
  t.assert.ok(t.getSprite("Skikatze").visible, "Expected Sprite Skikatze to be visible");
  t.assert.not(t.getSprite("Hindernis").visible, "Expected Sprite Hindernis not to be visible");
  t.assert.ok(t.getSprite("Hindernis").getClone(1).visible, "Expected Clone 1 of Hindernis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Skikatze").volume, 100, "Expected Sprite Skikatze to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").volume, 100, "Expected Sprite Hindernis to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).volume, 100, "Expected Clone 1 of Hindernis to have volume 100");
  await t.runForSteps(74);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Skikatze").currentCostume, 1, "Expected Sprite Skikatze to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").currentCostume, 1, "Expected Sprite Hindernis to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).currentCostume, 0, "Expected Clone 1 of Hindernis to have costume 0");
  t.assert.equal(t.getSprite("Skikatze").getCloneCount(), 0, "Expected Sprite Skikatze to have 0 clones");
  t.assert.equal(t.getSprite("Hindernis").getCloneCount(), 1, "Expected Sprite Hindernis to have 1 clones");
  t.assert.equal(t.getSprite("Skikatze").direction, 90, 1, "Expected Sprite Skikatze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").direction, 90, 1, "Expected Sprite Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).direction, 90, 1, "Expected Clone 1 of Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Skikatze").effects.color, 0, "Expected effect color of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.fisheye, 0, "Expected effect fisheye of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.whirl, 0, "Expected effect whirl of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.pixelate, 0, "Expected effect pixelate of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.mosaic, 0, "Expected effect mosaic of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.brightness, 0, "Expected effect brightness of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.ghost, 0, "Expected effect ghost of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.color, 0, "Expected effect color of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.fisheye, 0, "Expected effect fisheye of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.whirl, 0, "Expected effect whirl of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.pixelate, 0, "Expected effect pixelate of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.mosaic, 0, "Expected effect mosaic of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.brightness, 0, "Expected effect brightness of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.ghost, 0, "Expected effect ghost of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Skikatze").layerOrder, 3, "Expected Sprite Skikatze to be at layer 3");
  t.assert.equal(t.getSprite("Hindernis").layerOrder, 2, "Expected Sprite Hindernis to be at layer 2");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Hindernis to be at layer 1");
  t.assert.withinRange(t.getSprite("Skikatze").x, 139, 5, "Expected Sprite Skikatze to have x-position 139 +-5");
  t.assert.withinRange(t.getSprite("Skikatze").y, 0, 5, "Expected Sprite Skikatze to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").x, -70, 5, "Expected Sprite Hindernis to have x-position -70 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").y, -32.04599999999999, 5, "Expected Sprite Hindernis to have y-position -32.04599999999999 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, -59, 5, "Expected Clone 1 of Hindernis to have x-position -59 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, -2.9000000000000057, 5, "Expected Clone 1 of Hindernis to have y-position -2.9000000000000057 +-5");
  t.assert.not(t.getSprite("Skikatze").sayText, "Expected Sprite Skikatze not to say anything");
  t.assert.not(t.getSprite("Hindernis").sayText, "Expected Sprite Hindernis not to say anything");
  t.assert.not(t.getSprite("Hindernis").getClone(1).sayText, "Expected Clone 1 of Hindernis not to say anything");
  t.assert.withinRange(t.getSprite("Skikatze").size, 100, 1, "Expected Sprite Skikatze to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").size, 60, 1, "Expected Sprite Hindernis to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).size, 60, 1, "Expected Clone 1 of Hindernis to have size 60 +-1");
  t.assert.equal(t.getSprite("Hindernis").getVariable("Hindernis_x").value, "-70", "Expected Hindernis_x to have value -70 in Sprite Hindernis");
  t.assert.ok(t.getSprite("Skikatze").visible, "Expected Sprite Skikatze to be visible");
  t.assert.not(t.getSprite("Hindernis").visible, "Expected Sprite Hindernis not to be visible");
  t.assert.ok(t.getSprite("Hindernis").getClone(1).visible, "Expected Clone 1 of Hindernis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Skikatze").volume, 100, "Expected Sprite Skikatze to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").volume, 100, "Expected Sprite Hindernis to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).volume, 100, "Expected Clone 1 of Hindernis to have volume 100");
  await t.runForSteps(75);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Skikatze").currentCostume, 1, "Expected Sprite Skikatze to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").currentCostume, 1, "Expected Sprite Hindernis to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).currentCostume, 0, "Expected Clone 1 of Hindernis to have costume 0");
  t.assert.equal(t.getSprite("Skikatze").getCloneCount(), 0, "Expected Sprite Skikatze to have 0 clones");
  t.assert.equal(t.getSprite("Hindernis").getCloneCount(), 1, "Expected Sprite Hindernis to have 1 clones");
  t.assert.equal(t.getSprite("Skikatze").direction, 90, 1, "Expected Sprite Skikatze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").direction, 90, 1, "Expected Sprite Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).direction, 90, 1, "Expected Clone 1 of Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Skikatze").effects.color, 0, "Expected effect color of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.fisheye, 0, "Expected effect fisheye of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.whirl, 0, "Expected effect whirl of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.pixelate, 0, "Expected effect pixelate of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.mosaic, 0, "Expected effect mosaic of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.brightness, 0, "Expected effect brightness of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.ghost, 0, "Expected effect ghost of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.color, 0, "Expected effect color of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.fisheye, 0, "Expected effect fisheye of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.whirl, 0, "Expected effect whirl of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.pixelate, 0, "Expected effect pixelate of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.mosaic, 0, "Expected effect mosaic of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.brightness, 0, "Expected effect brightness of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.ghost, 0, "Expected effect ghost of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Skikatze").layerOrder, 3, "Expected Sprite Skikatze to be at layer 3");
  t.assert.equal(t.getSprite("Hindernis").layerOrder, 2, "Expected Sprite Hindernis to be at layer 2");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Hindernis to be at layer 1");
  t.assert.withinRange(t.getSprite("Skikatze").x, 139, 5, "Expected Sprite Skikatze to have x-position 139 +-5");
  t.assert.withinRange(t.getSprite("Skikatze").y, 0, 5, "Expected Sprite Skikatze to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").x, -70, 5, "Expected Sprite Hindernis to have x-position -70 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").y, -32.04599999999999, 5, "Expected Sprite Hindernis to have y-position -32.04599999999999 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, -130, 5, "Expected Clone 1 of Hindernis to have x-position -130 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, -91.4, 5, "Expected Clone 1 of Hindernis to have y-position -91.4 +-5");
  t.assert.not(t.getSprite("Skikatze").sayText, "Expected Sprite Skikatze not to say anything");
  t.assert.not(t.getSprite("Hindernis").sayText, "Expected Sprite Hindernis not to say anything");
  t.assert.not(t.getSprite("Hindernis").getClone(1).sayText, "Expected Clone 1 of Hindernis not to say anything");
  t.assert.withinRange(t.getSprite("Skikatze").size, 100, 1, "Expected Sprite Skikatze to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").size, 60, 1, "Expected Sprite Hindernis to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).size, 60, 1, "Expected Clone 1 of Hindernis to have size 60 +-1");
  t.assert.equal(t.getSprite("Hindernis").getVariable("Hindernis_x").value, "-70", "Expected Hindernis_x to have value -70 in Sprite Hindernis");
  t.assert.ok(t.getSprite("Skikatze").visible, "Expected Sprite Skikatze to be visible");
  t.assert.not(t.getSprite("Hindernis").visible, "Expected Sprite Hindernis not to be visible");
  t.assert.ok(t.getSprite("Hindernis").getClone(1).visible, "Expected Clone 1 of Hindernis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Skikatze").volume, 100, "Expected Sprite Skikatze to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").volume, 100, "Expected Sprite Hindernis to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).volume, 100, "Expected Clone 1 of Hindernis to have volume 100");
  await t.runForSteps(78);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Skikatze").currentCostume, 1, "Expected Sprite Skikatze to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").currentCostume, 1, "Expected Sprite Hindernis to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).currentCostume, 0, "Expected Clone 1 of Hindernis to have costume 0");
  t.assert.equal(t.getSprite("Skikatze").getCloneCount(), 0, "Expected Sprite Skikatze to have 0 clones");
  t.assert.equal(t.getSprite("Hindernis").getCloneCount(), 1, "Expected Sprite Hindernis to have 1 clones");
  t.assert.equal(t.getSprite("Skikatze").direction, 90, 1, "Expected Sprite Skikatze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").direction, 90, 1, "Expected Sprite Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).direction, 90, 1, "Expected Clone 1 of Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Skikatze").effects.color, 0, "Expected effect color of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.fisheye, 0, "Expected effect fisheye of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.whirl, 0, "Expected effect whirl of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.pixelate, 0, "Expected effect pixelate of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.mosaic, 0, "Expected effect mosaic of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.brightness, 0, "Expected effect brightness of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.ghost, 0, "Expected effect ghost of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.color, 0, "Expected effect color of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.fisheye, 0, "Expected effect fisheye of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.whirl, 0, "Expected effect whirl of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.pixelate, 0, "Expected effect pixelate of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.mosaic, 0, "Expected effect mosaic of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.brightness, 0, "Expected effect brightness of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.ghost, 0, "Expected effect ghost of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Skikatze").layerOrder, 3, "Expected Sprite Skikatze to be at layer 3");
  t.assert.equal(t.getSprite("Hindernis").layerOrder, 2, "Expected Sprite Hindernis to be at layer 2");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Hindernis to be at layer 1");
  t.assert.withinRange(t.getSprite("Skikatze").x, 139, 5, "Expected Sprite Skikatze to have x-position 139 +-5");
  t.assert.withinRange(t.getSprite("Skikatze").y, 0, 5, "Expected Sprite Skikatze to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").x, -70, 5, "Expected Sprite Hindernis to have x-position -70 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").y, -32.04599999999999, 5, "Expected Sprite Hindernis to have y-position -32.04599999999999 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, 188, 5, "Expected Clone 1 of Hindernis to have x-position 188 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, -162.2, 5, "Expected Clone 1 of Hindernis to have y-position -162.2 +-5");
  t.assert.not(t.getSprite("Skikatze").sayText, "Expected Sprite Skikatze not to say anything");
  t.assert.not(t.getSprite("Hindernis").sayText, "Expected Sprite Hindernis not to say anything");
  t.assert.not(t.getSprite("Hindernis").getClone(1).sayText, "Expected Clone 1 of Hindernis not to say anything");
  t.assert.withinRange(t.getSprite("Skikatze").size, 100, 1, "Expected Sprite Skikatze to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").size, 60, 1, "Expected Sprite Hindernis to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).size, 60, 1, "Expected Clone 1 of Hindernis to have size 60 +-1");
  t.assert.equal(t.getSprite("Hindernis").getVariable("Hindernis_x").value, "-70", "Expected Hindernis_x to have value -70 in Sprite Hindernis");
  t.assert.ok(t.getSprite("Skikatze").visible, "Expected Sprite Skikatze to be visible");
  t.assert.not(t.getSprite("Hindernis").visible, "Expected Sprite Hindernis not to be visible");
  t.assert.ok(t.getSprite("Hindernis").getClone(1).visible, "Expected Clone 1 of Hindernis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Skikatze").volume, 100, "Expected Sprite Skikatze to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").volume, 100, "Expected Sprite Hindernis to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).volume, 100, "Expected Clone 1 of Hindernis to have volume 100");
  await t.runForSteps(79);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Skikatze").currentCostume, 1, "Expected Sprite Skikatze to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").currentCostume, 1, "Expected Sprite Hindernis to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).currentCostume, 0, "Expected Clone 1 of Hindernis to have costume 0");
  t.assert.equal(t.getSprite("Skikatze").getCloneCount(), 0, "Expected Sprite Skikatze to have 0 clones");
  t.assert.equal(t.getSprite("Hindernis").getCloneCount(), 1, "Expected Sprite Hindernis to have 1 clones");
  t.assert.equal(t.getSprite("Skikatze").direction, 90, 1, "Expected Sprite Skikatze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").direction, 90, 1, "Expected Sprite Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).direction, 90, 1, "Expected Clone 1 of Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Skikatze").effects.color, 0, "Expected effect color of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.fisheye, 0, "Expected effect fisheye of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.whirl, 0, "Expected effect whirl of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.pixelate, 0, "Expected effect pixelate of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.mosaic, 0, "Expected effect mosaic of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.brightness, 0, "Expected effect brightness of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.ghost, 0, "Expected effect ghost of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.color, 0, "Expected effect color of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.fisheye, 0, "Expected effect fisheye of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.whirl, 0, "Expected effect whirl of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.pixelate, 0, "Expected effect pixelate of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.mosaic, 0, "Expected effect mosaic of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.brightness, 0, "Expected effect brightness of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.ghost, 0, "Expected effect ghost of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Skikatze").layerOrder, 3, "Expected Sprite Skikatze to be at layer 3");
  t.assert.equal(t.getSprite("Hindernis").layerOrder, 2, "Expected Sprite Hindernis to be at layer 2");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Hindernis to be at layer 1");
  t.assert.withinRange(t.getSprite("Skikatze").x, 139, 5, "Expected Sprite Skikatze to have x-position 139 +-5");
  t.assert.withinRange(t.getSprite("Skikatze").y, 0, 5, "Expected Sprite Skikatze to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").x, -70, 5, "Expected Sprite Hindernis to have x-position -70 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").y, -32.04599999999999, 5, "Expected Sprite Hindernis to have y-position -32.04599999999999 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, 188, 5, "Expected Clone 1 of Hindernis to have x-position 188 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, 180, 5, "Expected Clone 1 of Hindernis to have y-position 180 +-5");
  t.assert.not(t.getSprite("Skikatze").sayText, "Expected Sprite Skikatze not to say anything");
  t.assert.not(t.getSprite("Hindernis").sayText, "Expected Sprite Hindernis not to say anything");
  t.assert.not(t.getSprite("Hindernis").getClone(1).sayText, "Expected Clone 1 of Hindernis not to say anything");
  t.assert.withinRange(t.getSprite("Skikatze").size, 100, 1, "Expected Sprite Skikatze to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").size, 60, 1, "Expected Sprite Hindernis to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).size, 60, 1, "Expected Clone 1 of Hindernis to have size 60 +-1");
  t.assert.equal(t.getSprite("Hindernis").getVariable("Hindernis_x").value, "-70", "Expected Hindernis_x to have value -70 in Sprite Hindernis");
  t.assert.ok(t.getSprite("Skikatze").visible, "Expected Sprite Skikatze to be visible");
  t.assert.not(t.getSprite("Hindernis").visible, "Expected Sprite Hindernis not to be visible");
  t.assert.not(t.getSprite("Hindernis").getClone(1).visible, "Expected Clone 1 of Hindernis not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Skikatze").volume, 100, "Expected Sprite Skikatze to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").volume, 100, "Expected Sprite Hindernis to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).volume, 100, "Expected Clone 1 of Hindernis to have volume 100");
  await t.runForSteps(98);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Skikatze").currentCostume, 1, "Expected Sprite Skikatze to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").currentCostume, 1, "Expected Sprite Hindernis to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).currentCostume, 0, "Expected Clone 1 of Hindernis to have costume 0");
  t.assert.equal(t.getSprite("Skikatze").getCloneCount(), 0, "Expected Sprite Skikatze to have 0 clones");
  t.assert.equal(t.getSprite("Hindernis").getCloneCount(), 1, "Expected Sprite Hindernis to have 1 clones");
  t.assert.equal(t.getSprite("Skikatze").direction, 90, 1, "Expected Sprite Skikatze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").direction, 90, 1, "Expected Sprite Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).direction, 90, 1, "Expected Clone 1 of Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Skikatze").effects.color, 0, "Expected effect color of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.fisheye, 0, "Expected effect fisheye of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.whirl, 0, "Expected effect whirl of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.pixelate, 0, "Expected effect pixelate of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.mosaic, 0, "Expected effect mosaic of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.brightness, 0, "Expected effect brightness of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.ghost, 0, "Expected effect ghost of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.color, 0, "Expected effect color of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.fisheye, 0, "Expected effect fisheye of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.whirl, 0, "Expected effect whirl of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.pixelate, 0, "Expected effect pixelate of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.mosaic, 0, "Expected effect mosaic of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.brightness, 0, "Expected effect brightness of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.ghost, 0, "Expected effect ghost of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Skikatze").layerOrder, 3, "Expected Sprite Skikatze to be at layer 3");
  t.assert.equal(t.getSprite("Hindernis").layerOrder, 2, "Expected Sprite Hindernis to be at layer 2");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Hindernis to be at layer 1");
  t.assert.withinRange(t.getSprite("Skikatze").x, 139, 5, "Expected Sprite Skikatze to have x-position 139 +-5");
  t.assert.withinRange(t.getSprite("Skikatze").y, 0, 5, "Expected Sprite Skikatze to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").x, -70, 5, "Expected Sprite Hindernis to have x-position -70 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").y, -32.04599999999999, 5, "Expected Sprite Hindernis to have y-position -32.04599999999999 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, -136, 5, "Expected Clone 1 of Hindernis to have x-position -136 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, 180, 5, "Expected Clone 1 of Hindernis to have y-position 180 +-5");
  t.assert.not(t.getSprite("Skikatze").sayText, "Expected Sprite Skikatze not to say anything");
  t.assert.not(t.getSprite("Hindernis").sayText, "Expected Sprite Hindernis not to say anything");
  t.assert.not(t.getSprite("Hindernis").getClone(1).sayText, "Expected Clone 1 of Hindernis not to say anything");
  t.assert.withinRange(t.getSprite("Skikatze").size, 100, 1, "Expected Sprite Skikatze to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").size, 60, 1, "Expected Sprite Hindernis to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).size, 60, 1, "Expected Clone 1 of Hindernis to have size 60 +-1");
  t.assert.equal(t.getSprite("Hindernis").getVariable("Hindernis_x").value, "-70", "Expected Hindernis_x to have value -70 in Sprite Hindernis");
  t.assert.ok(t.getSprite("Skikatze").visible, "Expected Sprite Skikatze to be visible");
  t.assert.not(t.getSprite("Hindernis").visible, "Expected Sprite Hindernis not to be visible");
  t.assert.not(t.getSprite("Hindernis").getClone(1).visible, "Expected Clone 1 of Hindernis not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Skikatze").volume, 100, "Expected Sprite Skikatze to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").volume, 100, "Expected Sprite Hindernis to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).volume, 100, "Expected Clone 1 of Hindernis to have volume 100");
  await t.runForSteps(10);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Skikatze").currentCostume, 1, "Expected Sprite Skikatze to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").currentCostume, 1, "Expected Sprite Hindernis to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).currentCostume, 0, "Expected Clone 1 of Hindernis to have costume 0");
  t.assert.equal(t.getSprite("Skikatze").getCloneCount(), 0, "Expected Sprite Skikatze to have 0 clones");
  t.assert.equal(t.getSprite("Hindernis").getCloneCount(), 1, "Expected Sprite Hindernis to have 1 clones");
  t.assert.equal(t.getSprite("Skikatze").direction, 90, 1, "Expected Sprite Skikatze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").direction, 90, 1, "Expected Sprite Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).direction, 90, 1, "Expected Clone 1 of Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Skikatze").effects.color, 0, "Expected effect color of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.fisheye, 0, "Expected effect fisheye of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.whirl, 0, "Expected effect whirl of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.pixelate, 0, "Expected effect pixelate of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.mosaic, 0, "Expected effect mosaic of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.brightness, 0, "Expected effect brightness of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.ghost, 0, "Expected effect ghost of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.color, 0, "Expected effect color of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.fisheye, 0, "Expected effect fisheye of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.whirl, 0, "Expected effect whirl of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.pixelate, 0, "Expected effect pixelate of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.mosaic, 0, "Expected effect mosaic of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.brightness, 0, "Expected effect brightness of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.ghost, 0, "Expected effect ghost of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Skikatze").layerOrder, 3, "Expected Sprite Skikatze to be at layer 3");
  t.assert.equal(t.getSprite("Hindernis").layerOrder, 2, "Expected Sprite Hindernis to be at layer 2");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Hindernis to be at layer 1");
  t.assert.withinRange(t.getSprite("Skikatze").x, 139, 5, "Expected Sprite Skikatze to have x-position 139 +-5");
  t.assert.withinRange(t.getSprite("Skikatze").y, 0, 5, "Expected Sprite Skikatze to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").x, -70, 5, "Expected Sprite Hindernis to have x-position -70 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").y, -32.04599999999999, 5, "Expected Sprite Hindernis to have y-position -32.04599999999999 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, -111, 5, "Expected Clone 1 of Hindernis to have x-position -111 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, -115, 5, "Expected Clone 1 of Hindernis to have y-position -115 +-5");
  t.assert.not(t.getSprite("Skikatze").sayText, "Expected Sprite Skikatze not to say anything");
  t.assert.not(t.getSprite("Hindernis").sayText, "Expected Sprite Hindernis not to say anything");
  t.assert.not(t.getSprite("Hindernis").getClone(1).sayText, "Expected Clone 1 of Hindernis not to say anything");
  t.assert.withinRange(t.getSprite("Skikatze").size, 100, 1, "Expected Sprite Skikatze to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").size, 60, 1, "Expected Sprite Hindernis to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).size, 60, 1, "Expected Clone 1 of Hindernis to have size 60 +-1");
  t.assert.equal(t.getSprite("Hindernis").getVariable("Hindernis_x").value, "-70", "Expected Hindernis_x to have value -70 in Sprite Hindernis");
  t.assert.ok(t.getSprite("Skikatze").visible, "Expected Sprite Skikatze to be visible");
  t.assert.not(t.getSprite("Hindernis").visible, "Expected Sprite Hindernis not to be visible");
  t.assert.ok(t.getSprite("Hindernis").getClone(1).visible, "Expected Clone 1 of Hindernis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Skikatze").volume, 100, "Expected Sprite Skikatze to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").volume, 100, "Expected Sprite Hindernis to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).volume, 100, "Expected Clone 1 of Hindernis to have volume 100");
  await t.runForSteps(19);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Skikatze").currentCostume, 1, "Expected Sprite Skikatze to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").currentCostume, 1, "Expected Sprite Hindernis to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).currentCostume, 0, "Expected Clone 1 of Hindernis to have costume 0");
  t.assert.equal(t.getSprite("Skikatze").getCloneCount(), 0, "Expected Sprite Skikatze to have 0 clones");
  t.assert.equal(t.getSprite("Hindernis").getCloneCount(), 1, "Expected Sprite Hindernis to have 1 clones");
  t.assert.equal(t.getSprite("Skikatze").direction, 90, 1, "Expected Sprite Skikatze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").direction, 90, 1, "Expected Sprite Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).direction, 90, 1, "Expected Clone 1 of Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Skikatze").effects.color, 0, "Expected effect color of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.fisheye, 0, "Expected effect fisheye of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.whirl, 0, "Expected effect whirl of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.pixelate, 0, "Expected effect pixelate of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.mosaic, 0, "Expected effect mosaic of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.brightness, 0, "Expected effect brightness of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.ghost, 0, "Expected effect ghost of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.color, 0, "Expected effect color of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.fisheye, 0, "Expected effect fisheye of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.whirl, 0, "Expected effect whirl of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.pixelate, 0, "Expected effect pixelate of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.mosaic, 0, "Expected effect mosaic of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.brightness, 0, "Expected effect brightness of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.ghost, 0, "Expected effect ghost of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Skikatze").layerOrder, 3, "Expected Sprite Skikatze to be at layer 3");
  t.assert.equal(t.getSprite("Hindernis").layerOrder, 2, "Expected Sprite Hindernis to be at layer 2");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Hindernis to be at layer 1");
  t.assert.withinRange(t.getSprite("Skikatze").x, 139, 5, "Expected Sprite Skikatze to have x-position 139 +-5");
  t.assert.withinRange(t.getSprite("Skikatze").y, 0, 5, "Expected Sprite Skikatze to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").x, -70, 5, "Expected Sprite Hindernis to have x-position -70 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").y, -32.04599999999999, 5, "Expected Sprite Hindernis to have y-position -32.04599999999999 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, -111, 5, "Expected Clone 1 of Hindernis to have x-position -111 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, 3, 5, "Expected Clone 1 of Hindernis to have y-position 3 +-5");
  t.assert.not(t.getSprite("Skikatze").sayText, "Expected Sprite Skikatze not to say anything");
  t.assert.not(t.getSprite("Hindernis").sayText, "Expected Sprite Hindernis not to say anything");
  t.assert.not(t.getSprite("Hindernis").getClone(1).sayText, "Expected Clone 1 of Hindernis not to say anything");
  t.assert.withinRange(t.getSprite("Skikatze").size, 100, 1, "Expected Sprite Skikatze to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").size, 60, 1, "Expected Sprite Hindernis to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).size, 60, 1, "Expected Clone 1 of Hindernis to have size 60 +-1");
  t.assert.equal(t.getSprite("Hindernis").getVariable("Hindernis_x").value, "-70", "Expected Hindernis_x to have value -70 in Sprite Hindernis");
  t.assert.ok(t.getSprite("Skikatze").visible, "Expected Sprite Skikatze to be visible");
  t.assert.not(t.getSprite("Hindernis").visible, "Expected Sprite Hindernis not to be visible");
  t.assert.ok(t.getSprite("Hindernis").getClone(1).visible, "Expected Clone 1 of Hindernis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Skikatze").volume, 100, "Expected Sprite Skikatze to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").volume, 100, "Expected Sprite Hindernis to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).volume, 100, "Expected Clone 1 of Hindernis to have volume 100");
  await t.runForSteps(90);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Skikatze").currentCostume, 1, "Expected Sprite Skikatze to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").currentCostume, 1, "Expected Sprite Hindernis to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).currentCostume, 0, "Expected Clone 1 of Hindernis to have costume 0");
  t.assert.equal(t.getSprite("Skikatze").getCloneCount(), 0, "Expected Sprite Skikatze to have 0 clones");
  t.assert.equal(t.getSprite("Hindernis").getCloneCount(), 1, "Expected Sprite Hindernis to have 1 clones");
  t.assert.equal(t.getSprite("Skikatze").direction, 90, 1, "Expected Sprite Skikatze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").direction, 90, 1, "Expected Sprite Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).direction, 90, 1, "Expected Clone 1 of Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Skikatze").effects.color, 0, "Expected effect color of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.fisheye, 0, "Expected effect fisheye of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.whirl, 0, "Expected effect whirl of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.pixelate, 0, "Expected effect pixelate of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.mosaic, 0, "Expected effect mosaic of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.brightness, 0, "Expected effect brightness of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.ghost, 0, "Expected effect ghost of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.color, 0, "Expected effect color of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.fisheye, 0, "Expected effect fisheye of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.whirl, 0, "Expected effect whirl of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.pixelate, 0, "Expected effect pixelate of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.mosaic, 0, "Expected effect mosaic of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.brightness, 0, "Expected effect brightness of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.ghost, 0, "Expected effect ghost of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Skikatze").layerOrder, 3, "Expected Sprite Skikatze to be at layer 3");
  t.assert.equal(t.getSprite("Hindernis").layerOrder, 2, "Expected Sprite Hindernis to be at layer 2");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Hindernis to be at layer 1");
  t.assert.withinRange(t.getSprite("Skikatze").x, 139, 5, "Expected Sprite Skikatze to have x-position 139 +-5");
  t.assert.withinRange(t.getSprite("Skikatze").y, 0, 5, "Expected Sprite Skikatze to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").x, -70, 5, "Expected Sprite Hindernis to have x-position -70 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").y, -32.04599999999999, 5, "Expected Sprite Hindernis to have y-position -32.04599999999999 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, 94, 5, "Expected Clone 1 of Hindernis to have x-position 94 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, 3, 5, "Expected Clone 1 of Hindernis to have y-position 3 +-5");
  t.assert.not(t.getSprite("Skikatze").sayText, "Expected Sprite Skikatze not to say anything");
  t.assert.not(t.getSprite("Hindernis").sayText, "Expected Sprite Hindernis not to say anything");
  t.assert.not(t.getSprite("Hindernis").getClone(1).sayText, "Expected Clone 1 of Hindernis not to say anything");
  t.assert.withinRange(t.getSprite("Skikatze").size, 100, 1, "Expected Sprite Skikatze to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").size, 60, 1, "Expected Sprite Hindernis to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).size, 60, 1, "Expected Clone 1 of Hindernis to have size 60 +-1");
  t.assert.equal(t.getSprite("Hindernis").getVariable("Hindernis_x").value, "-70", "Expected Hindernis_x to have value -70 in Sprite Hindernis");
  t.assert.ok(t.getSprite("Skikatze").visible, "Expected Sprite Skikatze to be visible");
  t.assert.not(t.getSprite("Hindernis").visible, "Expected Sprite Hindernis not to be visible");
  t.assert.ok(t.getSprite("Hindernis").getClone(1).visible, "Expected Clone 1 of Hindernis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Skikatze").volume, 100, "Expected Sprite Skikatze to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").volume, 100, "Expected Sprite Hindernis to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).volume, 100, "Expected Clone 1 of Hindernis to have volume 100");
  await t.runForSteps(65);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Skikatze").currentCostume, 1, "Expected Sprite Skikatze to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").currentCostume, 1, "Expected Sprite Hindernis to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).currentCostume, 0, "Expected Clone 1 of Hindernis to have costume 0");
  t.assert.equal(t.getSprite("Skikatze").getCloneCount(), 0, "Expected Sprite Skikatze to have 0 clones");
  t.assert.equal(t.getSprite("Hindernis").getCloneCount(), 1, "Expected Sprite Hindernis to have 1 clones");
  t.assert.equal(t.getSprite("Skikatze").direction, 90, 1, "Expected Sprite Skikatze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").direction, 90, 1, "Expected Sprite Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).direction, 90, 1, "Expected Clone 1 of Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Skikatze").effects.color, 0, "Expected effect color of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.fisheye, 0, "Expected effect fisheye of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.whirl, 0, "Expected effect whirl of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.pixelate, 0, "Expected effect pixelate of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.mosaic, 0, "Expected effect mosaic of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.brightness, 0, "Expected effect brightness of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.ghost, 0, "Expected effect ghost of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.color, 0, "Expected effect color of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.fisheye, 0, "Expected effect fisheye of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.whirl, 0, "Expected effect whirl of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.pixelate, 0, "Expected effect pixelate of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.mosaic, 0, "Expected effect mosaic of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.brightness, 0, "Expected effect brightness of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.ghost, 0, "Expected effect ghost of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Skikatze").layerOrder, 3, "Expected Sprite Skikatze to be at layer 3");
  t.assert.equal(t.getSprite("Hindernis").layerOrder, 2, "Expected Sprite Hindernis to be at layer 2");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Hindernis to be at layer 1");
  t.assert.withinRange(t.getSprite("Skikatze").x, 139, 5, "Expected Sprite Skikatze to have x-position 139 +-5");
  t.assert.withinRange(t.getSprite("Skikatze").y, 0, 5, "Expected Sprite Skikatze to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").x, -70, 5, "Expected Sprite Hindernis to have x-position -70 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").y, -32.04599999999999, 5, "Expected Sprite Hindernis to have y-position -32.04599999999999 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, 60, 5, "Expected Clone 1 of Hindernis to have x-position 60 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, -144.5, 5, "Expected Clone 1 of Hindernis to have y-position -144.5 +-5");
  t.assert.not(t.getSprite("Skikatze").sayText, "Expected Sprite Skikatze not to say anything");
  t.assert.not(t.getSprite("Hindernis").sayText, "Expected Sprite Hindernis not to say anything");
  t.assert.not(t.getSprite("Hindernis").getClone(1).sayText, "Expected Clone 1 of Hindernis not to say anything");
  t.assert.withinRange(t.getSprite("Skikatze").size, 100, 1, "Expected Sprite Skikatze to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").size, 60, 1, "Expected Sprite Hindernis to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).size, 60, 1, "Expected Clone 1 of Hindernis to have size 60 +-1");
  t.assert.equal(t.getSprite("Hindernis").getVariable("Hindernis_x").value, "-70", "Expected Hindernis_x to have value -70 in Sprite Hindernis");
  t.assert.ok(t.getSprite("Skikatze").visible, "Expected Sprite Skikatze to be visible");
  t.assert.not(t.getSprite("Hindernis").visible, "Expected Sprite Hindernis not to be visible");
  t.assert.ok(t.getSprite("Hindernis").getClone(1).visible, "Expected Clone 1 of Hindernis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Skikatze").volume, 100, "Expected Sprite Skikatze to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").volume, 100, "Expected Sprite Hindernis to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).volume, 100, "Expected Clone 1 of Hindernis to have volume 100");
  await t.runForSteps(95);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Skikatze").currentCostume, 1, "Expected Sprite Skikatze to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").currentCostume, 1, "Expected Sprite Hindernis to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).currentCostume, 0, "Expected Clone 1 of Hindernis to have costume 0");
  t.assert.equal(t.getSprite("Skikatze").getCloneCount(), 0, "Expected Sprite Skikatze to have 0 clones");
  t.assert.equal(t.getSprite("Hindernis").getCloneCount(), 1, "Expected Sprite Hindernis to have 1 clones");
  t.assert.equal(t.getSprite("Skikatze").direction, 90, 1, "Expected Sprite Skikatze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").direction, 90, 1, "Expected Sprite Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).direction, 90, 1, "Expected Clone 1 of Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Skikatze").effects.color, 0, "Expected effect color of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.fisheye, 0, "Expected effect fisheye of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.whirl, 0, "Expected effect whirl of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.pixelate, 0, "Expected effect pixelate of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.mosaic, 0, "Expected effect mosaic of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.brightness, 0, "Expected effect brightness of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.ghost, 0, "Expected effect ghost of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.color, 0, "Expected effect color of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.fisheye, 0, "Expected effect fisheye of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.whirl, 0, "Expected effect whirl of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.pixelate, 0, "Expected effect pixelate of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.mosaic, 0, "Expected effect mosaic of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.brightness, 0, "Expected effect brightness of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.ghost, 0, "Expected effect ghost of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Skikatze").layerOrder, 3, "Expected Sprite Skikatze to be at layer 3");
  t.assert.equal(t.getSprite("Hindernis").layerOrder, 2, "Expected Sprite Hindernis to be at layer 2");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Hindernis to be at layer 1");
  t.assert.withinRange(t.getSprite("Skikatze").x, 139, 5, "Expected Sprite Skikatze to have x-position 139 +-5");
  t.assert.withinRange(t.getSprite("Skikatze").y, 0, 5, "Expected Sprite Skikatze to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").x, -70, 5, "Expected Sprite Hindernis to have x-position -70 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").y, -32.04599999999999, 5, "Expected Sprite Hindernis to have y-position -32.04599999999999 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, 10, 5, "Expected Clone 1 of Hindernis to have x-position 10 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, -115, 5, "Expected Clone 1 of Hindernis to have y-position -115 +-5");
  t.assert.not(t.getSprite("Skikatze").sayText, "Expected Sprite Skikatze not to say anything");
  t.assert.not(t.getSprite("Hindernis").sayText, "Expected Sprite Hindernis not to say anything");
  t.assert.not(t.getSprite("Hindernis").getClone(1).sayText, "Expected Clone 1 of Hindernis not to say anything");
  t.assert.withinRange(t.getSprite("Skikatze").size, 100, 1, "Expected Sprite Skikatze to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").size, 60, 1, "Expected Sprite Hindernis to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).size, 60, 1, "Expected Clone 1 of Hindernis to have size 60 +-1");
  t.assert.equal(t.getSprite("Hindernis").getVariable("Hindernis_x").value, "-70", "Expected Hindernis_x to have value -70 in Sprite Hindernis");
  t.assert.ok(t.getSprite("Skikatze").visible, "Expected Sprite Skikatze to be visible");
  t.assert.not(t.getSprite("Hindernis").visible, "Expected Sprite Hindernis not to be visible");
  t.assert.ok(t.getSprite("Hindernis").getClone(1).visible, "Expected Clone 1 of Hindernis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Skikatze").volume, 100, "Expected Sprite Skikatze to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").volume, 100, "Expected Sprite Hindernis to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).volume, 100, "Expected Clone 1 of Hindernis to have volume 100");
  await t.runForSteps(51);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Skikatze").currentCostume, 1, "Expected Sprite Skikatze to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").currentCostume, 1, "Expected Sprite Hindernis to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).currentCostume, 0, "Expected Clone 1 of Hindernis to have costume 0");
  t.assert.equal(t.getSprite("Skikatze").getCloneCount(), 0, "Expected Sprite Skikatze to have 0 clones");
  t.assert.equal(t.getSprite("Hindernis").getCloneCount(), 1, "Expected Sprite Hindernis to have 1 clones");
  t.assert.equal(t.getSprite("Skikatze").direction, 90, 1, "Expected Sprite Skikatze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").direction, 90, 1, "Expected Sprite Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).direction, 90, 1, "Expected Clone 1 of Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Skikatze").effects.color, 0, "Expected effect color of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.fisheye, 0, "Expected effect fisheye of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.whirl, 0, "Expected effect whirl of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.pixelate, 0, "Expected effect pixelate of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.mosaic, 0, "Expected effect mosaic of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.brightness, 0, "Expected effect brightness of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.ghost, 0, "Expected effect ghost of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.color, 0, "Expected effect color of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.fisheye, 0, "Expected effect fisheye of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.whirl, 0, "Expected effect whirl of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.pixelate, 0, "Expected effect pixelate of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.mosaic, 0, "Expected effect mosaic of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.brightness, 0, "Expected effect brightness of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.ghost, 0, "Expected effect ghost of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Skikatze").layerOrder, 3, "Expected Sprite Skikatze to be at layer 3");
  t.assert.equal(t.getSprite("Hindernis").layerOrder, 2, "Expected Sprite Hindernis to be at layer 2");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Hindernis to be at layer 1");
  t.assert.withinRange(t.getSprite("Skikatze").x, 139, 5, "Expected Sprite Skikatze to have x-position 139 +-5");
  t.assert.withinRange(t.getSprite("Skikatze").y, 0, 5, "Expected Sprite Skikatze to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").x, -70, 5, "Expected Sprite Hindernis to have x-position -70 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").y, -32.04599999999999, 5, "Expected Sprite Hindernis to have y-position -32.04599999999999 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, 10, 5, "Expected Clone 1 of Hindernis to have x-position 10 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, 180, 5, "Expected Clone 1 of Hindernis to have y-position 180 +-5");
  t.assert.not(t.getSprite("Skikatze").sayText, "Expected Sprite Skikatze not to say anything");
  t.assert.not(t.getSprite("Hindernis").sayText, "Expected Sprite Hindernis not to say anything");
  t.assert.not(t.getSprite("Hindernis").getClone(1).sayText, "Expected Clone 1 of Hindernis not to say anything");
  t.assert.withinRange(t.getSprite("Skikatze").size, 100, 1, "Expected Sprite Skikatze to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").size, 60, 1, "Expected Sprite Hindernis to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).size, 60, 1, "Expected Clone 1 of Hindernis to have size 60 +-1");
  t.assert.equal(t.getSprite("Hindernis").getVariable("Hindernis_x").value, "-70", "Expected Hindernis_x to have value -70 in Sprite Hindernis");
  t.assert.ok(t.getSprite("Skikatze").visible, "Expected Sprite Skikatze to be visible");
  t.assert.not(t.getSprite("Hindernis").visible, "Expected Sprite Hindernis not to be visible");
  t.assert.not(t.getSprite("Hindernis").getClone(1).visible, "Expected Clone 1 of Hindernis not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Skikatze").volume, 100, "Expected Sprite Skikatze to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").volume, 100, "Expected Sprite Hindernis to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).volume, 100, "Expected Clone 1 of Hindernis to have volume 100");
  await t.runForSteps(42);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Skikatze").currentCostume, 1, "Expected Sprite Skikatze to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").currentCostume, 1, "Expected Sprite Hindernis to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).currentCostume, 0, "Expected Clone 1 of Hindernis to have costume 0");
  t.assert.equal(t.getSprite("Skikatze").getCloneCount(), 0, "Expected Sprite Skikatze to have 0 clones");
  t.assert.equal(t.getSprite("Hindernis").getCloneCount(), 1, "Expected Sprite Hindernis to have 1 clones");
  t.assert.equal(t.getSprite("Skikatze").direction, 90, 1, "Expected Sprite Skikatze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").direction, 90, 1, "Expected Sprite Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).direction, 90, 1, "Expected Clone 1 of Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Skikatze").effects.color, 0, "Expected effect color of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.fisheye, 0, "Expected effect fisheye of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.whirl, 0, "Expected effect whirl of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.pixelate, 0, "Expected effect pixelate of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.mosaic, 0, "Expected effect mosaic of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.brightness, 0, "Expected effect brightness of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.ghost, 0, "Expected effect ghost of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.color, 0, "Expected effect color of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.fisheye, 0, "Expected effect fisheye of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.whirl, 0, "Expected effect whirl of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.pixelate, 0, "Expected effect pixelate of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.mosaic, 0, "Expected effect mosaic of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.brightness, 0, "Expected effect brightness of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.ghost, 0, "Expected effect ghost of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Skikatze").layerOrder, 3, "Expected Sprite Skikatze to be at layer 3");
  t.assert.equal(t.getSprite("Hindernis").layerOrder, 2, "Expected Sprite Hindernis to be at layer 2");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Hindernis to be at layer 1");
  t.assert.withinRange(t.getSprite("Skikatze").x, 139, 5, "Expected Sprite Skikatze to have x-position 139 +-5");
  t.assert.withinRange(t.getSprite("Skikatze").y, 0, 5, "Expected Sprite Skikatze to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").x, -70, 5, "Expected Sprite Hindernis to have x-position -70 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").y, -32.04599999999999, 5, "Expected Sprite Hindernis to have y-position -32.04599999999999 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, -151, 5, "Expected Clone 1 of Hindernis to have x-position -151 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, -91.4, 5, "Expected Clone 1 of Hindernis to have y-position -91.4 +-5");
  t.assert.not(t.getSprite("Skikatze").sayText, "Expected Sprite Skikatze not to say anything");
  t.assert.not(t.getSprite("Hindernis").sayText, "Expected Sprite Hindernis not to say anything");
  t.assert.not(t.getSprite("Hindernis").getClone(1).sayText, "Expected Clone 1 of Hindernis not to say anything");
  t.assert.withinRange(t.getSprite("Skikatze").size, 100, 1, "Expected Sprite Skikatze to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").size, 60, 1, "Expected Sprite Hindernis to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).size, 60, 1, "Expected Clone 1 of Hindernis to have size 60 +-1");
  t.assert.equal(t.getSprite("Hindernis").getVariable("Hindernis_x").value, "-70", "Expected Hindernis_x to have value -70 in Sprite Hindernis");
  t.assert.ok(t.getSprite("Skikatze").visible, "Expected Sprite Skikatze to be visible");
  t.assert.not(t.getSprite("Hindernis").visible, "Expected Sprite Hindernis not to be visible");
  t.assert.ok(t.getSprite("Hindernis").getClone(1).visible, "Expected Clone 1 of Hindernis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Skikatze").volume, 100, "Expected Sprite Skikatze to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").volume, 100, "Expected Sprite Hindernis to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).volume, 100, "Expected Clone 1 of Hindernis to have volume 100");
  await t.runForSteps(66);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Skikatze").currentCostume, 1, "Expected Sprite Skikatze to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").currentCostume, 1, "Expected Sprite Hindernis to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).currentCostume, 0, "Expected Clone 1 of Hindernis to have costume 0");
  t.assert.equal(t.getSprite("Skikatze").getCloneCount(), 0, "Expected Sprite Skikatze to have 0 clones");
  t.assert.equal(t.getSprite("Hindernis").getCloneCount(), 1, "Expected Sprite Hindernis to have 1 clones");
  t.assert.equal(t.getSprite("Skikatze").direction, 90, 1, "Expected Sprite Skikatze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").direction, 90, 1, "Expected Sprite Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).direction, 90, 1, "Expected Clone 1 of Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Skikatze").effects.color, 0, "Expected effect color of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.fisheye, 0, "Expected effect fisheye of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.whirl, 0, "Expected effect whirl of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.pixelate, 0, "Expected effect pixelate of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.mosaic, 0, "Expected effect mosaic of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.brightness, 0, "Expected effect brightness of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.ghost, 0, "Expected effect ghost of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.color, 0, "Expected effect color of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.fisheye, 0, "Expected effect fisheye of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.whirl, 0, "Expected effect whirl of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.pixelate, 0, "Expected effect pixelate of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.mosaic, 0, "Expected effect mosaic of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.brightness, 0, "Expected effect brightness of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.ghost, 0, "Expected effect ghost of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Skikatze").layerOrder, 3, "Expected Sprite Skikatze to be at layer 3");
  t.assert.equal(t.getSprite("Hindernis").layerOrder, 2, "Expected Sprite Hindernis to be at layer 2");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Hindernis to be at layer 1");
  t.assert.withinRange(t.getSprite("Skikatze").x, 139, 5, "Expected Sprite Skikatze to have x-position 139 +-5");
  t.assert.withinRange(t.getSprite("Skikatze").y, 0, 5, "Expected Sprite Skikatze to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").x, -70, 5, "Expected Sprite Hindernis to have x-position -70 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").y, -32.04599999999999, 5, "Expected Sprite Hindernis to have y-position -32.04599999999999 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, -151, 5, "Expected Clone 1 of Hindernis to have x-position -151 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, 180, 5, "Expected Clone 1 of Hindernis to have y-position 180 +-5");
  t.assert.not(t.getSprite("Skikatze").sayText, "Expected Sprite Skikatze not to say anything");
  t.assert.not(t.getSprite("Hindernis").sayText, "Expected Sprite Hindernis not to say anything");
  t.assert.not(t.getSprite("Hindernis").getClone(1).sayText, "Expected Clone 1 of Hindernis not to say anything");
  t.assert.withinRange(t.getSprite("Skikatze").size, 100, 1, "Expected Sprite Skikatze to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").size, 60, 1, "Expected Sprite Hindernis to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).size, 60, 1, "Expected Clone 1 of Hindernis to have size 60 +-1");
  t.assert.equal(t.getSprite("Hindernis").getVariable("Hindernis_x").value, "-70", "Expected Hindernis_x to have value -70 in Sprite Hindernis");
  t.assert.ok(t.getSprite("Skikatze").visible, "Expected Sprite Skikatze to be visible");
  t.assert.not(t.getSprite("Hindernis").visible, "Expected Sprite Hindernis not to be visible");
  t.assert.not(t.getSprite("Hindernis").getClone(1).visible, "Expected Clone 1 of Hindernis not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Skikatze").volume, 100, "Expected Sprite Skikatze to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").volume, 100, "Expected Sprite Hindernis to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).volume, 100, "Expected Clone 1 of Hindernis to have volume 100");
  await t.runForSteps(21);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Skikatze").currentCostume, 1, "Expected Sprite Skikatze to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").currentCostume, 1, "Expected Sprite Hindernis to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).currentCostume, 0, "Expected Clone 1 of Hindernis to have costume 0");
  t.assert.equal(t.getSprite("Skikatze").getCloneCount(), 0, "Expected Sprite Skikatze to have 0 clones");
  t.assert.equal(t.getSprite("Hindernis").getCloneCount(), 1, "Expected Sprite Hindernis to have 1 clones");
  t.assert.equal(t.getSprite("Skikatze").direction, 90, 1, "Expected Sprite Skikatze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").direction, 90, 1, "Expected Sprite Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).direction, 90, 1, "Expected Clone 1 of Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Skikatze").effects.color, 0, "Expected effect color of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.fisheye, 0, "Expected effect fisheye of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.whirl, 0, "Expected effect whirl of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.pixelate, 0, "Expected effect pixelate of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.mosaic, 0, "Expected effect mosaic of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.brightness, 0, "Expected effect brightness of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.ghost, 0, "Expected effect ghost of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.color, 0, "Expected effect color of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.fisheye, 0, "Expected effect fisheye of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.whirl, 0, "Expected effect whirl of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.pixelate, 0, "Expected effect pixelate of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.mosaic, 0, "Expected effect mosaic of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.brightness, 0, "Expected effect brightness of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.ghost, 0, "Expected effect ghost of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Skikatze").layerOrder, 3, "Expected Sprite Skikatze to be at layer 3");
  t.assert.equal(t.getSprite("Hindernis").layerOrder, 2, "Expected Sprite Hindernis to be at layer 2");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Hindernis to be at layer 1");
  t.assert.withinRange(t.getSprite("Skikatze").x, 139, 5, "Expected Sprite Skikatze to have x-position 139 +-5");
  t.assert.withinRange(t.getSprite("Skikatze").y, 0, 5, "Expected Sprite Skikatze to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").x, -70, 5, "Expected Sprite Hindernis to have x-position -70 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").y, -32.04599999999999, 5, "Expected Sprite Hindernis to have y-position -32.04599999999999 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, -198, 5, "Expected Clone 1 of Hindernis to have x-position -198 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, -103.2, 5, "Expected Clone 1 of Hindernis to have y-position -103.2 +-5");
  t.assert.not(t.getSprite("Skikatze").sayText, "Expected Sprite Skikatze not to say anything");
  t.assert.not(t.getSprite("Hindernis").sayText, "Expected Sprite Hindernis not to say anything");
  t.assert.not(t.getSprite("Hindernis").getClone(1).sayText, "Expected Clone 1 of Hindernis not to say anything");
  t.assert.withinRange(t.getSprite("Skikatze").size, 100, 1, "Expected Sprite Skikatze to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").size, 60, 1, "Expected Sprite Hindernis to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).size, 60, 1, "Expected Clone 1 of Hindernis to have size 60 +-1");
  t.assert.equal(t.getSprite("Hindernis").getVariable("Hindernis_x").value, "-70", "Expected Hindernis_x to have value -70 in Sprite Hindernis");
  t.assert.ok(t.getSprite("Skikatze").visible, "Expected Sprite Skikatze to be visible");
  t.assert.not(t.getSprite("Hindernis").visible, "Expected Sprite Hindernis not to be visible");
  t.assert.ok(t.getSprite("Hindernis").getClone(1).visible, "Expected Clone 1 of Hindernis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Skikatze").volume, 100, "Expected Sprite Skikatze to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").volume, 100, "Expected Sprite Hindernis to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).volume, 100, "Expected Clone 1 of Hindernis to have volume 100");
  await t.runForSteps(82);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Skikatze").currentCostume, 1, "Expected Sprite Skikatze to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").currentCostume, 1, "Expected Sprite Hindernis to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).currentCostume, 0, "Expected Clone 1 of Hindernis to have costume 0");
  t.assert.equal(t.getSprite("Skikatze").getCloneCount(), 0, "Expected Sprite Skikatze to have 0 clones");
  t.assert.equal(t.getSprite("Hindernis").getCloneCount(), 1, "Expected Sprite Hindernis to have 1 clones");
  t.assert.equal(t.getSprite("Skikatze").direction, 90, 1, "Expected Sprite Skikatze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").direction, 90, 1, "Expected Sprite Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).direction, 90, 1, "Expected Clone 1 of Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Skikatze").effects.color, 0, "Expected effect color of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.fisheye, 0, "Expected effect fisheye of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.whirl, 0, "Expected effect whirl of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.pixelate, 0, "Expected effect pixelate of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.mosaic, 0, "Expected effect mosaic of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.brightness, 0, "Expected effect brightness of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.ghost, 0, "Expected effect ghost of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.color, 0, "Expected effect color of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.fisheye, 0, "Expected effect fisheye of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.whirl, 0, "Expected effect whirl of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.pixelate, 0, "Expected effect pixelate of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.mosaic, 0, "Expected effect mosaic of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.brightness, 0, "Expected effect brightness of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.ghost, 0, "Expected effect ghost of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Skikatze").layerOrder, 3, "Expected Sprite Skikatze to be at layer 3");
  t.assert.equal(t.getSprite("Hindernis").layerOrder, 2, "Expected Sprite Hindernis to be at layer 2");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Hindernis to be at layer 1");
  t.assert.withinRange(t.getSprite("Skikatze").x, 139, 5, "Expected Sprite Skikatze to have x-position 139 +-5");
  t.assert.withinRange(t.getSprite("Skikatze").y, 0, 5, "Expected Sprite Skikatze to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").x, -70, 5, "Expected Sprite Hindernis to have x-position -70 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").y, -32.04599999999999, 5, "Expected Sprite Hindernis to have y-position -32.04599999999999 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, 27, 5, "Expected Clone 1 of Hindernis to have x-position 27 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, -150.4, 5, "Expected Clone 1 of Hindernis to have y-position -150.4 +-5");
  t.assert.not(t.getSprite("Skikatze").sayText, "Expected Sprite Skikatze not to say anything");
  t.assert.not(t.getSprite("Hindernis").sayText, "Expected Sprite Hindernis not to say anything");
  t.assert.not(t.getSprite("Hindernis").getClone(1).sayText, "Expected Clone 1 of Hindernis not to say anything");
  t.assert.withinRange(t.getSprite("Skikatze").size, 100, 1, "Expected Sprite Skikatze to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").size, 60, 1, "Expected Sprite Hindernis to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).size, 60, 1, "Expected Clone 1 of Hindernis to have size 60 +-1");
  t.assert.equal(t.getSprite("Hindernis").getVariable("Hindernis_x").value, "-70", "Expected Hindernis_x to have value -70 in Sprite Hindernis");
  t.assert.ok(t.getSprite("Skikatze").visible, "Expected Sprite Skikatze to be visible");
  t.assert.not(t.getSprite("Hindernis").visible, "Expected Sprite Hindernis not to be visible");
  t.assert.ok(t.getSprite("Hindernis").getClone(1).visible, "Expected Clone 1 of Hindernis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Skikatze").volume, 100, "Expected Sprite Skikatze to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").volume, 100, "Expected Sprite Hindernis to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).volume, 100, "Expected Clone 1 of Hindernis to have volume 100");
  await t.runForSteps(13);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Skikatze").currentCostume, 1, "Expected Sprite Skikatze to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").currentCostume, 1, "Expected Sprite Hindernis to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).currentCostume, 0, "Expected Clone 1 of Hindernis to have costume 0");
  t.assert.equal(t.getSprite("Skikatze").getCloneCount(), 0, "Expected Sprite Skikatze to have 0 clones");
  t.assert.equal(t.getSprite("Hindernis").getCloneCount(), 1, "Expected Sprite Hindernis to have 1 clones");
  t.assert.equal(t.getSprite("Skikatze").direction, 90, 1, "Expected Sprite Skikatze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").direction, 90, 1, "Expected Sprite Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).direction, 90, 1, "Expected Clone 1 of Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Skikatze").effects.color, 0, "Expected effect color of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.fisheye, 0, "Expected effect fisheye of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.whirl, 0, "Expected effect whirl of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.pixelate, 0, "Expected effect pixelate of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.mosaic, 0, "Expected effect mosaic of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.brightness, 0, "Expected effect brightness of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.ghost, 0, "Expected effect ghost of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.color, 0, "Expected effect color of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.fisheye, 0, "Expected effect fisheye of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.whirl, 0, "Expected effect whirl of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.pixelate, 0, "Expected effect pixelate of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.mosaic, 0, "Expected effect mosaic of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.brightness, 0, "Expected effect brightness of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.ghost, 0, "Expected effect ghost of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Skikatze").layerOrder, 3, "Expected Sprite Skikatze to be at layer 3");
  t.assert.equal(t.getSprite("Hindernis").layerOrder, 2, "Expected Sprite Hindernis to be at layer 2");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Hindernis to be at layer 1");
  t.assert.withinRange(t.getSprite("Skikatze").x, 139, 5, "Expected Sprite Skikatze to have x-position 139 +-5");
  t.assert.withinRange(t.getSprite("Skikatze").y, 0, 5, "Expected Sprite Skikatze to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").x, -70, 5, "Expected Sprite Hindernis to have x-position -70 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").y, -32.04599999999999, 5, "Expected Sprite Hindernis to have y-position -32.04599999999999 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, 27, 5, "Expected Clone 1 of Hindernis to have x-position 27 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, -67.8, 5, "Expected Clone 1 of Hindernis to have y-position -67.8 +-5");
  t.assert.not(t.getSprite("Skikatze").sayText, "Expected Sprite Skikatze not to say anything");
  t.assert.not(t.getSprite("Hindernis").sayText, "Expected Sprite Hindernis not to say anything");
  t.assert.not(t.getSprite("Hindernis").getClone(1).sayText, "Expected Clone 1 of Hindernis not to say anything");
  t.assert.withinRange(t.getSprite("Skikatze").size, 100, 1, "Expected Sprite Skikatze to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").size, 60, 1, "Expected Sprite Hindernis to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).size, 60, 1, "Expected Clone 1 of Hindernis to have size 60 +-1");
  t.assert.equal(t.getSprite("Hindernis").getVariable("Hindernis_x").value, "-70", "Expected Hindernis_x to have value -70 in Sprite Hindernis");
  t.assert.ok(t.getSprite("Skikatze").visible, "Expected Sprite Skikatze to be visible");
  t.assert.not(t.getSprite("Hindernis").visible, "Expected Sprite Hindernis not to be visible");
  t.assert.ok(t.getSprite("Hindernis").getClone(1).visible, "Expected Clone 1 of Hindernis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Skikatze").volume, 100, "Expected Sprite Skikatze to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").volume, 100, "Expected Sprite Hindernis to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).volume, 100, "Expected Clone 1 of Hindernis to have volume 100");
  t.end();
}
const test1 = async function (t) {
  await t.runForSteps(38);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Skikatze").currentCostume, 0, "Expected Sprite Skikatze to have costume 0");
  t.assert.equal(t.getSprite("Hindernis").currentCostume, 0, "Expected Sprite Hindernis to have costume 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).currentCostume, 1, "Expected Clone 1 of Hindernis to have costume 1");
  t.assert.equal(t.getSprite("Skikatze").getCloneCount(), 0, "Expected Sprite Skikatze to have 0 clones");
  t.assert.equal(t.getSprite("Hindernis").getCloneCount(), 1, "Expected Sprite Hindernis to have 1 clones");
  t.assert.equal(t.getSprite("Skikatze").direction, 90, 1, "Expected Sprite Skikatze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").direction, 90, 1, "Expected Sprite Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).direction, 90, 1, "Expected Clone 1 of Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Skikatze").effects.color, 0, "Expected effect color of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.fisheye, 0, "Expected effect fisheye of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.whirl, 0, "Expected effect whirl of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.pixelate, 0, "Expected effect pixelate of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.mosaic, 0, "Expected effect mosaic of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.brightness, 0, "Expected effect brightness of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.ghost, 0, "Expected effect ghost of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.color, 0, "Expected effect color of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.fisheye, 0, "Expected effect fisheye of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.whirl, 0, "Expected effect whirl of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.pixelate, 0, "Expected effect pixelate of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.mosaic, 0, "Expected effect mosaic of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.brightness, 0, "Expected effect brightness of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.ghost, 0, "Expected effect ghost of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Skikatze").layerOrder, 3, "Expected Sprite Skikatze to be at layer 3");
  t.assert.equal(t.getSprite("Hindernis").layerOrder, 2, "Expected Sprite Hindernis to be at layer 2");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Hindernis to be at layer 1");
  t.assert.withinRange(t.getSprite("Skikatze").x, 48, 5, "Expected Sprite Skikatze to have x-position 48 +-5");
  t.assert.withinRange(t.getSprite("Skikatze").y, 100, 5, "Expected Sprite Skikatze to have y-position 100 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").x, -70, 5, "Expected Sprite Hindernis to have x-position -70 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").y, -32.04599999999999, 5, "Expected Sprite Hindernis to have y-position -32.04599999999999 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, 137, 5, "Expected Clone 1 of Hindernis to have x-position 137 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, -42, 5, "Expected Clone 1 of Hindernis to have y-position -42 +-5");
  t.assert.not(t.getSprite("Skikatze").sayText, "Expected Sprite Skikatze not to say anything");
  t.assert.not(t.getSprite("Hindernis").sayText, "Expected Sprite Hindernis not to say anything");
  t.assert.not(t.getSprite("Hindernis").getClone(1).sayText, "Expected Clone 1 of Hindernis not to say anything");
  t.assert.withinRange(t.getSprite("Skikatze").size, 100, 1, "Expected Sprite Skikatze to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").size, 60, 1, "Expected Sprite Hindernis to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).size, 60, 1, "Expected Clone 1 of Hindernis to have size 60 +-1");
  t.assert.equal(t.getSprite("Hindernis").getVariable("Hindernis_x").value, "-70", "Expected Hindernis_x to have value -70 in Sprite Hindernis");
  t.assert.ok(t.getSprite("Skikatze").visible, "Expected Sprite Skikatze to be visible");
  t.assert.not(t.getSprite("Hindernis").visible, "Expected Sprite Hindernis not to be visible");
  t.assert.ok(t.getSprite("Hindernis").getClone(1).visible, "Expected Clone 1 of Hindernis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Skikatze").volume, 100, "Expected Sprite Skikatze to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").volume, 100, "Expected Sprite Hindernis to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).volume, 100, "Expected Clone 1 of Hindernis to have volume 100");
  t.keyPress('left arrow', 4);
  await t.runForSteps(4);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Skikatze").currentCostume, 0, "Expected Sprite Skikatze to have costume 0");
  t.assert.equal(t.getSprite("Hindernis").currentCostume, 0, "Expected Sprite Hindernis to have costume 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).currentCostume, 1, "Expected Clone 1 of Hindernis to have costume 1");
  t.assert.equal(t.getSprite("Skikatze").getCloneCount(), 0, "Expected Sprite Skikatze to have 0 clones");
  t.assert.equal(t.getSprite("Hindernis").getCloneCount(), 1, "Expected Sprite Hindernis to have 1 clones");
  t.assert.equal(t.getSprite("Skikatze").direction, 90, 1, "Expected Sprite Skikatze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").direction, 90, 1, "Expected Sprite Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).direction, 90, 1, "Expected Clone 1 of Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Skikatze").effects.color, 0, "Expected effect color of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.fisheye, 0, "Expected effect fisheye of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.whirl, 0, "Expected effect whirl of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.pixelate, 0, "Expected effect pixelate of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.mosaic, 0, "Expected effect mosaic of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.brightness, 0, "Expected effect brightness of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Skikatze").effects.ghost, 0, "Expected effect ghost of Sprite Skikatze to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.color, 0, "Expected effect color of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.fisheye, 0, "Expected effect fisheye of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.whirl, 0, "Expected effect whirl of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.pixelate, 0, "Expected effect pixelate of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.mosaic, 0, "Expected effect mosaic of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.brightness, 0, "Expected effect brightness of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").effects.ghost, 0, "Expected effect ghost of Sprite Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Skikatze").layerOrder, 3, "Expected Sprite Skikatze to be at layer 3");
  t.assert.equal(t.getSprite("Hindernis").layerOrder, 2, "Expected Sprite Hindernis to be at layer 2");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Hindernis to be at layer 1");
  t.assert.withinRange(t.getSprite("Skikatze").x, 18, 5, "Expected Sprite Skikatze to have x-position 18 +-5");
  t.assert.withinRange(t.getSprite("Skikatze").y, 100, 5, "Expected Sprite Skikatze to have y-position 100 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").x, -70, 5, "Expected Sprite Hindernis to have x-position -70 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").y, -32.04599999999999, 5, "Expected Sprite Hindernis to have y-position -32.04599999999999 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, 137, 5, "Expected Clone 1 of Hindernis to have x-position 137 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, -12, 5, "Expected Clone 1 of Hindernis to have y-position -12 +-5");
  t.assert.not(t.getSprite("Skikatze").sayText, "Expected Sprite Skikatze not to say anything");
  t.assert.not(t.getSprite("Hindernis").sayText, "Expected Sprite Hindernis not to say anything");
  t.assert.not(t.getSprite("Hindernis").getClone(1).sayText, "Expected Clone 1 of Hindernis not to say anything");
  t.assert.withinRange(t.getSprite("Skikatze").size, 100, 1, "Expected Sprite Skikatze to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").size, 60, 1, "Expected Sprite Hindernis to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).size, 60, 1, "Expected Clone 1 of Hindernis to have size 60 +-1");
  t.assert.equal(t.getSprite("Hindernis").getVariable("Hindernis_x").value, "-70", "Expected Hindernis_x to have value -70 in Sprite Hindernis");
  t.assert.ok(t.getSprite("Skikatze").visible, "Expected Sprite Skikatze to be visible");
  t.assert.not(t.getSprite("Hindernis").visible, "Expected Sprite Hindernis not to be visible");
  t.assert.ok(t.getSprite("Hindernis").getClone(1).visible, "Expected Clone 1 of Hindernis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Skikatze").volume, 100, "Expected Sprite Skikatze to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").volume, 100, "Expected Sprite Hindernis to have volume 100");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).volume, 100, "Expected Clone 1 of Hindernis to have volume 100");
  t.end();
}

module.exports = [
  {
      test: test0,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687939068588',
      type: 'standard',
  },
  {
      test: test1,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687939068588',
      type: 'standard',
  }
]
