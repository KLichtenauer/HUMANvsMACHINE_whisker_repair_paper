const test0 = async function (t) {
  t.keyPress('right arrow', 3);
  await t.runForSteps(3);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 96, 1, "Expected Sprite Scheibe to face in direction 96 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 120.78789526876503, 1, "Expected Sprite Rot to face in direction 120.78789526876503 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, -151, 5, "Expected Sprite Rot to have x-position -151 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 18, 5, "Expected Sprite Rot to have y-position 18 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  await t.runForSteps(68);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).currentCostume, 0, "Expected Clone 1 of Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 1, "Expected Sprite Rot to have 1 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 96, 1, "Expected Sprite Scheibe to face in direction 96 +-1");
  t.assert.equal(t.getSprite("Rot").direction, -57.38075692880719, 1, "Expected Sprite Rot to face in direction -57.38075692880719 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).direction, -57.38075692880719, 1, "Expected Clone 1 of Rot to face in direction -57.38075692880719 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 3, "Expected Sprite Scheibe to be at layer 3");
  t.assert.equal(t.getSprite("Rot").layerOrder, 2, "Expected Sprite Rot to be at layer 2");
  t.assert.equal(t.getSprite("Rot").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 225, 5, "Expected Sprite Rot to have x-position 225 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -144, 5, "Expected Sprite Rot to have y-position -144 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, 75, 5, "Expected Clone 1 of Rot to have x-position 75 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, -48, 5, "Expected Clone 1 of Rot to have y-position -48 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.not(t.getSprite("Rot").getClone(1).sayText, "Expected Clone 1 of Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).size, 80, 1, "Expected Clone 1 of Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.ok(t.getSprite("Rot").getClone(1).visible, "Expected Clone 1 of Rot to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.assert.equal(t.getSprite("Rot").getClone(1).volume, 100, "Expected Clone 1 of Rot to have volume 100");
  t.dragSprite('Rot', 30.083303166999364, -6.222972959632816, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).currentCostume, 0, "Expected Clone 1 of Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 1, "Expected Sprite Rot to have 1 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 96, 1, "Expected Sprite Scheibe to face in direction 96 +-1");
  t.assert.equal(t.getSprite("Rot").direction, -57.38075692880719, 1, "Expected Sprite Rot to face in direction -57.38075692880719 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).direction, -57.38075692880719, 1, "Expected Clone 1 of Rot to face in direction -57.38075692880719 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 3, "Expected Sprite Scheibe to be at layer 3");
  t.assert.equal(t.getSprite("Rot").layerOrder, 2, "Expected Sprite Rot to be at layer 2");
  t.assert.equal(t.getSprite("Rot").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, -119, 5, "Expected Sprite Rot to have x-position -119 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 113, 5, "Expected Sprite Rot to have y-position 113 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, 72.5, 5, "Expected Clone 1 of Rot to have x-position 72.5 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, -46.39999999999999, 5, "Expected Clone 1 of Rot to have y-position -46.39999999999999 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.not(t.getSprite("Rot").getClone(1).sayText, "Expected Clone 1 of Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).size, 80, 1, "Expected Clone 1 of Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.ok(t.getSprite("Rot").getClone(1).visible, "Expected Clone 1 of Rot to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.assert.equal(t.getSprite("Rot").getClone(1).volume, 100, "Expected Clone 1 of Rot to have volume 100");
  t.dragSprite('Rot', 17.878957583695843, -1.8594326627751452, 1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 96, 1, "Expected Sprite Scheibe to face in direction 96 +-1");
  t.assert.equal(t.getSprite("Rot").direction, -57.38075692880719, 1, "Expected Sprite Rot to face in direction -57.38075692880719 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, -235, 5, "Expected Sprite Rot to have x-position -235 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -180, 5, "Expected Sprite Rot to have y-position -180 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.dragSprite('Rot', 28.028015350099817, -39.82663172772874, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 96, 1, "Expected Sprite Scheibe to face in direction 96 +-1");
  t.assert.equal(t.getSprite("Rot").direction, -57.38075692880719, 1, "Expected Sprite Rot to face in direction -57.38075692880719 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 55, 5, "Expected Sprite Rot to have x-position 55 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -8, 5, "Expected Sprite Rot to have y-position -8 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.keyPress('left arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 93, 1, "Expected Sprite Scheibe to face in direction 93 +-1");
  t.assert.equal(t.getSprite("Rot").direction, -57.38075692880719, 1, "Expected Sprite Rot to face in direction -57.38075692880719 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 124, 5, "Expected Sprite Rot to have x-position 124 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -37, 5, "Expected Sprite Rot to have y-position -37 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  await t.runForSteps(95);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).currentCostume, 0, "Expected Clone 1 of Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 1, "Expected Sprite Rot to have 1 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 93, 1, "Expected Sprite Scheibe to face in direction 93 +-1");
  t.assert.equal(t.getSprite("Rot").direction, -54.33286969555559, 1, "Expected Sprite Rot to face in direction -54.33286969555559 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).direction, -54.33286969555559, 1, "Expected Clone 1 of Rot to face in direction -54.33286969555559 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 3, "Expected Sprite Scheibe to be at layer 3");
  t.assert.equal(t.getSprite("Rot").layerOrder, 2, "Expected Sprite Rot to be at layer 2");
  t.assert.equal(t.getSprite("Rot").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 209, 5, "Expected Sprite Rot to have x-position 209 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -150, 5, "Expected Sprite Rot to have y-position -150 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, 204.35555555555555, 5, "Expected Clone 1 of Rot to have x-position 204.35555555555555 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, -146.66666666666666, 5, "Expected Clone 1 of Rot to have y-position -146.66666666666666 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.not(t.getSprite("Rot").getClone(1).sayText, "Expected Clone 1 of Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).size, 80, 1, "Expected Clone 1 of Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.ok(t.getSprite("Rot").getClone(1).visible, "Expected Clone 1 of Rot to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.assert.equal(t.getSprite("Rot").getClone(1).volume, 100, "Expected Clone 1 of Rot to have volume 100");
  t.dragSprite('Rot', 49.071057766364035, -0.9118841030061589, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).currentCostume, 0, "Expected Clone 1 of Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 1, "Expected Sprite Rot to have 1 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 93, 1, "Expected Sprite Scheibe to face in direction 93 +-1");
  t.assert.equal(t.getSprite("Rot").direction, -54.33286969555559, 1, "Expected Sprite Rot to face in direction -54.33286969555559 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).direction, -54.33286969555559, 1, "Expected Clone 1 of Rot to face in direction -54.33286969555559 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 3, "Expected Sprite Scheibe to be at layer 3");
  t.assert.equal(t.getSprite("Rot").layerOrder, 2, "Expected Sprite Rot to be at layer 2");
  t.assert.equal(t.getSprite("Rot").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 49.071057766364035, 5, "Expected Sprite Rot to have x-position 49.071057766364035 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -0.9118841030061589, 5, "Expected Sprite Rot to have y-position -0.9118841030061589 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, 202.03333333333333, 5, "Expected Clone 1 of Rot to have x-position 202.03333333333333 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, -145, 5, "Expected Clone 1 of Rot to have y-position -145 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.not(t.getSprite("Rot").getClone(1).sayText, "Expected Clone 1 of Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).size, 80, 1, "Expected Clone 1 of Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.ok(t.getSprite("Rot").getClone(1).visible, "Expected Clone 1 of Rot to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.assert.equal(t.getSprite("Rot").getClone(1).volume, 100, "Expected Clone 1 of Rot to have volume 100");
  await t.runForSteps(37);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).currentCostume, 0, "Expected Clone 1 of Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 1, "Expected Sprite Rot to have 1 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 93, 1, "Expected Sprite Scheibe to face in direction 93 +-1");
  t.assert.equal(t.getSprite("Rot").direction, -54.33286969555559, 1, "Expected Sprite Rot to face in direction -54.33286969555559 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).direction, -54.33286969555559, 1, "Expected Clone 1 of Rot to face in direction -54.33286969555559 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 3, "Expected Sprite Scheibe to be at layer 3");
  t.assert.equal(t.getSprite("Rot").layerOrder, 2, "Expected Sprite Rot to be at layer 2");
  t.assert.equal(t.getSprite("Rot").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 49.071057766364035, 5, "Expected Sprite Rot to have x-position 49.071057766364035 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -0.9118841030061589, 5, "Expected Sprite Rot to have y-position -0.9118841030061589 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, 113.78888888888889, 5, "Expected Clone 1 of Rot to have x-position 113.78888888888889 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, -81.66666666666667, 5, "Expected Clone 1 of Rot to have y-position -81.66666666666667 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.not(t.getSprite("Rot").getClone(1).sayText, "Expected Clone 1 of Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).size, 80, 1, "Expected Clone 1 of Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.ok(t.getSprite("Rot").getClone(1).visible, "Expected Clone 1 of Rot to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.assert.equal(t.getSprite("Rot").getClone(1).volume, 100, "Expected Clone 1 of Rot to have volume 100");
  t.dragSprite('Rot', -7.584423039646961, -16.008379021904997, 1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 93, 1, "Expected Sprite Scheibe to face in direction 93 +-1");
  t.assert.equal(t.getSprite("Rot").direction, -54.33286969555559, 1, "Expected Sprite Rot to face in direction -54.33286969555559 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 49.071057766364035, 5, "Expected Sprite Rot to have x-position 49.071057766364035 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -0.9118841030061589, 5, "Expected Sprite Rot to have y-position -0.9118841030061589 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  await t.runForSteps(99);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 93, 1, "Expected Sprite Scheibe to face in direction 93 +-1");
  t.assert.equal(t.getSprite("Rot").direction, -119.87599269168942, 1, "Expected Sprite Rot to face in direction -119.87599269168942 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 235, 5, "Expected Sprite Rot to have x-position 235 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 135, 5, "Expected Sprite Rot to have y-position 135 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.end();
}

module.exports = [
  {
      test: test0,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687939077717',
      type: 'standard',
  }
]
