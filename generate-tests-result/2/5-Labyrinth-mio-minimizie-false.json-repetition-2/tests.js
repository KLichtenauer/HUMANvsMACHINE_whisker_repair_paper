const test0 = async function (t) {
  t.dragSprite('Spieler', -140, -74, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Spieler").currentCostume, 0, "Expected Sprite Spieler to have costume 0");
  t.assert.equal(t.getSprite("Freundin").currentCostume, 0, "Expected Sprite Freundin to have costume 0");
  t.assert.equal(t.getSprite("Münzen").currentCostume, 0, "Expected Sprite Münzen to have costume 0");
  t.assert.equal(t.getSprite("Eis").currentCostume, 0, "Expected Sprite Eis to have costume 0");
  t.assert.equal(t.getSprite("Spieler").getCloneCount(), 0, "Expected Sprite Spieler to have 0 clones");
  t.assert.equal(t.getSprite("Freundin").getCloneCount(), 0, "Expected Sprite Freundin to have 0 clones");
  t.assert.equal(t.getSprite("Münzen").getCloneCount(), 0, "Expected Sprite Münzen to have 0 clones");
  t.assert.equal(t.getSprite("Eis").getCloneCount(), 0, "Expected Sprite Eis to have 0 clones");
  t.assert.equal(t.getSprite("Spieler").direction, -90, 1, "Expected Sprite Spieler to face in direction -90 +-1");
  t.assert.equal(t.getSprite("Freundin").direction, 90, 1, "Expected Sprite Freundin to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Münzen").direction, 90, 1, "Expected Sprite Münzen to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Eis").direction, 90, 1, "Expected Sprite Eis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Spieler").effects.color, 0, "Expected effect color of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.fisheye, 0, "Expected effect fisheye of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.whirl, 0, "Expected effect whirl of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.pixelate, 0, "Expected effect pixelate of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.mosaic, 0, "Expected effect mosaic of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.brightness, 0, "Expected effect brightness of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.ghost, 0, "Expected effect ghost of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.color, 0, "Expected effect color of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.fisheye, 0, "Expected effect fisheye of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.whirl, 0, "Expected effect whirl of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.pixelate, 0, "Expected effect pixelate of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.mosaic, 0, "Expected effect mosaic of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.brightness, 0, "Expected effect brightness of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.ghost, 0, "Expected effect ghost of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.color, 0, "Expected effect color of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.fisheye, 0, "Expected effect fisheye of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.whirl, 0, "Expected effect whirl of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.pixelate, 0, "Expected effect pixelate of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.mosaic, 0, "Expected effect mosaic of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.brightness, 0, "Expected effect brightness of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.ghost, 0, "Expected effect ghost of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Eis").effects.color, 0, "Expected effect color of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.fisheye, 0, "Expected effect fisheye of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.whirl, 0, "Expected effect whirl of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.pixelate, 0, "Expected effect pixelate of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.mosaic, 0, "Expected effect mosaic of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.brightness, 0, "Expected effect brightness of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.ghost, 0, "Expected effect ghost of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Spieler").layerOrder, 3, "Expected Sprite Spieler to be at layer 3");
  t.assert.equal(t.getSprite("Freundin").layerOrder, 5, "Expected Sprite Freundin to be at layer 5");
  t.assert.equal(t.getSprite("Münzen").layerOrder, 4, "Expected Sprite Münzen to be at layer 4");
  t.assert.equal(t.getSprite("Eis").layerOrder, 2, "Expected Sprite Eis to be at layer 2");
  t.assert.withinRange(t.getSprite("Spieler").x, -128, 5, "Expected Sprite Spieler to have x-position -128 +-5");
  t.assert.withinRange(t.getSprite("Spieler").y, -155, 5, "Expected Sprite Spieler to have y-position -155 +-5");
  t.assert.withinRange(t.getSprite("Freundin").x, 60, 5, "Expected Sprite Freundin to have x-position 60 +-5");
  t.assert.withinRange(t.getSprite("Freundin").y, -131, 5, "Expected Sprite Freundin to have y-position -131 +-5");
  t.assert.withinRange(t.getSprite("Münzen").x, -37, 5, "Expected Sprite Münzen to have x-position -37 +-5");
  t.assert.withinRange(t.getSprite("Münzen").y, 130, 5, "Expected Sprite Münzen to have y-position 130 +-5");
  t.assert.withinRange(t.getSprite("Eis").x, 195, 5, "Expected Sprite Eis to have x-position 195 +-5");
  t.assert.withinRange(t.getSprite("Eis").y, -158, 5, "Expected Sprite Eis to have y-position -158 +-5");
  t.assert.not(t.getSprite("Spieler").sayText, "Expected Sprite Spieler not to say anything");
  t.assert.equal(t.getSprite("Freundin").sayText, "Auf geht's!", "Expected Sprite Freundin to say Auf geht's!");
  t.assert.not(t.getSprite("Münzen").sayText, "Expected Sprite Münzen not to say anything");
  t.assert.not(t.getSprite("Eis").sayText, "Expected Sprite Eis not to say anything");
  t.assert.withinRange(t.getSprite("Spieler").size, 8, 1, "Expected Sprite Spieler to have size 8 +-1");
  t.assert.withinRange(t.getSprite("Freundin").size, 50, 1, "Expected Sprite Freundin to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Münzen").size, 50, 1, "Expected Sprite Münzen to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Eis").size, 20, 1, "Expected Sprite Eis to have size 20 +-1");
  t.assert.ok(t.getSprite("Spieler").visible, "Expected Sprite Spieler to be visible");
  t.assert.ok(t.getSprite("Freundin").visible, "Expected Sprite Freundin to be visible");
  t.assert.ok(t.getSprite("Münzen").visible, "Expected Sprite Münzen to be visible");
  t.assert.ok(t.getSprite("Eis").visible, "Expected Sprite Eis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Spieler").volume, 100, "Expected Sprite Spieler to have volume 100");
  t.assert.equal(t.getSprite("Freundin").volume, 100, "Expected Sprite Freundin to have volume 100");
  t.assert.equal(t.getSprite("Münzen").volume, 100, "Expected Sprite Münzen to have volume 100");
  t.assert.equal(t.getSprite("Eis").volume, 100, "Expected Sprite Eis to have volume 100");
  t.dragSprite('Spieler', 195, -158, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Spieler").currentCostume, 0, "Expected Sprite Spieler to have costume 0");
  t.assert.equal(t.getSprite("Freundin").currentCostume, 0, "Expected Sprite Freundin to have costume 0");
  t.assert.equal(t.getSprite("Münzen").currentCostume, 0, "Expected Sprite Münzen to have costume 0");
  t.assert.equal(t.getSprite("Eis").currentCostume, 0, "Expected Sprite Eis to have costume 0");
  t.assert.equal(t.getSprite("Spieler").getCloneCount(), 0, "Expected Sprite Spieler to have 0 clones");
  t.assert.equal(t.getSprite("Freundin").getCloneCount(), 0, "Expected Sprite Freundin to have 0 clones");
  t.assert.equal(t.getSprite("Münzen").getCloneCount(), 0, "Expected Sprite Münzen to have 0 clones");
  t.assert.equal(t.getSprite("Eis").getCloneCount(), 0, "Expected Sprite Eis to have 0 clones");
  t.assert.equal(t.getSprite("Spieler").direction, -90, 1, "Expected Sprite Spieler to face in direction -90 +-1");
  t.assert.equal(t.getSprite("Freundin").direction, 90, 1, "Expected Sprite Freundin to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Münzen").direction, 90, 1, "Expected Sprite Münzen to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Eis").direction, 90, 1, "Expected Sprite Eis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Spieler").effects.color, 0, "Expected effect color of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.fisheye, 0, "Expected effect fisheye of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.whirl, 0, "Expected effect whirl of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.pixelate, 0, "Expected effect pixelate of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.mosaic, 0, "Expected effect mosaic of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.brightness, 0, "Expected effect brightness of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.ghost, 0, "Expected effect ghost of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.color, 0, "Expected effect color of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.fisheye, 0, "Expected effect fisheye of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.whirl, 0, "Expected effect whirl of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.pixelate, 0, "Expected effect pixelate of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.mosaic, 0, "Expected effect mosaic of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.brightness, 0, "Expected effect brightness of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.ghost, 0, "Expected effect ghost of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.color, 0, "Expected effect color of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.fisheye, 0, "Expected effect fisheye of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.whirl, 0, "Expected effect whirl of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.pixelate, 0, "Expected effect pixelate of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.mosaic, 0, "Expected effect mosaic of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.brightness, 0, "Expected effect brightness of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.ghost, 0, "Expected effect ghost of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Eis").effects.color, 0, "Expected effect color of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.fisheye, 0, "Expected effect fisheye of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.whirl, 0, "Expected effect whirl of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.pixelate, 0, "Expected effect pixelate of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.mosaic, 0, "Expected effect mosaic of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.brightness, 0, "Expected effect brightness of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.ghost, 0, "Expected effect ghost of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Spieler").layerOrder, 3, "Expected Sprite Spieler to be at layer 3");
  t.assert.equal(t.getSprite("Freundin").layerOrder, 5, "Expected Sprite Freundin to be at layer 5");
  t.assert.equal(t.getSprite("Münzen").layerOrder, 4, "Expected Sprite Münzen to be at layer 4");
  t.assert.equal(t.getSprite("Eis").layerOrder, 2, "Expected Sprite Eis to be at layer 2");
  t.assert.withinRange(t.getSprite("Spieler").x, 195, 5, "Expected Sprite Spieler to have x-position 195 +-5");
  t.assert.withinRange(t.getSprite("Spieler").y, -158, 5, "Expected Sprite Spieler to have y-position -158 +-5");
  t.assert.withinRange(t.getSprite("Freundin").x, 60, 5, "Expected Sprite Freundin to have x-position 60 +-5");
  t.assert.withinRange(t.getSprite("Freundin").y, -131, 5, "Expected Sprite Freundin to have y-position -131 +-5");
  t.assert.withinRange(t.getSprite("Münzen").x, -37, 5, "Expected Sprite Münzen to have x-position -37 +-5");
  t.assert.withinRange(t.getSprite("Münzen").y, 130, 5, "Expected Sprite Münzen to have y-position 130 +-5");
  t.assert.withinRange(t.getSprite("Eis").x, 195, 5, "Expected Sprite Eis to have x-position 195 +-5");
  t.assert.withinRange(t.getSprite("Eis").y, -158, 5, "Expected Sprite Eis to have y-position -158 +-5");
  t.assert.not(t.getSprite("Spieler").sayText, "Expected Sprite Spieler not to say anything");
  t.assert.equal(t.getSprite("Freundin").sayText, "Auf geht's!", "Expected Sprite Freundin to say Auf geht's!");
  t.assert.not(t.getSprite("Münzen").sayText, "Expected Sprite Münzen not to say anything");
  t.assert.not(t.getSprite("Eis").sayText, "Expected Sprite Eis not to say anything");
  t.assert.withinRange(t.getSprite("Spieler").size, 8, 1, "Expected Sprite Spieler to have size 8 +-1");
  t.assert.withinRange(t.getSprite("Freundin").size, 50, 1, "Expected Sprite Freundin to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Münzen").size, 50, 1, "Expected Sprite Münzen to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Eis").size, 20, 1, "Expected Sprite Eis to have size 20 +-1");
  t.assert.ok(t.getSprite("Spieler").visible, "Expected Sprite Spieler to be visible");
  t.assert.ok(t.getSprite("Freundin").visible, "Expected Sprite Freundin to be visible");
  t.assert.ok(t.getSprite("Münzen").visible, "Expected Sprite Münzen to be visible");
  t.assert.ok(t.getSprite("Eis").visible, "Expected Sprite Eis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Spieler").volume, 100, "Expected Sprite Spieler to have volume 100");
  t.assert.equal(t.getSprite("Freundin").volume, 100, "Expected Sprite Freundin to have volume 100");
  t.assert.equal(t.getSprite("Münzen").volume, 100, "Expected Sprite Münzen to have volume 100");
  t.assert.equal(t.getSprite("Eis").volume, 100, "Expected Sprite Eis to have volume 100");
  t.dragSprite('Spieler', -138.070512906032, -166.92579989214022, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Spieler").currentCostume, 0, "Expected Sprite Spieler to have costume 0");
  t.assert.equal(t.getSprite("Freundin").currentCostume, 0, "Expected Sprite Freundin to have costume 0");
  t.assert.equal(t.getSprite("Münzen").currentCostume, 0, "Expected Sprite Münzen to have costume 0");
  t.assert.equal(t.getSprite("Eis").currentCostume, 0, "Expected Sprite Eis to have costume 0");
  t.assert.equal(t.getSprite("Spieler").getCloneCount(), 0, "Expected Sprite Spieler to have 0 clones");
  t.assert.equal(t.getSprite("Freundin").getCloneCount(), 0, "Expected Sprite Freundin to have 0 clones");
  t.assert.equal(t.getSprite("Münzen").getCloneCount(), 0, "Expected Sprite Münzen to have 0 clones");
  t.assert.equal(t.getSprite("Eis").getCloneCount(), 0, "Expected Sprite Eis to have 0 clones");
  t.assert.equal(t.getSprite("Spieler").direction, -90, 1, "Expected Sprite Spieler to face in direction -90 +-1");
  t.assert.equal(t.getSprite("Freundin").direction, 90, 1, "Expected Sprite Freundin to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Münzen").direction, 90, 1, "Expected Sprite Münzen to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Eis").direction, 90, 1, "Expected Sprite Eis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Spieler").effects.color, 0, "Expected effect color of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.fisheye, 0, "Expected effect fisheye of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.whirl, 0, "Expected effect whirl of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.pixelate, 0, "Expected effect pixelate of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.mosaic, 0, "Expected effect mosaic of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.brightness, 0, "Expected effect brightness of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.ghost, 0, "Expected effect ghost of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.color, 0, "Expected effect color of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.fisheye, 0, "Expected effect fisheye of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.whirl, 0, "Expected effect whirl of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.pixelate, 0, "Expected effect pixelate of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.mosaic, 0, "Expected effect mosaic of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.brightness, 0, "Expected effect brightness of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.ghost, 0, "Expected effect ghost of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.color, 0, "Expected effect color of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.fisheye, 0, "Expected effect fisheye of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.whirl, 0, "Expected effect whirl of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.pixelate, 0, "Expected effect pixelate of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.mosaic, 0, "Expected effect mosaic of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.brightness, 0, "Expected effect brightness of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.ghost, 0, "Expected effect ghost of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Eis").effects.color, 0, "Expected effect color of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.fisheye, 0, "Expected effect fisheye of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.whirl, 0, "Expected effect whirl of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.pixelate, 0, "Expected effect pixelate of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.mosaic, 0, "Expected effect mosaic of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.brightness, 0, "Expected effect brightness of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.ghost, 0, "Expected effect ghost of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Spieler").layerOrder, 3, "Expected Sprite Spieler to be at layer 3");
  t.assert.equal(t.getSprite("Freundin").layerOrder, 5, "Expected Sprite Freundin to be at layer 5");
  t.assert.equal(t.getSprite("Münzen").layerOrder, 4, "Expected Sprite Münzen to be at layer 4");
  t.assert.equal(t.getSprite("Eis").layerOrder, 2, "Expected Sprite Eis to be at layer 2");
  t.assert.withinRange(t.getSprite("Spieler").x, -138.070512906032, 5, "Expected Sprite Spieler to have x-position -138.070512906032 +-5");
  t.assert.withinRange(t.getSprite("Spieler").y, -166.92579989214022, 5, "Expected Sprite Spieler to have y-position -166.92579989214022 +-5");
  t.assert.withinRange(t.getSprite("Freundin").x, 60, 5, "Expected Sprite Freundin to have x-position 60 +-5");
  t.assert.withinRange(t.getSprite("Freundin").y, -131, 5, "Expected Sprite Freundin to have y-position -131 +-5");
  t.assert.withinRange(t.getSprite("Münzen").x, -37, 5, "Expected Sprite Münzen to have x-position -37 +-5");
  t.assert.withinRange(t.getSprite("Münzen").y, 130, 5, "Expected Sprite Münzen to have y-position 130 +-5");
  t.assert.withinRange(t.getSprite("Eis").x, 195, 5, "Expected Sprite Eis to have x-position 195 +-5");
  t.assert.withinRange(t.getSprite("Eis").y, -158, 5, "Expected Sprite Eis to have y-position -158 +-5");
  t.assert.not(t.getSprite("Spieler").sayText, "Expected Sprite Spieler not to say anything");
  t.assert.equal(t.getSprite("Freundin").sayText, "Auf geht's!", "Expected Sprite Freundin to say Auf geht's!");
  t.assert.not(t.getSprite("Münzen").sayText, "Expected Sprite Münzen not to say anything");
  t.assert.not(t.getSprite("Eis").sayText, "Expected Sprite Eis not to say anything");
  t.assert.withinRange(t.getSprite("Spieler").size, 8, 1, "Expected Sprite Spieler to have size 8 +-1");
  t.assert.withinRange(t.getSprite("Freundin").size, 50, 1, "Expected Sprite Freundin to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Münzen").size, 50, 1, "Expected Sprite Münzen to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Eis").size, 20, 1, "Expected Sprite Eis to have size 20 +-1");
  t.assert.ok(t.getSprite("Spieler").visible, "Expected Sprite Spieler to be visible");
  t.assert.ok(t.getSprite("Freundin").visible, "Expected Sprite Freundin to be visible");
  t.assert.ok(t.getSprite("Münzen").visible, "Expected Sprite Münzen to be visible");
  t.assert.ok(t.getSprite("Eis").visible, "Expected Sprite Eis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Spieler").volume, 100, "Expected Sprite Spieler to have volume 100");
  t.assert.equal(t.getSprite("Freundin").volume, 100, "Expected Sprite Freundin to have volume 100");
  t.assert.equal(t.getSprite("Münzen").volume, 100, "Expected Sprite Münzen to have volume 100");
  t.assert.equal(t.getSprite("Eis").volume, 100, "Expected Sprite Eis to have volume 100");
  t.dragSprite('Münzen', -113.67185308949053, -65.38321369661445, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Spieler").currentCostume, 0, "Expected Sprite Spieler to have costume 0");
  t.assert.equal(t.getSprite("Freundin").currentCostume, 0, "Expected Sprite Freundin to have costume 0");
  t.assert.equal(t.getSprite("Münzen").currentCostume, 0, "Expected Sprite Münzen to have costume 0");
  t.assert.equal(t.getSprite("Eis").currentCostume, 0, "Expected Sprite Eis to have costume 0");
  t.assert.equal(t.getSprite("Spieler").getCloneCount(), 0, "Expected Sprite Spieler to have 0 clones");
  t.assert.equal(t.getSprite("Freundin").getCloneCount(), 0, "Expected Sprite Freundin to have 0 clones");
  t.assert.equal(t.getSprite("Münzen").getCloneCount(), 0, "Expected Sprite Münzen to have 0 clones");
  t.assert.equal(t.getSprite("Eis").getCloneCount(), 0, "Expected Sprite Eis to have 0 clones");
  t.assert.equal(t.getSprite("Spieler").direction, -90, 1, "Expected Sprite Spieler to face in direction -90 +-1");
  t.assert.equal(t.getSprite("Freundin").direction, 90, 1, "Expected Sprite Freundin to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Münzen").direction, 90, 1, "Expected Sprite Münzen to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Eis").direction, 90, 1, "Expected Sprite Eis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Spieler").effects.color, 0, "Expected effect color of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.fisheye, 0, "Expected effect fisheye of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.whirl, 0, "Expected effect whirl of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.pixelate, 0, "Expected effect pixelate of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.mosaic, 0, "Expected effect mosaic of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.brightness, 0, "Expected effect brightness of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.ghost, 0, "Expected effect ghost of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.color, 0, "Expected effect color of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.fisheye, 0, "Expected effect fisheye of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.whirl, 0, "Expected effect whirl of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.pixelate, 0, "Expected effect pixelate of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.mosaic, 0, "Expected effect mosaic of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.brightness, 0, "Expected effect brightness of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.ghost, 0, "Expected effect ghost of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.color, 0, "Expected effect color of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.fisheye, 0, "Expected effect fisheye of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.whirl, 0, "Expected effect whirl of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.pixelate, 0, "Expected effect pixelate of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.mosaic, 0, "Expected effect mosaic of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.brightness, 0, "Expected effect brightness of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.ghost, 0, "Expected effect ghost of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Eis").effects.color, 0, "Expected effect color of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.fisheye, 0, "Expected effect fisheye of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.whirl, 0, "Expected effect whirl of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.pixelate, 0, "Expected effect pixelate of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.mosaic, 0, "Expected effect mosaic of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.brightness, 0, "Expected effect brightness of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.ghost, 0, "Expected effect ghost of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Spieler").layerOrder, 3, "Expected Sprite Spieler to be at layer 3");
  t.assert.equal(t.getSprite("Freundin").layerOrder, 5, "Expected Sprite Freundin to be at layer 5");
  t.assert.equal(t.getSprite("Münzen").layerOrder, 4, "Expected Sprite Münzen to be at layer 4");
  t.assert.equal(t.getSprite("Eis").layerOrder, 2, "Expected Sprite Eis to be at layer 2");
  t.assert.withinRange(t.getSprite("Spieler").x, -138.070512906032, 5, "Expected Sprite Spieler to have x-position -138.070512906032 +-5");
  t.assert.withinRange(t.getSprite("Spieler").y, -166.92579989214022, 5, "Expected Sprite Spieler to have y-position -166.92579989214022 +-5");
  t.assert.withinRange(t.getSprite("Freundin").x, 60, 5, "Expected Sprite Freundin to have x-position 60 +-5");
  t.assert.withinRange(t.getSprite("Freundin").y, -131, 5, "Expected Sprite Freundin to have y-position -131 +-5");
  t.assert.withinRange(t.getSprite("Münzen").x, -113.67185308949053, 5, "Expected Sprite Münzen to have x-position -113.67185308949053 +-5");
  t.assert.withinRange(t.getSprite("Münzen").y, -65.38321369661445, 5, "Expected Sprite Münzen to have y-position -65.38321369661445 +-5");
  t.assert.withinRange(t.getSprite("Eis").x, 195, 5, "Expected Sprite Eis to have x-position 195 +-5");
  t.assert.withinRange(t.getSprite("Eis").y, -158, 5, "Expected Sprite Eis to have y-position -158 +-5");
  t.assert.not(t.getSprite("Spieler").sayText, "Expected Sprite Spieler not to say anything");
  t.assert.equal(t.getSprite("Freundin").sayText, "Auf geht's!", "Expected Sprite Freundin to say Auf geht's!");
  t.assert.not(t.getSprite("Münzen").sayText, "Expected Sprite Münzen not to say anything");
  t.assert.not(t.getSprite("Eis").sayText, "Expected Sprite Eis not to say anything");
  t.assert.withinRange(t.getSprite("Spieler").size, 8, 1, "Expected Sprite Spieler to have size 8 +-1");
  t.assert.withinRange(t.getSprite("Freundin").size, 50, 1, "Expected Sprite Freundin to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Münzen").size, 50, 1, "Expected Sprite Münzen to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Eis").size, 20, 1, "Expected Sprite Eis to have size 20 +-1");
  t.assert.ok(t.getSprite("Spieler").visible, "Expected Sprite Spieler to be visible");
  t.assert.ok(t.getSprite("Freundin").visible, "Expected Sprite Freundin to be visible");
  t.assert.ok(t.getSprite("Münzen").visible, "Expected Sprite Münzen to be visible");
  t.assert.ok(t.getSprite("Eis").visible, "Expected Sprite Eis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Spieler").volume, 100, "Expected Sprite Spieler to have volume 100");
  t.assert.equal(t.getSprite("Freundin").volume, 100, "Expected Sprite Freundin to have volume 100");
  t.assert.equal(t.getSprite("Münzen").volume, 100, "Expected Sprite Münzen to have volume 100");
  t.assert.equal(t.getSprite("Eis").volume, 100, "Expected Sprite Eis to have volume 100");
  t.dragSprite('Spieler', -129.1435734715807, -140.17672681451998, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Spieler").currentCostume, 0, "Expected Sprite Spieler to have costume 0");
  t.assert.equal(t.getSprite("Freundin").currentCostume, 0, "Expected Sprite Freundin to have costume 0");
  t.assert.equal(t.getSprite("Münzen").currentCostume, 0, "Expected Sprite Münzen to have costume 0");
  t.assert.equal(t.getSprite("Eis").currentCostume, 0, "Expected Sprite Eis to have costume 0");
  t.assert.equal(t.getSprite("Spieler").getCloneCount(), 0, "Expected Sprite Spieler to have 0 clones");
  t.assert.equal(t.getSprite("Freundin").getCloneCount(), 0, "Expected Sprite Freundin to have 0 clones");
  t.assert.equal(t.getSprite("Münzen").getCloneCount(), 0, "Expected Sprite Münzen to have 0 clones");
  t.assert.equal(t.getSprite("Eis").getCloneCount(), 0, "Expected Sprite Eis to have 0 clones");
  t.assert.equal(t.getSprite("Spieler").direction, -90, 1, "Expected Sprite Spieler to face in direction -90 +-1");
  t.assert.equal(t.getSprite("Freundin").direction, 90, 1, "Expected Sprite Freundin to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Münzen").direction, 90, 1, "Expected Sprite Münzen to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Eis").direction, 90, 1, "Expected Sprite Eis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Spieler").effects.color, 0, "Expected effect color of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.fisheye, 0, "Expected effect fisheye of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.whirl, 0, "Expected effect whirl of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.pixelate, 0, "Expected effect pixelate of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.mosaic, 0, "Expected effect mosaic of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.brightness, 0, "Expected effect brightness of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.ghost, 0, "Expected effect ghost of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.color, 0, "Expected effect color of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.fisheye, 0, "Expected effect fisheye of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.whirl, 0, "Expected effect whirl of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.pixelate, 0, "Expected effect pixelate of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.mosaic, 0, "Expected effect mosaic of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.brightness, 0, "Expected effect brightness of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.ghost, 0, "Expected effect ghost of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.color, 0, "Expected effect color of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.fisheye, 0, "Expected effect fisheye of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.whirl, 0, "Expected effect whirl of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.pixelate, 0, "Expected effect pixelate of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.mosaic, 0, "Expected effect mosaic of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.brightness, 0, "Expected effect brightness of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.ghost, 0, "Expected effect ghost of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Eis").effects.color, 0, "Expected effect color of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.fisheye, 0, "Expected effect fisheye of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.whirl, 0, "Expected effect whirl of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.pixelate, 0, "Expected effect pixelate of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.mosaic, 0, "Expected effect mosaic of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.brightness, 0, "Expected effect brightness of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.ghost, 0, "Expected effect ghost of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Spieler").layerOrder, 3, "Expected Sprite Spieler to be at layer 3");
  t.assert.equal(t.getSprite("Freundin").layerOrder, 5, "Expected Sprite Freundin to be at layer 5");
  t.assert.equal(t.getSprite("Münzen").layerOrder, 4, "Expected Sprite Münzen to be at layer 4");
  t.assert.equal(t.getSprite("Eis").layerOrder, 2, "Expected Sprite Eis to be at layer 2");
  t.assert.withinRange(t.getSprite("Spieler").x, -129.1435734715807, 5, "Expected Sprite Spieler to have x-position -129.1435734715807 +-5");
  t.assert.withinRange(t.getSprite("Spieler").y, -140.17672681451998, 5, "Expected Sprite Spieler to have y-position -140.17672681451998 +-5");
  t.assert.withinRange(t.getSprite("Freundin").x, 60, 5, "Expected Sprite Freundin to have x-position 60 +-5");
  t.assert.withinRange(t.getSprite("Freundin").y, -131, 5, "Expected Sprite Freundin to have y-position -131 +-5");
  t.assert.withinRange(t.getSprite("Münzen").x, -113.67185308949053, 5, "Expected Sprite Münzen to have x-position -113.67185308949053 +-5");
  t.assert.withinRange(t.getSprite("Münzen").y, -65.38321369661445, 5, "Expected Sprite Münzen to have y-position -65.38321369661445 +-5");
  t.assert.withinRange(t.getSprite("Eis").x, 195, 5, "Expected Sprite Eis to have x-position 195 +-5");
  t.assert.withinRange(t.getSprite("Eis").y, -158, 5, "Expected Sprite Eis to have y-position -158 +-5");
  t.assert.not(t.getSprite("Spieler").sayText, "Expected Sprite Spieler not to say anything");
  t.assert.equal(t.getSprite("Freundin").sayText, "Auf geht's!", "Expected Sprite Freundin to say Auf geht's!");
  t.assert.not(t.getSprite("Münzen").sayText, "Expected Sprite Münzen not to say anything");
  t.assert.not(t.getSprite("Eis").sayText, "Expected Sprite Eis not to say anything");
  t.assert.withinRange(t.getSprite("Spieler").size, 8, 1, "Expected Sprite Spieler to have size 8 +-1");
  t.assert.withinRange(t.getSprite("Freundin").size, 50, 1, "Expected Sprite Freundin to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Münzen").size, 50, 1, "Expected Sprite Münzen to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Eis").size, 20, 1, "Expected Sprite Eis to have size 20 +-1");
  t.assert.ok(t.getSprite("Spieler").visible, "Expected Sprite Spieler to be visible");
  t.assert.ok(t.getSprite("Freundin").visible, "Expected Sprite Freundin to be visible");
  t.assert.ok(t.getSprite("Münzen").visible, "Expected Sprite Münzen to be visible");
  t.assert.ok(t.getSprite("Eis").visible, "Expected Sprite Eis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Spieler").volume, 100, "Expected Sprite Spieler to have volume 100");
  t.assert.equal(t.getSprite("Freundin").volume, 100, "Expected Sprite Freundin to have volume 100");
  t.assert.equal(t.getSprite("Münzen").volume, 100, "Expected Sprite Münzen to have volume 100");
  t.assert.equal(t.getSprite("Eis").volume, 100, "Expected Sprite Eis to have volume 100");
  t.dragSprite('Spieler', 212.5871630162911, -154.52623846564705, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Spieler").currentCostume, 0, "Expected Sprite Spieler to have costume 0");
  t.assert.equal(t.getSprite("Freundin").currentCostume, 0, "Expected Sprite Freundin to have costume 0");
  t.assert.equal(t.getSprite("Münzen").currentCostume, 0, "Expected Sprite Münzen to have costume 0");
  t.assert.equal(t.getSprite("Eis").currentCostume, 0, "Expected Sprite Eis to have costume 0");
  t.assert.equal(t.getSprite("Spieler").getCloneCount(), 0, "Expected Sprite Spieler to have 0 clones");
  t.assert.equal(t.getSprite("Freundin").getCloneCount(), 0, "Expected Sprite Freundin to have 0 clones");
  t.assert.equal(t.getSprite("Münzen").getCloneCount(), 0, "Expected Sprite Münzen to have 0 clones");
  t.assert.equal(t.getSprite("Eis").getCloneCount(), 0, "Expected Sprite Eis to have 0 clones");
  t.assert.equal(t.getSprite("Spieler").direction, -90, 1, "Expected Sprite Spieler to face in direction -90 +-1");
  t.assert.equal(t.getSprite("Freundin").direction, 90, 1, "Expected Sprite Freundin to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Münzen").direction, 90, 1, "Expected Sprite Münzen to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Eis").direction, 90, 1, "Expected Sprite Eis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Spieler").effects.color, 0, "Expected effect color of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.fisheye, 0, "Expected effect fisheye of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.whirl, 0, "Expected effect whirl of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.pixelate, 0, "Expected effect pixelate of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.mosaic, 0, "Expected effect mosaic of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.brightness, 0, "Expected effect brightness of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.ghost, 0, "Expected effect ghost of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.color, 0, "Expected effect color of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.fisheye, 0, "Expected effect fisheye of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.whirl, 0, "Expected effect whirl of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.pixelate, 0, "Expected effect pixelate of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.mosaic, 0, "Expected effect mosaic of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.brightness, 0, "Expected effect brightness of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.ghost, 0, "Expected effect ghost of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.color, 0, "Expected effect color of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.fisheye, 0, "Expected effect fisheye of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.whirl, 0, "Expected effect whirl of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.pixelate, 0, "Expected effect pixelate of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.mosaic, 0, "Expected effect mosaic of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.brightness, 0, "Expected effect brightness of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.ghost, 0, "Expected effect ghost of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Eis").effects.color, 0, "Expected effect color of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.fisheye, 0, "Expected effect fisheye of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.whirl, 0, "Expected effect whirl of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.pixelate, 0, "Expected effect pixelate of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.mosaic, 0, "Expected effect mosaic of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.brightness, 0, "Expected effect brightness of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.ghost, 0, "Expected effect ghost of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Spieler").layerOrder, 3, "Expected Sprite Spieler to be at layer 3");
  t.assert.equal(t.getSprite("Freundin").layerOrder, 5, "Expected Sprite Freundin to be at layer 5");
  t.assert.equal(t.getSprite("Münzen").layerOrder, 4, "Expected Sprite Münzen to be at layer 4");
  t.assert.equal(t.getSprite("Eis").layerOrder, 2, "Expected Sprite Eis to be at layer 2");
  t.assert.withinRange(t.getSprite("Spieler").x, 212.5871630162911, 5, "Expected Sprite Spieler to have x-position 212.5871630162911 +-5");
  t.assert.withinRange(t.getSprite("Spieler").y, -154.52623846564705, 5, "Expected Sprite Spieler to have y-position -154.52623846564705 +-5");
  t.assert.withinRange(t.getSprite("Freundin").x, 60, 5, "Expected Sprite Freundin to have x-position 60 +-5");
  t.assert.withinRange(t.getSprite("Freundin").y, -131, 5, "Expected Sprite Freundin to have y-position -131 +-5");
  t.assert.withinRange(t.getSprite("Münzen").x, -113.67185308949053, 5, "Expected Sprite Münzen to have x-position -113.67185308949053 +-5");
  t.assert.withinRange(t.getSprite("Münzen").y, -65.38321369661445, 5, "Expected Sprite Münzen to have y-position -65.38321369661445 +-5");
  t.assert.withinRange(t.getSprite("Eis").x, 195, 5, "Expected Sprite Eis to have x-position 195 +-5");
  t.assert.withinRange(t.getSprite("Eis").y, -158, 5, "Expected Sprite Eis to have y-position -158 +-5");
  t.assert.not(t.getSprite("Spieler").sayText, "Expected Sprite Spieler not to say anything");
  t.assert.equal(t.getSprite("Freundin").sayText, "Auf geht's!", "Expected Sprite Freundin to say Auf geht's!");
  t.assert.not(t.getSprite("Münzen").sayText, "Expected Sprite Münzen not to say anything");
  t.assert.not(t.getSprite("Eis").sayText, "Expected Sprite Eis not to say anything");
  t.assert.withinRange(t.getSprite("Spieler").size, 8, 1, "Expected Sprite Spieler to have size 8 +-1");
  t.assert.withinRange(t.getSprite("Freundin").size, 50, 1, "Expected Sprite Freundin to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Münzen").size, 50, 1, "Expected Sprite Münzen to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Eis").size, 20, 1, "Expected Sprite Eis to have size 20 +-1");
  t.assert.ok(t.getSprite("Spieler").visible, "Expected Sprite Spieler to be visible");
  t.assert.ok(t.getSprite("Freundin").visible, "Expected Sprite Freundin to be visible");
  t.assert.ok(t.getSprite("Münzen").visible, "Expected Sprite Münzen to be visible");
  t.assert.ok(t.getSprite("Eis").visible, "Expected Sprite Eis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Spieler").volume, 100, "Expected Sprite Spieler to have volume 100");
  t.assert.equal(t.getSprite("Freundin").volume, 100, "Expected Sprite Freundin to have volume 100");
  t.assert.equal(t.getSprite("Münzen").volume, 100, "Expected Sprite Münzen to have volume 100");
  t.assert.equal(t.getSprite("Eis").volume, 100, "Expected Sprite Eis to have volume 100");
  t.dragSprite('Spieler', -127.82326370924794, -121.60243158437925, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Spieler").currentCostume, 0, "Expected Sprite Spieler to have costume 0");
  t.assert.equal(t.getSprite("Freundin").currentCostume, 0, "Expected Sprite Freundin to have costume 0");
  t.assert.equal(t.getSprite("Münzen").currentCostume, 0, "Expected Sprite Münzen to have costume 0");
  t.assert.equal(t.getSprite("Eis").currentCostume, 0, "Expected Sprite Eis to have costume 0");
  t.assert.equal(t.getSprite("Spieler").getCloneCount(), 0, "Expected Sprite Spieler to have 0 clones");
  t.assert.equal(t.getSprite("Freundin").getCloneCount(), 0, "Expected Sprite Freundin to have 0 clones");
  t.assert.equal(t.getSprite("Münzen").getCloneCount(), 0, "Expected Sprite Münzen to have 0 clones");
  t.assert.equal(t.getSprite("Eis").getCloneCount(), 0, "Expected Sprite Eis to have 0 clones");
  t.assert.equal(t.getSprite("Spieler").direction, -90, 1, "Expected Sprite Spieler to face in direction -90 +-1");
  t.assert.equal(t.getSprite("Freundin").direction, 90, 1, "Expected Sprite Freundin to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Münzen").direction, 90, 1, "Expected Sprite Münzen to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Eis").direction, 90, 1, "Expected Sprite Eis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Spieler").effects.color, 0, "Expected effect color of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.fisheye, 0, "Expected effect fisheye of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.whirl, 0, "Expected effect whirl of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.pixelate, 0, "Expected effect pixelate of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.mosaic, 0, "Expected effect mosaic of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.brightness, 0, "Expected effect brightness of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.ghost, 0, "Expected effect ghost of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.color, 0, "Expected effect color of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.fisheye, 0, "Expected effect fisheye of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.whirl, 0, "Expected effect whirl of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.pixelate, 0, "Expected effect pixelate of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.mosaic, 0, "Expected effect mosaic of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.brightness, 0, "Expected effect brightness of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.ghost, 0, "Expected effect ghost of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.color, 0, "Expected effect color of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.fisheye, 0, "Expected effect fisheye of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.whirl, 0, "Expected effect whirl of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.pixelate, 0, "Expected effect pixelate of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.mosaic, 0, "Expected effect mosaic of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.brightness, 0, "Expected effect brightness of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.ghost, 0, "Expected effect ghost of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Eis").effects.color, 0, "Expected effect color of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.fisheye, 0, "Expected effect fisheye of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.whirl, 0, "Expected effect whirl of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.pixelate, 0, "Expected effect pixelate of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.mosaic, 0, "Expected effect mosaic of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.brightness, 0, "Expected effect brightness of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.ghost, 0, "Expected effect ghost of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Spieler").layerOrder, 3, "Expected Sprite Spieler to be at layer 3");
  t.assert.equal(t.getSprite("Freundin").layerOrder, 5, "Expected Sprite Freundin to be at layer 5");
  t.assert.equal(t.getSprite("Münzen").layerOrder, 4, "Expected Sprite Münzen to be at layer 4");
  t.assert.equal(t.getSprite("Eis").layerOrder, 2, "Expected Sprite Eis to be at layer 2");
  t.assert.withinRange(t.getSprite("Spieler").x, -127.82326370924794, 5, "Expected Sprite Spieler to have x-position -127.82326370924794 +-5");
  t.assert.withinRange(t.getSprite("Spieler").y, -121.60243158437925, 5, "Expected Sprite Spieler to have y-position -121.60243158437925 +-5");
  t.assert.withinRange(t.getSprite("Freundin").x, 60, 5, "Expected Sprite Freundin to have x-position 60 +-5");
  t.assert.withinRange(t.getSprite("Freundin").y, -131, 5, "Expected Sprite Freundin to have y-position -131 +-5");
  t.assert.withinRange(t.getSprite("Münzen").x, -113.67185308949053, 5, "Expected Sprite Münzen to have x-position -113.67185308949053 +-5");
  t.assert.withinRange(t.getSprite("Münzen").y, -65.38321369661445, 5, "Expected Sprite Münzen to have y-position -65.38321369661445 +-5");
  t.assert.withinRange(t.getSprite("Eis").x, 195, 5, "Expected Sprite Eis to have x-position 195 +-5");
  t.assert.withinRange(t.getSprite("Eis").y, -158, 5, "Expected Sprite Eis to have y-position -158 +-5");
  t.assert.not(t.getSprite("Spieler").sayText, "Expected Sprite Spieler not to say anything");
  t.assert.equal(t.getSprite("Freundin").sayText, "Auf geht's!", "Expected Sprite Freundin to say Auf geht's!");
  t.assert.not(t.getSprite("Münzen").sayText, "Expected Sprite Münzen not to say anything");
  t.assert.not(t.getSprite("Eis").sayText, "Expected Sprite Eis not to say anything");
  t.assert.withinRange(t.getSprite("Spieler").size, 8, 1, "Expected Sprite Spieler to have size 8 +-1");
  t.assert.withinRange(t.getSprite("Freundin").size, 50, 1, "Expected Sprite Freundin to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Münzen").size, 50, 1, "Expected Sprite Münzen to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Eis").size, 20, 1, "Expected Sprite Eis to have size 20 +-1");
  t.assert.ok(t.getSprite("Spieler").visible, "Expected Sprite Spieler to be visible");
  t.assert.ok(t.getSprite("Freundin").visible, "Expected Sprite Freundin to be visible");
  t.assert.ok(t.getSprite("Münzen").visible, "Expected Sprite Münzen to be visible");
  t.assert.ok(t.getSprite("Eis").visible, "Expected Sprite Eis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Spieler").volume, 100, "Expected Sprite Spieler to have volume 100");
  t.assert.equal(t.getSprite("Freundin").volume, 100, "Expected Sprite Freundin to have volume 100");
  t.assert.equal(t.getSprite("Münzen").volume, 100, "Expected Sprite Münzen to have volume 100");
  t.assert.equal(t.getSprite("Eis").volume, 100, "Expected Sprite Eis to have volume 100");
  t.dragSprite('Spieler', -130, -165, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Spieler").currentCostume, 0, "Expected Sprite Spieler to have costume 0");
  t.assert.equal(t.getSprite("Freundin").currentCostume, 0, "Expected Sprite Freundin to have costume 0");
  t.assert.equal(t.getSprite("Münzen").currentCostume, 0, "Expected Sprite Münzen to have costume 0");
  t.assert.equal(t.getSprite("Eis").currentCostume, 0, "Expected Sprite Eis to have costume 0");
  t.assert.equal(t.getSprite("Spieler").getCloneCount(), 0, "Expected Sprite Spieler to have 0 clones");
  t.assert.equal(t.getSprite("Freundin").getCloneCount(), 0, "Expected Sprite Freundin to have 0 clones");
  t.assert.equal(t.getSprite("Münzen").getCloneCount(), 0, "Expected Sprite Münzen to have 0 clones");
  t.assert.equal(t.getSprite("Eis").getCloneCount(), 0, "Expected Sprite Eis to have 0 clones");
  t.assert.equal(t.getSprite("Spieler").direction, -90, 1, "Expected Sprite Spieler to face in direction -90 +-1");
  t.assert.equal(t.getSprite("Freundin").direction, 90, 1, "Expected Sprite Freundin to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Münzen").direction, 90, 1, "Expected Sprite Münzen to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Eis").direction, 90, 1, "Expected Sprite Eis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Spieler").effects.color, 0, "Expected effect color of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.fisheye, 0, "Expected effect fisheye of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.whirl, 0, "Expected effect whirl of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.pixelate, 0, "Expected effect pixelate of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.mosaic, 0, "Expected effect mosaic of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.brightness, 0, "Expected effect brightness of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.ghost, 0, "Expected effect ghost of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.color, 0, "Expected effect color of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.fisheye, 0, "Expected effect fisheye of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.whirl, 0, "Expected effect whirl of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.pixelate, 0, "Expected effect pixelate of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.mosaic, 0, "Expected effect mosaic of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.brightness, 0, "Expected effect brightness of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.ghost, 0, "Expected effect ghost of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.color, 0, "Expected effect color of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.fisheye, 0, "Expected effect fisheye of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.whirl, 0, "Expected effect whirl of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.pixelate, 0, "Expected effect pixelate of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.mosaic, 0, "Expected effect mosaic of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.brightness, 0, "Expected effect brightness of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.ghost, 0, "Expected effect ghost of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Eis").effects.color, 0, "Expected effect color of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.fisheye, 0, "Expected effect fisheye of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.whirl, 0, "Expected effect whirl of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.pixelate, 0, "Expected effect pixelate of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.mosaic, 0, "Expected effect mosaic of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.brightness, 0, "Expected effect brightness of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.ghost, 0, "Expected effect ghost of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Spieler").layerOrder, 3, "Expected Sprite Spieler to be at layer 3");
  t.assert.equal(t.getSprite("Freundin").layerOrder, 5, "Expected Sprite Freundin to be at layer 5");
  t.assert.equal(t.getSprite("Münzen").layerOrder, 4, "Expected Sprite Münzen to be at layer 4");
  t.assert.equal(t.getSprite("Eis").layerOrder, 2, "Expected Sprite Eis to be at layer 2");
  t.assert.withinRange(t.getSprite("Spieler").x, -130, 5, "Expected Sprite Spieler to have x-position -130 +-5");
  t.assert.withinRange(t.getSprite("Spieler").y, -165, 5, "Expected Sprite Spieler to have y-position -165 +-5");
  t.assert.withinRange(t.getSprite("Freundin").x, 60, 5, "Expected Sprite Freundin to have x-position 60 +-5");
  t.assert.withinRange(t.getSprite("Freundin").y, -131, 5, "Expected Sprite Freundin to have y-position -131 +-5");
  t.assert.withinRange(t.getSprite("Münzen").x, -113.67185308949053, 5, "Expected Sprite Münzen to have x-position -113.67185308949053 +-5");
  t.assert.withinRange(t.getSprite("Münzen").y, -65.38321369661445, 5, "Expected Sprite Münzen to have y-position -65.38321369661445 +-5");
  t.assert.withinRange(t.getSprite("Eis").x, 195, 5, "Expected Sprite Eis to have x-position 195 +-5");
  t.assert.withinRange(t.getSprite("Eis").y, -158, 5, "Expected Sprite Eis to have y-position -158 +-5");
  t.assert.not(t.getSprite("Spieler").sayText, "Expected Sprite Spieler not to say anything");
  t.assert.equal(t.getSprite("Freundin").sayText, "Auf geht's!", "Expected Sprite Freundin to say Auf geht's!");
  t.assert.not(t.getSprite("Münzen").sayText, "Expected Sprite Münzen not to say anything");
  t.assert.not(t.getSprite("Eis").sayText, "Expected Sprite Eis not to say anything");
  t.assert.withinRange(t.getSprite("Spieler").size, 8, 1, "Expected Sprite Spieler to have size 8 +-1");
  t.assert.withinRange(t.getSprite("Freundin").size, 50, 1, "Expected Sprite Freundin to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Münzen").size, 50, 1, "Expected Sprite Münzen to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Eis").size, 20, 1, "Expected Sprite Eis to have size 20 +-1");
  t.assert.ok(t.getSprite("Spieler").visible, "Expected Sprite Spieler to be visible");
  t.assert.ok(t.getSprite("Freundin").visible, "Expected Sprite Freundin to be visible");
  t.assert.ok(t.getSprite("Münzen").visible, "Expected Sprite Münzen to be visible");
  t.assert.ok(t.getSprite("Eis").visible, "Expected Sprite Eis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Spieler").volume, 100, "Expected Sprite Spieler to have volume 100");
  t.assert.equal(t.getSprite("Freundin").volume, 100, "Expected Sprite Freundin to have volume 100");
  t.assert.equal(t.getSprite("Münzen").volume, 100, "Expected Sprite Münzen to have volume 100");
  t.assert.equal(t.getSprite("Eis").volume, 100, "Expected Sprite Eis to have volume 100");
  await t.runForSteps(33);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Spieler").currentCostume, 0, "Expected Sprite Spieler to have costume 0");
  t.assert.equal(t.getSprite("Freundin").currentCostume, 0, "Expected Sprite Freundin to have costume 0");
  t.assert.equal(t.getSprite("Münzen").currentCostume, 0, "Expected Sprite Münzen to have costume 0");
  t.assert.equal(t.getSprite("Eis").currentCostume, 0, "Expected Sprite Eis to have costume 0");
  t.assert.equal(t.getSprite("Spieler").getCloneCount(), 0, "Expected Sprite Spieler to have 0 clones");
  t.assert.equal(t.getSprite("Freundin").getCloneCount(), 0, "Expected Sprite Freundin to have 0 clones");
  t.assert.equal(t.getSprite("Münzen").getCloneCount(), 0, "Expected Sprite Münzen to have 0 clones");
  t.assert.equal(t.getSprite("Eis").getCloneCount(), 0, "Expected Sprite Eis to have 0 clones");
  t.assert.equal(t.getSprite("Spieler").direction, -90, 1, "Expected Sprite Spieler to face in direction -90 +-1");
  t.assert.equal(t.getSprite("Freundin").direction, 90, 1, "Expected Sprite Freundin to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Münzen").direction, 90, 1, "Expected Sprite Münzen to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Eis").direction, 90, 1, "Expected Sprite Eis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Spieler").effects.color, 0, "Expected effect color of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.fisheye, 0, "Expected effect fisheye of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.whirl, 0, "Expected effect whirl of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.pixelate, 0, "Expected effect pixelate of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.mosaic, 0, "Expected effect mosaic of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.brightness, 0, "Expected effect brightness of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.ghost, 0, "Expected effect ghost of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.color, 0, "Expected effect color of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.fisheye, 0, "Expected effect fisheye of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.whirl, 0, "Expected effect whirl of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.pixelate, 0, "Expected effect pixelate of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.mosaic, 0, "Expected effect mosaic of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.brightness, 0, "Expected effect brightness of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.ghost, 0, "Expected effect ghost of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.color, 0, "Expected effect color of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.fisheye, 0, "Expected effect fisheye of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.whirl, 0, "Expected effect whirl of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.pixelate, 0, "Expected effect pixelate of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.mosaic, 0, "Expected effect mosaic of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.brightness, 0, "Expected effect brightness of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.ghost, 0, "Expected effect ghost of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Eis").effects.color, 0, "Expected effect color of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.fisheye, 0, "Expected effect fisheye of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.whirl, 0, "Expected effect whirl of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.pixelate, 0, "Expected effect pixelate of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.mosaic, 0, "Expected effect mosaic of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.brightness, 0, "Expected effect brightness of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.ghost, 0, "Expected effect ghost of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Spieler").layerOrder, 3, "Expected Sprite Spieler to be at layer 3");
  t.assert.equal(t.getSprite("Freundin").layerOrder, 5, "Expected Sprite Freundin to be at layer 5");
  t.assert.equal(t.getSprite("Münzen").layerOrder, 4, "Expected Sprite Münzen to be at layer 4");
  t.assert.equal(t.getSprite("Eis").layerOrder, 2, "Expected Sprite Eis to be at layer 2");
  t.assert.withinRange(t.getSprite("Spieler").x, -180, 5, "Expected Sprite Spieler to have x-position -180 +-5");
  t.assert.withinRange(t.getSprite("Spieler").y, -155, 5, "Expected Sprite Spieler to have y-position -155 +-5");
  t.assert.withinRange(t.getSprite("Freundin").x, 60, 5, "Expected Sprite Freundin to have x-position 60 +-5");
  t.assert.withinRange(t.getSprite("Freundin").y, -131, 5, "Expected Sprite Freundin to have y-position -131 +-5");
  t.assert.withinRange(t.getSprite("Münzen").x, -113.67185308949053, 5, "Expected Sprite Münzen to have x-position -113.67185308949053 +-5");
  t.assert.withinRange(t.getSprite("Münzen").y, -65.38321369661445, 5, "Expected Sprite Münzen to have y-position -65.38321369661445 +-5");
  t.assert.withinRange(t.getSprite("Eis").x, 195, 5, "Expected Sprite Eis to have x-position 195 +-5");
  t.assert.withinRange(t.getSprite("Eis").y, -158, 5, "Expected Sprite Eis to have y-position -158 +-5");
  t.assert.not(t.getSprite("Spieler").sayText, "Expected Sprite Spieler not to say anything");
  t.assert.not(t.getSprite("Freundin").sayText, "Expected Sprite Freundin not to say anything");
  t.assert.not(t.getSprite("Münzen").sayText, "Expected Sprite Münzen not to say anything");
  t.assert.not(t.getSprite("Eis").sayText, "Expected Sprite Eis not to say anything");
  t.assert.withinRange(t.getSprite("Spieler").size, 8, 1, "Expected Sprite Spieler to have size 8 +-1");
  t.assert.withinRange(t.getSprite("Freundin").size, 50, 1, "Expected Sprite Freundin to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Münzen").size, 50, 1, "Expected Sprite Münzen to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Eis").size, 20, 1, "Expected Sprite Eis to have size 20 +-1");
  t.assert.ok(t.getSprite("Spieler").visible, "Expected Sprite Spieler to be visible");
  t.assert.ok(t.getSprite("Freundin").visible, "Expected Sprite Freundin to be visible");
  t.assert.ok(t.getSprite("Münzen").visible, "Expected Sprite Münzen to be visible");
  t.assert.ok(t.getSprite("Eis").visible, "Expected Sprite Eis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Spieler").volume, 100, "Expected Sprite Spieler to have volume 100");
  t.assert.equal(t.getSprite("Freundin").volume, 100, "Expected Sprite Freundin to have volume 100");
  t.assert.equal(t.getSprite("Münzen").volume, 100, "Expected Sprite Münzen to have volume 100");
  t.assert.equal(t.getSprite("Eis").volume, 100, "Expected Sprite Eis to have volume 100");
  t.dragSprite('Münzen', -55.767816739882505, -131.94251692975385, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Spieler").currentCostume, 0, "Expected Sprite Spieler to have costume 0");
  t.assert.equal(t.getSprite("Freundin").currentCostume, 0, "Expected Sprite Freundin to have costume 0");
  t.assert.equal(t.getSprite("Münzen").currentCostume, 0, "Expected Sprite Münzen to have costume 0");
  t.assert.equal(t.getSprite("Eis").currentCostume, 0, "Expected Sprite Eis to have costume 0");
  t.assert.equal(t.getSprite("Spieler").getCloneCount(), 0, "Expected Sprite Spieler to have 0 clones");
  t.assert.equal(t.getSprite("Freundin").getCloneCount(), 0, "Expected Sprite Freundin to have 0 clones");
  t.assert.equal(t.getSprite("Münzen").getCloneCount(), 0, "Expected Sprite Münzen to have 0 clones");
  t.assert.equal(t.getSprite("Eis").getCloneCount(), 0, "Expected Sprite Eis to have 0 clones");
  t.assert.equal(t.getSprite("Spieler").direction, -90, 1, "Expected Sprite Spieler to face in direction -90 +-1");
  t.assert.equal(t.getSprite("Freundin").direction, 90, 1, "Expected Sprite Freundin to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Münzen").direction, 90, 1, "Expected Sprite Münzen to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Eis").direction, 90, 1, "Expected Sprite Eis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Spieler").effects.color, 0, "Expected effect color of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.fisheye, 0, "Expected effect fisheye of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.whirl, 0, "Expected effect whirl of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.pixelate, 0, "Expected effect pixelate of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.mosaic, 0, "Expected effect mosaic of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.brightness, 0, "Expected effect brightness of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.ghost, 0, "Expected effect ghost of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.color, 0, "Expected effect color of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.fisheye, 0, "Expected effect fisheye of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.whirl, 0, "Expected effect whirl of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.pixelate, 0, "Expected effect pixelate of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.mosaic, 0, "Expected effect mosaic of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.brightness, 0, "Expected effect brightness of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.ghost, 0, "Expected effect ghost of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.color, 0, "Expected effect color of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.fisheye, 0, "Expected effect fisheye of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.whirl, 0, "Expected effect whirl of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.pixelate, 0, "Expected effect pixelate of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.mosaic, 0, "Expected effect mosaic of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.brightness, 0, "Expected effect brightness of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.ghost, 0, "Expected effect ghost of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Eis").effects.color, 0, "Expected effect color of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.fisheye, 0, "Expected effect fisheye of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.whirl, 0, "Expected effect whirl of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.pixelate, 0, "Expected effect pixelate of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.mosaic, 0, "Expected effect mosaic of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.brightness, 0, "Expected effect brightness of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.ghost, 0, "Expected effect ghost of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Spieler").layerOrder, 3, "Expected Sprite Spieler to be at layer 3");
  t.assert.equal(t.getSprite("Freundin").layerOrder, 5, "Expected Sprite Freundin to be at layer 5");
  t.assert.equal(t.getSprite("Münzen").layerOrder, 4, "Expected Sprite Münzen to be at layer 4");
  t.assert.equal(t.getSprite("Eis").layerOrder, 2, "Expected Sprite Eis to be at layer 2");
  t.assert.withinRange(t.getSprite("Spieler").x, -185, 5, "Expected Sprite Spieler to have x-position -185 +-5");
  t.assert.withinRange(t.getSprite("Spieler").y, -155, 5, "Expected Sprite Spieler to have y-position -155 +-5");
  t.assert.withinRange(t.getSprite("Freundin").x, 60, 5, "Expected Sprite Freundin to have x-position 60 +-5");
  t.assert.withinRange(t.getSprite("Freundin").y, -131, 5, "Expected Sprite Freundin to have y-position -131 +-5");
  t.assert.withinRange(t.getSprite("Münzen").x, -55.767816739882505, 5, "Expected Sprite Münzen to have x-position -55.767816739882505 +-5");
  t.assert.withinRange(t.getSprite("Münzen").y, -131.94251692975385, 5, "Expected Sprite Münzen to have y-position -131.94251692975385 +-5");
  t.assert.withinRange(t.getSprite("Eis").x, 195, 5, "Expected Sprite Eis to have x-position 195 +-5");
  t.assert.withinRange(t.getSprite("Eis").y, -158, 5, "Expected Sprite Eis to have y-position -158 +-5");
  t.assert.not(t.getSprite("Spieler").sayText, "Expected Sprite Spieler not to say anything");
  t.assert.not(t.getSprite("Freundin").sayText, "Expected Sprite Freundin not to say anything");
  t.assert.not(t.getSprite("Münzen").sayText, "Expected Sprite Münzen not to say anything");
  t.assert.not(t.getSprite("Eis").sayText, "Expected Sprite Eis not to say anything");
  t.assert.withinRange(t.getSprite("Spieler").size, 8, 1, "Expected Sprite Spieler to have size 8 +-1");
  t.assert.withinRange(t.getSprite("Freundin").size, 50, 1, "Expected Sprite Freundin to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Münzen").size, 50, 1, "Expected Sprite Münzen to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Eis").size, 20, 1, "Expected Sprite Eis to have size 20 +-1");
  t.assert.ok(t.getSprite("Spieler").visible, "Expected Sprite Spieler to be visible");
  t.assert.ok(t.getSprite("Freundin").visible, "Expected Sprite Freundin to be visible");
  t.assert.ok(t.getSprite("Münzen").visible, "Expected Sprite Münzen to be visible");
  t.assert.ok(t.getSprite("Eis").visible, "Expected Sprite Eis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Spieler").volume, 100, "Expected Sprite Spieler to have volume 100");
  t.assert.equal(t.getSprite("Freundin").volume, 100, "Expected Sprite Freundin to have volume 100");
  t.assert.equal(t.getSprite("Münzen").volume, 100, "Expected Sprite Münzen to have volume 100");
  t.assert.equal(t.getSprite("Eis").volume, 100, "Expected Sprite Eis to have volume 100");
  t.dragSprite('Spieler', -142.65161476169786, -147.16244381061972, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Spieler").currentCostume, 0, "Expected Sprite Spieler to have costume 0");
  t.assert.equal(t.getSprite("Freundin").currentCostume, 0, "Expected Sprite Freundin to have costume 0");
  t.assert.equal(t.getSprite("Münzen").currentCostume, 0, "Expected Sprite Münzen to have costume 0");
  t.assert.equal(t.getSprite("Eis").currentCostume, 0, "Expected Sprite Eis to have costume 0");
  t.assert.equal(t.getSprite("Spieler").getCloneCount(), 0, "Expected Sprite Spieler to have 0 clones");
  t.assert.equal(t.getSprite("Freundin").getCloneCount(), 0, "Expected Sprite Freundin to have 0 clones");
  t.assert.equal(t.getSprite("Münzen").getCloneCount(), 0, "Expected Sprite Münzen to have 0 clones");
  t.assert.equal(t.getSprite("Eis").getCloneCount(), 0, "Expected Sprite Eis to have 0 clones");
  t.assert.equal(t.getSprite("Spieler").direction, -90, 1, "Expected Sprite Spieler to face in direction -90 +-1");
  t.assert.equal(t.getSprite("Freundin").direction, 90, 1, "Expected Sprite Freundin to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Münzen").direction, 90, 1, "Expected Sprite Münzen to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Eis").direction, 90, 1, "Expected Sprite Eis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Spieler").effects.color, 0, "Expected effect color of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.fisheye, 0, "Expected effect fisheye of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.whirl, 0, "Expected effect whirl of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.pixelate, 0, "Expected effect pixelate of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.mosaic, 0, "Expected effect mosaic of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.brightness, 0, "Expected effect brightness of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.ghost, 0, "Expected effect ghost of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.color, 0, "Expected effect color of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.fisheye, 0, "Expected effect fisheye of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.whirl, 0, "Expected effect whirl of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.pixelate, 0, "Expected effect pixelate of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.mosaic, 0, "Expected effect mosaic of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.brightness, 0, "Expected effect brightness of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.ghost, 0, "Expected effect ghost of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.color, 0, "Expected effect color of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.fisheye, 0, "Expected effect fisheye of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.whirl, 0, "Expected effect whirl of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.pixelate, 0, "Expected effect pixelate of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.mosaic, 0, "Expected effect mosaic of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.brightness, 0, "Expected effect brightness of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.ghost, 0, "Expected effect ghost of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Eis").effects.color, 0, "Expected effect color of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.fisheye, 0, "Expected effect fisheye of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.whirl, 0, "Expected effect whirl of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.pixelate, 0, "Expected effect pixelate of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.mosaic, 0, "Expected effect mosaic of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.brightness, 0, "Expected effect brightness of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.ghost, 0, "Expected effect ghost of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Spieler").layerOrder, 3, "Expected Sprite Spieler to be at layer 3");
  t.assert.equal(t.getSprite("Freundin").layerOrder, 5, "Expected Sprite Freundin to be at layer 5");
  t.assert.equal(t.getSprite("Münzen").layerOrder, 4, "Expected Sprite Münzen to be at layer 4");
  t.assert.equal(t.getSprite("Eis").layerOrder, 2, "Expected Sprite Eis to be at layer 2");
  t.assert.withinRange(t.getSprite("Spieler").x, -147.65161476169786, 5, "Expected Sprite Spieler to have x-position -147.65161476169786 +-5");
  t.assert.withinRange(t.getSprite("Spieler").y, -147.16244381061972, 5, "Expected Sprite Spieler to have y-position -147.16244381061972 +-5");
  t.assert.withinRange(t.getSprite("Freundin").x, 60, 5, "Expected Sprite Freundin to have x-position 60 +-5");
  t.assert.withinRange(t.getSprite("Freundin").y, -131, 5, "Expected Sprite Freundin to have y-position -131 +-5");
  t.assert.withinRange(t.getSprite("Münzen").x, -55.767816739882505, 5, "Expected Sprite Münzen to have x-position -55.767816739882505 +-5");
  t.assert.withinRange(t.getSprite("Münzen").y, -131.94251692975385, 5, "Expected Sprite Münzen to have y-position -131.94251692975385 +-5");
  t.assert.withinRange(t.getSprite("Eis").x, 195, 5, "Expected Sprite Eis to have x-position 195 +-5");
  t.assert.withinRange(t.getSprite("Eis").y, -158, 5, "Expected Sprite Eis to have y-position -158 +-5");
  t.assert.not(t.getSprite("Spieler").sayText, "Expected Sprite Spieler not to say anything");
  t.assert.not(t.getSprite("Freundin").sayText, "Expected Sprite Freundin not to say anything");
  t.assert.not(t.getSprite("Münzen").sayText, "Expected Sprite Münzen not to say anything");
  t.assert.not(t.getSprite("Eis").sayText, "Expected Sprite Eis not to say anything");
  t.assert.withinRange(t.getSprite("Spieler").size, 8, 1, "Expected Sprite Spieler to have size 8 +-1");
  t.assert.withinRange(t.getSprite("Freundin").size, 50, 1, "Expected Sprite Freundin to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Münzen").size, 50, 1, "Expected Sprite Münzen to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Eis").size, 20, 1, "Expected Sprite Eis to have size 20 +-1");
  t.assert.ok(t.getSprite("Spieler").visible, "Expected Sprite Spieler to be visible");
  t.assert.ok(t.getSprite("Freundin").visible, "Expected Sprite Freundin to be visible");
  t.assert.ok(t.getSprite("Münzen").visible, "Expected Sprite Münzen to be visible");
  t.assert.ok(t.getSprite("Eis").visible, "Expected Sprite Eis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Spieler").volume, 100, "Expected Sprite Spieler to have volume 100");
  t.assert.equal(t.getSprite("Freundin").volume, 100, "Expected Sprite Freundin to have volume 100");
  t.assert.equal(t.getSprite("Münzen").volume, 100, "Expected Sprite Münzen to have volume 100");
  t.assert.equal(t.getSprite("Eis").volume, 100, "Expected Sprite Eis to have volume 100");
  t.dragSprite('Spieler', -190, -142, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Spieler").currentCostume, 0, "Expected Sprite Spieler to have costume 0");
  t.assert.equal(t.getSprite("Freundin").currentCostume, 0, "Expected Sprite Freundin to have costume 0");
  t.assert.equal(t.getSprite("Münzen").currentCostume, 0, "Expected Sprite Münzen to have costume 0");
  t.assert.equal(t.getSprite("Eis").currentCostume, 0, "Expected Sprite Eis to have costume 0");
  t.assert.equal(t.getSprite("Spieler").getCloneCount(), 0, "Expected Sprite Spieler to have 0 clones");
  t.assert.equal(t.getSprite("Freundin").getCloneCount(), 0, "Expected Sprite Freundin to have 0 clones");
  t.assert.equal(t.getSprite("Münzen").getCloneCount(), 0, "Expected Sprite Münzen to have 0 clones");
  t.assert.equal(t.getSprite("Eis").getCloneCount(), 0, "Expected Sprite Eis to have 0 clones");
  t.assert.equal(t.getSprite("Spieler").direction, -90, 1, "Expected Sprite Spieler to face in direction -90 +-1");
  t.assert.equal(t.getSprite("Freundin").direction, 90, 1, "Expected Sprite Freundin to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Münzen").direction, 90, 1, "Expected Sprite Münzen to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Eis").direction, 90, 1, "Expected Sprite Eis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Spieler").effects.color, 0, "Expected effect color of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.fisheye, 0, "Expected effect fisheye of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.whirl, 0, "Expected effect whirl of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.pixelate, 0, "Expected effect pixelate of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.mosaic, 0, "Expected effect mosaic of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.brightness, 0, "Expected effect brightness of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.ghost, 0, "Expected effect ghost of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.color, 0, "Expected effect color of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.fisheye, 0, "Expected effect fisheye of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.whirl, 0, "Expected effect whirl of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.pixelate, 0, "Expected effect pixelate of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.mosaic, 0, "Expected effect mosaic of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.brightness, 0, "Expected effect brightness of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.ghost, 0, "Expected effect ghost of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.color, 0, "Expected effect color of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.fisheye, 0, "Expected effect fisheye of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.whirl, 0, "Expected effect whirl of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.pixelate, 0, "Expected effect pixelate of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.mosaic, 0, "Expected effect mosaic of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.brightness, 0, "Expected effect brightness of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.ghost, 0, "Expected effect ghost of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Eis").effects.color, 0, "Expected effect color of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.fisheye, 0, "Expected effect fisheye of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.whirl, 0, "Expected effect whirl of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.pixelate, 0, "Expected effect pixelate of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.mosaic, 0, "Expected effect mosaic of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.brightness, 0, "Expected effect brightness of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.ghost, 0, "Expected effect ghost of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Spieler").layerOrder, 3, "Expected Sprite Spieler to be at layer 3");
  t.assert.equal(t.getSprite("Freundin").layerOrder, 5, "Expected Sprite Freundin to be at layer 5");
  t.assert.equal(t.getSprite("Münzen").layerOrder, 4, "Expected Sprite Münzen to be at layer 4");
  t.assert.equal(t.getSprite("Eis").layerOrder, 2, "Expected Sprite Eis to be at layer 2");
  t.assert.withinRange(t.getSprite("Spieler").x, -195, 5, "Expected Sprite Spieler to have x-position -195 +-5");
  t.assert.withinRange(t.getSprite("Spieler").y, -142, 5, "Expected Sprite Spieler to have y-position -142 +-5");
  t.assert.withinRange(t.getSprite("Freundin").x, 60, 5, "Expected Sprite Freundin to have x-position 60 +-5");
  t.assert.withinRange(t.getSprite("Freundin").y, -131, 5, "Expected Sprite Freundin to have y-position -131 +-5");
  t.assert.withinRange(t.getSprite("Münzen").x, -55.767816739882505, 5, "Expected Sprite Münzen to have x-position -55.767816739882505 +-5");
  t.assert.withinRange(t.getSprite("Münzen").y, -131.94251692975385, 5, "Expected Sprite Münzen to have y-position -131.94251692975385 +-5");
  t.assert.withinRange(t.getSprite("Eis").x, 195, 5, "Expected Sprite Eis to have x-position 195 +-5");
  t.assert.withinRange(t.getSprite("Eis").y, -158, 5, "Expected Sprite Eis to have y-position -158 +-5");
  t.assert.not(t.getSprite("Spieler").sayText, "Expected Sprite Spieler not to say anything");
  t.assert.not(t.getSprite("Freundin").sayText, "Expected Sprite Freundin not to say anything");
  t.assert.not(t.getSprite("Münzen").sayText, "Expected Sprite Münzen not to say anything");
  t.assert.not(t.getSprite("Eis").sayText, "Expected Sprite Eis not to say anything");
  t.assert.withinRange(t.getSprite("Spieler").size, 8, 1, "Expected Sprite Spieler to have size 8 +-1");
  t.assert.withinRange(t.getSprite("Freundin").size, 50, 1, "Expected Sprite Freundin to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Münzen").size, 50, 1, "Expected Sprite Münzen to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Eis").size, 20, 1, "Expected Sprite Eis to have size 20 +-1");
  t.assert.ok(t.getSprite("Spieler").visible, "Expected Sprite Spieler to be visible");
  t.assert.ok(t.getSprite("Freundin").visible, "Expected Sprite Freundin to be visible");
  t.assert.ok(t.getSprite("Münzen").visible, "Expected Sprite Münzen to be visible");
  t.assert.ok(t.getSprite("Eis").visible, "Expected Sprite Eis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Spieler").volume, 100, "Expected Sprite Spieler to have volume 100");
  t.assert.equal(t.getSprite("Freundin").volume, 100, "Expected Sprite Freundin to have volume 100");
  t.assert.equal(t.getSprite("Münzen").volume, 100, "Expected Sprite Münzen to have volume 100");
  t.assert.equal(t.getSprite("Eis").volume, 100, "Expected Sprite Eis to have volume 100");
  t.dragSprite('Spieler', -129.1435734715807, -141.17672681451998, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Spieler").currentCostume, 0, "Expected Sprite Spieler to have costume 0");
  t.assert.equal(t.getSprite("Freundin").currentCostume, 0, "Expected Sprite Freundin to have costume 0");
  t.assert.equal(t.getSprite("Münzen").currentCostume, 0, "Expected Sprite Münzen to have costume 0");
  t.assert.equal(t.getSprite("Eis").currentCostume, 0, "Expected Sprite Eis to have costume 0");
  t.assert.equal(t.getSprite("Spieler").getCloneCount(), 0, "Expected Sprite Spieler to have 0 clones");
  t.assert.equal(t.getSprite("Freundin").getCloneCount(), 0, "Expected Sprite Freundin to have 0 clones");
  t.assert.equal(t.getSprite("Münzen").getCloneCount(), 0, "Expected Sprite Münzen to have 0 clones");
  t.assert.equal(t.getSprite("Eis").getCloneCount(), 0, "Expected Sprite Eis to have 0 clones");
  t.assert.equal(t.getSprite("Spieler").direction, -90, 1, "Expected Sprite Spieler to face in direction -90 +-1");
  t.assert.equal(t.getSprite("Freundin").direction, 90, 1, "Expected Sprite Freundin to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Münzen").direction, 90, 1, "Expected Sprite Münzen to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Eis").direction, 90, 1, "Expected Sprite Eis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Spieler").effects.color, 0, "Expected effect color of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.fisheye, 0, "Expected effect fisheye of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.whirl, 0, "Expected effect whirl of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.pixelate, 0, "Expected effect pixelate of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.mosaic, 0, "Expected effect mosaic of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.brightness, 0, "Expected effect brightness of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.ghost, 0, "Expected effect ghost of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.color, 0, "Expected effect color of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.fisheye, 0, "Expected effect fisheye of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.whirl, 0, "Expected effect whirl of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.pixelate, 0, "Expected effect pixelate of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.mosaic, 0, "Expected effect mosaic of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.brightness, 0, "Expected effect brightness of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.ghost, 0, "Expected effect ghost of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.color, 0, "Expected effect color of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.fisheye, 0, "Expected effect fisheye of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.whirl, 0, "Expected effect whirl of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.pixelate, 0, "Expected effect pixelate of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.mosaic, 0, "Expected effect mosaic of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.brightness, 0, "Expected effect brightness of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.ghost, 0, "Expected effect ghost of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Eis").effects.color, 0, "Expected effect color of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.fisheye, 0, "Expected effect fisheye of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.whirl, 0, "Expected effect whirl of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.pixelate, 0, "Expected effect pixelate of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.mosaic, 0, "Expected effect mosaic of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.brightness, 0, "Expected effect brightness of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.ghost, 0, "Expected effect ghost of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Spieler").layerOrder, 3, "Expected Sprite Spieler to be at layer 3");
  t.assert.equal(t.getSprite("Freundin").layerOrder, 5, "Expected Sprite Freundin to be at layer 5");
  t.assert.equal(t.getSprite("Münzen").layerOrder, 4, "Expected Sprite Münzen to be at layer 4");
  t.assert.equal(t.getSprite("Eis").layerOrder, 2, "Expected Sprite Eis to be at layer 2");
  t.assert.withinRange(t.getSprite("Spieler").x, -134.1435734715807, 5, "Expected Sprite Spieler to have x-position -134.1435734715807 +-5");
  t.assert.withinRange(t.getSprite("Spieler").y, -141.17672681451998, 5, "Expected Sprite Spieler to have y-position -141.17672681451998 +-5");
  t.assert.withinRange(t.getSprite("Freundin").x, 60, 5, "Expected Sprite Freundin to have x-position 60 +-5");
  t.assert.withinRange(t.getSprite("Freundin").y, -131, 5, "Expected Sprite Freundin to have y-position -131 +-5");
  t.assert.withinRange(t.getSprite("Münzen").x, -55.767816739882505, 5, "Expected Sprite Münzen to have x-position -55.767816739882505 +-5");
  t.assert.withinRange(t.getSprite("Münzen").y, -131.94251692975385, 5, "Expected Sprite Münzen to have y-position -131.94251692975385 +-5");
  t.assert.withinRange(t.getSprite("Eis").x, 195, 5, "Expected Sprite Eis to have x-position 195 +-5");
  t.assert.withinRange(t.getSprite("Eis").y, -158, 5, "Expected Sprite Eis to have y-position -158 +-5");
  t.assert.not(t.getSprite("Spieler").sayText, "Expected Sprite Spieler not to say anything");
  t.assert.not(t.getSprite("Freundin").sayText, "Expected Sprite Freundin not to say anything");
  t.assert.not(t.getSprite("Münzen").sayText, "Expected Sprite Münzen not to say anything");
  t.assert.not(t.getSprite("Eis").sayText, "Expected Sprite Eis not to say anything");
  t.assert.withinRange(t.getSprite("Spieler").size, 8, 1, "Expected Sprite Spieler to have size 8 +-1");
  t.assert.withinRange(t.getSprite("Freundin").size, 50, 1, "Expected Sprite Freundin to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Münzen").size, 50, 1, "Expected Sprite Münzen to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Eis").size, 20, 1, "Expected Sprite Eis to have size 20 +-1");
  t.assert.ok(t.getSprite("Spieler").visible, "Expected Sprite Spieler to be visible");
  t.assert.ok(t.getSprite("Freundin").visible, "Expected Sprite Freundin to be visible");
  t.assert.ok(t.getSprite("Münzen").visible, "Expected Sprite Münzen to be visible");
  t.assert.ok(t.getSprite("Eis").visible, "Expected Sprite Eis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Spieler").volume, 100, "Expected Sprite Spieler to have volume 100");
  t.assert.equal(t.getSprite("Freundin").volume, 100, "Expected Sprite Freundin to have volume 100");
  t.assert.equal(t.getSprite("Münzen").volume, 100, "Expected Sprite Münzen to have volume 100");
  t.assert.equal(t.getSprite("Eis").volume, 100, "Expected Sprite Eis to have volume 100");
  t.dragSprite('Spieler', -177.39504905375946, -158.04398305336667, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Spieler").currentCostume, 0, "Expected Sprite Spieler to have costume 0");
  t.assert.equal(t.getSprite("Freundin").currentCostume, 0, "Expected Sprite Freundin to have costume 0");
  t.assert.equal(t.getSprite("Münzen").currentCostume, 0, "Expected Sprite Münzen to have costume 0");
  t.assert.equal(t.getSprite("Eis").currentCostume, 0, "Expected Sprite Eis to have costume 0");
  t.assert.equal(t.getSprite("Spieler").getCloneCount(), 0, "Expected Sprite Spieler to have 0 clones");
  t.assert.equal(t.getSprite("Freundin").getCloneCount(), 0, "Expected Sprite Freundin to have 0 clones");
  t.assert.equal(t.getSprite("Münzen").getCloneCount(), 0, "Expected Sprite Münzen to have 0 clones");
  t.assert.equal(t.getSprite("Eis").getCloneCount(), 0, "Expected Sprite Eis to have 0 clones");
  t.assert.equal(t.getSprite("Spieler").direction, -90, 1, "Expected Sprite Spieler to face in direction -90 +-1");
  t.assert.equal(t.getSprite("Freundin").direction, 90, 1, "Expected Sprite Freundin to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Münzen").direction, 90, 1, "Expected Sprite Münzen to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Eis").direction, 90, 1, "Expected Sprite Eis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Spieler").effects.color, 0, "Expected effect color of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.fisheye, 0, "Expected effect fisheye of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.whirl, 0, "Expected effect whirl of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.pixelate, 0, "Expected effect pixelate of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.mosaic, 0, "Expected effect mosaic of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.brightness, 0, "Expected effect brightness of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.ghost, 0, "Expected effect ghost of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.color, 0, "Expected effect color of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.fisheye, 0, "Expected effect fisheye of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.whirl, 0, "Expected effect whirl of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.pixelate, 0, "Expected effect pixelate of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.mosaic, 0, "Expected effect mosaic of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.brightness, 0, "Expected effect brightness of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.ghost, 0, "Expected effect ghost of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.color, 0, "Expected effect color of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.fisheye, 0, "Expected effect fisheye of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.whirl, 0, "Expected effect whirl of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.pixelate, 0, "Expected effect pixelate of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.mosaic, 0, "Expected effect mosaic of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.brightness, 0, "Expected effect brightness of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.ghost, 0, "Expected effect ghost of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Eis").effects.color, 0, "Expected effect color of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.fisheye, 0, "Expected effect fisheye of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.whirl, 0, "Expected effect whirl of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.pixelate, 0, "Expected effect pixelate of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.mosaic, 0, "Expected effect mosaic of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.brightness, 0, "Expected effect brightness of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.ghost, 0, "Expected effect ghost of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Spieler").layerOrder, 3, "Expected Sprite Spieler to be at layer 3");
  t.assert.equal(t.getSprite("Freundin").layerOrder, 5, "Expected Sprite Freundin to be at layer 5");
  t.assert.equal(t.getSprite("Münzen").layerOrder, 4, "Expected Sprite Münzen to be at layer 4");
  t.assert.equal(t.getSprite("Eis").layerOrder, 2, "Expected Sprite Eis to be at layer 2");
  t.assert.withinRange(t.getSprite("Spieler").x, -182.39504905375946, 5, "Expected Sprite Spieler to have x-position -182.39504905375946 +-5");
  t.assert.withinRange(t.getSprite("Spieler").y, -158.04398305336667, 5, "Expected Sprite Spieler to have y-position -158.04398305336667 +-5");
  t.assert.withinRange(t.getSprite("Freundin").x, 60, 5, "Expected Sprite Freundin to have x-position 60 +-5");
  t.assert.withinRange(t.getSprite("Freundin").y, -131, 5, "Expected Sprite Freundin to have y-position -131 +-5");
  t.assert.withinRange(t.getSprite("Münzen").x, -55.767816739882505, 5, "Expected Sprite Münzen to have x-position -55.767816739882505 +-5");
  t.assert.withinRange(t.getSprite("Münzen").y, -131.94251692975385, 5, "Expected Sprite Münzen to have y-position -131.94251692975385 +-5");
  t.assert.withinRange(t.getSprite("Eis").x, 195, 5, "Expected Sprite Eis to have x-position 195 +-5");
  t.assert.withinRange(t.getSprite("Eis").y, -158, 5, "Expected Sprite Eis to have y-position -158 +-5");
  t.assert.not(t.getSprite("Spieler").sayText, "Expected Sprite Spieler not to say anything");
  t.assert.not(t.getSprite("Freundin").sayText, "Expected Sprite Freundin not to say anything");
  t.assert.not(t.getSprite("Münzen").sayText, "Expected Sprite Münzen not to say anything");
  t.assert.not(t.getSprite("Eis").sayText, "Expected Sprite Eis not to say anything");
  t.assert.withinRange(t.getSprite("Spieler").size, 8, 1, "Expected Sprite Spieler to have size 8 +-1");
  t.assert.withinRange(t.getSprite("Freundin").size, 50, 1, "Expected Sprite Freundin to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Münzen").size, 50, 1, "Expected Sprite Münzen to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Eis").size, 20, 1, "Expected Sprite Eis to have size 20 +-1");
  t.assert.ok(t.getSprite("Spieler").visible, "Expected Sprite Spieler to be visible");
  t.assert.ok(t.getSprite("Freundin").visible, "Expected Sprite Freundin to be visible");
  t.assert.ok(t.getSprite("Münzen").visible, "Expected Sprite Münzen to be visible");
  t.assert.ok(t.getSprite("Eis").visible, "Expected Sprite Eis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Spieler").volume, 100, "Expected Sprite Spieler to have volume 100");
  t.assert.equal(t.getSprite("Freundin").volume, 100, "Expected Sprite Freundin to have volume 100");
  t.assert.equal(t.getSprite("Münzen").volume, 100, "Expected Sprite Münzen to have volume 100");
  t.assert.equal(t.getSprite("Eis").volume, 100, "Expected Sprite Eis to have volume 100");
  t.dragSprite('Spieler', -113.3723706540166, -169.04185962960707, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Spieler").currentCostume, 0, "Expected Sprite Spieler to have costume 0");
  t.assert.equal(t.getSprite("Freundin").currentCostume, 0, "Expected Sprite Freundin to have costume 0");
  t.assert.equal(t.getSprite("Münzen").currentCostume, 0, "Expected Sprite Münzen to have costume 0");
  t.assert.equal(t.getSprite("Eis").currentCostume, 0, "Expected Sprite Eis to have costume 0");
  t.assert.equal(t.getSprite("Spieler").getCloneCount(), 0, "Expected Sprite Spieler to have 0 clones");
  t.assert.equal(t.getSprite("Freundin").getCloneCount(), 0, "Expected Sprite Freundin to have 0 clones");
  t.assert.equal(t.getSprite("Münzen").getCloneCount(), 0, "Expected Sprite Münzen to have 0 clones");
  t.assert.equal(t.getSprite("Eis").getCloneCount(), 0, "Expected Sprite Eis to have 0 clones");
  t.assert.equal(t.getSprite("Spieler").direction, 0, 1, "Expected Sprite Spieler to face in direction 0 +-1");
  t.assert.equal(t.getSprite("Freundin").direction, 90, 1, "Expected Sprite Freundin to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Münzen").direction, 90, 1, "Expected Sprite Münzen to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Eis").direction, 90, 1, "Expected Sprite Eis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Spieler").effects.color, 0, "Expected effect color of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.fisheye, 0, "Expected effect fisheye of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.whirl, 0, "Expected effect whirl of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.pixelate, 0, "Expected effect pixelate of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.mosaic, 0, "Expected effect mosaic of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.brightness, 0, "Expected effect brightness of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.ghost, 0, "Expected effect ghost of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.color, 0, "Expected effect color of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.fisheye, 0, "Expected effect fisheye of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.whirl, 0, "Expected effect whirl of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.pixelate, 0, "Expected effect pixelate of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.mosaic, 0, "Expected effect mosaic of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.brightness, 0, "Expected effect brightness of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.ghost, 0, "Expected effect ghost of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.color, 0, "Expected effect color of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.fisheye, 0, "Expected effect fisheye of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.whirl, 0, "Expected effect whirl of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.pixelate, 0, "Expected effect pixelate of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.mosaic, 0, "Expected effect mosaic of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.brightness, 0, "Expected effect brightness of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.ghost, 0, "Expected effect ghost of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Eis").effects.color, 0, "Expected effect color of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.fisheye, 0, "Expected effect fisheye of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.whirl, 0, "Expected effect whirl of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.pixelate, 0, "Expected effect pixelate of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.mosaic, 0, "Expected effect mosaic of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.brightness, 0, "Expected effect brightness of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.ghost, 0, "Expected effect ghost of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Spieler").layerOrder, 3, "Expected Sprite Spieler to be at layer 3");
  t.assert.equal(t.getSprite("Freundin").layerOrder, 5, "Expected Sprite Freundin to be at layer 5");
  t.assert.equal(t.getSprite("Münzen").layerOrder, 4, "Expected Sprite Münzen to be at layer 4");
  t.assert.equal(t.getSprite("Eis").layerOrder, 2, "Expected Sprite Eis to be at layer 2");
  t.assert.withinRange(t.getSprite("Spieler").x, -113.3723706540166, 5, "Expected Sprite Spieler to have x-position -113.3723706540166 +-5");
  t.assert.withinRange(t.getSprite("Spieler").y, -164.04185962960707, 5, "Expected Sprite Spieler to have y-position -164.04185962960707 +-5");
  t.assert.withinRange(t.getSprite("Freundin").x, 60, 5, "Expected Sprite Freundin to have x-position 60 +-5");
  t.assert.withinRange(t.getSprite("Freundin").y, -131, 5, "Expected Sprite Freundin to have y-position -131 +-5");
  t.assert.withinRange(t.getSprite("Münzen").x, -55.767816739882505, 5, "Expected Sprite Münzen to have x-position -55.767816739882505 +-5");
  t.assert.withinRange(t.getSprite("Münzen").y, -131.94251692975385, 5, "Expected Sprite Münzen to have y-position -131.94251692975385 +-5");
  t.assert.withinRange(t.getSprite("Eis").x, 195, 5, "Expected Sprite Eis to have x-position 195 +-5");
  t.assert.withinRange(t.getSprite("Eis").y, -158, 5, "Expected Sprite Eis to have y-position -158 +-5");
  t.assert.not(t.getSprite("Spieler").sayText, "Expected Sprite Spieler not to say anything");
  t.assert.not(t.getSprite("Freundin").sayText, "Expected Sprite Freundin not to say anything");
  t.assert.not(t.getSprite("Münzen").sayText, "Expected Sprite Münzen not to say anything");
  t.assert.not(t.getSprite("Eis").sayText, "Expected Sprite Eis not to say anything");
  t.assert.withinRange(t.getSprite("Spieler").size, 8, 1, "Expected Sprite Spieler to have size 8 +-1");
  t.assert.withinRange(t.getSprite("Freundin").size, 50, 1, "Expected Sprite Freundin to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Münzen").size, 50, 1, "Expected Sprite Münzen to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Eis").size, 20, 1, "Expected Sprite Eis to have size 20 +-1");
  t.assert.ok(t.getSprite("Spieler").visible, "Expected Sprite Spieler to be visible");
  t.assert.ok(t.getSprite("Freundin").visible, "Expected Sprite Freundin to be visible");
  t.assert.ok(t.getSprite("Münzen").visible, "Expected Sprite Münzen to be visible");
  t.assert.ok(t.getSprite("Eis").visible, "Expected Sprite Eis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Spieler").volume, 100, "Expected Sprite Spieler to have volume 100");
  t.assert.equal(t.getSprite("Freundin").volume, 100, "Expected Sprite Freundin to have volume 100");
  t.assert.equal(t.getSprite("Münzen").volume, 100, "Expected Sprite Münzen to have volume 100");
  t.assert.equal(t.getSprite("Eis").volume, 100, "Expected Sprite Eis to have volume 100");
  await t.runForSteps(86);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Spieler").currentCostume, 0, "Expected Sprite Spieler to have costume 0");
  t.assert.equal(t.getSprite("Freundin").currentCostume, 0, "Expected Sprite Freundin to have costume 0");
  t.assert.equal(t.getSprite("Münzen").currentCostume, 0, "Expected Sprite Münzen to have costume 0");
  t.assert.equal(t.getSprite("Eis").currentCostume, 0, "Expected Sprite Eis to have costume 0");
  t.assert.equal(t.getSprite("Spieler").getCloneCount(), 0, "Expected Sprite Spieler to have 0 clones");
  t.assert.equal(t.getSprite("Freundin").getCloneCount(), 0, "Expected Sprite Freundin to have 0 clones");
  t.assert.equal(t.getSprite("Münzen").getCloneCount(), 0, "Expected Sprite Münzen to have 0 clones");
  t.assert.equal(t.getSprite("Eis").getCloneCount(), 0, "Expected Sprite Eis to have 0 clones");
  t.assert.equal(t.getSprite("Spieler").direction, -90, 1, "Expected Sprite Spieler to face in direction -90 +-1");
  t.assert.equal(t.getSprite("Freundin").direction, 90, 1, "Expected Sprite Freundin to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Münzen").direction, 90, 1, "Expected Sprite Münzen to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Eis").direction, 90, 1, "Expected Sprite Eis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Spieler").effects.color, 0, "Expected effect color of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.fisheye, 0, "Expected effect fisheye of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.whirl, 0, "Expected effect whirl of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.pixelate, 0, "Expected effect pixelate of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.mosaic, 0, "Expected effect mosaic of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.brightness, 0, "Expected effect brightness of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.ghost, 0, "Expected effect ghost of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.color, 0, "Expected effect color of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.fisheye, 0, "Expected effect fisheye of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.whirl, 0, "Expected effect whirl of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.pixelate, 0, "Expected effect pixelate of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.mosaic, 0, "Expected effect mosaic of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.brightness, 0, "Expected effect brightness of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.ghost, 0, "Expected effect ghost of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.color, 0, "Expected effect color of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.fisheye, 0, "Expected effect fisheye of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.whirl, 0, "Expected effect whirl of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.pixelate, 0, "Expected effect pixelate of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.mosaic, 0, "Expected effect mosaic of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.brightness, 0, "Expected effect brightness of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.ghost, 0, "Expected effect ghost of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Eis").effects.color, 0, "Expected effect color of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.fisheye, 0, "Expected effect fisheye of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.whirl, 0, "Expected effect whirl of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.pixelate, 0, "Expected effect pixelate of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.mosaic, 0, "Expected effect mosaic of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.brightness, 0, "Expected effect brightness of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.ghost, 0, "Expected effect ghost of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Spieler").layerOrder, 3, "Expected Sprite Spieler to be at layer 3");
  t.assert.equal(t.getSprite("Freundin").layerOrder, 5, "Expected Sprite Freundin to be at layer 5");
  t.assert.equal(t.getSprite("Münzen").layerOrder, 4, "Expected Sprite Münzen to be at layer 4");
  t.assert.equal(t.getSprite("Eis").layerOrder, 2, "Expected Sprite Eis to be at layer 2");
  t.assert.withinRange(t.getSprite("Spieler").x, -193.3723706540166, 5, "Expected Sprite Spieler to have x-position -193.3723706540166 +-5");
  t.assert.withinRange(t.getSprite("Spieler").y, -49.041859629607075, 5, "Expected Sprite Spieler to have y-position -49.041859629607075 +-5");
  t.assert.withinRange(t.getSprite("Freundin").x, 60, 5, "Expected Sprite Freundin to have x-position 60 +-5");
  t.assert.withinRange(t.getSprite("Freundin").y, -131, 5, "Expected Sprite Freundin to have y-position -131 +-5");
  t.assert.withinRange(t.getSprite("Münzen").x, -55.767816739882505, 5, "Expected Sprite Münzen to have x-position -55.767816739882505 +-5");
  t.assert.withinRange(t.getSprite("Münzen").y, -131.94251692975385, 5, "Expected Sprite Münzen to have y-position -131.94251692975385 +-5");
  t.assert.withinRange(t.getSprite("Eis").x, 195, 5, "Expected Sprite Eis to have x-position 195 +-5");
  t.assert.withinRange(t.getSprite("Eis").y, -158, 5, "Expected Sprite Eis to have y-position -158 +-5");
  t.assert.not(t.getSprite("Spieler").sayText, "Expected Sprite Spieler not to say anything");
  t.assert.equal(t.getSprite("Freundin").sayText, "Super!", "Expected Sprite Freundin to say Super!");
  t.assert.not(t.getSprite("Münzen").sayText, "Expected Sprite Münzen not to say anything");
  t.assert.not(t.getSprite("Eis").sayText, "Expected Sprite Eis not to say anything");
  t.assert.withinRange(t.getSprite("Spieler").size, 8, 1, "Expected Sprite Spieler to have size 8 +-1");
  t.assert.withinRange(t.getSprite("Freundin").size, 50, 1, "Expected Sprite Freundin to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Münzen").size, 50, 1, "Expected Sprite Münzen to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Eis").size, 20, 1, "Expected Sprite Eis to have size 20 +-1");
  t.assert.ok(t.getSprite("Spieler").visible, "Expected Sprite Spieler to be visible");
  t.assert.ok(t.getSprite("Freundin").visible, "Expected Sprite Freundin to be visible");
  t.assert.not(t.getSprite("Münzen").visible, "Expected Sprite Münzen not to be visible");
  t.assert.ok(t.getSprite("Eis").visible, "Expected Sprite Eis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Spieler").volume, 100, "Expected Sprite Spieler to have volume 100");
  t.assert.equal(t.getSprite("Freundin").volume, 100, "Expected Sprite Freundin to have volume 100");
  t.assert.equal(t.getSprite("Münzen").volume, 100, "Expected Sprite Münzen to have volume 100");
  t.assert.equal(t.getSprite("Eis").volume, 100, "Expected Sprite Eis to have volume 100");
  t.dragSprite('Spieler', -204.19825935775222, -125.29850067789027, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Spieler").currentCostume, 0, "Expected Sprite Spieler to have costume 0");
  t.assert.equal(t.getSprite("Freundin").currentCostume, 0, "Expected Sprite Freundin to have costume 0");
  t.assert.equal(t.getSprite("Münzen").currentCostume, 0, "Expected Sprite Münzen to have costume 0");
  t.assert.equal(t.getSprite("Eis").currentCostume, 0, "Expected Sprite Eis to have costume 0");
  t.assert.equal(t.getSprite("Spieler").getCloneCount(), 0, "Expected Sprite Spieler to have 0 clones");
  t.assert.equal(t.getSprite("Freundin").getCloneCount(), 0, "Expected Sprite Freundin to have 0 clones");
  t.assert.equal(t.getSprite("Münzen").getCloneCount(), 0, "Expected Sprite Münzen to have 0 clones");
  t.assert.equal(t.getSprite("Eis").getCloneCount(), 0, "Expected Sprite Eis to have 0 clones");
  t.assert.equal(t.getSprite("Spieler").direction, 180, 1, "Expected Sprite Spieler to face in direction 180 +-1");
  t.assert.equal(t.getSprite("Freundin").direction, 90, 1, "Expected Sprite Freundin to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Münzen").direction, 90, 1, "Expected Sprite Münzen to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Eis").direction, 90, 1, "Expected Sprite Eis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Spieler").effects.color, 0, "Expected effect color of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.fisheye, 0, "Expected effect fisheye of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.whirl, 0, "Expected effect whirl of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.pixelate, 0, "Expected effect pixelate of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.mosaic, 0, "Expected effect mosaic of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.brightness, 0, "Expected effect brightness of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.ghost, 0, "Expected effect ghost of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.color, 0, "Expected effect color of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.fisheye, 0, "Expected effect fisheye of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.whirl, 0, "Expected effect whirl of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.pixelate, 0, "Expected effect pixelate of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.mosaic, 0, "Expected effect mosaic of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.brightness, 0, "Expected effect brightness of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.ghost, 0, "Expected effect ghost of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.color, 0, "Expected effect color of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.fisheye, 0, "Expected effect fisheye of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.whirl, 0, "Expected effect whirl of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.pixelate, 0, "Expected effect pixelate of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.mosaic, 0, "Expected effect mosaic of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.brightness, 0, "Expected effect brightness of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.ghost, 0, "Expected effect ghost of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Eis").effects.color, 0, "Expected effect color of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.fisheye, 0, "Expected effect fisheye of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.whirl, 0, "Expected effect whirl of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.pixelate, 0, "Expected effect pixelate of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.mosaic, 0, "Expected effect mosaic of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.brightness, 0, "Expected effect brightness of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.ghost, 0, "Expected effect ghost of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Spieler").layerOrder, 3, "Expected Sprite Spieler to be at layer 3");
  t.assert.equal(t.getSprite("Freundin").layerOrder, 5, "Expected Sprite Freundin to be at layer 5");
  t.assert.equal(t.getSprite("Münzen").layerOrder, 4, "Expected Sprite Münzen to be at layer 4");
  t.assert.equal(t.getSprite("Eis").layerOrder, 2, "Expected Sprite Eis to be at layer 2");
  t.assert.withinRange(t.getSprite("Spieler").x, -204.19825935775222, 5, "Expected Sprite Spieler to have x-position -204.19825935775222 +-5");
  t.assert.withinRange(t.getSprite("Spieler").y, -130.29850067789027, 5, "Expected Sprite Spieler to have y-position -130.29850067789027 +-5");
  t.assert.withinRange(t.getSprite("Freundin").x, 60, 5, "Expected Sprite Freundin to have x-position 60 +-5");
  t.assert.withinRange(t.getSprite("Freundin").y, -131, 5, "Expected Sprite Freundin to have y-position -131 +-5");
  t.assert.withinRange(t.getSprite("Münzen").x, -55.767816739882505, 5, "Expected Sprite Münzen to have x-position -55.767816739882505 +-5");
  t.assert.withinRange(t.getSprite("Münzen").y, -131.94251692975385, 5, "Expected Sprite Münzen to have y-position -131.94251692975385 +-5");
  t.assert.withinRange(t.getSprite("Eis").x, 195, 5, "Expected Sprite Eis to have x-position 195 +-5");
  t.assert.withinRange(t.getSprite("Eis").y, -158, 5, "Expected Sprite Eis to have y-position -158 +-5");
  t.assert.not(t.getSprite("Spieler").sayText, "Expected Sprite Spieler not to say anything");
  t.assert.equal(t.getSprite("Freundin").sayText, "Super!", "Expected Sprite Freundin to say Super!");
  t.assert.not(t.getSprite("Münzen").sayText, "Expected Sprite Münzen not to say anything");
  t.assert.not(t.getSprite("Eis").sayText, "Expected Sprite Eis not to say anything");
  t.assert.withinRange(t.getSprite("Spieler").size, 8, 1, "Expected Sprite Spieler to have size 8 +-1");
  t.assert.withinRange(t.getSprite("Freundin").size, 50, 1, "Expected Sprite Freundin to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Münzen").size, 50, 1, "Expected Sprite Münzen to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Eis").size, 20, 1, "Expected Sprite Eis to have size 20 +-1");
  t.assert.ok(t.getSprite("Spieler").visible, "Expected Sprite Spieler to be visible");
  t.assert.ok(t.getSprite("Freundin").visible, "Expected Sprite Freundin to be visible");
  t.assert.not(t.getSprite("Münzen").visible, "Expected Sprite Münzen not to be visible");
  t.assert.ok(t.getSprite("Eis").visible, "Expected Sprite Eis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Spieler").volume, 100, "Expected Sprite Spieler to have volume 100");
  t.assert.equal(t.getSprite("Freundin").volume, 100, "Expected Sprite Freundin to have volume 100");
  t.assert.equal(t.getSprite("Münzen").volume, 100, "Expected Sprite Münzen to have volume 100");
  t.assert.equal(t.getSprite("Eis").volume, 100, "Expected Sprite Eis to have volume 100");
  t.dragSprite('Spieler', -128.87381667892802, -175.79241192248946, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Spieler").currentCostume, 0, "Expected Sprite Spieler to have costume 0");
  t.assert.equal(t.getSprite("Freundin").currentCostume, 0, "Expected Sprite Freundin to have costume 0");
  t.assert.equal(t.getSprite("Münzen").currentCostume, 0, "Expected Sprite Münzen to have costume 0");
  t.assert.equal(t.getSprite("Eis").currentCostume, 0, "Expected Sprite Eis to have costume 0");
  t.assert.equal(t.getSprite("Spieler").getCloneCount(), 0, "Expected Sprite Spieler to have 0 clones");
  t.assert.equal(t.getSprite("Freundin").getCloneCount(), 0, "Expected Sprite Freundin to have 0 clones");
  t.assert.equal(t.getSprite("Münzen").getCloneCount(), 0, "Expected Sprite Münzen to have 0 clones");
  t.assert.equal(t.getSprite("Eis").getCloneCount(), 0, "Expected Sprite Eis to have 0 clones");
  t.assert.equal(t.getSprite("Spieler").direction, 180, 1, "Expected Sprite Spieler to face in direction 180 +-1");
  t.assert.equal(t.getSprite("Freundin").direction, 90, 1, "Expected Sprite Freundin to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Münzen").direction, 90, 1, "Expected Sprite Münzen to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Eis").direction, 90, 1, "Expected Sprite Eis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Spieler").effects.color, 0, "Expected effect color of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.fisheye, 0, "Expected effect fisheye of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.whirl, 0, "Expected effect whirl of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.pixelate, 0, "Expected effect pixelate of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.mosaic, 0, "Expected effect mosaic of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.brightness, 0, "Expected effect brightness of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.ghost, 0, "Expected effect ghost of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.color, 0, "Expected effect color of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.fisheye, 0, "Expected effect fisheye of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.whirl, 0, "Expected effect whirl of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.pixelate, 0, "Expected effect pixelate of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.mosaic, 0, "Expected effect mosaic of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.brightness, 0, "Expected effect brightness of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.ghost, 0, "Expected effect ghost of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.color, 0, "Expected effect color of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.fisheye, 0, "Expected effect fisheye of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.whirl, 0, "Expected effect whirl of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.pixelate, 0, "Expected effect pixelate of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.mosaic, 0, "Expected effect mosaic of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.brightness, 0, "Expected effect brightness of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.ghost, 0, "Expected effect ghost of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Eis").effects.color, 0, "Expected effect color of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.fisheye, 0, "Expected effect fisheye of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.whirl, 0, "Expected effect whirl of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.pixelate, 0, "Expected effect pixelate of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.mosaic, 0, "Expected effect mosaic of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.brightness, 0, "Expected effect brightness of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.ghost, 0, "Expected effect ghost of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Spieler").layerOrder, 3, "Expected Sprite Spieler to be at layer 3");
  t.assert.equal(t.getSprite("Freundin").layerOrder, 5, "Expected Sprite Freundin to be at layer 5");
  t.assert.equal(t.getSprite("Münzen").layerOrder, 4, "Expected Sprite Münzen to be at layer 4");
  t.assert.equal(t.getSprite("Eis").layerOrder, 2, "Expected Sprite Eis to be at layer 2");
  t.assert.withinRange(t.getSprite("Spieler").x, -128.87381667892802, 5, "Expected Sprite Spieler to have x-position -128.87381667892802 +-5");
  t.assert.withinRange(t.getSprite("Spieler").y, -180.79241192248946, 5, "Expected Sprite Spieler to have y-position -180.79241192248946 +-5");
  t.assert.withinRange(t.getSprite("Freundin").x, 60, 5, "Expected Sprite Freundin to have x-position 60 +-5");
  t.assert.withinRange(t.getSprite("Freundin").y, -131, 5, "Expected Sprite Freundin to have y-position -131 +-5");
  t.assert.withinRange(t.getSprite("Münzen").x, -55.767816739882505, 5, "Expected Sprite Münzen to have x-position -55.767816739882505 +-5");
  t.assert.withinRange(t.getSprite("Münzen").y, -131.94251692975385, 5, "Expected Sprite Münzen to have y-position -131.94251692975385 +-5");
  t.assert.withinRange(t.getSprite("Eis").x, 195, 5, "Expected Sprite Eis to have x-position 195 +-5");
  t.assert.withinRange(t.getSprite("Eis").y, -158, 5, "Expected Sprite Eis to have y-position -158 +-5");
  t.assert.not(t.getSprite("Spieler").sayText, "Expected Sprite Spieler not to say anything");
  t.assert.equal(t.getSprite("Freundin").sayText, "Super!", "Expected Sprite Freundin to say Super!");
  t.assert.not(t.getSprite("Münzen").sayText, "Expected Sprite Münzen not to say anything");
  t.assert.not(t.getSprite("Eis").sayText, "Expected Sprite Eis not to say anything");
  t.assert.withinRange(t.getSprite("Spieler").size, 8, 1, "Expected Sprite Spieler to have size 8 +-1");
  t.assert.withinRange(t.getSprite("Freundin").size, 50, 1, "Expected Sprite Freundin to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Münzen").size, 50, 1, "Expected Sprite Münzen to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Eis").size, 20, 1, "Expected Sprite Eis to have size 20 +-1");
  t.assert.ok(t.getSprite("Spieler").visible, "Expected Sprite Spieler to be visible");
  t.assert.ok(t.getSprite("Freundin").visible, "Expected Sprite Freundin to be visible");
  t.assert.not(t.getSprite("Münzen").visible, "Expected Sprite Münzen not to be visible");
  t.assert.ok(t.getSprite("Eis").visible, "Expected Sprite Eis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Spieler").volume, 100, "Expected Sprite Spieler to have volume 100");
  t.assert.equal(t.getSprite("Freundin").volume, 100, "Expected Sprite Freundin to have volume 100");
  t.assert.equal(t.getSprite("Münzen").volume, 100, "Expected Sprite Münzen to have volume 100");
  t.assert.equal(t.getSprite("Eis").volume, 100, "Expected Sprite Eis to have volume 100");
  await t.runForSteps(78);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Spieler").currentCostume, 0, "Expected Sprite Spieler to have costume 0");
  t.assert.equal(t.getSprite("Freundin").currentCostume, 0, "Expected Sprite Freundin to have costume 0");
  t.assert.equal(t.getSprite("Münzen").currentCostume, 0, "Expected Sprite Münzen to have costume 0");
  t.assert.equal(t.getSprite("Eis").currentCostume, 0, "Expected Sprite Eis to have costume 0");
  t.assert.equal(t.getSprite("Spieler").getCloneCount(), 0, "Expected Sprite Spieler to have 0 clones");
  t.assert.equal(t.getSprite("Freundin").getCloneCount(), 0, "Expected Sprite Freundin to have 0 clones");
  t.assert.equal(t.getSprite("Münzen").getCloneCount(), 0, "Expected Sprite Münzen to have 0 clones");
  t.assert.equal(t.getSprite("Eis").getCloneCount(), 0, "Expected Sprite Eis to have 0 clones");
  t.assert.equal(t.getSprite("Spieler").direction, 180, 1, "Expected Sprite Spieler to face in direction 180 +-1");
  t.assert.equal(t.getSprite("Freundin").direction, 90, 1, "Expected Sprite Freundin to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Münzen").direction, 90, 1, "Expected Sprite Münzen to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Eis").direction, 90, 1, "Expected Sprite Eis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Spieler").effects.color, 0, "Expected effect color of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.fisheye, 0, "Expected effect fisheye of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.whirl, 0, "Expected effect whirl of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.pixelate, 0, "Expected effect pixelate of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.mosaic, 0, "Expected effect mosaic of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.brightness, 0, "Expected effect brightness of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.ghost, 0, "Expected effect ghost of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.color, 0, "Expected effect color of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.fisheye, 0, "Expected effect fisheye of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.whirl, 0, "Expected effect whirl of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.pixelate, 0, "Expected effect pixelate of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.mosaic, 0, "Expected effect mosaic of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.brightness, 0, "Expected effect brightness of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.ghost, 0, "Expected effect ghost of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.color, 0, "Expected effect color of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.fisheye, 0, "Expected effect fisheye of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.whirl, 0, "Expected effect whirl of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.pixelate, 0, "Expected effect pixelate of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.mosaic, 0, "Expected effect mosaic of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.brightness, 0, "Expected effect brightness of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.ghost, 0, "Expected effect ghost of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Eis").effects.color, 0, "Expected effect color of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.fisheye, 0, "Expected effect fisheye of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.whirl, 0, "Expected effect whirl of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.pixelate, 0, "Expected effect pixelate of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.mosaic, 0, "Expected effect mosaic of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.brightness, 0, "Expected effect brightness of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.ghost, 0, "Expected effect ghost of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Spieler").layerOrder, 3, "Expected Sprite Spieler to be at layer 3");
  t.assert.equal(t.getSprite("Freundin").layerOrder, 5, "Expected Sprite Freundin to be at layer 5");
  t.assert.equal(t.getSprite("Münzen").layerOrder, 4, "Expected Sprite Münzen to be at layer 4");
  t.assert.equal(t.getSprite("Eis").layerOrder, 2, "Expected Sprite Eis to be at layer 2");
  t.assert.withinRange(t.getSprite("Spieler").x, -128.87381667892802, 5, "Expected Sprite Spieler to have x-position -128.87381667892802 +-5");
  t.assert.withinRange(t.getSprite("Spieler").y, -181, 5, "Expected Sprite Spieler to have y-position -181 +-5");
  t.assert.withinRange(t.getSprite("Freundin").x, 60, 5, "Expected Sprite Freundin to have x-position 60 +-5");
  t.assert.withinRange(t.getSprite("Freundin").y, -131, 5, "Expected Sprite Freundin to have y-position -131 +-5");
  t.assert.withinRange(t.getSprite("Münzen").x, -55.767816739882505, 5, "Expected Sprite Münzen to have x-position -55.767816739882505 +-5");
  t.assert.withinRange(t.getSprite("Münzen").y, -131.94251692975385, 5, "Expected Sprite Münzen to have y-position -131.94251692975385 +-5");
  t.assert.withinRange(t.getSprite("Eis").x, 195, 5, "Expected Sprite Eis to have x-position 195 +-5");
  t.assert.withinRange(t.getSprite("Eis").y, -158, 5, "Expected Sprite Eis to have y-position -158 +-5");
  t.assert.not(t.getSprite("Spieler").sayText, "Expected Sprite Spieler not to say anything");
  t.assert.not(t.getSprite("Freundin").sayText, "Expected Sprite Freundin not to say anything");
  t.assert.not(t.getSprite("Münzen").sayText, "Expected Sprite Münzen not to say anything");
  t.assert.not(t.getSprite("Eis").sayText, "Expected Sprite Eis not to say anything");
  t.assert.withinRange(t.getSprite("Spieler").size, 8, 1, "Expected Sprite Spieler to have size 8 +-1");
  t.assert.withinRange(t.getSprite("Freundin").size, 50, 1, "Expected Sprite Freundin to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Münzen").size, 50, 1, "Expected Sprite Münzen to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Eis").size, 20, 1, "Expected Sprite Eis to have size 20 +-1");
  t.assert.ok(t.getSprite("Spieler").visible, "Expected Sprite Spieler to be visible");
  t.assert.ok(t.getSprite("Freundin").visible, "Expected Sprite Freundin to be visible");
  t.assert.not(t.getSprite("Münzen").visible, "Expected Sprite Münzen not to be visible");
  t.assert.ok(t.getSprite("Eis").visible, "Expected Sprite Eis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Spieler").volume, 100, "Expected Sprite Spieler to have volume 100");
  t.assert.equal(t.getSprite("Freundin").volume, 100, "Expected Sprite Freundin to have volume 100");
  t.assert.equal(t.getSprite("Münzen").volume, 100, "Expected Sprite Münzen to have volume 100");
  t.assert.equal(t.getSprite("Eis").volume, 100, "Expected Sprite Eis to have volume 100");
  t.dragSprite('Spieler', -160.82326559788012, -160.8564265284193, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Spieler").currentCostume, 0, "Expected Sprite Spieler to have costume 0");
  t.assert.equal(t.getSprite("Freundin").currentCostume, 0, "Expected Sprite Freundin to have costume 0");
  t.assert.equal(t.getSprite("Münzen").currentCostume, 0, "Expected Sprite Münzen to have costume 0");
  t.assert.equal(t.getSprite("Eis").currentCostume, 0, "Expected Sprite Eis to have costume 0");
  t.assert.equal(t.getSprite("Spieler").getCloneCount(), 0, "Expected Sprite Spieler to have 0 clones");
  t.assert.equal(t.getSprite("Freundin").getCloneCount(), 0, "Expected Sprite Freundin to have 0 clones");
  t.assert.equal(t.getSprite("Münzen").getCloneCount(), 0, "Expected Sprite Münzen to have 0 clones");
  t.assert.equal(t.getSprite("Eis").getCloneCount(), 0, "Expected Sprite Eis to have 0 clones");
  t.assert.equal(t.getSprite("Spieler").direction, -90, 1, "Expected Sprite Spieler to face in direction -90 +-1");
  t.assert.equal(t.getSprite("Freundin").direction, 90, 1, "Expected Sprite Freundin to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Münzen").direction, 90, 1, "Expected Sprite Münzen to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Eis").direction, 90, 1, "Expected Sprite Eis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Spieler").effects.color, 0, "Expected effect color of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.fisheye, 0, "Expected effect fisheye of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.whirl, 0, "Expected effect whirl of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.pixelate, 0, "Expected effect pixelate of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.mosaic, 0, "Expected effect mosaic of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.brightness, 0, "Expected effect brightness of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.ghost, 0, "Expected effect ghost of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.color, 0, "Expected effect color of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.fisheye, 0, "Expected effect fisheye of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.whirl, 0, "Expected effect whirl of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.pixelate, 0, "Expected effect pixelate of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.mosaic, 0, "Expected effect mosaic of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.brightness, 0, "Expected effect brightness of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.ghost, 0, "Expected effect ghost of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.color, 0, "Expected effect color of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.fisheye, 0, "Expected effect fisheye of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.whirl, 0, "Expected effect whirl of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.pixelate, 0, "Expected effect pixelate of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.mosaic, 0, "Expected effect mosaic of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.brightness, 0, "Expected effect brightness of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.ghost, 0, "Expected effect ghost of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Eis").effects.color, 0, "Expected effect color of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.fisheye, 0, "Expected effect fisheye of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.whirl, 0, "Expected effect whirl of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.pixelate, 0, "Expected effect pixelate of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.mosaic, 0, "Expected effect mosaic of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.brightness, 0, "Expected effect brightness of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.ghost, 0, "Expected effect ghost of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Spieler").layerOrder, 3, "Expected Sprite Spieler to be at layer 3");
  t.assert.equal(t.getSprite("Freundin").layerOrder, 5, "Expected Sprite Freundin to be at layer 5");
  t.assert.equal(t.getSprite("Münzen").layerOrder, 4, "Expected Sprite Münzen to be at layer 4");
  t.assert.equal(t.getSprite("Eis").layerOrder, 2, "Expected Sprite Eis to be at layer 2");
  t.assert.withinRange(t.getSprite("Spieler").x, -165.82326559788012, 5, "Expected Sprite Spieler to have x-position -165.82326559788012 +-5");
  t.assert.withinRange(t.getSprite("Spieler").y, -160.8564265284193, 5, "Expected Sprite Spieler to have y-position -160.8564265284193 +-5");
  t.assert.withinRange(t.getSprite("Freundin").x, 60, 5, "Expected Sprite Freundin to have x-position 60 +-5");
  t.assert.withinRange(t.getSprite("Freundin").y, -131, 5, "Expected Sprite Freundin to have y-position -131 +-5");
  t.assert.withinRange(t.getSprite("Münzen").x, -55.767816739882505, 5, "Expected Sprite Münzen to have x-position -55.767816739882505 +-5");
  t.assert.withinRange(t.getSprite("Münzen").y, -131.94251692975385, 5, "Expected Sprite Münzen to have y-position -131.94251692975385 +-5");
  t.assert.withinRange(t.getSprite("Eis").x, 195, 5, "Expected Sprite Eis to have x-position 195 +-5");
  t.assert.withinRange(t.getSprite("Eis").y, -158, 5, "Expected Sprite Eis to have y-position -158 +-5");
  t.assert.not(t.getSprite("Spieler").sayText, "Expected Sprite Spieler not to say anything");
  t.assert.not(t.getSprite("Freundin").sayText, "Expected Sprite Freundin not to say anything");
  t.assert.not(t.getSprite("Münzen").sayText, "Expected Sprite Münzen not to say anything");
  t.assert.not(t.getSprite("Eis").sayText, "Expected Sprite Eis not to say anything");
  t.assert.withinRange(t.getSprite("Spieler").size, 8, 1, "Expected Sprite Spieler to have size 8 +-1");
  t.assert.withinRange(t.getSprite("Freundin").size, 50, 1, "Expected Sprite Freundin to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Münzen").size, 50, 1, "Expected Sprite Münzen to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Eis").size, 20, 1, "Expected Sprite Eis to have size 20 +-1");
  t.assert.ok(t.getSprite("Spieler").visible, "Expected Sprite Spieler to be visible");
  t.assert.ok(t.getSprite("Freundin").visible, "Expected Sprite Freundin to be visible");
  t.assert.not(t.getSprite("Münzen").visible, "Expected Sprite Münzen not to be visible");
  t.assert.ok(t.getSprite("Eis").visible, "Expected Sprite Eis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Spieler").volume, 100, "Expected Sprite Spieler to have volume 100");
  t.assert.equal(t.getSprite("Freundin").volume, 100, "Expected Sprite Freundin to have volume 100");
  t.assert.equal(t.getSprite("Münzen").volume, 100, "Expected Sprite Münzen to have volume 100");
  t.assert.equal(t.getSprite("Eis").volume, 100, "Expected Sprite Eis to have volume 100");
  t.dragSprite('Spieler', -174.03740896044118, -151.94174676702104, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Spieler").currentCostume, 0, "Expected Sprite Spieler to have costume 0");
  t.assert.equal(t.getSprite("Freundin").currentCostume, 0, "Expected Sprite Freundin to have costume 0");
  t.assert.equal(t.getSprite("Münzen").currentCostume, 0, "Expected Sprite Münzen to have costume 0");
  t.assert.equal(t.getSprite("Eis").currentCostume, 0, "Expected Sprite Eis to have costume 0");
  t.assert.equal(t.getSprite("Spieler").getCloneCount(), 0, "Expected Sprite Spieler to have 0 clones");
  t.assert.equal(t.getSprite("Freundin").getCloneCount(), 0, "Expected Sprite Freundin to have 0 clones");
  t.assert.equal(t.getSprite("Münzen").getCloneCount(), 0, "Expected Sprite Münzen to have 0 clones");
  t.assert.equal(t.getSprite("Eis").getCloneCount(), 0, "Expected Sprite Eis to have 0 clones");
  t.assert.equal(t.getSprite("Spieler").direction, -90, 1, "Expected Sprite Spieler to face in direction -90 +-1");
  t.assert.equal(t.getSprite("Freundin").direction, 90, 1, "Expected Sprite Freundin to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Münzen").direction, 90, 1, "Expected Sprite Münzen to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Eis").direction, 90, 1, "Expected Sprite Eis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Spieler").effects.color, 0, "Expected effect color of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.fisheye, 0, "Expected effect fisheye of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.whirl, 0, "Expected effect whirl of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.pixelate, 0, "Expected effect pixelate of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.mosaic, 0, "Expected effect mosaic of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.brightness, 0, "Expected effect brightness of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.ghost, 0, "Expected effect ghost of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.color, 0, "Expected effect color of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.fisheye, 0, "Expected effect fisheye of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.whirl, 0, "Expected effect whirl of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.pixelate, 0, "Expected effect pixelate of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.mosaic, 0, "Expected effect mosaic of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.brightness, 0, "Expected effect brightness of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.ghost, 0, "Expected effect ghost of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.color, 0, "Expected effect color of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.fisheye, 0, "Expected effect fisheye of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.whirl, 0, "Expected effect whirl of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.pixelate, 0, "Expected effect pixelate of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.mosaic, 0, "Expected effect mosaic of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.brightness, 0, "Expected effect brightness of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.ghost, 0, "Expected effect ghost of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Eis").effects.color, 0, "Expected effect color of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.fisheye, 0, "Expected effect fisheye of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.whirl, 0, "Expected effect whirl of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.pixelate, 0, "Expected effect pixelate of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.mosaic, 0, "Expected effect mosaic of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.brightness, 0, "Expected effect brightness of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.ghost, 0, "Expected effect ghost of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Spieler").layerOrder, 3, "Expected Sprite Spieler to be at layer 3");
  t.assert.equal(t.getSprite("Freundin").layerOrder, 5, "Expected Sprite Freundin to be at layer 5");
  t.assert.equal(t.getSprite("Münzen").layerOrder, 4, "Expected Sprite Münzen to be at layer 4");
  t.assert.equal(t.getSprite("Eis").layerOrder, 2, "Expected Sprite Eis to be at layer 2");
  t.assert.withinRange(t.getSprite("Spieler").x, -179.03740896044118, 5, "Expected Sprite Spieler to have x-position -179.03740896044118 +-5");
  t.assert.withinRange(t.getSprite("Spieler").y, -151.94174676702104, 5, "Expected Sprite Spieler to have y-position -151.94174676702104 +-5");
  t.assert.withinRange(t.getSprite("Freundin").x, 60, 5, "Expected Sprite Freundin to have x-position 60 +-5");
  t.assert.withinRange(t.getSprite("Freundin").y, -131, 5, "Expected Sprite Freundin to have y-position -131 +-5");
  t.assert.withinRange(t.getSprite("Münzen").x, -55.767816739882505, 5, "Expected Sprite Münzen to have x-position -55.767816739882505 +-5");
  t.assert.withinRange(t.getSprite("Münzen").y, -131.94251692975385, 5, "Expected Sprite Münzen to have y-position -131.94251692975385 +-5");
  t.assert.withinRange(t.getSprite("Eis").x, 195, 5, "Expected Sprite Eis to have x-position 195 +-5");
  t.assert.withinRange(t.getSprite("Eis").y, -158, 5, "Expected Sprite Eis to have y-position -158 +-5");
  t.assert.not(t.getSprite("Spieler").sayText, "Expected Sprite Spieler not to say anything");
  t.assert.not(t.getSprite("Freundin").sayText, "Expected Sprite Freundin not to say anything");
  t.assert.not(t.getSprite("Münzen").sayText, "Expected Sprite Münzen not to say anything");
  t.assert.not(t.getSprite("Eis").sayText, "Expected Sprite Eis not to say anything");
  t.assert.withinRange(t.getSprite("Spieler").size, 8, 1, "Expected Sprite Spieler to have size 8 +-1");
  t.assert.withinRange(t.getSprite("Freundin").size, 50, 1, "Expected Sprite Freundin to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Münzen").size, 50, 1, "Expected Sprite Münzen to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Eis").size, 20, 1, "Expected Sprite Eis to have size 20 +-1");
  t.assert.ok(t.getSprite("Spieler").visible, "Expected Sprite Spieler to be visible");
  t.assert.ok(t.getSprite("Freundin").visible, "Expected Sprite Freundin to be visible");
  t.assert.not(t.getSprite("Münzen").visible, "Expected Sprite Münzen not to be visible");
  t.assert.ok(t.getSprite("Eis").visible, "Expected Sprite Eis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Spieler").volume, 100, "Expected Sprite Spieler to have volume 100");
  t.assert.equal(t.getSprite("Freundin").volume, 100, "Expected Sprite Freundin to have volume 100");
  t.assert.equal(t.getSprite("Münzen").volume, 100, "Expected Sprite Münzen to have volume 100");
  t.assert.equal(t.getSprite("Eis").volume, 100, "Expected Sprite Eis to have volume 100");
  t.dragSprite('Spieler', 186.1199951171875, -179.6159998928391, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Spieler").currentCostume, 0, "Expected Sprite Spieler to have costume 0");
  t.assert.equal(t.getSprite("Freundin").currentCostume, 0, "Expected Sprite Freundin to have costume 0");
  t.assert.equal(t.getSprite("Münzen").currentCostume, 0, "Expected Sprite Münzen to have costume 0");
  t.assert.equal(t.getSprite("Eis").currentCostume, 0, "Expected Sprite Eis to have costume 0");
  t.assert.equal(t.getSprite("Spieler").getCloneCount(), 0, "Expected Sprite Spieler to have 0 clones");
  t.assert.equal(t.getSprite("Freundin").getCloneCount(), 0, "Expected Sprite Freundin to have 0 clones");
  t.assert.equal(t.getSprite("Münzen").getCloneCount(), 0, "Expected Sprite Münzen to have 0 clones");
  t.assert.equal(t.getSprite("Eis").getCloneCount(), 0, "Expected Sprite Eis to have 0 clones");
  t.assert.equal(t.getSprite("Spieler").direction, -90, 1, "Expected Sprite Spieler to face in direction -90 +-1");
  t.assert.equal(t.getSprite("Freundin").direction, 90, 1, "Expected Sprite Freundin to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Münzen").direction, 90, 1, "Expected Sprite Münzen to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Eis").direction, 90, 1, "Expected Sprite Eis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Spieler").effects.color, 0, "Expected effect color of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.fisheye, 0, "Expected effect fisheye of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.whirl, 0, "Expected effect whirl of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.pixelate, 0, "Expected effect pixelate of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.mosaic, 0, "Expected effect mosaic of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.brightness, 0, "Expected effect brightness of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Spieler").effects.ghost, 0, "Expected effect ghost of Sprite Spieler to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.color, 0, "Expected effect color of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.fisheye, 0, "Expected effect fisheye of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.whirl, 0, "Expected effect whirl of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.pixelate, 0, "Expected effect pixelate of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.mosaic, 0, "Expected effect mosaic of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.brightness, 0, "Expected effect brightness of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Freundin").effects.ghost, 0, "Expected effect ghost of Sprite Freundin to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.color, 0, "Expected effect color of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.fisheye, 0, "Expected effect fisheye of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.whirl, 0, "Expected effect whirl of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.pixelate, 0, "Expected effect pixelate of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.mosaic, 0, "Expected effect mosaic of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.brightness, 0, "Expected effect brightness of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Münzen").effects.ghost, 0, "Expected effect ghost of Sprite Münzen to be 0");
  t.assert.equal(t.getSprite("Eis").effects.color, 0, "Expected effect color of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.fisheye, 0, "Expected effect fisheye of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.whirl, 0, "Expected effect whirl of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.pixelate, 0, "Expected effect pixelate of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.mosaic, 0, "Expected effect mosaic of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.brightness, 0, "Expected effect brightness of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Eis").effects.ghost, 0, "Expected effect ghost of Sprite Eis to be 0");
  t.assert.equal(t.getSprite("Spieler").layerOrder, 3, "Expected Sprite Spieler to be at layer 3");
  t.assert.equal(t.getSprite("Freundin").layerOrder, 5, "Expected Sprite Freundin to be at layer 5");
  t.assert.equal(t.getSprite("Münzen").layerOrder, 4, "Expected Sprite Münzen to be at layer 4");
  t.assert.equal(t.getSprite("Eis").layerOrder, 2, "Expected Sprite Eis to be at layer 2");
  t.assert.withinRange(t.getSprite("Spieler").x, 186.1199951171875, 5, "Expected Sprite Spieler to have x-position 186.1199951171875 +-5");
  t.assert.withinRange(t.getSprite("Spieler").y, -179.6159998928391, 5, "Expected Sprite Spieler to have y-position -179.6159998928391 +-5");
  t.assert.withinRange(t.getSprite("Freundin").x, 60, 5, "Expected Sprite Freundin to have x-position 60 +-5");
  t.assert.withinRange(t.getSprite("Freundin").y, -131, 5, "Expected Sprite Freundin to have y-position -131 +-5");
  t.assert.withinRange(t.getSprite("Münzen").x, -55.767816739882505, 5, "Expected Sprite Münzen to have x-position -55.767816739882505 +-5");
  t.assert.withinRange(t.getSprite("Münzen").y, -131.94251692975385, 5, "Expected Sprite Münzen to have y-position -131.94251692975385 +-5");
  t.assert.withinRange(t.getSprite("Eis").x, 195, 5, "Expected Sprite Eis to have x-position 195 +-5");
  t.assert.withinRange(t.getSprite("Eis").y, -158, 5, "Expected Sprite Eis to have y-position -158 +-5");
  t.assert.not(t.getSprite("Spieler").sayText, "Expected Sprite Spieler not to say anything");
  t.assert.not(t.getSprite("Freundin").sayText, "Expected Sprite Freundin not to say anything");
  t.assert.not(t.getSprite("Münzen").sayText, "Expected Sprite Münzen not to say anything");
  t.assert.not(t.getSprite("Eis").sayText, "Expected Sprite Eis not to say anything");
  t.assert.withinRange(t.getSprite("Spieler").size, 8, 1, "Expected Sprite Spieler to have size 8 +-1");
  t.assert.withinRange(t.getSprite("Freundin").size, 50, 1, "Expected Sprite Freundin to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Münzen").size, 50, 1, "Expected Sprite Münzen to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Eis").size, 20, 1, "Expected Sprite Eis to have size 20 +-1");
  t.assert.ok(t.getSprite("Spieler").visible, "Expected Sprite Spieler to be visible");
  t.assert.ok(t.getSprite("Freundin").visible, "Expected Sprite Freundin to be visible");
  t.assert.not(t.getSprite("Münzen").visible, "Expected Sprite Münzen not to be visible");
  t.assert.ok(t.getSprite("Eis").visible, "Expected Sprite Eis to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Spieler").volume, 100, "Expected Sprite Spieler to have volume 100");
  t.assert.equal(t.getSprite("Freundin").volume, 100, "Expected Sprite Freundin to have volume 100");
  t.assert.equal(t.getSprite("Münzen").volume, 100, "Expected Sprite Münzen to have volume 100");
  t.assert.equal(t.getSprite("Eis").volume, 100, "Expected Sprite Eis to have volume 100");
  t.end();
}

module.exports = [
  {
      test: test0,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687939111224',
      type: 'standard',
  }
]
