const test0 = async function (t) {
  t.keyPress('up arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kopf").currentCostume, 0, "Expected Sprite Kopf to have costume 0");
  t.assert.equal(t.getSprite("Körper").currentCostume, 0, "Expected Sprite Körper to have costume 0");
  t.assert.equal(t.getSprite("Punkt").currentCostume, 0, "Expected Sprite Punkt to have costume 0");
  t.assert.equal(t.getSprite("Goodie").currentCostume, 0, "Expected Sprite Goodie to have costume 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).currentCostume, 0, "Expected Clone 1 of Körper to have costume 0");
  t.assert.equal(t.getSprite("Kopf").getCloneCount(), 0, "Expected Sprite Kopf to have 0 clones");
  t.assert.equal(t.getSprite("Körper").getCloneCount(), 1, "Expected Sprite Körper to have 1 clones");
  t.assert.equal(t.getSprite("Punkt").getCloneCount(), 0, "Expected Sprite Punkt to have 0 clones");
  t.assert.equal(t.getSprite("Goodie").getCloneCount(), 0, "Expected Sprite Goodie to have 0 clones");
  t.assert.equal(t.getSprite("Kopf").direction, 0, 1, "Expected Sprite Kopf to face in direction 0 +-1");
  t.assert.equal(t.getSprite("Körper").direction, 90, 1, "Expected Sprite Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Punkt").direction, 90, 1, "Expected Sprite Punkt to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Goodie").direction, 90, 1, "Expected Sprite Goodie to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Körper").getClone(1).direction, 90, 1, "Expected Clone 1 of Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kopf").effects.color, 0, "Expected effect color of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.fisheye, 0, "Expected effect fisheye of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.whirl, 0, "Expected effect whirl of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.pixelate, 0, "Expected effect pixelate of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.mosaic, 0, "Expected effect mosaic of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.brightness, 0, "Expected effect brightness of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.ghost, 0, "Expected effect ghost of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Körper").effects.color, 0, "Expected effect color of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.fisheye, 0, "Expected effect fisheye of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.whirl, 0, "Expected effect whirl of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.pixelate, 0, "Expected effect pixelate of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.mosaic, 0, "Expected effect mosaic of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.brightness, 0, "Expected effect brightness of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.ghost, 0, "Expected effect ghost of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.color, 0, "Expected effect color of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.fisheye, 0, "Expected effect fisheye of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.whirl, 0, "Expected effect whirl of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.pixelate, 0, "Expected effect pixelate of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.mosaic, 0, "Expected effect mosaic of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.brightness, 0, "Expected effect brightness of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.ghost, 0, "Expected effect ghost of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.color, 0, "Expected effect color of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.fisheye, 0, "Expected effect fisheye of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.whirl, 0, "Expected effect whirl of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.pixelate, 0, "Expected effect pixelate of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.mosaic, 0, "Expected effect mosaic of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.brightness, 0, "Expected effect brightness of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.ghost, 0, "Expected effect ghost of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Kopf").layerOrder, 1, "Expected Sprite Kopf to be at layer 1");
  t.assert.equal(t.getSprite("Körper").layerOrder, 3, "Expected Sprite Körper to be at layer 3");
  t.assert.equal(t.getSprite("Punkt").layerOrder, 5, "Expected Sprite Punkt to be at layer 5");
  t.assert.equal(t.getSprite("Goodie").layerOrder, 4, "Expected Sprite Goodie to be at layer 4");
  t.assert.equal(t.getSprite("Körper").getClone(1).getLayerOrder(), 2, "Expected Clone 1 of Körper to be at layer 2");
  t.assert.withinRange(t.getSprite("Kopf").x, 3, 5, "Expected Sprite Kopf to have x-position 3 +-5");
  t.assert.withinRange(t.getSprite("Kopf").y, 103, 5, "Expected Sprite Kopf to have y-position 103 +-5");
  t.assert.withinRange(t.getSprite("Körper").x, 3, 5, "Expected Sprite Körper to have x-position 3 +-5");
  t.assert.withinRange(t.getSprite("Körper").y, 100, 5, "Expected Sprite Körper to have y-position 100 +-5");
  t.assert.withinRange(t.getSprite("Punkt").x, 0, 5, "Expected Sprite Punkt to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Punkt").y, -100, 5, "Expected Sprite Punkt to have y-position -100 +-5");
  t.assert.withinRange(t.getSprite("Goodie").x, 0, 5, "Expected Sprite Goodie to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Goodie").y, 0, 5, "Expected Sprite Goodie to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Körper").getClone(1).x, 3, 5, "Expected Clone 1 of Körper to have x-position 3 +-5");
  t.assert.withinRange(t.getSprite("Körper").getClone(1).y, 100, 5, "Expected Clone 1 of Körper to have y-position 100 +-5");
  t.assert.not(t.getSprite("Kopf").sayText, "Expected Sprite Kopf not to say anything");
  t.assert.not(t.getSprite("Körper").sayText, "Expected Sprite Körper not to say anything");
  t.assert.not(t.getSprite("Punkt").sayText, "Expected Sprite Punkt not to say anything");
  t.assert.not(t.getSprite("Goodie").sayText, "Expected Sprite Goodie not to say anything");
  t.assert.not(t.getSprite("Körper").getClone(1).sayText, "Expected Clone 1 of Körper not to say anything");
  t.assert.withinRange(t.getSprite("Kopf").size, 100, 1, "Expected Sprite Kopf to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Körper").size, 90, 1, "Expected Sprite Körper to have size 90 +-1");
  t.assert.withinRange(t.getSprite("Punkt").size, 100, 1, "Expected Sprite Punkt to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Goodie").size, 100, 1, "Expected Sprite Goodie to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Körper").getClone(1).size, 90, 1, "Expected Clone 1 of Körper to have size 90 +-1");
  t.assert.ok(t.getSprite("Kopf").visible, "Expected Sprite Kopf to be visible");
  t.assert.ok(t.getSprite("Körper").visible, "Expected Sprite Körper to be visible");
  t.assert.ok(t.getSprite("Punkt").visible, "Expected Sprite Punkt to be visible");
  t.assert.not(t.getSprite("Goodie").visible, "Expected Sprite Goodie not to be visible");
  t.assert.ok(t.getSprite("Körper").getClone(1).visible, "Expected Clone 1 of Körper to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kopf").volume, 100, "Expected Sprite Kopf to have volume 100");
  t.assert.equal(t.getSprite("Körper").volume, 100, "Expected Sprite Körper to have volume 100");
  t.assert.equal(t.getSprite("Punkt").volume, 100, "Expected Sprite Punkt to have volume 100");
  t.assert.equal(t.getSprite("Goodie").volume, 100, "Expected Sprite Goodie to have volume 100");
  t.assert.equal(t.getSprite("Körper").getClone(1).volume, 100, "Expected Clone 1 of Körper to have volume 100");
  t.keyPress('down arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kopf").currentCostume, 0, "Expected Sprite Kopf to have costume 0");
  t.assert.equal(t.getSprite("Körper").currentCostume, 0, "Expected Sprite Körper to have costume 0");
  t.assert.equal(t.getSprite("Punkt").currentCostume, 0, "Expected Sprite Punkt to have costume 0");
  t.assert.equal(t.getSprite("Goodie").currentCostume, 0, "Expected Sprite Goodie to have costume 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).currentCostume, 0, "Expected Clone 1 of Körper to have costume 0");
  t.assert.equal(t.getSprite("Kopf").getCloneCount(), 0, "Expected Sprite Kopf to have 0 clones");
  t.assert.equal(t.getSprite("Körper").getCloneCount(), 1, "Expected Sprite Körper to have 1 clones");
  t.assert.equal(t.getSprite("Punkt").getCloneCount(), 0, "Expected Sprite Punkt to have 0 clones");
  t.assert.equal(t.getSprite("Goodie").getCloneCount(), 0, "Expected Sprite Goodie to have 0 clones");
  t.assert.equal(t.getSprite("Kopf").direction, 180, 1, "Expected Sprite Kopf to face in direction 180 +-1");
  t.assert.equal(t.getSprite("Körper").direction, 90, 1, "Expected Sprite Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Punkt").direction, 90, 1, "Expected Sprite Punkt to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Goodie").direction, 90, 1, "Expected Sprite Goodie to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Körper").getClone(1).direction, 90, 1, "Expected Clone 1 of Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kopf").effects.color, 0, "Expected effect color of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.fisheye, 0, "Expected effect fisheye of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.whirl, 0, "Expected effect whirl of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.pixelate, 0, "Expected effect pixelate of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.mosaic, 0, "Expected effect mosaic of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.brightness, 0, "Expected effect brightness of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.ghost, 0, "Expected effect ghost of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Körper").effects.color, 0, "Expected effect color of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.fisheye, 0, "Expected effect fisheye of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.whirl, 0, "Expected effect whirl of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.pixelate, 0, "Expected effect pixelate of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.mosaic, 0, "Expected effect mosaic of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.brightness, 0, "Expected effect brightness of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.ghost, 0, "Expected effect ghost of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.color, 0, "Expected effect color of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.fisheye, 0, "Expected effect fisheye of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.whirl, 0, "Expected effect whirl of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.pixelate, 0, "Expected effect pixelate of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.mosaic, 0, "Expected effect mosaic of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.brightness, 0, "Expected effect brightness of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.ghost, 0, "Expected effect ghost of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.color, 0, "Expected effect color of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.fisheye, 0, "Expected effect fisheye of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.whirl, 0, "Expected effect whirl of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.pixelate, 0, "Expected effect pixelate of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.mosaic, 0, "Expected effect mosaic of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.brightness, 0, "Expected effect brightness of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.ghost, 0, "Expected effect ghost of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Kopf").layerOrder, 1, "Expected Sprite Kopf to be at layer 1");
  t.assert.equal(t.getSprite("Körper").layerOrder, 3, "Expected Sprite Körper to be at layer 3");
  t.assert.equal(t.getSprite("Punkt").layerOrder, 5, "Expected Sprite Punkt to be at layer 5");
  t.assert.equal(t.getSprite("Goodie").layerOrder, 4, "Expected Sprite Goodie to be at layer 4");
  t.assert.equal(t.getSprite("Körper").getClone(1).getLayerOrder(), 2, "Expected Clone 1 of Körper to be at layer 2");
  t.assert.withinRange(t.getSprite("Kopf").x, 3, 5, "Expected Sprite Kopf to have x-position 3 +-5");
  t.assert.withinRange(t.getSprite("Kopf").y, 103, 5, "Expected Sprite Kopf to have y-position 103 +-5");
  t.assert.withinRange(t.getSprite("Körper").x, 3, 5, "Expected Sprite Körper to have x-position 3 +-5");
  t.assert.withinRange(t.getSprite("Körper").y, 106, 5, "Expected Sprite Körper to have y-position 106 +-5");
  t.assert.withinRange(t.getSprite("Punkt").x, 0, 5, "Expected Sprite Punkt to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Punkt").y, -100, 5, "Expected Sprite Punkt to have y-position -100 +-5");
  t.assert.withinRange(t.getSprite("Goodie").x, 0, 5, "Expected Sprite Goodie to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Goodie").y, 0, 5, "Expected Sprite Goodie to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Körper").getClone(1).x, 3, 5, "Expected Clone 1 of Körper to have x-position 3 +-5");
  t.assert.withinRange(t.getSprite("Körper").getClone(1).y, 106, 5, "Expected Clone 1 of Körper to have y-position 106 +-5");
  t.assert.not(t.getSprite("Kopf").sayText, "Expected Sprite Kopf not to say anything");
  t.assert.not(t.getSprite("Körper").sayText, "Expected Sprite Körper not to say anything");
  t.assert.not(t.getSprite("Punkt").sayText, "Expected Sprite Punkt not to say anything");
  t.assert.not(t.getSprite("Goodie").sayText, "Expected Sprite Goodie not to say anything");
  t.assert.not(t.getSprite("Körper").getClone(1).sayText, "Expected Clone 1 of Körper not to say anything");
  t.assert.withinRange(t.getSprite("Kopf").size, 100, 1, "Expected Sprite Kopf to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Körper").size, 90, 1, "Expected Sprite Körper to have size 90 +-1");
  t.assert.withinRange(t.getSprite("Punkt").size, 100, 1, "Expected Sprite Punkt to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Goodie").size, 100, 1, "Expected Sprite Goodie to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Körper").getClone(1).size, 90, 1, "Expected Clone 1 of Körper to have size 90 +-1");
  t.assert.ok(t.getSprite("Kopf").visible, "Expected Sprite Kopf to be visible");
  t.assert.ok(t.getSprite("Körper").visible, "Expected Sprite Körper to be visible");
  t.assert.ok(t.getSprite("Punkt").visible, "Expected Sprite Punkt to be visible");
  t.assert.not(t.getSprite("Goodie").visible, "Expected Sprite Goodie not to be visible");
  t.assert.ok(t.getSprite("Körper").getClone(1).visible, "Expected Clone 1 of Körper to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kopf").volume, 100, "Expected Sprite Kopf to have volume 100");
  t.assert.equal(t.getSprite("Körper").volume, 100, "Expected Sprite Körper to have volume 100");
  t.assert.equal(t.getSprite("Punkt").volume, 100, "Expected Sprite Punkt to have volume 100");
  t.assert.equal(t.getSprite("Goodie").volume, 100, "Expected Sprite Goodie to have volume 100");
  t.assert.equal(t.getSprite("Körper").getClone(1).volume, 100, "Expected Clone 1 of Körper to have volume 100");
  t.dragSprite('Punkt', -1.0078527601237575, 96.36769941955967, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kopf").currentCostume, 0, "Expected Sprite Kopf to have costume 0");
  t.assert.equal(t.getSprite("Körper").currentCostume, 0, "Expected Sprite Körper to have costume 0");
  t.assert.equal(t.getSprite("Punkt").currentCostume, 0, "Expected Sprite Punkt to have costume 0");
  t.assert.equal(t.getSprite("Goodie").currentCostume, 0, "Expected Sprite Goodie to have costume 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).currentCostume, 0, "Expected Clone 1 of Körper to have costume 0");
  t.assert.equal(t.getSprite("Kopf").getCloneCount(), 0, "Expected Sprite Kopf to have 0 clones");
  t.assert.equal(t.getSprite("Körper").getCloneCount(), 1, "Expected Sprite Körper to have 1 clones");
  t.assert.equal(t.getSprite("Punkt").getCloneCount(), 0, "Expected Sprite Punkt to have 0 clones");
  t.assert.equal(t.getSprite("Goodie").getCloneCount(), 0, "Expected Sprite Goodie to have 0 clones");
  t.assert.equal(t.getSprite("Kopf").direction, 180, 1, "Expected Sprite Kopf to face in direction 180 +-1");
  t.assert.equal(t.getSprite("Körper").direction, 90, 1, "Expected Sprite Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Punkt").direction, 90, 1, "Expected Sprite Punkt to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Goodie").direction, 90, 1, "Expected Sprite Goodie to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Körper").getClone(1).direction, 90, 1, "Expected Clone 1 of Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kopf").effects.color, 0, "Expected effect color of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.fisheye, 0, "Expected effect fisheye of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.whirl, 0, "Expected effect whirl of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.pixelate, 0, "Expected effect pixelate of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.mosaic, 0, "Expected effect mosaic of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.brightness, 0, "Expected effect brightness of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.ghost, 0, "Expected effect ghost of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Körper").effects.color, 0, "Expected effect color of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.fisheye, 0, "Expected effect fisheye of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.whirl, 0, "Expected effect whirl of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.pixelate, 0, "Expected effect pixelate of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.mosaic, 0, "Expected effect mosaic of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.brightness, 0, "Expected effect brightness of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.ghost, 0, "Expected effect ghost of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.color, 0, "Expected effect color of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.fisheye, 0, "Expected effect fisheye of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.whirl, 0, "Expected effect whirl of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.pixelate, 0, "Expected effect pixelate of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.mosaic, 0, "Expected effect mosaic of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.brightness, 0, "Expected effect brightness of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.ghost, 0, "Expected effect ghost of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.color, 0, "Expected effect color of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.fisheye, 0, "Expected effect fisheye of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.whirl, 0, "Expected effect whirl of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.pixelate, 0, "Expected effect pixelate of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.mosaic, 0, "Expected effect mosaic of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.brightness, 0, "Expected effect brightness of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.ghost, 0, "Expected effect ghost of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Kopf").layerOrder, 1, "Expected Sprite Kopf to be at layer 1");
  t.assert.equal(t.getSprite("Körper").layerOrder, 3, "Expected Sprite Körper to be at layer 3");
  t.assert.equal(t.getSprite("Punkt").layerOrder, 5, "Expected Sprite Punkt to be at layer 5");
  t.assert.equal(t.getSprite("Goodie").layerOrder, 4, "Expected Sprite Goodie to be at layer 4");
  t.assert.equal(t.getSprite("Körper").getClone(1).getLayerOrder(), 2, "Expected Clone 1 of Körper to be at layer 2");
  t.assert.withinRange(t.getSprite("Kopf").x, 3, 5, "Expected Sprite Kopf to have x-position 3 +-5");
  t.assert.withinRange(t.getSprite("Kopf").y, 100, 5, "Expected Sprite Kopf to have y-position 100 +-5");
  t.assert.withinRange(t.getSprite("Körper").x, 3, 5, "Expected Sprite Körper to have x-position 3 +-5");
  t.assert.withinRange(t.getSprite("Körper").y, 103, 5, "Expected Sprite Körper to have y-position 103 +-5");
  t.assert.withinRange(t.getSprite("Punkt").x, 56, 5, "Expected Sprite Punkt to have x-position 56 +-5");
  t.assert.withinRange(t.getSprite("Punkt").y, -127, 5, "Expected Sprite Punkt to have y-position -127 +-5");
  t.assert.withinRange(t.getSprite("Goodie").x, 0, 5, "Expected Sprite Goodie to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Goodie").y, 0, 5, "Expected Sprite Goodie to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Körper").getClone(1).x, 3, 5, "Expected Clone 1 of Körper to have x-position 3 +-5");
  t.assert.withinRange(t.getSprite("Körper").getClone(1).y, 103, 5, "Expected Clone 1 of Körper to have y-position 103 +-5");
  t.assert.not(t.getSprite("Kopf").sayText, "Expected Sprite Kopf not to say anything");
  t.assert.not(t.getSprite("Körper").sayText, "Expected Sprite Körper not to say anything");
  t.assert.not(t.getSprite("Punkt").sayText, "Expected Sprite Punkt not to say anything");
  t.assert.not(t.getSprite("Goodie").sayText, "Expected Sprite Goodie not to say anything");
  t.assert.not(t.getSprite("Körper").getClone(1).sayText, "Expected Clone 1 of Körper not to say anything");
  t.assert.withinRange(t.getSprite("Kopf").size, 100, 1, "Expected Sprite Kopf to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Körper").size, 90, 1, "Expected Sprite Körper to have size 90 +-1");
  t.assert.withinRange(t.getSprite("Punkt").size, 100, 1, "Expected Sprite Punkt to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Goodie").size, 100, 1, "Expected Sprite Goodie to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Körper").getClone(1).size, 90, 1, "Expected Clone 1 of Körper to have size 90 +-1");
  t.assert.ok(t.getSprite("Kopf").visible, "Expected Sprite Kopf to be visible");
  t.assert.ok(t.getSprite("Körper").visible, "Expected Sprite Körper to be visible");
  t.assert.ok(t.getSprite("Punkt").visible, "Expected Sprite Punkt to be visible");
  t.assert.not(t.getSprite("Goodie").visible, "Expected Sprite Goodie not to be visible");
  t.assert.ok(t.getSprite("Körper").getClone(1).visible, "Expected Clone 1 of Körper to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kopf").volume, 100, "Expected Sprite Kopf to have volume 100");
  t.assert.equal(t.getSprite("Körper").volume, 100, "Expected Sprite Körper to have volume 100");
  t.assert.equal(t.getSprite("Punkt").volume, 100, "Expected Sprite Punkt to have volume 100");
  t.assert.equal(t.getSprite("Goodie").volume, 100, "Expected Sprite Goodie to have volume 100");
  t.assert.equal(t.getSprite("Körper").getClone(1).volume, 100, "Expected Clone 1 of Körper to have volume 100");
  t.keyPress('right arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kopf").currentCostume, 0, "Expected Sprite Kopf to have costume 0");
  t.assert.equal(t.getSprite("Körper").currentCostume, 0, "Expected Sprite Körper to have costume 0");
  t.assert.equal(t.getSprite("Punkt").currentCostume, 0, "Expected Sprite Punkt to have costume 0");
  t.assert.equal(t.getSprite("Goodie").currentCostume, 0, "Expected Sprite Goodie to have costume 0");
  t.assert.equal(t.getSprite("Körper").getClone(2).currentCostume, 0, "Expected Clone 2 of Körper to have costume 0");
  t.assert.equal(t.getSprite("Körper").getClone(3).currentCostume, 0, "Expected Clone 3 of Körper to have costume 0");
  t.assert.equal(t.getSprite("Kopf").getCloneCount(), 0, "Expected Sprite Kopf to have 0 clones");
  t.assert.equal(t.getSprite("Körper").getCloneCount(), 3, "Expected Sprite Körper to have 3 clones");
  t.assert.equal(t.getSprite("Punkt").getCloneCount(), 0, "Expected Sprite Punkt to have 0 clones");
  t.assert.equal(t.getSprite("Goodie").getCloneCount(), 0, "Expected Sprite Goodie to have 0 clones");
  t.assert.equal(t.getSprite("Kopf").direction, 90, 1, "Expected Sprite Kopf to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Körper").direction, 90, 1, "Expected Sprite Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Punkt").direction, 90, 1, "Expected Sprite Punkt to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Goodie").direction, 90, 1, "Expected Sprite Goodie to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Körper").getClone(2).direction, 90, 1, "Expected Clone 2 of Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Körper").getClone(3).direction, 90, 1, "Expected Clone 3 of Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kopf").effects.color, 0, "Expected effect color of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.fisheye, 0, "Expected effect fisheye of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.whirl, 0, "Expected effect whirl of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.pixelate, 0, "Expected effect pixelate of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.mosaic, 0, "Expected effect mosaic of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.brightness, 0, "Expected effect brightness of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.ghost, 0, "Expected effect ghost of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Körper").effects.color, 0, "Expected effect color of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.fisheye, 0, "Expected effect fisheye of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.whirl, 0, "Expected effect whirl of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.pixelate, 0, "Expected effect pixelate of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.mosaic, 0, "Expected effect mosaic of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.brightness, 0, "Expected effect brightness of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.ghost, 0, "Expected effect ghost of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.color, 0, "Expected effect color of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.fisheye, 0, "Expected effect fisheye of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.whirl, 0, "Expected effect whirl of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.pixelate, 0, "Expected effect pixelate of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.mosaic, 0, "Expected effect mosaic of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.brightness, 0, "Expected effect brightness of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.ghost, 0, "Expected effect ghost of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.color, 0, "Expected effect color of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.fisheye, 0, "Expected effect fisheye of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.whirl, 0, "Expected effect whirl of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.pixelate, 0, "Expected effect pixelate of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.mosaic, 0, "Expected effect mosaic of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.brightness, 0, "Expected effect brightness of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.ghost, 0, "Expected effect ghost of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Körper to be 0");
  t.assert.equal(t.getSprite("Kopf").layerOrder, 1, "Expected Sprite Kopf to be at layer 1");
  t.assert.equal(t.getSprite("Körper").layerOrder, 5, "Expected Sprite Körper to be at layer 5");
  t.assert.equal(t.getSprite("Punkt").layerOrder, 7, "Expected Sprite Punkt to be at layer 7");
  t.assert.equal(t.getSprite("Goodie").layerOrder, 6, "Expected Sprite Goodie to be at layer 6");
  t.assert.equal(t.getSprite("Körper").getClone(2).getLayerOrder(), 3, "Expected Clone 2 of Körper to be at layer 3");
  t.assert.equal(t.getSprite("Körper").getClone(3).getLayerOrder(), 4, "Expected Clone 3 of Körper to be at layer 4");
  t.assert.withinRange(t.getSprite("Kopf").x, 6, 5, "Expected Sprite Kopf to have x-position 6 +-5");
  t.assert.withinRange(t.getSprite("Kopf").y, 97, 5, "Expected Sprite Kopf to have y-position 97 +-5");
  t.assert.withinRange(t.getSprite("Körper").x, 3, 5, "Expected Sprite Körper to have x-position 3 +-5");
  t.assert.withinRange(t.getSprite("Körper").y, 97, 5, "Expected Sprite Körper to have y-position 97 +-5");
  t.assert.withinRange(t.getSprite("Punkt").x, 56, 5, "Expected Sprite Punkt to have x-position 56 +-5");
  t.assert.withinRange(t.getSprite("Punkt").y, -127, 5, "Expected Sprite Punkt to have y-position -127 +-5");
  t.assert.withinRange(t.getSprite("Goodie").x, 0, 5, "Expected Sprite Goodie to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Goodie").y, 0, 5, "Expected Sprite Goodie to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Körper").getClone(2).x, 3, 5, "Expected Clone 2 of Körper to have x-position 3 +-5");
  t.assert.withinRange(t.getSprite("Körper").getClone(2).y, 100, 5, "Expected Clone 2 of Körper to have y-position 100 +-5");
  t.assert.withinRange(t.getSprite("Körper").getClone(3).x, 3, 5, "Expected Clone 3 of Körper to have x-position 3 +-5");
  t.assert.withinRange(t.getSprite("Körper").getClone(3).y, 97, 5, "Expected Clone 3 of Körper to have y-position 97 +-5");
  t.assert.not(t.getSprite("Kopf").sayText, "Expected Sprite Kopf not to say anything");
  t.assert.not(t.getSprite("Körper").sayText, "Expected Sprite Körper not to say anything");
  t.assert.not(t.getSprite("Punkt").sayText, "Expected Sprite Punkt not to say anything");
  t.assert.not(t.getSprite("Goodie").sayText, "Expected Sprite Goodie not to say anything");
  t.assert.not(t.getSprite("Körper").getClone(2).sayText, "Expected Clone 2 of Körper not to say anything");
  t.assert.not(t.getSprite("Körper").getClone(3).sayText, "Expected Clone 3 of Körper not to say anything");
  t.assert.withinRange(t.getSprite("Kopf").size, 100, 1, "Expected Sprite Kopf to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Körper").size, 90, 1, "Expected Sprite Körper to have size 90 +-1");
  t.assert.withinRange(t.getSprite("Punkt").size, 100, 1, "Expected Sprite Punkt to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Goodie").size, 100, 1, "Expected Sprite Goodie to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Körper").getClone(2).size, 90, 1, "Expected Clone 2 of Körper to have size 90 +-1");
  t.assert.withinRange(t.getSprite("Körper").getClone(3).size, 90, 1, "Expected Clone 3 of Körper to have size 90 +-1");
  t.assert.ok(t.getSprite("Kopf").visible, "Expected Sprite Kopf to be visible");
  t.assert.ok(t.getSprite("Körper").visible, "Expected Sprite Körper to be visible");
  t.assert.ok(t.getSprite("Punkt").visible, "Expected Sprite Punkt to be visible");
  t.assert.not(t.getSprite("Goodie").visible, "Expected Sprite Goodie not to be visible");
  t.assert.ok(t.getSprite("Körper").getClone(2).visible, "Expected Clone 2 of Körper to be visible");
  t.assert.ok(t.getSprite("Körper").getClone(3).visible, "Expected Clone 3 of Körper to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kopf").volume, 100, "Expected Sprite Kopf to have volume 100");
  t.assert.equal(t.getSprite("Körper").volume, 100, "Expected Sprite Körper to have volume 100");
  t.assert.equal(t.getSprite("Punkt").volume, 100, "Expected Sprite Punkt to have volume 100");
  t.assert.equal(t.getSprite("Goodie").volume, 100, "Expected Sprite Goodie to have volume 100");
  t.assert.equal(t.getSprite("Körper").getClone(2).volume, 100, "Expected Clone 2 of Körper to have volume 100");
  t.assert.equal(t.getSprite("Körper").getClone(3).volume, 100, "Expected Clone 3 of Körper to have volume 100");
  t.keyPress('left arrow', 4);
  await t.runForSteps(4);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kopf").currentCostume, 0, "Expected Sprite Kopf to have costume 0");
  t.assert.equal(t.getSprite("Körper").currentCostume, 0, "Expected Sprite Körper to have costume 0");
  t.assert.equal(t.getSprite("Punkt").currentCostume, 0, "Expected Sprite Punkt to have costume 0");
  t.assert.equal(t.getSprite("Goodie").currentCostume, 0, "Expected Sprite Goodie to have costume 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).currentCostume, 0, "Expected Clone 1 of Körper to have costume 0");
  t.assert.equal(t.getSprite("Körper").getClone(2).currentCostume, 0, "Expected Clone 2 of Körper to have costume 0");
  t.assert.equal(t.getSprite("Körper").getClone(3).currentCostume, 0, "Expected Clone 3 of Körper to have costume 0");
  t.assert.equal(t.getSprite("Körper").getClone(4).currentCostume, 0, "Expected Clone 4 of Körper to have costume 0");
  t.assert.equal(t.getSprite("Körper").getClone(6).currentCostume, 0, "Expected Clone 6 of Körper to have costume 0");
  t.assert.equal(t.getSprite("Kopf").getCloneCount(), 0, "Expected Sprite Kopf to have 0 clones");
  t.assert.equal(t.getSprite("Körper").getCloneCount(), 6, "Expected Sprite Körper to have 6 clones");
  t.assert.equal(t.getSprite("Punkt").getCloneCount(), 0, "Expected Sprite Punkt to have 0 clones");
  t.assert.equal(t.getSprite("Goodie").getCloneCount(), 0, "Expected Sprite Goodie to have 0 clones");
  t.assert.equal(t.getSprite("Kopf").direction, -90, 1, "Expected Sprite Kopf to face in direction -90 +-1");
  t.assert.equal(t.getSprite("Körper").direction, 90, 1, "Expected Sprite Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Punkt").direction, 90, 1, "Expected Sprite Punkt to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Goodie").direction, 90, 1, "Expected Sprite Goodie to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Körper").getClone(1).direction, 90, 1, "Expected Clone 1 of Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Körper").getClone(2).direction, 90, 1, "Expected Clone 2 of Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Körper").getClone(3).direction, 90, 1, "Expected Clone 3 of Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Körper").getClone(4).direction, 90, 1, "Expected Clone 4 of Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Körper").getClone(6).direction, 90, 1, "Expected Clone 6 of Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kopf").effects.color, 0, "Expected effect color of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.fisheye, 0, "Expected effect fisheye of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.whirl, 0, "Expected effect whirl of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.pixelate, 0, "Expected effect pixelate of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.mosaic, 0, "Expected effect mosaic of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.brightness, 0, "Expected effect brightness of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.ghost, 0, "Expected effect ghost of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Körper").effects.color, 0, "Expected effect color of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.fisheye, 0, "Expected effect fisheye of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.whirl, 0, "Expected effect whirl of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.pixelate, 0, "Expected effect pixelate of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.mosaic, 0, "Expected effect mosaic of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.brightness, 0, "Expected effect brightness of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.ghost, 0, "Expected effect ghost of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.color, 0, "Expected effect color of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.fisheye, 0, "Expected effect fisheye of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.whirl, 0, "Expected effect whirl of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.pixelate, 0, "Expected effect pixelate of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.mosaic, 0, "Expected effect mosaic of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.brightness, 0, "Expected effect brightness of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.ghost, 0, "Expected effect ghost of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.color, 0, "Expected effect color of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.fisheye, 0, "Expected effect fisheye of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.whirl, 0, "Expected effect whirl of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.pixelate, 0, "Expected effect pixelate of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.mosaic, 0, "Expected effect mosaic of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.brightness, 0, "Expected effect brightness of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.ghost, 0, "Expected effect ghost of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(4).effects.color, 0, "Expected effect color of Clone 4 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(4).effects.fisheye, 0, "Expected effect fisheye of Clone 4 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(4).effects.whirl, 0, "Expected effect whirl of Clone 4 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(4).effects.pixelate, 0, "Expected effect pixelate of Clone 4 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(4).effects.mosaic, 0, "Expected effect mosaic of Clone 4 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(4).effects.brightness, 0, "Expected effect brightness of Clone 4 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(4).effects.ghost, 0, "Expected effect ghost of Clone 4 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(6).effects.color, 0, "Expected effect color of Clone 6 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(6).effects.fisheye, 0, "Expected effect fisheye of Clone 6 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(6).effects.whirl, 0, "Expected effect whirl of Clone 6 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(6).effects.pixelate, 0, "Expected effect pixelate of Clone 6 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(6).effects.mosaic, 0, "Expected effect mosaic of Clone 6 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(6).effects.brightness, 0, "Expected effect brightness of Clone 6 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(6).effects.ghost, 0, "Expected effect ghost of Clone 6 of Körper to be 0");
  t.assert.equal(t.getSprite("Kopf").layerOrder, 1, "Expected Sprite Kopf to be at layer 1");
  t.assert.equal(t.getSprite("Körper").layerOrder, 8, "Expected Sprite Körper to be at layer 8");
  t.assert.equal(t.getSprite("Punkt").layerOrder, 10, "Expected Sprite Punkt to be at layer 10");
  t.assert.equal(t.getSprite("Goodie").layerOrder, 9, "Expected Sprite Goodie to be at layer 9");
  t.assert.equal(t.getSprite("Körper").getClone(1).getLayerOrder(), 2, "Expected Clone 1 of Körper to be at layer 2");
  t.assert.equal(t.getSprite("Körper").getClone(2).getLayerOrder(), 3, "Expected Clone 2 of Körper to be at layer 3");
  t.assert.equal(t.getSprite("Körper").getClone(3).getLayerOrder(), 4, "Expected Clone 3 of Körper to be at layer 4");
  t.assert.equal(t.getSprite("Körper").getClone(4).getLayerOrder(), 5, "Expected Clone 4 of Körper to be at layer 5");
  t.assert.equal(t.getSprite("Körper").getClone(6).getLayerOrder(), 7, "Expected Clone 6 of Körper to be at layer 7");
  t.assert.withinRange(t.getSprite("Kopf").x, -3, 5, "Expected Sprite Kopf to have x-position -3 +-5");
  t.assert.withinRange(t.getSprite("Kopf").y, 97, 5, "Expected Sprite Kopf to have y-position 97 +-5");
  t.assert.withinRange(t.getSprite("Körper").x, 0, 5, "Expected Sprite Körper to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Körper").y, 97, 5, "Expected Sprite Körper to have y-position 97 +-5");
  t.assert.withinRange(t.getSprite("Punkt").x, 56, 5, "Expected Sprite Punkt to have x-position 56 +-5");
  t.assert.withinRange(t.getSprite("Punkt").y, -127, 5, "Expected Sprite Punkt to have y-position -127 +-5");
  t.assert.withinRange(t.getSprite("Goodie").x, 0, 5, "Expected Sprite Goodie to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Goodie").y, 0, 5, "Expected Sprite Goodie to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Körper").getClone(1).x, 3, 5, "Expected Clone 1 of Körper to have x-position 3 +-5");
  t.assert.withinRange(t.getSprite("Körper").getClone(1).y, 97, 5, "Expected Clone 1 of Körper to have y-position 97 +-5");
  t.assert.withinRange(t.getSprite("Körper").getClone(2).x, 6, 5, "Expected Clone 2 of Körper to have x-position 6 +-5");
  t.assert.withinRange(t.getSprite("Körper").getClone(2).y, 97, 5, "Expected Clone 2 of Körper to have y-position 97 +-5");
  t.assert.withinRange(t.getSprite("Körper").getClone(3).x, 9, 5, "Expected Clone 3 of Körper to have x-position 9 +-5");
  t.assert.withinRange(t.getSprite("Körper").getClone(3).y, 97, 5, "Expected Clone 3 of Körper to have y-position 97 +-5");
  t.assert.withinRange(t.getSprite("Körper").getClone(4).x, 6, 5, "Expected Clone 4 of Körper to have x-position 6 +-5");
  t.assert.withinRange(t.getSprite("Körper").getClone(4).y, 97, 5, "Expected Clone 4 of Körper to have y-position 97 +-5");
  t.assert.withinRange(t.getSprite("Körper").getClone(6).x, 0, 5, "Expected Clone 6 of Körper to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Körper").getClone(6).y, 97, 5, "Expected Clone 6 of Körper to have y-position 97 +-5");
  t.assert.equal(t.getSprite("Kopf").sayText, "Verloren!", "Expected Sprite Kopf to say Verloren!");
  t.assert.not(t.getSprite("Körper").sayText, "Expected Sprite Körper not to say anything");
  t.assert.not(t.getSprite("Punkt").sayText, "Expected Sprite Punkt not to say anything");
  t.assert.not(t.getSprite("Goodie").sayText, "Expected Sprite Goodie not to say anything");
  t.assert.not(t.getSprite("Körper").getClone(1).sayText, "Expected Clone 1 of Körper not to say anything");
  t.assert.not(t.getSprite("Körper").getClone(2).sayText, "Expected Clone 2 of Körper not to say anything");
  t.assert.not(t.getSprite("Körper").getClone(3).sayText, "Expected Clone 3 of Körper not to say anything");
  t.assert.not(t.getSprite("Körper").getClone(4).sayText, "Expected Clone 4 of Körper not to say anything");
  t.assert.not(t.getSprite("Körper").getClone(6).sayText, "Expected Clone 6 of Körper not to say anything");
  t.assert.withinRange(t.getSprite("Kopf").size, 100, 1, "Expected Sprite Kopf to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Körper").size, 90, 1, "Expected Sprite Körper to have size 90 +-1");
  t.assert.withinRange(t.getSprite("Punkt").size, 100, 1, "Expected Sprite Punkt to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Goodie").size, 100, 1, "Expected Sprite Goodie to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Körper").getClone(1).size, 90, 1, "Expected Clone 1 of Körper to have size 90 +-1");
  t.assert.withinRange(t.getSprite("Körper").getClone(2).size, 90, 1, "Expected Clone 2 of Körper to have size 90 +-1");
  t.assert.withinRange(t.getSprite("Körper").getClone(3).size, 90, 1, "Expected Clone 3 of Körper to have size 90 +-1");
  t.assert.withinRange(t.getSprite("Körper").getClone(4).size, 90, 1, "Expected Clone 4 of Körper to have size 90 +-1");
  t.assert.withinRange(t.getSprite("Körper").getClone(6).size, 90, 1, "Expected Clone 6 of Körper to have size 90 +-1");
  t.assert.ok(t.getSprite("Kopf").visible, "Expected Sprite Kopf to be visible");
  t.assert.ok(t.getSprite("Körper").visible, "Expected Sprite Körper to be visible");
  t.assert.ok(t.getSprite("Punkt").visible, "Expected Sprite Punkt to be visible");
  t.assert.not(t.getSprite("Goodie").visible, "Expected Sprite Goodie not to be visible");
  t.assert.ok(t.getSprite("Körper").getClone(1).visible, "Expected Clone 1 of Körper to be visible");
  t.assert.ok(t.getSprite("Körper").getClone(2).visible, "Expected Clone 2 of Körper to be visible");
  t.assert.ok(t.getSprite("Körper").getClone(3).visible, "Expected Clone 3 of Körper to be visible");
  t.assert.ok(t.getSprite("Körper").getClone(4).visible, "Expected Clone 4 of Körper to be visible");
  t.assert.ok(t.getSprite("Körper").getClone(6).visible, "Expected Clone 6 of Körper to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kopf").volume, 100, "Expected Sprite Kopf to have volume 100");
  t.assert.equal(t.getSprite("Körper").volume, 100, "Expected Sprite Körper to have volume 100");
  t.assert.equal(t.getSprite("Punkt").volume, 100, "Expected Sprite Punkt to have volume 100");
  t.assert.equal(t.getSprite("Goodie").volume, 100, "Expected Sprite Goodie to have volume 100");
  t.assert.equal(t.getSprite("Körper").getClone(1).volume, 100, "Expected Clone 1 of Körper to have volume 100");
  t.assert.equal(t.getSprite("Körper").getClone(2).volume, 100, "Expected Clone 2 of Körper to have volume 100");
  t.assert.equal(t.getSprite("Körper").getClone(3).volume, 100, "Expected Clone 3 of Körper to have volume 100");
  t.assert.equal(t.getSprite("Körper").getClone(4).volume, 100, "Expected Clone 4 of Körper to have volume 100");
  t.assert.equal(t.getSprite("Körper").getClone(6).volume, 100, "Expected Clone 6 of Körper to have volume 100");
  t.dragSprite('Kopf', -240, -55, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kopf").currentCostume, 0, "Expected Sprite Kopf to have costume 0");
  t.assert.equal(t.getSprite("Körper").currentCostume, 0, "Expected Sprite Körper to have costume 0");
  t.assert.equal(t.getSprite("Punkt").currentCostume, 0, "Expected Sprite Punkt to have costume 0");
  t.assert.equal(t.getSprite("Goodie").currentCostume, 0, "Expected Sprite Goodie to have costume 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).currentCostume, 0, "Expected Clone 1 of Körper to have costume 0");
  t.assert.equal(t.getSprite("Körper").getClone(2).currentCostume, 0, "Expected Clone 2 of Körper to have costume 0");
  t.assert.equal(t.getSprite("Körper").getClone(3).currentCostume, 0, "Expected Clone 3 of Körper to have costume 0");
  t.assert.equal(t.getSprite("Körper").getClone(6).currentCostume, 0, "Expected Clone 6 of Körper to have costume 0");
  t.assert.equal(t.getSprite("Kopf").getCloneCount(), 0, "Expected Sprite Kopf to have 0 clones");
  t.assert.equal(t.getSprite("Körper").getCloneCount(), 6, "Expected Sprite Körper to have 6 clones");
  t.assert.equal(t.getSprite("Punkt").getCloneCount(), 0, "Expected Sprite Punkt to have 0 clones");
  t.assert.equal(t.getSprite("Goodie").getCloneCount(), 0, "Expected Sprite Goodie to have 0 clones");
  t.assert.equal(t.getSprite("Kopf").direction, -90, 1, "Expected Sprite Kopf to face in direction -90 +-1");
  t.assert.equal(t.getSprite("Körper").direction, 90, 1, "Expected Sprite Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Punkt").direction, 90, 1, "Expected Sprite Punkt to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Goodie").direction, 90, 1, "Expected Sprite Goodie to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Körper").getClone(1).direction, 90, 1, "Expected Clone 1 of Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Körper").getClone(2).direction, 90, 1, "Expected Clone 2 of Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Körper").getClone(3).direction, 90, 1, "Expected Clone 3 of Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Körper").getClone(6).direction, 90, 1, "Expected Clone 6 of Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kopf").effects.color, 0, "Expected effect color of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.fisheye, 0, "Expected effect fisheye of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.whirl, 0, "Expected effect whirl of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.pixelate, 0, "Expected effect pixelate of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.mosaic, 0, "Expected effect mosaic of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.brightness, 0, "Expected effect brightness of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.ghost, 0, "Expected effect ghost of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Körper").effects.color, 0, "Expected effect color of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.fisheye, 0, "Expected effect fisheye of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.whirl, 0, "Expected effect whirl of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.pixelate, 0, "Expected effect pixelate of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.mosaic, 0, "Expected effect mosaic of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.brightness, 0, "Expected effect brightness of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.ghost, 0, "Expected effect ghost of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.color, 0, "Expected effect color of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.fisheye, 0, "Expected effect fisheye of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.whirl, 0, "Expected effect whirl of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.pixelate, 0, "Expected effect pixelate of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.mosaic, 0, "Expected effect mosaic of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.brightness, 0, "Expected effect brightness of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.ghost, 0, "Expected effect ghost of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.color, 0, "Expected effect color of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.fisheye, 0, "Expected effect fisheye of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.whirl, 0, "Expected effect whirl of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.pixelate, 0, "Expected effect pixelate of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.mosaic, 0, "Expected effect mosaic of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.brightness, 0, "Expected effect brightness of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.ghost, 0, "Expected effect ghost of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(6).effects.color, 0, "Expected effect color of Clone 6 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(6).effects.fisheye, 0, "Expected effect fisheye of Clone 6 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(6).effects.whirl, 0, "Expected effect whirl of Clone 6 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(6).effects.pixelate, 0, "Expected effect pixelate of Clone 6 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(6).effects.mosaic, 0, "Expected effect mosaic of Clone 6 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(6).effects.brightness, 0, "Expected effect brightness of Clone 6 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(6).effects.ghost, 0, "Expected effect ghost of Clone 6 of Körper to be 0");
  t.assert.equal(t.getSprite("Kopf").layerOrder, 1, "Expected Sprite Kopf to be at layer 1");
  t.assert.equal(t.getSprite("Körper").layerOrder, 8, "Expected Sprite Körper to be at layer 8");
  t.assert.equal(t.getSprite("Punkt").layerOrder, 10, "Expected Sprite Punkt to be at layer 10");
  t.assert.equal(t.getSprite("Goodie").layerOrder, 9, "Expected Sprite Goodie to be at layer 9");
  t.assert.equal(t.getSprite("Körper").getClone(1).getLayerOrder(), 2, "Expected Clone 1 of Körper to be at layer 2");
  t.assert.equal(t.getSprite("Körper").getClone(2).getLayerOrder(), 3, "Expected Clone 2 of Körper to be at layer 3");
  t.assert.equal(t.getSprite("Körper").getClone(3).getLayerOrder(), 4, "Expected Clone 3 of Körper to be at layer 4");
  t.assert.equal(t.getSprite("Körper").getClone(6).getLayerOrder(), 7, "Expected Clone 6 of Körper to be at layer 7");
  t.assert.withinRange(t.getSprite("Kopf").x, -233, 5, "Expected Sprite Kopf to have x-position -233 +-5");
  t.assert.withinRange(t.getSprite("Kopf").y, -55, 5, "Expected Sprite Kopf to have y-position -55 +-5");
  t.assert.withinRange(t.getSprite("Körper").x, -233, 5, "Expected Sprite Körper to have x-position -233 +-5");
  t.assert.withinRange(t.getSprite("Körper").y, -55, 5, "Expected Sprite Körper to have y-position -55 +-5");
  t.assert.withinRange(t.getSprite("Punkt").x, 56, 5, "Expected Sprite Punkt to have x-position 56 +-5");
  t.assert.withinRange(t.getSprite("Punkt").y, -127, 5, "Expected Sprite Punkt to have y-position -127 +-5");
  t.assert.withinRange(t.getSprite("Goodie").x, 0, 5, "Expected Sprite Goodie to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Goodie").y, 0, 5, "Expected Sprite Goodie to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Körper").getClone(1).x, 6, 5, "Expected Clone 1 of Körper to have x-position 6 +-5");
  t.assert.withinRange(t.getSprite("Körper").getClone(1).y, 97, 5, "Expected Clone 1 of Körper to have y-position 97 +-5");
  t.assert.withinRange(t.getSprite("Körper").getClone(2).x, 9, 5, "Expected Clone 2 of Körper to have x-position 9 +-5");
  t.assert.withinRange(t.getSprite("Körper").getClone(2).y, 97, 5, "Expected Clone 2 of Körper to have y-position 97 +-5");
  t.assert.withinRange(t.getSprite("Körper").getClone(3).x, 6, 5, "Expected Clone 3 of Körper to have x-position 6 +-5");
  t.assert.withinRange(t.getSprite("Körper").getClone(3).y, 97, 5, "Expected Clone 3 of Körper to have y-position 97 +-5");
  t.assert.withinRange(t.getSprite("Körper").getClone(6).x, -233, 5, "Expected Clone 6 of Körper to have x-position -233 +-5");
  t.assert.withinRange(t.getSprite("Körper").getClone(6).y, -55, 5, "Expected Clone 6 of Körper to have y-position -55 +-5");
  t.assert.equal(t.getSprite("Kopf").sayText, "Verloren!", "Expected Sprite Kopf to say Verloren!");
  t.assert.not(t.getSprite("Körper").sayText, "Expected Sprite Körper not to say anything");
  t.assert.not(t.getSprite("Punkt").sayText, "Expected Sprite Punkt not to say anything");
  t.assert.not(t.getSprite("Goodie").sayText, "Expected Sprite Goodie not to say anything");
  t.assert.not(t.getSprite("Körper").getClone(1).sayText, "Expected Clone 1 of Körper not to say anything");
  t.assert.not(t.getSprite("Körper").getClone(2).sayText, "Expected Clone 2 of Körper not to say anything");
  t.assert.not(t.getSprite("Körper").getClone(3).sayText, "Expected Clone 3 of Körper not to say anything");
  t.assert.not(t.getSprite("Körper").getClone(6).sayText, "Expected Clone 6 of Körper not to say anything");
  t.assert.withinRange(t.getSprite("Kopf").size, 100, 1, "Expected Sprite Kopf to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Körper").size, 90, 1, "Expected Sprite Körper to have size 90 +-1");
  t.assert.withinRange(t.getSprite("Punkt").size, 100, 1, "Expected Sprite Punkt to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Goodie").size, 100, 1, "Expected Sprite Goodie to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Körper").getClone(1).size, 90, 1, "Expected Clone 1 of Körper to have size 90 +-1");
  t.assert.withinRange(t.getSprite("Körper").getClone(2).size, 90, 1, "Expected Clone 2 of Körper to have size 90 +-1");
  t.assert.withinRange(t.getSprite("Körper").getClone(3).size, 90, 1, "Expected Clone 3 of Körper to have size 90 +-1");
  t.assert.withinRange(t.getSprite("Körper").getClone(6).size, 90, 1, "Expected Clone 6 of Körper to have size 90 +-1");
  t.assert.ok(t.getSprite("Kopf").visible, "Expected Sprite Kopf to be visible");
  t.assert.ok(t.getSprite("Körper").visible, "Expected Sprite Körper to be visible");
  t.assert.ok(t.getSprite("Punkt").visible, "Expected Sprite Punkt to be visible");
  t.assert.not(t.getSprite("Goodie").visible, "Expected Sprite Goodie not to be visible");
  t.assert.ok(t.getSprite("Körper").getClone(1).visible, "Expected Clone 1 of Körper to be visible");
  t.assert.ok(t.getSprite("Körper").getClone(2).visible, "Expected Clone 2 of Körper to be visible");
  t.assert.ok(t.getSprite("Körper").getClone(3).visible, "Expected Clone 3 of Körper to be visible");
  t.assert.ok(t.getSprite("Körper").getClone(6).visible, "Expected Clone 6 of Körper to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kopf").volume, 100, "Expected Sprite Kopf to have volume 100");
  t.assert.equal(t.getSprite("Körper").volume, 100, "Expected Sprite Körper to have volume 100");
  t.assert.equal(t.getSprite("Punkt").volume, 100, "Expected Sprite Punkt to have volume 100");
  t.assert.equal(t.getSprite("Goodie").volume, 100, "Expected Sprite Goodie to have volume 100");
  t.assert.equal(t.getSprite("Körper").getClone(1).volume, 100, "Expected Clone 1 of Körper to have volume 100");
  t.assert.equal(t.getSprite("Körper").getClone(2).volume, 100, "Expected Clone 2 of Körper to have volume 100");
  t.assert.equal(t.getSprite("Körper").getClone(3).volume, 100, "Expected Clone 3 of Körper to have volume 100");
  t.assert.equal(t.getSprite("Körper").getClone(6).volume, 100, "Expected Clone 6 of Körper to have volume 100");
  t.keyPress('right arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kopf").currentCostume, 0, "Expected Sprite Kopf to have costume 0");
  t.assert.equal(t.getSprite("Körper").currentCostume, 0, "Expected Sprite Körper to have costume 0");
  t.assert.equal(t.getSprite("Punkt").currentCostume, 0, "Expected Sprite Punkt to have costume 0");
  t.assert.equal(t.getSprite("Goodie").currentCostume, 0, "Expected Sprite Goodie to have costume 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).currentCostume, 0, "Expected Clone 1 of Körper to have costume 0");
  t.assert.equal(t.getSprite("Körper").getClone(6).currentCostume, 0, "Expected Clone 6 of Körper to have costume 0");
  t.assert.equal(t.getSprite("Kopf").getCloneCount(), 0, "Expected Sprite Kopf to have 0 clones");
  t.assert.equal(t.getSprite("Körper").getCloneCount(), 6, "Expected Sprite Körper to have 6 clones");
  t.assert.equal(t.getSprite("Punkt").getCloneCount(), 0, "Expected Sprite Punkt to have 0 clones");
  t.assert.equal(t.getSprite("Goodie").getCloneCount(), 0, "Expected Sprite Goodie to have 0 clones");
  t.assert.equal(t.getSprite("Kopf").direction, 90, 1, "Expected Sprite Kopf to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Körper").direction, 90, 1, "Expected Sprite Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Punkt").direction, 90, 1, "Expected Sprite Punkt to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Goodie").direction, 90, 1, "Expected Sprite Goodie to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Körper").getClone(1).direction, 90, 1, "Expected Clone 1 of Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Körper").getClone(6).direction, 90, 1, "Expected Clone 6 of Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kopf").effects.color, 0, "Expected effect color of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.fisheye, 0, "Expected effect fisheye of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.whirl, 0, "Expected effect whirl of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.pixelate, 0, "Expected effect pixelate of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.mosaic, 0, "Expected effect mosaic of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.brightness, 0, "Expected effect brightness of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.ghost, 0, "Expected effect ghost of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Körper").effects.color, 0, "Expected effect color of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.fisheye, 0, "Expected effect fisheye of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.whirl, 0, "Expected effect whirl of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.pixelate, 0, "Expected effect pixelate of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.mosaic, 0, "Expected effect mosaic of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.brightness, 0, "Expected effect brightness of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.ghost, 0, "Expected effect ghost of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.color, 0, "Expected effect color of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.fisheye, 0, "Expected effect fisheye of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.whirl, 0, "Expected effect whirl of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.pixelate, 0, "Expected effect pixelate of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.mosaic, 0, "Expected effect mosaic of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.brightness, 0, "Expected effect brightness of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.ghost, 0, "Expected effect ghost of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.color, 0, "Expected effect color of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.fisheye, 0, "Expected effect fisheye of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.whirl, 0, "Expected effect whirl of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.pixelate, 0, "Expected effect pixelate of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.mosaic, 0, "Expected effect mosaic of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.brightness, 0, "Expected effect brightness of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.ghost, 0, "Expected effect ghost of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(6).effects.color, 0, "Expected effect color of Clone 6 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(6).effects.fisheye, 0, "Expected effect fisheye of Clone 6 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(6).effects.whirl, 0, "Expected effect whirl of Clone 6 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(6).effects.pixelate, 0, "Expected effect pixelate of Clone 6 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(6).effects.mosaic, 0, "Expected effect mosaic of Clone 6 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(6).effects.brightness, 0, "Expected effect brightness of Clone 6 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(6).effects.ghost, 0, "Expected effect ghost of Clone 6 of Körper to be 0");
  t.assert.equal(t.getSprite("Kopf").layerOrder, 1, "Expected Sprite Kopf to be at layer 1");
  t.assert.equal(t.getSprite("Körper").layerOrder, 8, "Expected Sprite Körper to be at layer 8");
  t.assert.equal(t.getSprite("Punkt").layerOrder, 10, "Expected Sprite Punkt to be at layer 10");
  t.assert.equal(t.getSprite("Goodie").layerOrder, 9, "Expected Sprite Goodie to be at layer 9");
  t.assert.equal(t.getSprite("Körper").getClone(1).getLayerOrder(), 2, "Expected Clone 1 of Körper to be at layer 2");
  t.assert.equal(t.getSprite("Körper").getClone(6).getLayerOrder(), 7, "Expected Clone 6 of Körper to be at layer 7");
  t.assert.withinRange(t.getSprite("Kopf").x, -230, 5, "Expected Sprite Kopf to have x-position -230 +-5");
  t.assert.withinRange(t.getSprite("Kopf").y, -55, 5, "Expected Sprite Kopf to have y-position -55 +-5");
  t.assert.withinRange(t.getSprite("Körper").x, -233, 5, "Expected Sprite Körper to have x-position -233 +-5");
  t.assert.withinRange(t.getSprite("Körper").y, -55, 5, "Expected Sprite Körper to have y-position -55 +-5");
  t.assert.withinRange(t.getSprite("Punkt").x, 56, 5, "Expected Sprite Punkt to have x-position 56 +-5");
  t.assert.withinRange(t.getSprite("Punkt").y, -127, 5, "Expected Sprite Punkt to have y-position -127 +-5");
  t.assert.withinRange(t.getSprite("Goodie").x, 0, 5, "Expected Sprite Goodie to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Goodie").y, 0, 5, "Expected Sprite Goodie to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Körper").getClone(1).x, 6, 5, "Expected Clone 1 of Körper to have x-position 6 +-5");
  t.assert.withinRange(t.getSprite("Körper").getClone(1).y, 97, 5, "Expected Clone 1 of Körper to have y-position 97 +-5");
  t.assert.withinRange(t.getSprite("Körper").getClone(6).x, -233, 5, "Expected Clone 6 of Körper to have x-position -233 +-5");
  t.assert.withinRange(t.getSprite("Körper").getClone(6).y, -55, 5, "Expected Clone 6 of Körper to have y-position -55 +-5");
  t.assert.equal(t.getSprite("Kopf").sayText, "Verloren!", "Expected Sprite Kopf to say Verloren!");
  t.assert.not(t.getSprite("Körper").sayText, "Expected Sprite Körper not to say anything");
  t.assert.not(t.getSprite("Punkt").sayText, "Expected Sprite Punkt not to say anything");
  t.assert.not(t.getSprite("Goodie").sayText, "Expected Sprite Goodie not to say anything");
  t.assert.not(t.getSprite("Körper").getClone(1).sayText, "Expected Clone 1 of Körper not to say anything");
  t.assert.not(t.getSprite("Körper").getClone(6).sayText, "Expected Clone 6 of Körper not to say anything");
  t.assert.withinRange(t.getSprite("Kopf").size, 100, 1, "Expected Sprite Kopf to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Körper").size, 90, 1, "Expected Sprite Körper to have size 90 +-1");
  t.assert.withinRange(t.getSprite("Punkt").size, 100, 1, "Expected Sprite Punkt to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Goodie").size, 100, 1, "Expected Sprite Goodie to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Körper").getClone(1).size, 90, 1, "Expected Clone 1 of Körper to have size 90 +-1");
  t.assert.withinRange(t.getSprite("Körper").getClone(6).size, 90, 1, "Expected Clone 6 of Körper to have size 90 +-1");
  t.assert.ok(t.getSprite("Kopf").visible, "Expected Sprite Kopf to be visible");
  t.assert.ok(t.getSprite("Körper").visible, "Expected Sprite Körper to be visible");
  t.assert.ok(t.getSprite("Punkt").visible, "Expected Sprite Punkt to be visible");
  t.assert.not(t.getSprite("Goodie").visible, "Expected Sprite Goodie not to be visible");
  t.assert.ok(t.getSprite("Körper").getClone(1).visible, "Expected Clone 1 of Körper to be visible");
  t.assert.ok(t.getSprite("Körper").getClone(6).visible, "Expected Clone 6 of Körper to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kopf").volume, 100, "Expected Sprite Kopf to have volume 100");
  t.assert.equal(t.getSprite("Körper").volume, 100, "Expected Sprite Körper to have volume 100");
  t.assert.equal(t.getSprite("Punkt").volume, 100, "Expected Sprite Punkt to have volume 100");
  t.assert.equal(t.getSprite("Goodie").volume, 100, "Expected Sprite Goodie to have volume 100");
  t.assert.equal(t.getSprite("Körper").getClone(1).volume, 100, "Expected Clone 1 of Körper to have volume 100");
  t.assert.equal(t.getSprite("Körper").getClone(6).volume, 100, "Expected Clone 6 of Körper to have volume 100");
  t.dragSprite('Punkt', -225.88905525655107, -48.446783645688065, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kopf").currentCostume, 0, "Expected Sprite Kopf to have costume 0");
  t.assert.equal(t.getSprite("Körper").currentCostume, 0, "Expected Sprite Körper to have costume 0");
  t.assert.equal(t.getSprite("Punkt").currentCostume, 0, "Expected Sprite Punkt to have costume 0");
  t.assert.equal(t.getSprite("Goodie").currentCostume, 0, "Expected Sprite Goodie to have costume 0");
  t.assert.equal(t.getSprite("Körper").getClone(6).currentCostume, 0, "Expected Clone 6 of Körper to have costume 0");
  t.assert.equal(t.getSprite("Kopf").getCloneCount(), 0, "Expected Sprite Kopf to have 0 clones");
  t.assert.equal(t.getSprite("Körper").getCloneCount(), 6, "Expected Sprite Körper to have 6 clones");
  t.assert.equal(t.getSprite("Punkt").getCloneCount(), 0, "Expected Sprite Punkt to have 0 clones");
  t.assert.equal(t.getSprite("Goodie").getCloneCount(), 0, "Expected Sprite Goodie to have 0 clones");
  t.assert.equal(t.getSprite("Kopf").direction, 90, 1, "Expected Sprite Kopf to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Körper").direction, 90, 1, "Expected Sprite Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Punkt").direction, 90, 1, "Expected Sprite Punkt to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Goodie").direction, 90, 1, "Expected Sprite Goodie to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Körper").getClone(6).direction, 90, 1, "Expected Clone 6 of Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kopf").effects.color, 0, "Expected effect color of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.fisheye, 0, "Expected effect fisheye of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.whirl, 0, "Expected effect whirl of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.pixelate, 0, "Expected effect pixelate of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.mosaic, 0, "Expected effect mosaic of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.brightness, 0, "Expected effect brightness of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.ghost, 0, "Expected effect ghost of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Körper").effects.color, 0, "Expected effect color of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.fisheye, 0, "Expected effect fisheye of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.whirl, 0, "Expected effect whirl of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.pixelate, 0, "Expected effect pixelate of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.mosaic, 0, "Expected effect mosaic of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.brightness, 0, "Expected effect brightness of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.ghost, 0, "Expected effect ghost of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.color, 0, "Expected effect color of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.fisheye, 0, "Expected effect fisheye of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.whirl, 0, "Expected effect whirl of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.pixelate, 0, "Expected effect pixelate of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.mosaic, 0, "Expected effect mosaic of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.brightness, 0, "Expected effect brightness of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.ghost, 0, "Expected effect ghost of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.color, 0, "Expected effect color of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.fisheye, 0, "Expected effect fisheye of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.whirl, 0, "Expected effect whirl of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.pixelate, 0, "Expected effect pixelate of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.mosaic, 0, "Expected effect mosaic of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.brightness, 0, "Expected effect brightness of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.ghost, 0, "Expected effect ghost of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(6).effects.color, 0, "Expected effect color of Clone 6 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(6).effects.fisheye, 0, "Expected effect fisheye of Clone 6 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(6).effects.whirl, 0, "Expected effect whirl of Clone 6 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(6).effects.pixelate, 0, "Expected effect pixelate of Clone 6 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(6).effects.mosaic, 0, "Expected effect mosaic of Clone 6 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(6).effects.brightness, 0, "Expected effect brightness of Clone 6 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(6).effects.ghost, 0, "Expected effect ghost of Clone 6 of Körper to be 0");
  t.assert.equal(t.getSprite("Kopf").layerOrder, 1, "Expected Sprite Kopf to be at layer 1");
  t.assert.equal(t.getSprite("Körper").layerOrder, 8, "Expected Sprite Körper to be at layer 8");
  t.assert.equal(t.getSprite("Punkt").layerOrder, 10, "Expected Sprite Punkt to be at layer 10");
  t.assert.equal(t.getSprite("Goodie").layerOrder, 9, "Expected Sprite Goodie to be at layer 9");
  t.assert.equal(t.getSprite("Körper").getClone(6).getLayerOrder(), 7, "Expected Clone 6 of Körper to be at layer 7");
  t.assert.withinRange(t.getSprite("Kopf").x, -227, 5, "Expected Sprite Kopf to have x-position -227 +-5");
  t.assert.withinRange(t.getSprite("Kopf").y, -55, 5, "Expected Sprite Kopf to have y-position -55 +-5");
  t.assert.withinRange(t.getSprite("Körper").x, -230, 5, "Expected Sprite Körper to have x-position -230 +-5");
  t.assert.withinRange(t.getSprite("Körper").y, -55, 5, "Expected Sprite Körper to have y-position -55 +-5");
  t.assert.withinRange(t.getSprite("Punkt").x, -144, 5, "Expected Sprite Punkt to have x-position -144 +-5");
  t.assert.withinRange(t.getSprite("Punkt").y, 42, 5, "Expected Sprite Punkt to have y-position 42 +-5");
  t.assert.withinRange(t.getSprite("Goodie").x, 0, 5, "Expected Sprite Goodie to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Goodie").y, 0, 5, "Expected Sprite Goodie to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Körper").getClone(6).x, -230, 5, "Expected Clone 6 of Körper to have x-position -230 +-5");
  t.assert.withinRange(t.getSprite("Körper").getClone(6).y, -55, 5, "Expected Clone 6 of Körper to have y-position -55 +-5");
  t.assert.equal(t.getSprite("Kopf").sayText, "Verloren!", "Expected Sprite Kopf to say Verloren!");
  t.assert.not(t.getSprite("Körper").sayText, "Expected Sprite Körper not to say anything");
  t.assert.not(t.getSprite("Punkt").sayText, "Expected Sprite Punkt not to say anything");
  t.assert.not(t.getSprite("Goodie").sayText, "Expected Sprite Goodie not to say anything");
  t.assert.not(t.getSprite("Körper").getClone(6).sayText, "Expected Clone 6 of Körper not to say anything");
  t.assert.withinRange(t.getSprite("Kopf").size, 100, 1, "Expected Sprite Kopf to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Körper").size, 90, 1, "Expected Sprite Körper to have size 90 +-1");
  t.assert.withinRange(t.getSprite("Punkt").size, 100, 1, "Expected Sprite Punkt to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Goodie").size, 100, 1, "Expected Sprite Goodie to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Körper").getClone(6).size, 90, 1, "Expected Clone 6 of Körper to have size 90 +-1");
  t.assert.ok(t.getSprite("Kopf").visible, "Expected Sprite Kopf to be visible");
  t.assert.ok(t.getSprite("Körper").visible, "Expected Sprite Körper to be visible");
  t.assert.ok(t.getSprite("Punkt").visible, "Expected Sprite Punkt to be visible");
  t.assert.not(t.getSprite("Goodie").visible, "Expected Sprite Goodie not to be visible");
  t.assert.ok(t.getSprite("Körper").getClone(6).visible, "Expected Clone 6 of Körper to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kopf").volume, 100, "Expected Sprite Kopf to have volume 100");
  t.assert.equal(t.getSprite("Körper").volume, 100, "Expected Sprite Körper to have volume 100");
  t.assert.equal(t.getSprite("Punkt").volume, 100, "Expected Sprite Punkt to have volume 100");
  t.assert.equal(t.getSprite("Goodie").volume, 100, "Expected Sprite Goodie to have volume 100");
  t.assert.equal(t.getSprite("Körper").getClone(6).volume, 100, "Expected Clone 6 of Körper to have volume 100");
  await t.runForSteps(44);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kopf").currentCostume, 0, "Expected Sprite Kopf to have costume 0");
  t.assert.equal(t.getSprite("Körper").currentCostume, 0, "Expected Sprite Körper to have costume 0");
  t.assert.equal(t.getSprite("Punkt").currentCostume, 0, "Expected Sprite Punkt to have costume 0");
  t.assert.equal(t.getSprite("Goodie").currentCostume, 0, "Expected Sprite Goodie to have costume 0");
  t.assert.equal(t.getSprite("Kopf").getCloneCount(), 0, "Expected Sprite Kopf to have 0 clones");
  t.assert.equal(t.getSprite("Körper").getCloneCount(), 0, "Expected Sprite Körper to have 0 clones");
  t.assert.equal(t.getSprite("Punkt").getCloneCount(), 0, "Expected Sprite Punkt to have 0 clones");
  t.assert.equal(t.getSprite("Goodie").getCloneCount(), 0, "Expected Sprite Goodie to have 0 clones");
  t.assert.equal(t.getSprite("Kopf").direction, 90, 1, "Expected Sprite Kopf to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Körper").direction, 90, 1, "Expected Sprite Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Punkt").direction, 90, 1, "Expected Sprite Punkt to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Goodie").direction, 90, 1, "Expected Sprite Goodie to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kopf").effects.color, 0, "Expected effect color of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.fisheye, 0, "Expected effect fisheye of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.whirl, 0, "Expected effect whirl of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.pixelate, 0, "Expected effect pixelate of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.mosaic, 0, "Expected effect mosaic of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.brightness, 0, "Expected effect brightness of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.ghost, 0, "Expected effect ghost of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Körper").effects.color, 0, "Expected effect color of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.fisheye, 0, "Expected effect fisheye of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.whirl, 0, "Expected effect whirl of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.pixelate, 0, "Expected effect pixelate of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.mosaic, 0, "Expected effect mosaic of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.brightness, 0, "Expected effect brightness of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.ghost, 0, "Expected effect ghost of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.color, 0, "Expected effect color of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.fisheye, 0, "Expected effect fisheye of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.whirl, 0, "Expected effect whirl of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.pixelate, 0, "Expected effect pixelate of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.mosaic, 0, "Expected effect mosaic of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.brightness, 0, "Expected effect brightness of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.ghost, 0, "Expected effect ghost of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.color, 0, "Expected effect color of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.fisheye, 0, "Expected effect fisheye of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.whirl, 0, "Expected effect whirl of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.pixelate, 0, "Expected effect pixelate of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.mosaic, 0, "Expected effect mosaic of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.brightness, 0, "Expected effect brightness of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.ghost, 0, "Expected effect ghost of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Kopf").layerOrder, 1, "Expected Sprite Kopf to be at layer 1");
  t.assert.equal(t.getSprite("Körper").layerOrder, 2, "Expected Sprite Körper to be at layer 2");
  t.assert.equal(t.getSprite("Punkt").layerOrder, 4, "Expected Sprite Punkt to be at layer 4");
  t.assert.equal(t.getSprite("Goodie").layerOrder, 3, "Expected Sprite Goodie to be at layer 3");
  t.assert.withinRange(t.getSprite("Kopf").x, -158, 5, "Expected Sprite Kopf to have x-position -158 +-5");
  t.assert.withinRange(t.getSprite("Kopf").y, -55, 5, "Expected Sprite Kopf to have y-position -55 +-5");
  t.assert.withinRange(t.getSprite("Körper").x, -161, 5, "Expected Sprite Körper to have x-position -161 +-5");
  t.assert.withinRange(t.getSprite("Körper").y, -55, 5, "Expected Sprite Körper to have y-position -55 +-5");
  t.assert.withinRange(t.getSprite("Punkt").x, -144, 5, "Expected Sprite Punkt to have x-position -144 +-5");
  t.assert.withinRange(t.getSprite("Punkt").y, 42, 5, "Expected Sprite Punkt to have y-position 42 +-5");
  t.assert.withinRange(t.getSprite("Goodie").x, 0, 5, "Expected Sprite Goodie to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Goodie").y, 0, 5, "Expected Sprite Goodie to have y-position 0 +-5");
  t.assert.not(t.getSprite("Kopf").sayText, "Expected Sprite Kopf not to say anything");
  t.assert.not(t.getSprite("Körper").sayText, "Expected Sprite Körper not to say anything");
  t.assert.not(t.getSprite("Punkt").sayText, "Expected Sprite Punkt not to say anything");
  t.assert.not(t.getSprite("Goodie").sayText, "Expected Sprite Goodie not to say anything");
  t.assert.withinRange(t.getSprite("Kopf").size, 100, 1, "Expected Sprite Kopf to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Körper").size, 90, 1, "Expected Sprite Körper to have size 90 +-1");
  t.assert.withinRange(t.getSprite("Punkt").size, 100, 1, "Expected Sprite Punkt to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Goodie").size, 100, 1, "Expected Sprite Goodie to have size 100 +-1");
  t.assert.ok(t.getSprite("Kopf").visible, "Expected Sprite Kopf to be visible");
  t.assert.ok(t.getSprite("Körper").visible, "Expected Sprite Körper to be visible");
  t.assert.ok(t.getSprite("Punkt").visible, "Expected Sprite Punkt to be visible");
  t.assert.not(t.getSprite("Goodie").visible, "Expected Sprite Goodie not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kopf").volume, 100, "Expected Sprite Kopf to have volume 100");
  t.assert.equal(t.getSprite("Körper").volume, 100, "Expected Sprite Körper to have volume 100");
  t.assert.equal(t.getSprite("Punkt").volume, 100, "Expected Sprite Punkt to have volume 100");
  t.assert.equal(t.getSprite("Goodie").volume, 100, "Expected Sprite Goodie to have volume 100");
  t.end();
}
const test1 = async function (t) {
  await t.runForSteps(75);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kopf").currentCostume, 0, "Expected Sprite Kopf to have costume 0");
  t.assert.equal(t.getSprite("Körper").currentCostume, 0, "Expected Sprite Körper to have costume 0");
  t.assert.equal(t.getSprite("Punkt").currentCostume, 0, "Expected Sprite Punkt to have costume 0");
  t.assert.equal(t.getSprite("Goodie").currentCostume, 0, "Expected Sprite Goodie to have costume 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).currentCostume, 0, "Expected Clone 1 of Körper to have costume 0");
  t.assert.equal(t.getSprite("Kopf").getCloneCount(), 0, "Expected Sprite Kopf to have 0 clones");
  t.assert.equal(t.getSprite("Körper").getCloneCount(), 1, "Expected Sprite Körper to have 1 clones");
  t.assert.equal(t.getSprite("Punkt").getCloneCount(), 0, "Expected Sprite Punkt to have 0 clones");
  t.assert.equal(t.getSprite("Goodie").getCloneCount(), 0, "Expected Sprite Goodie to have 0 clones");
  t.assert.equal(t.getSprite("Kopf").direction, 90, 1, "Expected Sprite Kopf to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Körper").direction, 90, 1, "Expected Sprite Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Punkt").direction, 90, 1, "Expected Sprite Punkt to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Goodie").direction, 90, 1, "Expected Sprite Goodie to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Körper").getClone(1).direction, 90, 1, "Expected Clone 1 of Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kopf").effects.color, 0, "Expected effect color of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.fisheye, 0, "Expected effect fisheye of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.whirl, 0, "Expected effect whirl of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.pixelate, 0, "Expected effect pixelate of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.mosaic, 0, "Expected effect mosaic of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.brightness, 0, "Expected effect brightness of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.ghost, 0, "Expected effect ghost of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Körper").effects.color, 0, "Expected effect color of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.fisheye, 0, "Expected effect fisheye of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.whirl, 0, "Expected effect whirl of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.pixelate, 0, "Expected effect pixelate of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.mosaic, 0, "Expected effect mosaic of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.brightness, 0, "Expected effect brightness of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.ghost, 0, "Expected effect ghost of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.color, 0, "Expected effect color of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.fisheye, 0, "Expected effect fisheye of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.whirl, 0, "Expected effect whirl of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.pixelate, 0, "Expected effect pixelate of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.mosaic, 0, "Expected effect mosaic of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.brightness, 0, "Expected effect brightness of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.ghost, 0, "Expected effect ghost of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.color, 0, "Expected effect color of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.fisheye, 0, "Expected effect fisheye of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.whirl, 0, "Expected effect whirl of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.pixelate, 0, "Expected effect pixelate of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.mosaic, 0, "Expected effect mosaic of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.brightness, 0, "Expected effect brightness of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.ghost, 0, "Expected effect ghost of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Kopf").layerOrder, 1, "Expected Sprite Kopf to be at layer 1");
  t.assert.equal(t.getSprite("Körper").layerOrder, 3, "Expected Sprite Körper to be at layer 3");
  t.assert.equal(t.getSprite("Punkt").layerOrder, 5, "Expected Sprite Punkt to be at layer 5");
  t.assert.equal(t.getSprite("Goodie").layerOrder, 4, "Expected Sprite Goodie to be at layer 4");
  t.assert.equal(t.getSprite("Körper").getClone(1).getLayerOrder(), 2, "Expected Clone 1 of Körper to be at layer 2");
  t.assert.withinRange(t.getSprite("Kopf").x, 228, 5, "Expected Sprite Kopf to have x-position 228 +-5");
  t.assert.withinRange(t.getSprite("Kopf").y, 100, 5, "Expected Sprite Kopf to have y-position 100 +-5");
  t.assert.withinRange(t.getSprite("Körper").x, 225, 5, "Expected Sprite Körper to have x-position 225 +-5");
  t.assert.withinRange(t.getSprite("Körper").y, 100, 5, "Expected Sprite Körper to have y-position 100 +-5");
  t.assert.withinRange(t.getSprite("Punkt").x, 0, 5, "Expected Sprite Punkt to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Punkt").y, -100, 5, "Expected Sprite Punkt to have y-position -100 +-5");
  t.assert.withinRange(t.getSprite("Goodie").x, 0, 5, "Expected Sprite Goodie to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Goodie").y, 0, 5, "Expected Sprite Goodie to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Körper").getClone(1).x, 225, 5, "Expected Clone 1 of Körper to have x-position 225 +-5");
  t.assert.withinRange(t.getSprite("Körper").getClone(1).y, 100, 5, "Expected Clone 1 of Körper to have y-position 100 +-5");
  t.assert.equal(t.getSprite("Kopf").sayText, "Verloren!", "Expected Sprite Kopf to say Verloren!");
  t.assert.not(t.getSprite("Körper").sayText, "Expected Sprite Körper not to say anything");
  t.assert.not(t.getSprite("Punkt").sayText, "Expected Sprite Punkt not to say anything");
  t.assert.not(t.getSprite("Goodie").sayText, "Expected Sprite Goodie not to say anything");
  t.assert.not(t.getSprite("Körper").getClone(1).sayText, "Expected Clone 1 of Körper not to say anything");
  t.assert.withinRange(t.getSprite("Kopf").size, 100, 1, "Expected Sprite Kopf to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Körper").size, 90, 1, "Expected Sprite Körper to have size 90 +-1");
  t.assert.withinRange(t.getSprite("Punkt").size, 100, 1, "Expected Sprite Punkt to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Goodie").size, 100, 1, "Expected Sprite Goodie to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Körper").getClone(1).size, 90, 1, "Expected Clone 1 of Körper to have size 90 +-1");
  t.assert.ok(t.getSprite("Kopf").visible, "Expected Sprite Kopf to be visible");
  t.assert.ok(t.getSprite("Körper").visible, "Expected Sprite Körper to be visible");
  t.assert.ok(t.getSprite("Punkt").visible, "Expected Sprite Punkt to be visible");
  t.assert.not(t.getSprite("Goodie").visible, "Expected Sprite Goodie not to be visible");
  t.assert.ok(t.getSprite("Körper").getClone(1).visible, "Expected Clone 1 of Körper to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kopf").volume, 100, "Expected Sprite Kopf to have volume 100");
  t.assert.equal(t.getSprite("Körper").volume, 100, "Expected Sprite Körper to have volume 100");
  t.assert.equal(t.getSprite("Punkt").volume, 100, "Expected Sprite Punkt to have volume 100");
  t.assert.equal(t.getSprite("Goodie").volume, 100, "Expected Sprite Goodie to have volume 100");
  t.assert.equal(t.getSprite("Körper").getClone(1).volume, 100, "Expected Clone 1 of Körper to have volume 100");
  t.keyPress('down arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kopf").currentCostume, 0, "Expected Sprite Kopf to have costume 0");
  t.assert.equal(t.getSprite("Körper").currentCostume, 0, "Expected Sprite Körper to have costume 0");
  t.assert.equal(t.getSprite("Punkt").currentCostume, 0, "Expected Sprite Punkt to have costume 0");
  t.assert.equal(t.getSprite("Goodie").currentCostume, 0, "Expected Sprite Goodie to have costume 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).currentCostume, 0, "Expected Clone 1 of Körper to have costume 0");
  t.assert.equal(t.getSprite("Kopf").getCloneCount(), 0, "Expected Sprite Kopf to have 0 clones");
  t.assert.equal(t.getSprite("Körper").getCloneCount(), 1, "Expected Sprite Körper to have 1 clones");
  t.assert.equal(t.getSprite("Punkt").getCloneCount(), 0, "Expected Sprite Punkt to have 0 clones");
  t.assert.equal(t.getSprite("Goodie").getCloneCount(), 0, "Expected Sprite Goodie to have 0 clones");
  t.assert.equal(t.getSprite("Kopf").direction, 180, 1, "Expected Sprite Kopf to face in direction 180 +-1");
  t.assert.equal(t.getSprite("Körper").direction, 90, 1, "Expected Sprite Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Punkt").direction, 90, 1, "Expected Sprite Punkt to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Goodie").direction, 90, 1, "Expected Sprite Goodie to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Körper").getClone(1).direction, 90, 1, "Expected Clone 1 of Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kopf").effects.color, 0, "Expected effect color of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.fisheye, 0, "Expected effect fisheye of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.whirl, 0, "Expected effect whirl of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.pixelate, 0, "Expected effect pixelate of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.mosaic, 0, "Expected effect mosaic of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.brightness, 0, "Expected effect brightness of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.ghost, 0, "Expected effect ghost of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Körper").effects.color, 0, "Expected effect color of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.fisheye, 0, "Expected effect fisheye of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.whirl, 0, "Expected effect whirl of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.pixelate, 0, "Expected effect pixelate of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.mosaic, 0, "Expected effect mosaic of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.brightness, 0, "Expected effect brightness of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.ghost, 0, "Expected effect ghost of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.color, 0, "Expected effect color of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.fisheye, 0, "Expected effect fisheye of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.whirl, 0, "Expected effect whirl of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.pixelate, 0, "Expected effect pixelate of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.mosaic, 0, "Expected effect mosaic of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.brightness, 0, "Expected effect brightness of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.ghost, 0, "Expected effect ghost of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.color, 0, "Expected effect color of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.fisheye, 0, "Expected effect fisheye of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.whirl, 0, "Expected effect whirl of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.pixelate, 0, "Expected effect pixelate of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.mosaic, 0, "Expected effect mosaic of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.brightness, 0, "Expected effect brightness of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.ghost, 0, "Expected effect ghost of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Kopf").layerOrder, 1, "Expected Sprite Kopf to be at layer 1");
  t.assert.equal(t.getSprite("Körper").layerOrder, 3, "Expected Sprite Körper to be at layer 3");
  t.assert.equal(t.getSprite("Punkt").layerOrder, 5, "Expected Sprite Punkt to be at layer 5");
  t.assert.equal(t.getSprite("Goodie").layerOrder, 4, "Expected Sprite Goodie to be at layer 4");
  t.assert.equal(t.getSprite("Körper").getClone(1).getLayerOrder(), 2, "Expected Clone 1 of Körper to be at layer 2");
  t.assert.withinRange(t.getSprite("Kopf").x, 231, 5, "Expected Sprite Kopf to have x-position 231 +-5");
  t.assert.withinRange(t.getSprite("Kopf").y, 97, 5, "Expected Sprite Kopf to have y-position 97 +-5");
  t.assert.withinRange(t.getSprite("Körper").x, 231, 5, "Expected Sprite Körper to have x-position 231 +-5");
  t.assert.withinRange(t.getSprite("Körper").y, 100, 5, "Expected Sprite Körper to have y-position 100 +-5");
  t.assert.withinRange(t.getSprite("Punkt").x, 0, 5, "Expected Sprite Punkt to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Punkt").y, -100, 5, "Expected Sprite Punkt to have y-position -100 +-5");
  t.assert.withinRange(t.getSprite("Goodie").x, 0, 5, "Expected Sprite Goodie to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Goodie").y, 0, 5, "Expected Sprite Goodie to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Körper").getClone(1).x, 231, 5, "Expected Clone 1 of Körper to have x-position 231 +-5");
  t.assert.withinRange(t.getSprite("Körper").getClone(1).y, 100, 5, "Expected Clone 1 of Körper to have y-position 100 +-5");
  t.assert.equal(t.getSprite("Kopf").sayText, "Verloren!", "Expected Sprite Kopf to say Verloren!");
  t.assert.not(t.getSprite("Körper").sayText, "Expected Sprite Körper not to say anything");
  t.assert.not(t.getSprite("Punkt").sayText, "Expected Sprite Punkt not to say anything");
  t.assert.not(t.getSprite("Goodie").sayText, "Expected Sprite Goodie not to say anything");
  t.assert.not(t.getSprite("Körper").getClone(1).sayText, "Expected Clone 1 of Körper not to say anything");
  t.assert.withinRange(t.getSprite("Kopf").size, 100, 1, "Expected Sprite Kopf to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Körper").size, 90, 1, "Expected Sprite Körper to have size 90 +-1");
  t.assert.withinRange(t.getSprite("Punkt").size, 100, 1, "Expected Sprite Punkt to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Goodie").size, 100, 1, "Expected Sprite Goodie to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Körper").getClone(1).size, 90, 1, "Expected Clone 1 of Körper to have size 90 +-1");
  t.assert.ok(t.getSprite("Kopf").visible, "Expected Sprite Kopf to be visible");
  t.assert.ok(t.getSprite("Körper").visible, "Expected Sprite Körper to be visible");
  t.assert.ok(t.getSprite("Punkt").visible, "Expected Sprite Punkt to be visible");
  t.assert.not(t.getSprite("Goodie").visible, "Expected Sprite Goodie not to be visible");
  t.assert.ok(t.getSprite("Körper").getClone(1).visible, "Expected Clone 1 of Körper to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kopf").volume, 100, "Expected Sprite Kopf to have volume 100");
  t.assert.equal(t.getSprite("Körper").volume, 100, "Expected Sprite Körper to have volume 100");
  t.assert.equal(t.getSprite("Punkt").volume, 100, "Expected Sprite Punkt to have volume 100");
  t.assert.equal(t.getSprite("Goodie").volume, 100, "Expected Sprite Goodie to have volume 100");
  t.assert.equal(t.getSprite("Körper").getClone(1).volume, 100, "Expected Clone 1 of Körper to have volume 100");
  t.keyPress('up arrow', 3);
  await t.runForSteps(3);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kopf").currentCostume, 0, "Expected Sprite Kopf to have costume 0");
  t.assert.equal(t.getSprite("Körper").currentCostume, 0, "Expected Sprite Körper to have costume 0");
  t.assert.equal(t.getSprite("Punkt").currentCostume, 0, "Expected Sprite Punkt to have costume 0");
  t.assert.equal(t.getSprite("Goodie").currentCostume, 0, "Expected Sprite Goodie to have costume 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).currentCostume, 0, "Expected Clone 1 of Körper to have costume 0");
  t.assert.equal(t.getSprite("Kopf").getCloneCount(), 0, "Expected Sprite Kopf to have 0 clones");
  t.assert.equal(t.getSprite("Körper").getCloneCount(), 1, "Expected Sprite Körper to have 1 clones");
  t.assert.equal(t.getSprite("Punkt").getCloneCount(), 0, "Expected Sprite Punkt to have 0 clones");
  t.assert.equal(t.getSprite("Goodie").getCloneCount(), 0, "Expected Sprite Goodie to have 0 clones");
  t.assert.equal(t.getSprite("Kopf").direction, 0, 1, "Expected Sprite Kopf to face in direction 0 +-1");
  t.assert.equal(t.getSprite("Körper").direction, 90, 1, "Expected Sprite Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Punkt").direction, 90, 1, "Expected Sprite Punkt to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Goodie").direction, 90, 1, "Expected Sprite Goodie to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Körper").getClone(1).direction, 90, 1, "Expected Clone 1 of Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kopf").effects.color, 0, "Expected effect color of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.fisheye, 0, "Expected effect fisheye of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.whirl, 0, "Expected effect whirl of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.pixelate, 0, "Expected effect pixelate of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.mosaic, 0, "Expected effect mosaic of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.brightness, 0, "Expected effect brightness of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.ghost, 0, "Expected effect ghost of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Körper").effects.color, 0, "Expected effect color of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.fisheye, 0, "Expected effect fisheye of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.whirl, 0, "Expected effect whirl of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.pixelate, 0, "Expected effect pixelate of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.mosaic, 0, "Expected effect mosaic of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.brightness, 0, "Expected effect brightness of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.ghost, 0, "Expected effect ghost of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.color, 0, "Expected effect color of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.fisheye, 0, "Expected effect fisheye of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.whirl, 0, "Expected effect whirl of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.pixelate, 0, "Expected effect pixelate of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.mosaic, 0, "Expected effect mosaic of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.brightness, 0, "Expected effect brightness of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.ghost, 0, "Expected effect ghost of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.color, 0, "Expected effect color of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.fisheye, 0, "Expected effect fisheye of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.whirl, 0, "Expected effect whirl of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.pixelate, 0, "Expected effect pixelate of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.mosaic, 0, "Expected effect mosaic of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.brightness, 0, "Expected effect brightness of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.ghost, 0, "Expected effect ghost of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Kopf").layerOrder, 1, "Expected Sprite Kopf to be at layer 1");
  t.assert.equal(t.getSprite("Körper").layerOrder, 3, "Expected Sprite Körper to be at layer 3");
  t.assert.equal(t.getSprite("Punkt").layerOrder, 5, "Expected Sprite Punkt to be at layer 5");
  t.assert.equal(t.getSprite("Goodie").layerOrder, 4, "Expected Sprite Goodie to be at layer 4");
  t.assert.equal(t.getSprite("Körper").getClone(1).getLayerOrder(), 2, "Expected Clone 1 of Körper to be at layer 2");
  t.assert.withinRange(t.getSprite("Kopf").x, 231, 5, "Expected Sprite Kopf to have x-position 231 +-5");
  t.assert.withinRange(t.getSprite("Kopf").y, 103, 5, "Expected Sprite Kopf to have y-position 103 +-5");
  t.assert.withinRange(t.getSprite("Körper").x, 231, 5, "Expected Sprite Körper to have x-position 231 +-5");
  t.assert.withinRange(t.getSprite("Körper").y, 100, 5, "Expected Sprite Körper to have y-position 100 +-5");
  t.assert.withinRange(t.getSprite("Punkt").x, 0, 5, "Expected Sprite Punkt to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Punkt").y, -100, 5, "Expected Sprite Punkt to have y-position -100 +-5");
  t.assert.withinRange(t.getSprite("Goodie").x, 0, 5, "Expected Sprite Goodie to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Goodie").y, 0, 5, "Expected Sprite Goodie to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Körper").getClone(1).x, 231, 5, "Expected Clone 1 of Körper to have x-position 231 +-5");
  t.assert.withinRange(t.getSprite("Körper").getClone(1).y, 100, 5, "Expected Clone 1 of Körper to have y-position 100 +-5");
  t.assert.equal(t.getSprite("Kopf").sayText, "Verloren!", "Expected Sprite Kopf to say Verloren!");
  t.assert.not(t.getSprite("Körper").sayText, "Expected Sprite Körper not to say anything");
  t.assert.not(t.getSprite("Punkt").sayText, "Expected Sprite Punkt not to say anything");
  t.assert.not(t.getSprite("Goodie").sayText, "Expected Sprite Goodie not to say anything");
  t.assert.not(t.getSprite("Körper").getClone(1).sayText, "Expected Clone 1 of Körper not to say anything");
  t.assert.withinRange(t.getSprite("Kopf").size, 100, 1, "Expected Sprite Kopf to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Körper").size, 90, 1, "Expected Sprite Körper to have size 90 +-1");
  t.assert.withinRange(t.getSprite("Punkt").size, 100, 1, "Expected Sprite Punkt to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Goodie").size, 100, 1, "Expected Sprite Goodie to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Körper").getClone(1).size, 90, 1, "Expected Clone 1 of Körper to have size 90 +-1");
  t.assert.ok(t.getSprite("Kopf").visible, "Expected Sprite Kopf to be visible");
  t.assert.ok(t.getSprite("Körper").visible, "Expected Sprite Körper to be visible");
  t.assert.ok(t.getSprite("Punkt").visible, "Expected Sprite Punkt to be visible");
  t.assert.not(t.getSprite("Goodie").visible, "Expected Sprite Goodie not to be visible");
  t.assert.ok(t.getSprite("Körper").getClone(1).visible, "Expected Clone 1 of Körper to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kopf").volume, 100, "Expected Sprite Kopf to have volume 100");
  t.assert.equal(t.getSprite("Körper").volume, 100, "Expected Sprite Körper to have volume 100");
  t.assert.equal(t.getSprite("Punkt").volume, 100, "Expected Sprite Punkt to have volume 100");
  t.assert.equal(t.getSprite("Goodie").volume, 100, "Expected Sprite Goodie to have volume 100");
  t.assert.equal(t.getSprite("Körper").getClone(1).volume, 100, "Expected Clone 1 of Körper to have volume 100");
  t.dragSprite('Kopf', 71, 180, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kopf").currentCostume, 0, "Expected Sprite Kopf to have costume 0");
  t.assert.equal(t.getSprite("Körper").currentCostume, 0, "Expected Sprite Körper to have costume 0");
  t.assert.equal(t.getSprite("Punkt").currentCostume, 0, "Expected Sprite Punkt to have costume 0");
  t.assert.equal(t.getSprite("Goodie").currentCostume, 0, "Expected Sprite Goodie to have costume 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).currentCostume, 0, "Expected Clone 1 of Körper to have costume 0");
  t.assert.equal(t.getSprite("Kopf").getCloneCount(), 0, "Expected Sprite Kopf to have 0 clones");
  t.assert.equal(t.getSprite("Körper").getCloneCount(), 1, "Expected Sprite Körper to have 1 clones");
  t.assert.equal(t.getSprite("Punkt").getCloneCount(), 0, "Expected Sprite Punkt to have 0 clones");
  t.assert.equal(t.getSprite("Goodie").getCloneCount(), 0, "Expected Sprite Goodie to have 0 clones");
  t.assert.equal(t.getSprite("Kopf").direction, 0, 1, "Expected Sprite Kopf to face in direction 0 +-1");
  t.assert.equal(t.getSprite("Körper").direction, 90, 1, "Expected Sprite Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Punkt").direction, 90, 1, "Expected Sprite Punkt to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Goodie").direction, 90, 1, "Expected Sprite Goodie to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Körper").getClone(1).direction, 90, 1, "Expected Clone 1 of Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kopf").effects.color, 0, "Expected effect color of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.fisheye, 0, "Expected effect fisheye of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.whirl, 0, "Expected effect whirl of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.pixelate, 0, "Expected effect pixelate of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.mosaic, 0, "Expected effect mosaic of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.brightness, 0, "Expected effect brightness of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.ghost, 0, "Expected effect ghost of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Körper").effects.color, 0, "Expected effect color of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.fisheye, 0, "Expected effect fisheye of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.whirl, 0, "Expected effect whirl of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.pixelate, 0, "Expected effect pixelate of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.mosaic, 0, "Expected effect mosaic of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.brightness, 0, "Expected effect brightness of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.ghost, 0, "Expected effect ghost of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.color, 0, "Expected effect color of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.fisheye, 0, "Expected effect fisheye of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.whirl, 0, "Expected effect whirl of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.pixelate, 0, "Expected effect pixelate of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.mosaic, 0, "Expected effect mosaic of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.brightness, 0, "Expected effect brightness of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.ghost, 0, "Expected effect ghost of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.color, 0, "Expected effect color of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.fisheye, 0, "Expected effect fisheye of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.whirl, 0, "Expected effect whirl of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.pixelate, 0, "Expected effect pixelate of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.mosaic, 0, "Expected effect mosaic of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.brightness, 0, "Expected effect brightness of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.ghost, 0, "Expected effect ghost of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Kopf").layerOrder, 1, "Expected Sprite Kopf to be at layer 1");
  t.assert.equal(t.getSprite("Körper").layerOrder, 3, "Expected Sprite Körper to be at layer 3");
  t.assert.equal(t.getSprite("Punkt").layerOrder, 5, "Expected Sprite Punkt to be at layer 5");
  t.assert.equal(t.getSprite("Goodie").layerOrder, 4, "Expected Sprite Goodie to be at layer 4");
  t.assert.equal(t.getSprite("Körper").getClone(1).getLayerOrder(), 2, "Expected Clone 1 of Körper to be at layer 2");
  t.assert.withinRange(t.getSprite("Kopf").x, 71, 5, "Expected Sprite Kopf to have x-position 71 +-5");
  t.assert.withinRange(t.getSprite("Kopf").y, 173, 5, "Expected Sprite Kopf to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Körper").x, 71, 5, "Expected Sprite Körper to have x-position 71 +-5");
  t.assert.withinRange(t.getSprite("Körper").y, 173, 5, "Expected Sprite Körper to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Punkt").x, 0, 5, "Expected Sprite Punkt to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Punkt").y, -100, 5, "Expected Sprite Punkt to have y-position -100 +-5");
  t.assert.withinRange(t.getSprite("Goodie").x, 0, 5, "Expected Sprite Goodie to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Goodie").y, 0, 5, "Expected Sprite Goodie to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Körper").getClone(1).x, 71, 5, "Expected Clone 1 of Körper to have x-position 71 +-5");
  t.assert.withinRange(t.getSprite("Körper").getClone(1).y, 173, 5, "Expected Clone 1 of Körper to have y-position 173 +-5");
  t.assert.equal(t.getSprite("Kopf").sayText, "Verloren!", "Expected Sprite Kopf to say Verloren!");
  t.assert.not(t.getSprite("Körper").sayText, "Expected Sprite Körper not to say anything");
  t.assert.not(t.getSprite("Punkt").sayText, "Expected Sprite Punkt not to say anything");
  t.assert.not(t.getSprite("Goodie").sayText, "Expected Sprite Goodie not to say anything");
  t.assert.not(t.getSprite("Körper").getClone(1).sayText, "Expected Clone 1 of Körper not to say anything");
  t.assert.withinRange(t.getSprite("Kopf").size, 100, 1, "Expected Sprite Kopf to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Körper").size, 90, 1, "Expected Sprite Körper to have size 90 +-1");
  t.assert.withinRange(t.getSprite("Punkt").size, 100, 1, "Expected Sprite Punkt to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Goodie").size, 100, 1, "Expected Sprite Goodie to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Körper").getClone(1).size, 90, 1, "Expected Clone 1 of Körper to have size 90 +-1");
  t.assert.ok(t.getSprite("Kopf").visible, "Expected Sprite Kopf to be visible");
  t.assert.ok(t.getSprite("Körper").visible, "Expected Sprite Körper to be visible");
  t.assert.ok(t.getSprite("Punkt").visible, "Expected Sprite Punkt to be visible");
  t.assert.not(t.getSprite("Goodie").visible, "Expected Sprite Goodie not to be visible");
  t.assert.ok(t.getSprite("Körper").getClone(1).visible, "Expected Clone 1 of Körper to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kopf").volume, 100, "Expected Sprite Kopf to have volume 100");
  t.assert.equal(t.getSprite("Körper").volume, 100, "Expected Sprite Körper to have volume 100");
  t.assert.equal(t.getSprite("Punkt").volume, 100, "Expected Sprite Punkt to have volume 100");
  t.assert.equal(t.getSprite("Goodie").volume, 100, "Expected Sprite Goodie to have volume 100");
  t.assert.equal(t.getSprite("Körper").getClone(1).volume, 100, "Expected Clone 1 of Körper to have volume 100");
  t.keyPress('left arrow', 4);
  await t.runForSteps(4);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kopf").currentCostume, 0, "Expected Sprite Kopf to have costume 0");
  t.assert.equal(t.getSprite("Körper").currentCostume, 0, "Expected Sprite Körper to have costume 0");
  t.assert.equal(t.getSprite("Punkt").currentCostume, 0, "Expected Sprite Punkt to have costume 0");
  t.assert.equal(t.getSprite("Goodie").currentCostume, 0, "Expected Sprite Goodie to have costume 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).currentCostume, 0, "Expected Clone 1 of Körper to have costume 0");
  t.assert.equal(t.getSprite("Kopf").getCloneCount(), 0, "Expected Sprite Kopf to have 0 clones");
  t.assert.equal(t.getSprite("Körper").getCloneCount(), 1, "Expected Sprite Körper to have 1 clones");
  t.assert.equal(t.getSprite("Punkt").getCloneCount(), 0, "Expected Sprite Punkt to have 0 clones");
  t.assert.equal(t.getSprite("Goodie").getCloneCount(), 0, "Expected Sprite Goodie to have 0 clones");
  t.assert.equal(t.getSprite("Kopf").direction, -90, 1, "Expected Sprite Kopf to face in direction -90 +-1");
  t.assert.equal(t.getSprite("Körper").direction, 90, 1, "Expected Sprite Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Punkt").direction, 90, 1, "Expected Sprite Punkt to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Goodie").direction, 90, 1, "Expected Sprite Goodie to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Körper").getClone(1).direction, 90, 1, "Expected Clone 1 of Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kopf").effects.color, 0, "Expected effect color of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.fisheye, 0, "Expected effect fisheye of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.whirl, 0, "Expected effect whirl of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.pixelate, 0, "Expected effect pixelate of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.mosaic, 0, "Expected effect mosaic of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.brightness, 0, "Expected effect brightness of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.ghost, 0, "Expected effect ghost of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Körper").effects.color, 0, "Expected effect color of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.fisheye, 0, "Expected effect fisheye of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.whirl, 0, "Expected effect whirl of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.pixelate, 0, "Expected effect pixelate of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.mosaic, 0, "Expected effect mosaic of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.brightness, 0, "Expected effect brightness of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.ghost, 0, "Expected effect ghost of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.color, 0, "Expected effect color of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.fisheye, 0, "Expected effect fisheye of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.whirl, 0, "Expected effect whirl of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.pixelate, 0, "Expected effect pixelate of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.mosaic, 0, "Expected effect mosaic of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.brightness, 0, "Expected effect brightness of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.ghost, 0, "Expected effect ghost of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.color, 0, "Expected effect color of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.fisheye, 0, "Expected effect fisheye of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.whirl, 0, "Expected effect whirl of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.pixelate, 0, "Expected effect pixelate of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.mosaic, 0, "Expected effect mosaic of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.brightness, 0, "Expected effect brightness of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.ghost, 0, "Expected effect ghost of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Körper").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Körper to be 0");
  t.assert.equal(t.getSprite("Kopf").layerOrder, 1, "Expected Sprite Kopf to be at layer 1");
  t.assert.equal(t.getSprite("Körper").layerOrder, 3, "Expected Sprite Körper to be at layer 3");
  t.assert.equal(t.getSprite("Punkt").layerOrder, 5, "Expected Sprite Punkt to be at layer 5");
  t.assert.equal(t.getSprite("Goodie").layerOrder, 4, "Expected Sprite Goodie to be at layer 4");
  t.assert.equal(t.getSprite("Körper").getClone(1).getLayerOrder(), 2, "Expected Clone 1 of Körper to be at layer 2");
  t.assert.withinRange(t.getSprite("Kopf").x, 59, 5, "Expected Sprite Kopf to have x-position 59 +-5");
  t.assert.withinRange(t.getSprite("Kopf").y, 173, 5, "Expected Sprite Kopf to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Körper").x, 62, 5, "Expected Sprite Körper to have x-position 62 +-5");
  t.assert.withinRange(t.getSprite("Körper").y, 173, 5, "Expected Sprite Körper to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Punkt").x, 0, 5, "Expected Sprite Punkt to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Punkt").y, -100, 5, "Expected Sprite Punkt to have y-position -100 +-5");
  t.assert.withinRange(t.getSprite("Goodie").x, 0, 5, "Expected Sprite Goodie to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Goodie").y, 0, 5, "Expected Sprite Goodie to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Körper").getClone(1).x, 62, 5, "Expected Clone 1 of Körper to have x-position 62 +-5");
  t.assert.withinRange(t.getSprite("Körper").getClone(1).y, 173, 5, "Expected Clone 1 of Körper to have y-position 173 +-5");
  t.assert.equal(t.getSprite("Kopf").sayText, "Verloren!", "Expected Sprite Kopf to say Verloren!");
  t.assert.not(t.getSprite("Körper").sayText, "Expected Sprite Körper not to say anything");
  t.assert.not(t.getSprite("Punkt").sayText, "Expected Sprite Punkt not to say anything");
  t.assert.not(t.getSprite("Goodie").sayText, "Expected Sprite Goodie not to say anything");
  t.assert.not(t.getSprite("Körper").getClone(1).sayText, "Expected Clone 1 of Körper not to say anything");
  t.assert.withinRange(t.getSprite("Kopf").size, 100, 1, "Expected Sprite Kopf to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Körper").size, 90, 1, "Expected Sprite Körper to have size 90 +-1");
  t.assert.withinRange(t.getSprite("Punkt").size, 100, 1, "Expected Sprite Punkt to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Goodie").size, 100, 1, "Expected Sprite Goodie to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Körper").getClone(1).size, 90, 1, "Expected Clone 1 of Körper to have size 90 +-1");
  t.assert.ok(t.getSprite("Kopf").visible, "Expected Sprite Kopf to be visible");
  t.assert.ok(t.getSprite("Körper").visible, "Expected Sprite Körper to be visible");
  t.assert.ok(t.getSprite("Punkt").visible, "Expected Sprite Punkt to be visible");
  t.assert.not(t.getSprite("Goodie").visible, "Expected Sprite Goodie not to be visible");
  t.assert.ok(t.getSprite("Körper").getClone(1).visible, "Expected Clone 1 of Körper to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kopf").volume, 100, "Expected Sprite Kopf to have volume 100");
  t.assert.equal(t.getSprite("Körper").volume, 100, "Expected Sprite Körper to have volume 100");
  t.assert.equal(t.getSprite("Punkt").volume, 100, "Expected Sprite Punkt to have volume 100");
  t.assert.equal(t.getSprite("Goodie").volume, 100, "Expected Sprite Goodie to have volume 100");
  t.assert.equal(t.getSprite("Körper").getClone(1).volume, 100, "Expected Clone 1 of Körper to have volume 100");
  await t.runForSteps(51);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kopf").currentCostume, 0, "Expected Sprite Kopf to have costume 0");
  t.assert.equal(t.getSprite("Körper").currentCostume, 0, "Expected Sprite Körper to have costume 0");
  t.assert.equal(t.getSprite("Punkt").currentCostume, 0, "Expected Sprite Punkt to have costume 0");
  t.assert.equal(t.getSprite("Goodie").currentCostume, 0, "Expected Sprite Goodie to have costume 0");
  t.assert.equal(t.getSprite("Kopf").getCloneCount(), 0, "Expected Sprite Kopf to have 0 clones");
  t.assert.equal(t.getSprite("Körper").getCloneCount(), 0, "Expected Sprite Körper to have 0 clones");
  t.assert.equal(t.getSprite("Punkt").getCloneCount(), 0, "Expected Sprite Punkt to have 0 clones");
  t.assert.equal(t.getSprite("Goodie").getCloneCount(), 0, "Expected Sprite Goodie to have 0 clones");
  t.assert.equal(t.getSprite("Kopf").direction, -90, 1, "Expected Sprite Kopf to face in direction -90 +-1");
  t.assert.equal(t.getSprite("Körper").direction, 90, 1, "Expected Sprite Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Punkt").direction, 90, 1, "Expected Sprite Punkt to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Goodie").direction, 90, 1, "Expected Sprite Goodie to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kopf").effects.color, 0, "Expected effect color of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.fisheye, 0, "Expected effect fisheye of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.whirl, 0, "Expected effect whirl of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.pixelate, 0, "Expected effect pixelate of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.mosaic, 0, "Expected effect mosaic of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.brightness, 0, "Expected effect brightness of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.ghost, 0, "Expected effect ghost of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Körper").effects.color, 0, "Expected effect color of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.fisheye, 0, "Expected effect fisheye of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.whirl, 0, "Expected effect whirl of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.pixelate, 0, "Expected effect pixelate of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.mosaic, 0, "Expected effect mosaic of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.brightness, 0, "Expected effect brightness of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.ghost, 0, "Expected effect ghost of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.color, 0, "Expected effect color of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.fisheye, 0, "Expected effect fisheye of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.whirl, 0, "Expected effect whirl of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.pixelate, 0, "Expected effect pixelate of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.mosaic, 0, "Expected effect mosaic of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.brightness, 0, "Expected effect brightness of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.ghost, 0, "Expected effect ghost of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.color, 0, "Expected effect color of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.fisheye, 0, "Expected effect fisheye of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.whirl, 0, "Expected effect whirl of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.pixelate, 0, "Expected effect pixelate of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.mosaic, 0, "Expected effect mosaic of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.brightness, 0, "Expected effect brightness of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.ghost, 0, "Expected effect ghost of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Kopf").layerOrder, 1, "Expected Sprite Kopf to be at layer 1");
  t.assert.equal(t.getSprite("Körper").layerOrder, 2, "Expected Sprite Körper to be at layer 2");
  t.assert.equal(t.getSprite("Punkt").layerOrder, 4, "Expected Sprite Punkt to be at layer 4");
  t.assert.equal(t.getSprite("Goodie").layerOrder, 3, "Expected Sprite Goodie to be at layer 3");
  t.assert.withinRange(t.getSprite("Kopf").x, 5, 5, "Expected Sprite Kopf to have x-position 5 +-5");
  t.assert.withinRange(t.getSprite("Kopf").y, 173, 5, "Expected Sprite Kopf to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Körper").x, 8, 5, "Expected Sprite Körper to have x-position 8 +-5");
  t.assert.withinRange(t.getSprite("Körper").y, 173, 5, "Expected Sprite Körper to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Punkt").x, 0, 5, "Expected Sprite Punkt to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Punkt").y, -100, 5, "Expected Sprite Punkt to have y-position -100 +-5");
  t.assert.withinRange(t.getSprite("Goodie").x, 0, 5, "Expected Sprite Goodie to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Goodie").y, 0, 5, "Expected Sprite Goodie to have y-position 0 +-5");
  t.assert.not(t.getSprite("Kopf").sayText, "Expected Sprite Kopf not to say anything");
  t.assert.not(t.getSprite("Körper").sayText, "Expected Sprite Körper not to say anything");
  t.assert.not(t.getSprite("Punkt").sayText, "Expected Sprite Punkt not to say anything");
  t.assert.not(t.getSprite("Goodie").sayText, "Expected Sprite Goodie not to say anything");
  t.assert.withinRange(t.getSprite("Kopf").size, 100, 1, "Expected Sprite Kopf to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Körper").size, 90, 1, "Expected Sprite Körper to have size 90 +-1");
  t.assert.withinRange(t.getSprite("Punkt").size, 100, 1, "Expected Sprite Punkt to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Goodie").size, 100, 1, "Expected Sprite Goodie to have size 100 +-1");
  t.assert.ok(t.getSprite("Kopf").visible, "Expected Sprite Kopf to be visible");
  t.assert.ok(t.getSprite("Körper").visible, "Expected Sprite Körper to be visible");
  t.assert.ok(t.getSprite("Punkt").visible, "Expected Sprite Punkt to be visible");
  t.assert.not(t.getSprite("Goodie").visible, "Expected Sprite Goodie not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kopf").volume, 100, "Expected Sprite Kopf to have volume 100");
  t.assert.equal(t.getSprite("Körper").volume, 100, "Expected Sprite Körper to have volume 100");
  t.assert.equal(t.getSprite("Punkt").volume, 100, "Expected Sprite Punkt to have volume 100");
  t.assert.equal(t.getSprite("Goodie").volume, 100, "Expected Sprite Goodie to have volume 100");
  await t.runForSteps(40);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kopf").currentCostume, 0, "Expected Sprite Kopf to have costume 0");
  t.assert.equal(t.getSprite("Körper").currentCostume, 0, "Expected Sprite Körper to have costume 0");
  t.assert.equal(t.getSprite("Punkt").currentCostume, 0, "Expected Sprite Punkt to have costume 0");
  t.assert.equal(t.getSprite("Goodie").currentCostume, 0, "Expected Sprite Goodie to have costume 0");
  t.assert.equal(t.getSprite("Kopf").getCloneCount(), 0, "Expected Sprite Kopf to have 0 clones");
  t.assert.equal(t.getSprite("Körper").getCloneCount(), 0, "Expected Sprite Körper to have 0 clones");
  t.assert.equal(t.getSprite("Punkt").getCloneCount(), 0, "Expected Sprite Punkt to have 0 clones");
  t.assert.equal(t.getSprite("Goodie").getCloneCount(), 0, "Expected Sprite Goodie to have 0 clones");
  t.assert.equal(t.getSprite("Kopf").direction, -90, 1, "Expected Sprite Kopf to face in direction -90 +-1");
  t.assert.equal(t.getSprite("Körper").direction, 90, 1, "Expected Sprite Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Punkt").direction, 90, 1, "Expected Sprite Punkt to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Goodie").direction, 90, 1, "Expected Sprite Goodie to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kopf").effects.color, 0, "Expected effect color of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.fisheye, 0, "Expected effect fisheye of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.whirl, 0, "Expected effect whirl of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.pixelate, 0, "Expected effect pixelate of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.mosaic, 0, "Expected effect mosaic of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.brightness, 0, "Expected effect brightness of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.ghost, 0, "Expected effect ghost of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Körper").effects.color, 0, "Expected effect color of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.fisheye, 0, "Expected effect fisheye of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.whirl, 0, "Expected effect whirl of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.pixelate, 0, "Expected effect pixelate of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.mosaic, 0, "Expected effect mosaic of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.brightness, 0, "Expected effect brightness of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.ghost, 0, "Expected effect ghost of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.color, 0, "Expected effect color of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.fisheye, 0, "Expected effect fisheye of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.whirl, 0, "Expected effect whirl of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.pixelate, 0, "Expected effect pixelate of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.mosaic, 0, "Expected effect mosaic of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.brightness, 0, "Expected effect brightness of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.ghost, 0, "Expected effect ghost of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.color, 0, "Expected effect color of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.fisheye, 0, "Expected effect fisheye of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.whirl, 0, "Expected effect whirl of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.pixelate, 0, "Expected effect pixelate of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.mosaic, 0, "Expected effect mosaic of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.brightness, 0, "Expected effect brightness of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.ghost, 0, "Expected effect ghost of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Kopf").layerOrder, 1, "Expected Sprite Kopf to be at layer 1");
  t.assert.equal(t.getSprite("Körper").layerOrder, 2, "Expected Sprite Körper to be at layer 2");
  t.assert.equal(t.getSprite("Punkt").layerOrder, 4, "Expected Sprite Punkt to be at layer 4");
  t.assert.equal(t.getSprite("Goodie").layerOrder, 3, "Expected Sprite Goodie to be at layer 3");
  t.assert.withinRange(t.getSprite("Kopf").x, 5, 5, "Expected Sprite Kopf to have x-position 5 +-5");
  t.assert.withinRange(t.getSprite("Kopf").y, 173, 5, "Expected Sprite Kopf to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Körper").x, 8, 5, "Expected Sprite Körper to have x-position 8 +-5");
  t.assert.withinRange(t.getSprite("Körper").y, 173, 5, "Expected Sprite Körper to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Punkt").x, 0, 5, "Expected Sprite Punkt to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Punkt").y, -100, 5, "Expected Sprite Punkt to have y-position -100 +-5");
  t.assert.withinRange(t.getSprite("Goodie").x, 0, 5, "Expected Sprite Goodie to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Goodie").y, 0, 5, "Expected Sprite Goodie to have y-position 0 +-5");
  t.assert.not(t.getSprite("Kopf").sayText, "Expected Sprite Kopf not to say anything");
  t.assert.not(t.getSprite("Körper").sayText, "Expected Sprite Körper not to say anything");
  t.assert.not(t.getSprite("Punkt").sayText, "Expected Sprite Punkt not to say anything");
  t.assert.not(t.getSprite("Goodie").sayText, "Expected Sprite Goodie not to say anything");
  t.assert.withinRange(t.getSprite("Kopf").size, 100, 1, "Expected Sprite Kopf to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Körper").size, 90, 1, "Expected Sprite Körper to have size 90 +-1");
  t.assert.withinRange(t.getSprite("Punkt").size, 100, 1, "Expected Sprite Punkt to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Goodie").size, 100, 1, "Expected Sprite Goodie to have size 100 +-1");
  t.assert.ok(t.getSprite("Kopf").visible, "Expected Sprite Kopf to be visible");
  t.assert.ok(t.getSprite("Körper").visible, "Expected Sprite Körper to be visible");
  t.assert.ok(t.getSprite("Punkt").visible, "Expected Sprite Punkt to be visible");
  t.assert.not(t.getSprite("Goodie").visible, "Expected Sprite Goodie not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kopf").volume, 100, "Expected Sprite Kopf to have volume 100");
  t.assert.equal(t.getSprite("Körper").volume, 100, "Expected Sprite Körper to have volume 100");
  t.assert.equal(t.getSprite("Punkt").volume, 100, "Expected Sprite Punkt to have volume 100");
  t.assert.equal(t.getSprite("Goodie").volume, 100, "Expected Sprite Goodie to have volume 100");
  t.keyPress('right arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kopf").currentCostume, 0, "Expected Sprite Kopf to have costume 0");
  t.assert.equal(t.getSprite("Körper").currentCostume, 0, "Expected Sprite Körper to have costume 0");
  t.assert.equal(t.getSprite("Punkt").currentCostume, 0, "Expected Sprite Punkt to have costume 0");
  t.assert.equal(t.getSprite("Goodie").currentCostume, 0, "Expected Sprite Goodie to have costume 0");
  t.assert.equal(t.getSprite("Kopf").getCloneCount(), 0, "Expected Sprite Kopf to have 0 clones");
  t.assert.equal(t.getSprite("Körper").getCloneCount(), 0, "Expected Sprite Körper to have 0 clones");
  t.assert.equal(t.getSprite("Punkt").getCloneCount(), 0, "Expected Sprite Punkt to have 0 clones");
  t.assert.equal(t.getSprite("Goodie").getCloneCount(), 0, "Expected Sprite Goodie to have 0 clones");
  t.assert.equal(t.getSprite("Kopf").direction, 90, 1, "Expected Sprite Kopf to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Körper").direction, 90, 1, "Expected Sprite Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Punkt").direction, 90, 1, "Expected Sprite Punkt to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Goodie").direction, 90, 1, "Expected Sprite Goodie to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kopf").effects.color, 0, "Expected effect color of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.fisheye, 0, "Expected effect fisheye of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.whirl, 0, "Expected effect whirl of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.pixelate, 0, "Expected effect pixelate of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.mosaic, 0, "Expected effect mosaic of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.brightness, 0, "Expected effect brightness of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.ghost, 0, "Expected effect ghost of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Körper").effects.color, 0, "Expected effect color of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.fisheye, 0, "Expected effect fisheye of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.whirl, 0, "Expected effect whirl of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.pixelate, 0, "Expected effect pixelate of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.mosaic, 0, "Expected effect mosaic of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.brightness, 0, "Expected effect brightness of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.ghost, 0, "Expected effect ghost of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.color, 0, "Expected effect color of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.fisheye, 0, "Expected effect fisheye of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.whirl, 0, "Expected effect whirl of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.pixelate, 0, "Expected effect pixelate of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.mosaic, 0, "Expected effect mosaic of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.brightness, 0, "Expected effect brightness of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.ghost, 0, "Expected effect ghost of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.color, 0, "Expected effect color of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.fisheye, 0, "Expected effect fisheye of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.whirl, 0, "Expected effect whirl of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.pixelate, 0, "Expected effect pixelate of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.mosaic, 0, "Expected effect mosaic of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.brightness, 0, "Expected effect brightness of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.ghost, 0, "Expected effect ghost of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Kopf").layerOrder, 1, "Expected Sprite Kopf to be at layer 1");
  t.assert.equal(t.getSprite("Körper").layerOrder, 2, "Expected Sprite Körper to be at layer 2");
  t.assert.equal(t.getSprite("Punkt").layerOrder, 4, "Expected Sprite Punkt to be at layer 4");
  t.assert.equal(t.getSprite("Goodie").layerOrder, 3, "Expected Sprite Goodie to be at layer 3");
  t.assert.withinRange(t.getSprite("Kopf").x, 5, 5, "Expected Sprite Kopf to have x-position 5 +-5");
  t.assert.withinRange(t.getSprite("Kopf").y, 173, 5, "Expected Sprite Kopf to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Körper").x, 8, 5, "Expected Sprite Körper to have x-position 8 +-5");
  t.assert.withinRange(t.getSprite("Körper").y, 173, 5, "Expected Sprite Körper to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Punkt").x, 0, 5, "Expected Sprite Punkt to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Punkt").y, -100, 5, "Expected Sprite Punkt to have y-position -100 +-5");
  t.assert.withinRange(t.getSprite("Goodie").x, 0, 5, "Expected Sprite Goodie to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Goodie").y, 0, 5, "Expected Sprite Goodie to have y-position 0 +-5");
  t.assert.not(t.getSprite("Kopf").sayText, "Expected Sprite Kopf not to say anything");
  t.assert.not(t.getSprite("Körper").sayText, "Expected Sprite Körper not to say anything");
  t.assert.not(t.getSprite("Punkt").sayText, "Expected Sprite Punkt not to say anything");
  t.assert.not(t.getSprite("Goodie").sayText, "Expected Sprite Goodie not to say anything");
  t.assert.withinRange(t.getSprite("Kopf").size, 100, 1, "Expected Sprite Kopf to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Körper").size, 90, 1, "Expected Sprite Körper to have size 90 +-1");
  t.assert.withinRange(t.getSprite("Punkt").size, 100, 1, "Expected Sprite Punkt to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Goodie").size, 100, 1, "Expected Sprite Goodie to have size 100 +-1");
  t.assert.ok(t.getSprite("Kopf").visible, "Expected Sprite Kopf to be visible");
  t.assert.ok(t.getSprite("Körper").visible, "Expected Sprite Körper to be visible");
  t.assert.ok(t.getSprite("Punkt").visible, "Expected Sprite Punkt to be visible");
  t.assert.not(t.getSprite("Goodie").visible, "Expected Sprite Goodie not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kopf").volume, 100, "Expected Sprite Kopf to have volume 100");
  t.assert.equal(t.getSprite("Körper").volume, 100, "Expected Sprite Körper to have volume 100");
  t.assert.equal(t.getSprite("Punkt").volume, 100, "Expected Sprite Punkt to have volume 100");
  t.assert.equal(t.getSprite("Goodie").volume, 100, "Expected Sprite Goodie to have volume 100");
  t.keyPress('left arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kopf").currentCostume, 0, "Expected Sprite Kopf to have costume 0");
  t.assert.equal(t.getSprite("Körper").currentCostume, 0, "Expected Sprite Körper to have costume 0");
  t.assert.equal(t.getSprite("Punkt").currentCostume, 0, "Expected Sprite Punkt to have costume 0");
  t.assert.equal(t.getSprite("Goodie").currentCostume, 0, "Expected Sprite Goodie to have costume 0");
  t.assert.equal(t.getSprite("Kopf").getCloneCount(), 0, "Expected Sprite Kopf to have 0 clones");
  t.assert.equal(t.getSprite("Körper").getCloneCount(), 0, "Expected Sprite Körper to have 0 clones");
  t.assert.equal(t.getSprite("Punkt").getCloneCount(), 0, "Expected Sprite Punkt to have 0 clones");
  t.assert.equal(t.getSprite("Goodie").getCloneCount(), 0, "Expected Sprite Goodie to have 0 clones");
  t.assert.equal(t.getSprite("Kopf").direction, -90, 1, "Expected Sprite Kopf to face in direction -90 +-1");
  t.assert.equal(t.getSprite("Körper").direction, 90, 1, "Expected Sprite Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Punkt").direction, 90, 1, "Expected Sprite Punkt to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Goodie").direction, 90, 1, "Expected Sprite Goodie to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kopf").effects.color, 0, "Expected effect color of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.fisheye, 0, "Expected effect fisheye of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.whirl, 0, "Expected effect whirl of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.pixelate, 0, "Expected effect pixelate of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.mosaic, 0, "Expected effect mosaic of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.brightness, 0, "Expected effect brightness of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.ghost, 0, "Expected effect ghost of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Körper").effects.color, 0, "Expected effect color of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.fisheye, 0, "Expected effect fisheye of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.whirl, 0, "Expected effect whirl of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.pixelate, 0, "Expected effect pixelate of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.mosaic, 0, "Expected effect mosaic of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.brightness, 0, "Expected effect brightness of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.ghost, 0, "Expected effect ghost of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.color, 0, "Expected effect color of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.fisheye, 0, "Expected effect fisheye of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.whirl, 0, "Expected effect whirl of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.pixelate, 0, "Expected effect pixelate of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.mosaic, 0, "Expected effect mosaic of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.brightness, 0, "Expected effect brightness of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.ghost, 0, "Expected effect ghost of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.color, 0, "Expected effect color of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.fisheye, 0, "Expected effect fisheye of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.whirl, 0, "Expected effect whirl of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.pixelate, 0, "Expected effect pixelate of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.mosaic, 0, "Expected effect mosaic of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.brightness, 0, "Expected effect brightness of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.ghost, 0, "Expected effect ghost of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Kopf").layerOrder, 1, "Expected Sprite Kopf to be at layer 1");
  t.assert.equal(t.getSprite("Körper").layerOrder, 2, "Expected Sprite Körper to be at layer 2");
  t.assert.equal(t.getSprite("Punkt").layerOrder, 4, "Expected Sprite Punkt to be at layer 4");
  t.assert.equal(t.getSprite("Goodie").layerOrder, 3, "Expected Sprite Goodie to be at layer 3");
  t.assert.withinRange(t.getSprite("Kopf").x, 5, 5, "Expected Sprite Kopf to have x-position 5 +-5");
  t.assert.withinRange(t.getSprite("Kopf").y, 173, 5, "Expected Sprite Kopf to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Körper").x, 8, 5, "Expected Sprite Körper to have x-position 8 +-5");
  t.assert.withinRange(t.getSprite("Körper").y, 173, 5, "Expected Sprite Körper to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Punkt").x, 0, 5, "Expected Sprite Punkt to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Punkt").y, -100, 5, "Expected Sprite Punkt to have y-position -100 +-5");
  t.assert.withinRange(t.getSprite("Goodie").x, 0, 5, "Expected Sprite Goodie to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Goodie").y, 0, 5, "Expected Sprite Goodie to have y-position 0 +-5");
  t.assert.not(t.getSprite("Kopf").sayText, "Expected Sprite Kopf not to say anything");
  t.assert.not(t.getSprite("Körper").sayText, "Expected Sprite Körper not to say anything");
  t.assert.not(t.getSprite("Punkt").sayText, "Expected Sprite Punkt not to say anything");
  t.assert.not(t.getSprite("Goodie").sayText, "Expected Sprite Goodie not to say anything");
  t.assert.withinRange(t.getSprite("Kopf").size, 100, 1, "Expected Sprite Kopf to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Körper").size, 90, 1, "Expected Sprite Körper to have size 90 +-1");
  t.assert.withinRange(t.getSprite("Punkt").size, 100, 1, "Expected Sprite Punkt to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Goodie").size, 100, 1, "Expected Sprite Goodie to have size 100 +-1");
  t.assert.ok(t.getSprite("Kopf").visible, "Expected Sprite Kopf to be visible");
  t.assert.ok(t.getSprite("Körper").visible, "Expected Sprite Körper to be visible");
  t.assert.ok(t.getSprite("Punkt").visible, "Expected Sprite Punkt to be visible");
  t.assert.not(t.getSprite("Goodie").visible, "Expected Sprite Goodie not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kopf").volume, 100, "Expected Sprite Kopf to have volume 100");
  t.assert.equal(t.getSprite("Körper").volume, 100, "Expected Sprite Körper to have volume 100");
  t.assert.equal(t.getSprite("Punkt").volume, 100, "Expected Sprite Punkt to have volume 100");
  t.assert.equal(t.getSprite("Goodie").volume, 100, "Expected Sprite Goodie to have volume 100");
  t.keyPress('up arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kopf").currentCostume, 0, "Expected Sprite Kopf to have costume 0");
  t.assert.equal(t.getSprite("Körper").currentCostume, 0, "Expected Sprite Körper to have costume 0");
  t.assert.equal(t.getSprite("Punkt").currentCostume, 0, "Expected Sprite Punkt to have costume 0");
  t.assert.equal(t.getSprite("Goodie").currentCostume, 0, "Expected Sprite Goodie to have costume 0");
  t.assert.equal(t.getSprite("Kopf").getCloneCount(), 0, "Expected Sprite Kopf to have 0 clones");
  t.assert.equal(t.getSprite("Körper").getCloneCount(), 0, "Expected Sprite Körper to have 0 clones");
  t.assert.equal(t.getSprite("Punkt").getCloneCount(), 0, "Expected Sprite Punkt to have 0 clones");
  t.assert.equal(t.getSprite("Goodie").getCloneCount(), 0, "Expected Sprite Goodie to have 0 clones");
  t.assert.equal(t.getSprite("Kopf").direction, 0, 1, "Expected Sprite Kopf to face in direction 0 +-1");
  t.assert.equal(t.getSprite("Körper").direction, 90, 1, "Expected Sprite Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Punkt").direction, 90, 1, "Expected Sprite Punkt to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Goodie").direction, 90, 1, "Expected Sprite Goodie to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kopf").effects.color, 0, "Expected effect color of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.fisheye, 0, "Expected effect fisheye of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.whirl, 0, "Expected effect whirl of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.pixelate, 0, "Expected effect pixelate of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.mosaic, 0, "Expected effect mosaic of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.brightness, 0, "Expected effect brightness of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.ghost, 0, "Expected effect ghost of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Körper").effects.color, 0, "Expected effect color of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.fisheye, 0, "Expected effect fisheye of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.whirl, 0, "Expected effect whirl of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.pixelate, 0, "Expected effect pixelate of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.mosaic, 0, "Expected effect mosaic of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.brightness, 0, "Expected effect brightness of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.ghost, 0, "Expected effect ghost of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.color, 0, "Expected effect color of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.fisheye, 0, "Expected effect fisheye of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.whirl, 0, "Expected effect whirl of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.pixelate, 0, "Expected effect pixelate of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.mosaic, 0, "Expected effect mosaic of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.brightness, 0, "Expected effect brightness of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.ghost, 0, "Expected effect ghost of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.color, 0, "Expected effect color of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.fisheye, 0, "Expected effect fisheye of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.whirl, 0, "Expected effect whirl of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.pixelate, 0, "Expected effect pixelate of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.mosaic, 0, "Expected effect mosaic of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.brightness, 0, "Expected effect brightness of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.ghost, 0, "Expected effect ghost of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Kopf").layerOrder, 1, "Expected Sprite Kopf to be at layer 1");
  t.assert.equal(t.getSprite("Körper").layerOrder, 2, "Expected Sprite Körper to be at layer 2");
  t.assert.equal(t.getSprite("Punkt").layerOrder, 4, "Expected Sprite Punkt to be at layer 4");
  t.assert.equal(t.getSprite("Goodie").layerOrder, 3, "Expected Sprite Goodie to be at layer 3");
  t.assert.withinRange(t.getSprite("Kopf").x, 5, 5, "Expected Sprite Kopf to have x-position 5 +-5");
  t.assert.withinRange(t.getSprite("Kopf").y, 173, 5, "Expected Sprite Kopf to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Körper").x, 8, 5, "Expected Sprite Körper to have x-position 8 +-5");
  t.assert.withinRange(t.getSprite("Körper").y, 173, 5, "Expected Sprite Körper to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Punkt").x, 0, 5, "Expected Sprite Punkt to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Punkt").y, -100, 5, "Expected Sprite Punkt to have y-position -100 +-5");
  t.assert.withinRange(t.getSprite("Goodie").x, 0, 5, "Expected Sprite Goodie to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Goodie").y, 0, 5, "Expected Sprite Goodie to have y-position 0 +-5");
  t.assert.not(t.getSprite("Kopf").sayText, "Expected Sprite Kopf not to say anything");
  t.assert.not(t.getSprite("Körper").sayText, "Expected Sprite Körper not to say anything");
  t.assert.not(t.getSprite("Punkt").sayText, "Expected Sprite Punkt not to say anything");
  t.assert.not(t.getSprite("Goodie").sayText, "Expected Sprite Goodie not to say anything");
  t.assert.withinRange(t.getSprite("Kopf").size, 100, 1, "Expected Sprite Kopf to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Körper").size, 90, 1, "Expected Sprite Körper to have size 90 +-1");
  t.assert.withinRange(t.getSprite("Punkt").size, 100, 1, "Expected Sprite Punkt to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Goodie").size, 100, 1, "Expected Sprite Goodie to have size 100 +-1");
  t.assert.ok(t.getSprite("Kopf").visible, "Expected Sprite Kopf to be visible");
  t.assert.ok(t.getSprite("Körper").visible, "Expected Sprite Körper to be visible");
  t.assert.ok(t.getSprite("Punkt").visible, "Expected Sprite Punkt to be visible");
  t.assert.not(t.getSprite("Goodie").visible, "Expected Sprite Goodie not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kopf").volume, 100, "Expected Sprite Kopf to have volume 100");
  t.assert.equal(t.getSprite("Körper").volume, 100, "Expected Sprite Körper to have volume 100");
  t.assert.equal(t.getSprite("Punkt").volume, 100, "Expected Sprite Punkt to have volume 100");
  t.assert.equal(t.getSprite("Goodie").volume, 100, "Expected Sprite Goodie to have volume 100");
  t.keyPress('down arrow', 2);
  await t.runForSteps(2);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kopf").currentCostume, 0, "Expected Sprite Kopf to have costume 0");
  t.assert.equal(t.getSprite("Körper").currentCostume, 0, "Expected Sprite Körper to have costume 0");
  t.assert.equal(t.getSprite("Punkt").currentCostume, 0, "Expected Sprite Punkt to have costume 0");
  t.assert.equal(t.getSprite("Goodie").currentCostume, 0, "Expected Sprite Goodie to have costume 0");
  t.assert.equal(t.getSprite("Kopf").getCloneCount(), 0, "Expected Sprite Kopf to have 0 clones");
  t.assert.equal(t.getSprite("Körper").getCloneCount(), 0, "Expected Sprite Körper to have 0 clones");
  t.assert.equal(t.getSprite("Punkt").getCloneCount(), 0, "Expected Sprite Punkt to have 0 clones");
  t.assert.equal(t.getSprite("Goodie").getCloneCount(), 0, "Expected Sprite Goodie to have 0 clones");
  t.assert.equal(t.getSprite("Kopf").direction, 180, 1, "Expected Sprite Kopf to face in direction 180 +-1");
  t.assert.equal(t.getSprite("Körper").direction, 90, 1, "Expected Sprite Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Punkt").direction, 90, 1, "Expected Sprite Punkt to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Goodie").direction, 90, 1, "Expected Sprite Goodie to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kopf").effects.color, 0, "Expected effect color of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.fisheye, 0, "Expected effect fisheye of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.whirl, 0, "Expected effect whirl of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.pixelate, 0, "Expected effect pixelate of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.mosaic, 0, "Expected effect mosaic of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.brightness, 0, "Expected effect brightness of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.ghost, 0, "Expected effect ghost of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Körper").effects.color, 0, "Expected effect color of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.fisheye, 0, "Expected effect fisheye of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.whirl, 0, "Expected effect whirl of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.pixelate, 0, "Expected effect pixelate of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.mosaic, 0, "Expected effect mosaic of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.brightness, 0, "Expected effect brightness of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.ghost, 0, "Expected effect ghost of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.color, 0, "Expected effect color of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.fisheye, 0, "Expected effect fisheye of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.whirl, 0, "Expected effect whirl of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.pixelate, 0, "Expected effect pixelate of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.mosaic, 0, "Expected effect mosaic of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.brightness, 0, "Expected effect brightness of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.ghost, 0, "Expected effect ghost of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.color, 0, "Expected effect color of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.fisheye, 0, "Expected effect fisheye of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.whirl, 0, "Expected effect whirl of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.pixelate, 0, "Expected effect pixelate of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.mosaic, 0, "Expected effect mosaic of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.brightness, 0, "Expected effect brightness of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.ghost, 0, "Expected effect ghost of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Kopf").layerOrder, 1, "Expected Sprite Kopf to be at layer 1");
  t.assert.equal(t.getSprite("Körper").layerOrder, 2, "Expected Sprite Körper to be at layer 2");
  t.assert.equal(t.getSprite("Punkt").layerOrder, 4, "Expected Sprite Punkt to be at layer 4");
  t.assert.equal(t.getSprite("Goodie").layerOrder, 3, "Expected Sprite Goodie to be at layer 3");
  t.assert.withinRange(t.getSprite("Kopf").x, 5, 5, "Expected Sprite Kopf to have x-position 5 +-5");
  t.assert.withinRange(t.getSprite("Kopf").y, 173, 5, "Expected Sprite Kopf to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Körper").x, 8, 5, "Expected Sprite Körper to have x-position 8 +-5");
  t.assert.withinRange(t.getSprite("Körper").y, 173, 5, "Expected Sprite Körper to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Punkt").x, 0, 5, "Expected Sprite Punkt to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Punkt").y, -100, 5, "Expected Sprite Punkt to have y-position -100 +-5");
  t.assert.withinRange(t.getSprite("Goodie").x, 0, 5, "Expected Sprite Goodie to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Goodie").y, 0, 5, "Expected Sprite Goodie to have y-position 0 +-5");
  t.assert.not(t.getSprite("Kopf").sayText, "Expected Sprite Kopf not to say anything");
  t.assert.not(t.getSprite("Körper").sayText, "Expected Sprite Körper not to say anything");
  t.assert.not(t.getSprite("Punkt").sayText, "Expected Sprite Punkt not to say anything");
  t.assert.not(t.getSprite("Goodie").sayText, "Expected Sprite Goodie not to say anything");
  t.assert.withinRange(t.getSprite("Kopf").size, 100, 1, "Expected Sprite Kopf to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Körper").size, 90, 1, "Expected Sprite Körper to have size 90 +-1");
  t.assert.withinRange(t.getSprite("Punkt").size, 100, 1, "Expected Sprite Punkt to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Goodie").size, 100, 1, "Expected Sprite Goodie to have size 100 +-1");
  t.assert.ok(t.getSprite("Kopf").visible, "Expected Sprite Kopf to be visible");
  t.assert.ok(t.getSprite("Körper").visible, "Expected Sprite Körper to be visible");
  t.assert.ok(t.getSprite("Punkt").visible, "Expected Sprite Punkt to be visible");
  t.assert.not(t.getSprite("Goodie").visible, "Expected Sprite Goodie not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kopf").volume, 100, "Expected Sprite Kopf to have volume 100");
  t.assert.equal(t.getSprite("Körper").volume, 100, "Expected Sprite Körper to have volume 100");
  t.assert.equal(t.getSprite("Punkt").volume, 100, "Expected Sprite Punkt to have volume 100");
  t.assert.equal(t.getSprite("Goodie").volume, 100, "Expected Sprite Goodie to have volume 100");
  t.keyPress('down arrow', 3);
  await t.runForSteps(3);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kopf").currentCostume, 0, "Expected Sprite Kopf to have costume 0");
  t.assert.equal(t.getSprite("Körper").currentCostume, 0, "Expected Sprite Körper to have costume 0");
  t.assert.equal(t.getSprite("Punkt").currentCostume, 0, "Expected Sprite Punkt to have costume 0");
  t.assert.equal(t.getSprite("Goodie").currentCostume, 0, "Expected Sprite Goodie to have costume 0");
  t.assert.equal(t.getSprite("Kopf").getCloneCount(), 0, "Expected Sprite Kopf to have 0 clones");
  t.assert.equal(t.getSprite("Körper").getCloneCount(), 0, "Expected Sprite Körper to have 0 clones");
  t.assert.equal(t.getSprite("Punkt").getCloneCount(), 0, "Expected Sprite Punkt to have 0 clones");
  t.assert.equal(t.getSprite("Goodie").getCloneCount(), 0, "Expected Sprite Goodie to have 0 clones");
  t.assert.equal(t.getSprite("Kopf").direction, 180, 1, "Expected Sprite Kopf to face in direction 180 +-1");
  t.assert.equal(t.getSprite("Körper").direction, 90, 1, "Expected Sprite Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Punkt").direction, 90, 1, "Expected Sprite Punkt to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Goodie").direction, 90, 1, "Expected Sprite Goodie to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kopf").effects.color, 0, "Expected effect color of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.fisheye, 0, "Expected effect fisheye of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.whirl, 0, "Expected effect whirl of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.pixelate, 0, "Expected effect pixelate of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.mosaic, 0, "Expected effect mosaic of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.brightness, 0, "Expected effect brightness of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.ghost, 0, "Expected effect ghost of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Körper").effects.color, 0, "Expected effect color of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.fisheye, 0, "Expected effect fisheye of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.whirl, 0, "Expected effect whirl of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.pixelate, 0, "Expected effect pixelate of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.mosaic, 0, "Expected effect mosaic of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.brightness, 0, "Expected effect brightness of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.ghost, 0, "Expected effect ghost of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.color, 0, "Expected effect color of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.fisheye, 0, "Expected effect fisheye of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.whirl, 0, "Expected effect whirl of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.pixelate, 0, "Expected effect pixelate of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.mosaic, 0, "Expected effect mosaic of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.brightness, 0, "Expected effect brightness of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.ghost, 0, "Expected effect ghost of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.color, 0, "Expected effect color of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.fisheye, 0, "Expected effect fisheye of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.whirl, 0, "Expected effect whirl of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.pixelate, 0, "Expected effect pixelate of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.mosaic, 0, "Expected effect mosaic of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.brightness, 0, "Expected effect brightness of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.ghost, 0, "Expected effect ghost of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Kopf").layerOrder, 1, "Expected Sprite Kopf to be at layer 1");
  t.assert.equal(t.getSprite("Körper").layerOrder, 2, "Expected Sprite Körper to be at layer 2");
  t.assert.equal(t.getSprite("Punkt").layerOrder, 4, "Expected Sprite Punkt to be at layer 4");
  t.assert.equal(t.getSprite("Goodie").layerOrder, 3, "Expected Sprite Goodie to be at layer 3");
  t.assert.withinRange(t.getSprite("Kopf").x, 5, 5, "Expected Sprite Kopf to have x-position 5 +-5");
  t.assert.withinRange(t.getSprite("Kopf").y, 173, 5, "Expected Sprite Kopf to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Körper").x, 8, 5, "Expected Sprite Körper to have x-position 8 +-5");
  t.assert.withinRange(t.getSprite("Körper").y, 173, 5, "Expected Sprite Körper to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Punkt").x, 0, 5, "Expected Sprite Punkt to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Punkt").y, -100, 5, "Expected Sprite Punkt to have y-position -100 +-5");
  t.assert.withinRange(t.getSprite("Goodie").x, 0, 5, "Expected Sprite Goodie to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Goodie").y, 0, 5, "Expected Sprite Goodie to have y-position 0 +-5");
  t.assert.not(t.getSprite("Kopf").sayText, "Expected Sprite Kopf not to say anything");
  t.assert.not(t.getSprite("Körper").sayText, "Expected Sprite Körper not to say anything");
  t.assert.not(t.getSprite("Punkt").sayText, "Expected Sprite Punkt not to say anything");
  t.assert.not(t.getSprite("Goodie").sayText, "Expected Sprite Goodie not to say anything");
  t.assert.withinRange(t.getSprite("Kopf").size, 100, 1, "Expected Sprite Kopf to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Körper").size, 90, 1, "Expected Sprite Körper to have size 90 +-1");
  t.assert.withinRange(t.getSprite("Punkt").size, 100, 1, "Expected Sprite Punkt to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Goodie").size, 100, 1, "Expected Sprite Goodie to have size 100 +-1");
  t.assert.ok(t.getSprite("Kopf").visible, "Expected Sprite Kopf to be visible");
  t.assert.ok(t.getSprite("Körper").visible, "Expected Sprite Körper to be visible");
  t.assert.ok(t.getSprite("Punkt").visible, "Expected Sprite Punkt to be visible");
  t.assert.not(t.getSprite("Goodie").visible, "Expected Sprite Goodie not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kopf").volume, 100, "Expected Sprite Kopf to have volume 100");
  t.assert.equal(t.getSprite("Körper").volume, 100, "Expected Sprite Körper to have volume 100");
  t.assert.equal(t.getSprite("Punkt").volume, 100, "Expected Sprite Punkt to have volume 100");
  t.assert.equal(t.getSprite("Goodie").volume, 100, "Expected Sprite Goodie to have volume 100");
  t.keyPress('up arrow', 2);
  await t.runForSteps(2);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kopf").currentCostume, 0, "Expected Sprite Kopf to have costume 0");
  t.assert.equal(t.getSprite("Körper").currentCostume, 0, "Expected Sprite Körper to have costume 0");
  t.assert.equal(t.getSprite("Punkt").currentCostume, 0, "Expected Sprite Punkt to have costume 0");
  t.assert.equal(t.getSprite("Goodie").currentCostume, 0, "Expected Sprite Goodie to have costume 0");
  t.assert.equal(t.getSprite("Kopf").getCloneCount(), 0, "Expected Sprite Kopf to have 0 clones");
  t.assert.equal(t.getSprite("Körper").getCloneCount(), 0, "Expected Sprite Körper to have 0 clones");
  t.assert.equal(t.getSprite("Punkt").getCloneCount(), 0, "Expected Sprite Punkt to have 0 clones");
  t.assert.equal(t.getSprite("Goodie").getCloneCount(), 0, "Expected Sprite Goodie to have 0 clones");
  t.assert.equal(t.getSprite("Kopf").direction, 0, 1, "Expected Sprite Kopf to face in direction 0 +-1");
  t.assert.equal(t.getSprite("Körper").direction, 90, 1, "Expected Sprite Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Punkt").direction, 90, 1, "Expected Sprite Punkt to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Goodie").direction, 90, 1, "Expected Sprite Goodie to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kopf").effects.color, 0, "Expected effect color of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.fisheye, 0, "Expected effect fisheye of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.whirl, 0, "Expected effect whirl of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.pixelate, 0, "Expected effect pixelate of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.mosaic, 0, "Expected effect mosaic of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.brightness, 0, "Expected effect brightness of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.ghost, 0, "Expected effect ghost of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Körper").effects.color, 0, "Expected effect color of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.fisheye, 0, "Expected effect fisheye of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.whirl, 0, "Expected effect whirl of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.pixelate, 0, "Expected effect pixelate of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.mosaic, 0, "Expected effect mosaic of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.brightness, 0, "Expected effect brightness of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.ghost, 0, "Expected effect ghost of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.color, 0, "Expected effect color of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.fisheye, 0, "Expected effect fisheye of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.whirl, 0, "Expected effect whirl of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.pixelate, 0, "Expected effect pixelate of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.mosaic, 0, "Expected effect mosaic of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.brightness, 0, "Expected effect brightness of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.ghost, 0, "Expected effect ghost of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.color, 0, "Expected effect color of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.fisheye, 0, "Expected effect fisheye of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.whirl, 0, "Expected effect whirl of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.pixelate, 0, "Expected effect pixelate of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.mosaic, 0, "Expected effect mosaic of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.brightness, 0, "Expected effect brightness of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.ghost, 0, "Expected effect ghost of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Kopf").layerOrder, 1, "Expected Sprite Kopf to be at layer 1");
  t.assert.equal(t.getSprite("Körper").layerOrder, 2, "Expected Sprite Körper to be at layer 2");
  t.assert.equal(t.getSprite("Punkt").layerOrder, 4, "Expected Sprite Punkt to be at layer 4");
  t.assert.equal(t.getSprite("Goodie").layerOrder, 3, "Expected Sprite Goodie to be at layer 3");
  t.assert.withinRange(t.getSprite("Kopf").x, 5, 5, "Expected Sprite Kopf to have x-position 5 +-5");
  t.assert.withinRange(t.getSprite("Kopf").y, 173, 5, "Expected Sprite Kopf to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Körper").x, 8, 5, "Expected Sprite Körper to have x-position 8 +-5");
  t.assert.withinRange(t.getSprite("Körper").y, 173, 5, "Expected Sprite Körper to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Punkt").x, 0, 5, "Expected Sprite Punkt to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Punkt").y, -100, 5, "Expected Sprite Punkt to have y-position -100 +-5");
  t.assert.withinRange(t.getSprite("Goodie").x, 0, 5, "Expected Sprite Goodie to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Goodie").y, 0, 5, "Expected Sprite Goodie to have y-position 0 +-5");
  t.assert.not(t.getSprite("Kopf").sayText, "Expected Sprite Kopf not to say anything");
  t.assert.not(t.getSprite("Körper").sayText, "Expected Sprite Körper not to say anything");
  t.assert.not(t.getSprite("Punkt").sayText, "Expected Sprite Punkt not to say anything");
  t.assert.not(t.getSprite("Goodie").sayText, "Expected Sprite Goodie not to say anything");
  t.assert.withinRange(t.getSprite("Kopf").size, 100, 1, "Expected Sprite Kopf to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Körper").size, 90, 1, "Expected Sprite Körper to have size 90 +-1");
  t.assert.withinRange(t.getSprite("Punkt").size, 100, 1, "Expected Sprite Punkt to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Goodie").size, 100, 1, "Expected Sprite Goodie to have size 100 +-1");
  t.assert.ok(t.getSprite("Kopf").visible, "Expected Sprite Kopf to be visible");
  t.assert.ok(t.getSprite("Körper").visible, "Expected Sprite Körper to be visible");
  t.assert.ok(t.getSprite("Punkt").visible, "Expected Sprite Punkt to be visible");
  t.assert.not(t.getSprite("Goodie").visible, "Expected Sprite Goodie not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kopf").volume, 100, "Expected Sprite Kopf to have volume 100");
  t.assert.equal(t.getSprite("Körper").volume, 100, "Expected Sprite Körper to have volume 100");
  t.assert.equal(t.getSprite("Punkt").volume, 100, "Expected Sprite Punkt to have volume 100");
  t.assert.equal(t.getSprite("Goodie").volume, 100, "Expected Sprite Goodie to have volume 100");
  t.keyPress('up arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kopf").currentCostume, 0, "Expected Sprite Kopf to have costume 0");
  t.assert.equal(t.getSprite("Körper").currentCostume, 0, "Expected Sprite Körper to have costume 0");
  t.assert.equal(t.getSprite("Punkt").currentCostume, 0, "Expected Sprite Punkt to have costume 0");
  t.assert.equal(t.getSprite("Goodie").currentCostume, 0, "Expected Sprite Goodie to have costume 0");
  t.assert.equal(t.getSprite("Kopf").getCloneCount(), 0, "Expected Sprite Kopf to have 0 clones");
  t.assert.equal(t.getSprite("Körper").getCloneCount(), 0, "Expected Sprite Körper to have 0 clones");
  t.assert.equal(t.getSprite("Punkt").getCloneCount(), 0, "Expected Sprite Punkt to have 0 clones");
  t.assert.equal(t.getSprite("Goodie").getCloneCount(), 0, "Expected Sprite Goodie to have 0 clones");
  t.assert.equal(t.getSprite("Kopf").direction, 0, 1, "Expected Sprite Kopf to face in direction 0 +-1");
  t.assert.equal(t.getSprite("Körper").direction, 90, 1, "Expected Sprite Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Punkt").direction, 90, 1, "Expected Sprite Punkt to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Goodie").direction, 90, 1, "Expected Sprite Goodie to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kopf").effects.color, 0, "Expected effect color of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.fisheye, 0, "Expected effect fisheye of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.whirl, 0, "Expected effect whirl of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.pixelate, 0, "Expected effect pixelate of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.mosaic, 0, "Expected effect mosaic of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.brightness, 0, "Expected effect brightness of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.ghost, 0, "Expected effect ghost of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Körper").effects.color, 0, "Expected effect color of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.fisheye, 0, "Expected effect fisheye of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.whirl, 0, "Expected effect whirl of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.pixelate, 0, "Expected effect pixelate of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.mosaic, 0, "Expected effect mosaic of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.brightness, 0, "Expected effect brightness of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.ghost, 0, "Expected effect ghost of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.color, 0, "Expected effect color of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.fisheye, 0, "Expected effect fisheye of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.whirl, 0, "Expected effect whirl of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.pixelate, 0, "Expected effect pixelate of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.mosaic, 0, "Expected effect mosaic of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.brightness, 0, "Expected effect brightness of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.ghost, 0, "Expected effect ghost of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.color, 0, "Expected effect color of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.fisheye, 0, "Expected effect fisheye of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.whirl, 0, "Expected effect whirl of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.pixelate, 0, "Expected effect pixelate of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.mosaic, 0, "Expected effect mosaic of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.brightness, 0, "Expected effect brightness of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.ghost, 0, "Expected effect ghost of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Kopf").layerOrder, 1, "Expected Sprite Kopf to be at layer 1");
  t.assert.equal(t.getSprite("Körper").layerOrder, 2, "Expected Sprite Körper to be at layer 2");
  t.assert.equal(t.getSprite("Punkt").layerOrder, 4, "Expected Sprite Punkt to be at layer 4");
  t.assert.equal(t.getSprite("Goodie").layerOrder, 3, "Expected Sprite Goodie to be at layer 3");
  t.assert.withinRange(t.getSprite("Kopf").x, 5, 5, "Expected Sprite Kopf to have x-position 5 +-5");
  t.assert.withinRange(t.getSprite("Kopf").y, 173, 5, "Expected Sprite Kopf to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Körper").x, 8, 5, "Expected Sprite Körper to have x-position 8 +-5");
  t.assert.withinRange(t.getSprite("Körper").y, 173, 5, "Expected Sprite Körper to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Punkt").x, 0, 5, "Expected Sprite Punkt to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Punkt").y, -100, 5, "Expected Sprite Punkt to have y-position -100 +-5");
  t.assert.withinRange(t.getSprite("Goodie").x, 0, 5, "Expected Sprite Goodie to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Goodie").y, 0, 5, "Expected Sprite Goodie to have y-position 0 +-5");
  t.assert.not(t.getSprite("Kopf").sayText, "Expected Sprite Kopf not to say anything");
  t.assert.not(t.getSprite("Körper").sayText, "Expected Sprite Körper not to say anything");
  t.assert.not(t.getSprite("Punkt").sayText, "Expected Sprite Punkt not to say anything");
  t.assert.not(t.getSprite("Goodie").sayText, "Expected Sprite Goodie not to say anything");
  t.assert.withinRange(t.getSprite("Kopf").size, 100, 1, "Expected Sprite Kopf to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Körper").size, 90, 1, "Expected Sprite Körper to have size 90 +-1");
  t.assert.withinRange(t.getSprite("Punkt").size, 100, 1, "Expected Sprite Punkt to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Goodie").size, 100, 1, "Expected Sprite Goodie to have size 100 +-1");
  t.assert.ok(t.getSprite("Kopf").visible, "Expected Sprite Kopf to be visible");
  t.assert.ok(t.getSprite("Körper").visible, "Expected Sprite Körper to be visible");
  t.assert.ok(t.getSprite("Punkt").visible, "Expected Sprite Punkt to be visible");
  t.assert.not(t.getSprite("Goodie").visible, "Expected Sprite Goodie not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kopf").volume, 100, "Expected Sprite Kopf to have volume 100");
  t.assert.equal(t.getSprite("Körper").volume, 100, "Expected Sprite Körper to have volume 100");
  t.assert.equal(t.getSprite("Punkt").volume, 100, "Expected Sprite Punkt to have volume 100");
  t.assert.equal(t.getSprite("Goodie").volume, 100, "Expected Sprite Goodie to have volume 100");
  t.keyPress('right arrow', 2);
  await t.runForSteps(2);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kopf").currentCostume, 0, "Expected Sprite Kopf to have costume 0");
  t.assert.equal(t.getSprite("Körper").currentCostume, 0, "Expected Sprite Körper to have costume 0");
  t.assert.equal(t.getSprite("Punkt").currentCostume, 0, "Expected Sprite Punkt to have costume 0");
  t.assert.equal(t.getSprite("Goodie").currentCostume, 0, "Expected Sprite Goodie to have costume 0");
  t.assert.equal(t.getSprite("Kopf").getCloneCount(), 0, "Expected Sprite Kopf to have 0 clones");
  t.assert.equal(t.getSprite("Körper").getCloneCount(), 0, "Expected Sprite Körper to have 0 clones");
  t.assert.equal(t.getSprite("Punkt").getCloneCount(), 0, "Expected Sprite Punkt to have 0 clones");
  t.assert.equal(t.getSprite("Goodie").getCloneCount(), 0, "Expected Sprite Goodie to have 0 clones");
  t.assert.equal(t.getSprite("Kopf").direction, 90, 1, "Expected Sprite Kopf to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Körper").direction, 90, 1, "Expected Sprite Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Punkt").direction, 90, 1, "Expected Sprite Punkt to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Goodie").direction, 90, 1, "Expected Sprite Goodie to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kopf").effects.color, 0, "Expected effect color of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.fisheye, 0, "Expected effect fisheye of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.whirl, 0, "Expected effect whirl of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.pixelate, 0, "Expected effect pixelate of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.mosaic, 0, "Expected effect mosaic of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.brightness, 0, "Expected effect brightness of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.ghost, 0, "Expected effect ghost of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Körper").effects.color, 0, "Expected effect color of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.fisheye, 0, "Expected effect fisheye of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.whirl, 0, "Expected effect whirl of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.pixelate, 0, "Expected effect pixelate of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.mosaic, 0, "Expected effect mosaic of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.brightness, 0, "Expected effect brightness of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.ghost, 0, "Expected effect ghost of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.color, 0, "Expected effect color of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.fisheye, 0, "Expected effect fisheye of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.whirl, 0, "Expected effect whirl of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.pixelate, 0, "Expected effect pixelate of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.mosaic, 0, "Expected effect mosaic of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.brightness, 0, "Expected effect brightness of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.ghost, 0, "Expected effect ghost of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.color, 0, "Expected effect color of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.fisheye, 0, "Expected effect fisheye of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.whirl, 0, "Expected effect whirl of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.pixelate, 0, "Expected effect pixelate of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.mosaic, 0, "Expected effect mosaic of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.brightness, 0, "Expected effect brightness of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.ghost, 0, "Expected effect ghost of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Kopf").layerOrder, 1, "Expected Sprite Kopf to be at layer 1");
  t.assert.equal(t.getSprite("Körper").layerOrder, 2, "Expected Sprite Körper to be at layer 2");
  t.assert.equal(t.getSprite("Punkt").layerOrder, 4, "Expected Sprite Punkt to be at layer 4");
  t.assert.equal(t.getSprite("Goodie").layerOrder, 3, "Expected Sprite Goodie to be at layer 3");
  t.assert.withinRange(t.getSprite("Kopf").x, 5, 5, "Expected Sprite Kopf to have x-position 5 +-5");
  t.assert.withinRange(t.getSprite("Kopf").y, 173, 5, "Expected Sprite Kopf to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Körper").x, 8, 5, "Expected Sprite Körper to have x-position 8 +-5");
  t.assert.withinRange(t.getSprite("Körper").y, 173, 5, "Expected Sprite Körper to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Punkt").x, 0, 5, "Expected Sprite Punkt to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Punkt").y, -100, 5, "Expected Sprite Punkt to have y-position -100 +-5");
  t.assert.withinRange(t.getSprite("Goodie").x, 0, 5, "Expected Sprite Goodie to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Goodie").y, 0, 5, "Expected Sprite Goodie to have y-position 0 +-5");
  t.assert.not(t.getSprite("Kopf").sayText, "Expected Sprite Kopf not to say anything");
  t.assert.not(t.getSprite("Körper").sayText, "Expected Sprite Körper not to say anything");
  t.assert.not(t.getSprite("Punkt").sayText, "Expected Sprite Punkt not to say anything");
  t.assert.not(t.getSprite("Goodie").sayText, "Expected Sprite Goodie not to say anything");
  t.assert.withinRange(t.getSprite("Kopf").size, 100, 1, "Expected Sprite Kopf to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Körper").size, 90, 1, "Expected Sprite Körper to have size 90 +-1");
  t.assert.withinRange(t.getSprite("Punkt").size, 100, 1, "Expected Sprite Punkt to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Goodie").size, 100, 1, "Expected Sprite Goodie to have size 100 +-1");
  t.assert.ok(t.getSprite("Kopf").visible, "Expected Sprite Kopf to be visible");
  t.assert.ok(t.getSprite("Körper").visible, "Expected Sprite Körper to be visible");
  t.assert.ok(t.getSprite("Punkt").visible, "Expected Sprite Punkt to be visible");
  t.assert.not(t.getSprite("Goodie").visible, "Expected Sprite Goodie not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kopf").volume, 100, "Expected Sprite Kopf to have volume 100");
  t.assert.equal(t.getSprite("Körper").volume, 100, "Expected Sprite Körper to have volume 100");
  t.assert.equal(t.getSprite("Punkt").volume, 100, "Expected Sprite Punkt to have volume 100");
  t.assert.equal(t.getSprite("Goodie").volume, 100, "Expected Sprite Goodie to have volume 100");
  t.keyPress('up arrow', 3);
  await t.runForSteps(3);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kopf").currentCostume, 0, "Expected Sprite Kopf to have costume 0");
  t.assert.equal(t.getSprite("Körper").currentCostume, 0, "Expected Sprite Körper to have costume 0");
  t.assert.equal(t.getSprite("Punkt").currentCostume, 0, "Expected Sprite Punkt to have costume 0");
  t.assert.equal(t.getSprite("Goodie").currentCostume, 0, "Expected Sprite Goodie to have costume 0");
  t.assert.equal(t.getSprite("Kopf").getCloneCount(), 0, "Expected Sprite Kopf to have 0 clones");
  t.assert.equal(t.getSprite("Körper").getCloneCount(), 0, "Expected Sprite Körper to have 0 clones");
  t.assert.equal(t.getSprite("Punkt").getCloneCount(), 0, "Expected Sprite Punkt to have 0 clones");
  t.assert.equal(t.getSprite("Goodie").getCloneCount(), 0, "Expected Sprite Goodie to have 0 clones");
  t.assert.equal(t.getSprite("Kopf").direction, 0, 1, "Expected Sprite Kopf to face in direction 0 +-1");
  t.assert.equal(t.getSprite("Körper").direction, 90, 1, "Expected Sprite Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Punkt").direction, 90, 1, "Expected Sprite Punkt to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Goodie").direction, 90, 1, "Expected Sprite Goodie to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kopf").effects.color, 0, "Expected effect color of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.fisheye, 0, "Expected effect fisheye of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.whirl, 0, "Expected effect whirl of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.pixelate, 0, "Expected effect pixelate of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.mosaic, 0, "Expected effect mosaic of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.brightness, 0, "Expected effect brightness of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.ghost, 0, "Expected effect ghost of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Körper").effects.color, 0, "Expected effect color of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.fisheye, 0, "Expected effect fisheye of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.whirl, 0, "Expected effect whirl of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.pixelate, 0, "Expected effect pixelate of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.mosaic, 0, "Expected effect mosaic of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.brightness, 0, "Expected effect brightness of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.ghost, 0, "Expected effect ghost of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.color, 0, "Expected effect color of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.fisheye, 0, "Expected effect fisheye of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.whirl, 0, "Expected effect whirl of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.pixelate, 0, "Expected effect pixelate of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.mosaic, 0, "Expected effect mosaic of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.brightness, 0, "Expected effect brightness of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.ghost, 0, "Expected effect ghost of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.color, 0, "Expected effect color of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.fisheye, 0, "Expected effect fisheye of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.whirl, 0, "Expected effect whirl of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.pixelate, 0, "Expected effect pixelate of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.mosaic, 0, "Expected effect mosaic of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.brightness, 0, "Expected effect brightness of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.ghost, 0, "Expected effect ghost of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Kopf").layerOrder, 1, "Expected Sprite Kopf to be at layer 1");
  t.assert.equal(t.getSprite("Körper").layerOrder, 2, "Expected Sprite Körper to be at layer 2");
  t.assert.equal(t.getSprite("Punkt").layerOrder, 4, "Expected Sprite Punkt to be at layer 4");
  t.assert.equal(t.getSprite("Goodie").layerOrder, 3, "Expected Sprite Goodie to be at layer 3");
  t.assert.withinRange(t.getSprite("Kopf").x, 5, 5, "Expected Sprite Kopf to have x-position 5 +-5");
  t.assert.withinRange(t.getSprite("Kopf").y, 173, 5, "Expected Sprite Kopf to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Körper").x, 8, 5, "Expected Sprite Körper to have x-position 8 +-5");
  t.assert.withinRange(t.getSprite("Körper").y, 173, 5, "Expected Sprite Körper to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Punkt").x, 0, 5, "Expected Sprite Punkt to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Punkt").y, -100, 5, "Expected Sprite Punkt to have y-position -100 +-5");
  t.assert.withinRange(t.getSprite("Goodie").x, 0, 5, "Expected Sprite Goodie to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Goodie").y, 0, 5, "Expected Sprite Goodie to have y-position 0 +-5");
  t.assert.not(t.getSprite("Kopf").sayText, "Expected Sprite Kopf not to say anything");
  t.assert.not(t.getSprite("Körper").sayText, "Expected Sprite Körper not to say anything");
  t.assert.not(t.getSprite("Punkt").sayText, "Expected Sprite Punkt not to say anything");
  t.assert.not(t.getSprite("Goodie").sayText, "Expected Sprite Goodie not to say anything");
  t.assert.withinRange(t.getSprite("Kopf").size, 100, 1, "Expected Sprite Kopf to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Körper").size, 90, 1, "Expected Sprite Körper to have size 90 +-1");
  t.assert.withinRange(t.getSprite("Punkt").size, 100, 1, "Expected Sprite Punkt to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Goodie").size, 100, 1, "Expected Sprite Goodie to have size 100 +-1");
  t.assert.ok(t.getSprite("Kopf").visible, "Expected Sprite Kopf to be visible");
  t.assert.ok(t.getSprite("Körper").visible, "Expected Sprite Körper to be visible");
  t.assert.ok(t.getSprite("Punkt").visible, "Expected Sprite Punkt to be visible");
  t.assert.not(t.getSprite("Goodie").visible, "Expected Sprite Goodie not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kopf").volume, 100, "Expected Sprite Kopf to have volume 100");
  t.assert.equal(t.getSprite("Körper").volume, 100, "Expected Sprite Körper to have volume 100");
  t.assert.equal(t.getSprite("Punkt").volume, 100, "Expected Sprite Punkt to have volume 100");
  t.assert.equal(t.getSprite("Goodie").volume, 100, "Expected Sprite Goodie to have volume 100");
  t.keyPress('up arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kopf").currentCostume, 0, "Expected Sprite Kopf to have costume 0");
  t.assert.equal(t.getSprite("Körper").currentCostume, 0, "Expected Sprite Körper to have costume 0");
  t.assert.equal(t.getSprite("Punkt").currentCostume, 0, "Expected Sprite Punkt to have costume 0");
  t.assert.equal(t.getSprite("Goodie").currentCostume, 0, "Expected Sprite Goodie to have costume 0");
  t.assert.equal(t.getSprite("Kopf").getCloneCount(), 0, "Expected Sprite Kopf to have 0 clones");
  t.assert.equal(t.getSprite("Körper").getCloneCount(), 0, "Expected Sprite Körper to have 0 clones");
  t.assert.equal(t.getSprite("Punkt").getCloneCount(), 0, "Expected Sprite Punkt to have 0 clones");
  t.assert.equal(t.getSprite("Goodie").getCloneCount(), 0, "Expected Sprite Goodie to have 0 clones");
  t.assert.equal(t.getSprite("Kopf").direction, 0, 1, "Expected Sprite Kopf to face in direction 0 +-1");
  t.assert.equal(t.getSprite("Körper").direction, 90, 1, "Expected Sprite Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Punkt").direction, 90, 1, "Expected Sprite Punkt to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Goodie").direction, 90, 1, "Expected Sprite Goodie to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kopf").effects.color, 0, "Expected effect color of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.fisheye, 0, "Expected effect fisheye of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.whirl, 0, "Expected effect whirl of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.pixelate, 0, "Expected effect pixelate of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.mosaic, 0, "Expected effect mosaic of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.brightness, 0, "Expected effect brightness of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.ghost, 0, "Expected effect ghost of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Körper").effects.color, 0, "Expected effect color of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.fisheye, 0, "Expected effect fisheye of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.whirl, 0, "Expected effect whirl of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.pixelate, 0, "Expected effect pixelate of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.mosaic, 0, "Expected effect mosaic of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.brightness, 0, "Expected effect brightness of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.ghost, 0, "Expected effect ghost of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.color, 0, "Expected effect color of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.fisheye, 0, "Expected effect fisheye of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.whirl, 0, "Expected effect whirl of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.pixelate, 0, "Expected effect pixelate of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.mosaic, 0, "Expected effect mosaic of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.brightness, 0, "Expected effect brightness of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.ghost, 0, "Expected effect ghost of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.color, 0, "Expected effect color of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.fisheye, 0, "Expected effect fisheye of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.whirl, 0, "Expected effect whirl of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.pixelate, 0, "Expected effect pixelate of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.mosaic, 0, "Expected effect mosaic of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.brightness, 0, "Expected effect brightness of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.ghost, 0, "Expected effect ghost of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Kopf").layerOrder, 1, "Expected Sprite Kopf to be at layer 1");
  t.assert.equal(t.getSprite("Körper").layerOrder, 2, "Expected Sprite Körper to be at layer 2");
  t.assert.equal(t.getSprite("Punkt").layerOrder, 4, "Expected Sprite Punkt to be at layer 4");
  t.assert.equal(t.getSprite("Goodie").layerOrder, 3, "Expected Sprite Goodie to be at layer 3");
  t.assert.withinRange(t.getSprite("Kopf").x, 5, 5, "Expected Sprite Kopf to have x-position 5 +-5");
  t.assert.withinRange(t.getSprite("Kopf").y, 173, 5, "Expected Sprite Kopf to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Körper").x, 8, 5, "Expected Sprite Körper to have x-position 8 +-5");
  t.assert.withinRange(t.getSprite("Körper").y, 173, 5, "Expected Sprite Körper to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Punkt").x, 0, 5, "Expected Sprite Punkt to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Punkt").y, -100, 5, "Expected Sprite Punkt to have y-position -100 +-5");
  t.assert.withinRange(t.getSprite("Goodie").x, 0, 5, "Expected Sprite Goodie to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Goodie").y, 0, 5, "Expected Sprite Goodie to have y-position 0 +-5");
  t.assert.not(t.getSprite("Kopf").sayText, "Expected Sprite Kopf not to say anything");
  t.assert.not(t.getSprite("Körper").sayText, "Expected Sprite Körper not to say anything");
  t.assert.not(t.getSprite("Punkt").sayText, "Expected Sprite Punkt not to say anything");
  t.assert.not(t.getSprite("Goodie").sayText, "Expected Sprite Goodie not to say anything");
  t.assert.withinRange(t.getSprite("Kopf").size, 100, 1, "Expected Sprite Kopf to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Körper").size, 90, 1, "Expected Sprite Körper to have size 90 +-1");
  t.assert.withinRange(t.getSprite("Punkt").size, 100, 1, "Expected Sprite Punkt to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Goodie").size, 100, 1, "Expected Sprite Goodie to have size 100 +-1");
  t.assert.ok(t.getSprite("Kopf").visible, "Expected Sprite Kopf to be visible");
  t.assert.ok(t.getSprite("Körper").visible, "Expected Sprite Körper to be visible");
  t.assert.ok(t.getSprite("Punkt").visible, "Expected Sprite Punkt to be visible");
  t.assert.not(t.getSprite("Goodie").visible, "Expected Sprite Goodie not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kopf").volume, 100, "Expected Sprite Kopf to have volume 100");
  t.assert.equal(t.getSprite("Körper").volume, 100, "Expected Sprite Körper to have volume 100");
  t.assert.equal(t.getSprite("Punkt").volume, 100, "Expected Sprite Punkt to have volume 100");
  t.assert.equal(t.getSprite("Goodie").volume, 100, "Expected Sprite Goodie to have volume 100");
  t.keyPress('up arrow', 4);
  await t.runForSteps(4);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kopf").currentCostume, 0, "Expected Sprite Kopf to have costume 0");
  t.assert.equal(t.getSprite("Körper").currentCostume, 0, "Expected Sprite Körper to have costume 0");
  t.assert.equal(t.getSprite("Punkt").currentCostume, 0, "Expected Sprite Punkt to have costume 0");
  t.assert.equal(t.getSprite("Goodie").currentCostume, 0, "Expected Sprite Goodie to have costume 0");
  t.assert.equal(t.getSprite("Kopf").getCloneCount(), 0, "Expected Sprite Kopf to have 0 clones");
  t.assert.equal(t.getSprite("Körper").getCloneCount(), 0, "Expected Sprite Körper to have 0 clones");
  t.assert.equal(t.getSprite("Punkt").getCloneCount(), 0, "Expected Sprite Punkt to have 0 clones");
  t.assert.equal(t.getSprite("Goodie").getCloneCount(), 0, "Expected Sprite Goodie to have 0 clones");
  t.assert.equal(t.getSprite("Kopf").direction, 0, 1, "Expected Sprite Kopf to face in direction 0 +-1");
  t.assert.equal(t.getSprite("Körper").direction, 90, 1, "Expected Sprite Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Punkt").direction, 90, 1, "Expected Sprite Punkt to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Goodie").direction, 90, 1, "Expected Sprite Goodie to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kopf").effects.color, 0, "Expected effect color of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.fisheye, 0, "Expected effect fisheye of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.whirl, 0, "Expected effect whirl of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.pixelate, 0, "Expected effect pixelate of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.mosaic, 0, "Expected effect mosaic of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.brightness, 0, "Expected effect brightness of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.ghost, 0, "Expected effect ghost of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Körper").effects.color, 0, "Expected effect color of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.fisheye, 0, "Expected effect fisheye of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.whirl, 0, "Expected effect whirl of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.pixelate, 0, "Expected effect pixelate of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.mosaic, 0, "Expected effect mosaic of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.brightness, 0, "Expected effect brightness of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.ghost, 0, "Expected effect ghost of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.color, 0, "Expected effect color of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.fisheye, 0, "Expected effect fisheye of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.whirl, 0, "Expected effect whirl of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.pixelate, 0, "Expected effect pixelate of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.mosaic, 0, "Expected effect mosaic of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.brightness, 0, "Expected effect brightness of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.ghost, 0, "Expected effect ghost of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.color, 0, "Expected effect color of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.fisheye, 0, "Expected effect fisheye of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.whirl, 0, "Expected effect whirl of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.pixelate, 0, "Expected effect pixelate of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.mosaic, 0, "Expected effect mosaic of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.brightness, 0, "Expected effect brightness of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.ghost, 0, "Expected effect ghost of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Kopf").layerOrder, 1, "Expected Sprite Kopf to be at layer 1");
  t.assert.equal(t.getSprite("Körper").layerOrder, 2, "Expected Sprite Körper to be at layer 2");
  t.assert.equal(t.getSprite("Punkt").layerOrder, 4, "Expected Sprite Punkt to be at layer 4");
  t.assert.equal(t.getSprite("Goodie").layerOrder, 3, "Expected Sprite Goodie to be at layer 3");
  t.assert.withinRange(t.getSprite("Kopf").x, 5, 5, "Expected Sprite Kopf to have x-position 5 +-5");
  t.assert.withinRange(t.getSprite("Kopf").y, 173, 5, "Expected Sprite Kopf to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Körper").x, 8, 5, "Expected Sprite Körper to have x-position 8 +-5");
  t.assert.withinRange(t.getSprite("Körper").y, 173, 5, "Expected Sprite Körper to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Punkt").x, 0, 5, "Expected Sprite Punkt to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Punkt").y, -100, 5, "Expected Sprite Punkt to have y-position -100 +-5");
  t.assert.withinRange(t.getSprite("Goodie").x, 0, 5, "Expected Sprite Goodie to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Goodie").y, 0, 5, "Expected Sprite Goodie to have y-position 0 +-5");
  t.assert.not(t.getSprite("Kopf").sayText, "Expected Sprite Kopf not to say anything");
  t.assert.not(t.getSprite("Körper").sayText, "Expected Sprite Körper not to say anything");
  t.assert.not(t.getSprite("Punkt").sayText, "Expected Sprite Punkt not to say anything");
  t.assert.not(t.getSprite("Goodie").sayText, "Expected Sprite Goodie not to say anything");
  t.assert.withinRange(t.getSprite("Kopf").size, 100, 1, "Expected Sprite Kopf to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Körper").size, 90, 1, "Expected Sprite Körper to have size 90 +-1");
  t.assert.withinRange(t.getSprite("Punkt").size, 100, 1, "Expected Sprite Punkt to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Goodie").size, 100, 1, "Expected Sprite Goodie to have size 100 +-1");
  t.assert.ok(t.getSprite("Kopf").visible, "Expected Sprite Kopf to be visible");
  t.assert.ok(t.getSprite("Körper").visible, "Expected Sprite Körper to be visible");
  t.assert.ok(t.getSprite("Punkt").visible, "Expected Sprite Punkt to be visible");
  t.assert.not(t.getSprite("Goodie").visible, "Expected Sprite Goodie not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kopf").volume, 100, "Expected Sprite Kopf to have volume 100");
  t.assert.equal(t.getSprite("Körper").volume, 100, "Expected Sprite Körper to have volume 100");
  t.assert.equal(t.getSprite("Punkt").volume, 100, "Expected Sprite Punkt to have volume 100");
  t.assert.equal(t.getSprite("Goodie").volume, 100, "Expected Sprite Goodie to have volume 100");
  t.keyPress('left arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kopf").currentCostume, 0, "Expected Sprite Kopf to have costume 0");
  t.assert.equal(t.getSprite("Körper").currentCostume, 0, "Expected Sprite Körper to have costume 0");
  t.assert.equal(t.getSprite("Punkt").currentCostume, 0, "Expected Sprite Punkt to have costume 0");
  t.assert.equal(t.getSprite("Goodie").currentCostume, 0, "Expected Sprite Goodie to have costume 0");
  t.assert.equal(t.getSprite("Kopf").getCloneCount(), 0, "Expected Sprite Kopf to have 0 clones");
  t.assert.equal(t.getSprite("Körper").getCloneCount(), 0, "Expected Sprite Körper to have 0 clones");
  t.assert.equal(t.getSprite("Punkt").getCloneCount(), 0, "Expected Sprite Punkt to have 0 clones");
  t.assert.equal(t.getSprite("Goodie").getCloneCount(), 0, "Expected Sprite Goodie to have 0 clones");
  t.assert.equal(t.getSprite("Kopf").direction, -90, 1, "Expected Sprite Kopf to face in direction -90 +-1");
  t.assert.equal(t.getSprite("Körper").direction, 90, 1, "Expected Sprite Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Punkt").direction, 90, 1, "Expected Sprite Punkt to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Goodie").direction, 90, 1, "Expected Sprite Goodie to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kopf").effects.color, 0, "Expected effect color of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.fisheye, 0, "Expected effect fisheye of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.whirl, 0, "Expected effect whirl of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.pixelate, 0, "Expected effect pixelate of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.mosaic, 0, "Expected effect mosaic of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.brightness, 0, "Expected effect brightness of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.ghost, 0, "Expected effect ghost of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Körper").effects.color, 0, "Expected effect color of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.fisheye, 0, "Expected effect fisheye of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.whirl, 0, "Expected effect whirl of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.pixelate, 0, "Expected effect pixelate of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.mosaic, 0, "Expected effect mosaic of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.brightness, 0, "Expected effect brightness of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.ghost, 0, "Expected effect ghost of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.color, 0, "Expected effect color of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.fisheye, 0, "Expected effect fisheye of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.whirl, 0, "Expected effect whirl of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.pixelate, 0, "Expected effect pixelate of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.mosaic, 0, "Expected effect mosaic of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.brightness, 0, "Expected effect brightness of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.ghost, 0, "Expected effect ghost of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.color, 0, "Expected effect color of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.fisheye, 0, "Expected effect fisheye of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.whirl, 0, "Expected effect whirl of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.pixelate, 0, "Expected effect pixelate of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.mosaic, 0, "Expected effect mosaic of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.brightness, 0, "Expected effect brightness of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.ghost, 0, "Expected effect ghost of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Kopf").layerOrder, 1, "Expected Sprite Kopf to be at layer 1");
  t.assert.equal(t.getSprite("Körper").layerOrder, 2, "Expected Sprite Körper to be at layer 2");
  t.assert.equal(t.getSprite("Punkt").layerOrder, 4, "Expected Sprite Punkt to be at layer 4");
  t.assert.equal(t.getSprite("Goodie").layerOrder, 3, "Expected Sprite Goodie to be at layer 3");
  t.assert.withinRange(t.getSprite("Kopf").x, 5, 5, "Expected Sprite Kopf to have x-position 5 +-5");
  t.assert.withinRange(t.getSprite("Kopf").y, 173, 5, "Expected Sprite Kopf to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Körper").x, 8, 5, "Expected Sprite Körper to have x-position 8 +-5");
  t.assert.withinRange(t.getSprite("Körper").y, 173, 5, "Expected Sprite Körper to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Punkt").x, 0, 5, "Expected Sprite Punkt to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Punkt").y, -100, 5, "Expected Sprite Punkt to have y-position -100 +-5");
  t.assert.withinRange(t.getSprite("Goodie").x, 0, 5, "Expected Sprite Goodie to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Goodie").y, 0, 5, "Expected Sprite Goodie to have y-position 0 +-5");
  t.assert.not(t.getSprite("Kopf").sayText, "Expected Sprite Kopf not to say anything");
  t.assert.not(t.getSprite("Körper").sayText, "Expected Sprite Körper not to say anything");
  t.assert.not(t.getSprite("Punkt").sayText, "Expected Sprite Punkt not to say anything");
  t.assert.not(t.getSprite("Goodie").sayText, "Expected Sprite Goodie not to say anything");
  t.assert.withinRange(t.getSprite("Kopf").size, 100, 1, "Expected Sprite Kopf to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Körper").size, 90, 1, "Expected Sprite Körper to have size 90 +-1");
  t.assert.withinRange(t.getSprite("Punkt").size, 100, 1, "Expected Sprite Punkt to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Goodie").size, 100, 1, "Expected Sprite Goodie to have size 100 +-1");
  t.assert.ok(t.getSprite("Kopf").visible, "Expected Sprite Kopf to be visible");
  t.assert.ok(t.getSprite("Körper").visible, "Expected Sprite Körper to be visible");
  t.assert.ok(t.getSprite("Punkt").visible, "Expected Sprite Punkt to be visible");
  t.assert.not(t.getSprite("Goodie").visible, "Expected Sprite Goodie not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kopf").volume, 100, "Expected Sprite Kopf to have volume 100");
  t.assert.equal(t.getSprite("Körper").volume, 100, "Expected Sprite Körper to have volume 100");
  t.assert.equal(t.getSprite("Punkt").volume, 100, "Expected Sprite Punkt to have volume 100");
  t.assert.equal(t.getSprite("Goodie").volume, 100, "Expected Sprite Goodie to have volume 100");
  t.keyPress('left arrow', 3);
  await t.runForSteps(3);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kopf").currentCostume, 0, "Expected Sprite Kopf to have costume 0");
  t.assert.equal(t.getSprite("Körper").currentCostume, 0, "Expected Sprite Körper to have costume 0");
  t.assert.equal(t.getSprite("Punkt").currentCostume, 0, "Expected Sprite Punkt to have costume 0");
  t.assert.equal(t.getSprite("Goodie").currentCostume, 0, "Expected Sprite Goodie to have costume 0");
  t.assert.equal(t.getSprite("Kopf").getCloneCount(), 0, "Expected Sprite Kopf to have 0 clones");
  t.assert.equal(t.getSprite("Körper").getCloneCount(), 0, "Expected Sprite Körper to have 0 clones");
  t.assert.equal(t.getSprite("Punkt").getCloneCount(), 0, "Expected Sprite Punkt to have 0 clones");
  t.assert.equal(t.getSprite("Goodie").getCloneCount(), 0, "Expected Sprite Goodie to have 0 clones");
  t.assert.equal(t.getSprite("Kopf").direction, -90, 1, "Expected Sprite Kopf to face in direction -90 +-1");
  t.assert.equal(t.getSprite("Körper").direction, 90, 1, "Expected Sprite Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Punkt").direction, 90, 1, "Expected Sprite Punkt to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Goodie").direction, 90, 1, "Expected Sprite Goodie to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kopf").effects.color, 0, "Expected effect color of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.fisheye, 0, "Expected effect fisheye of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.whirl, 0, "Expected effect whirl of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.pixelate, 0, "Expected effect pixelate of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.mosaic, 0, "Expected effect mosaic of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.brightness, 0, "Expected effect brightness of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.ghost, 0, "Expected effect ghost of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Körper").effects.color, 0, "Expected effect color of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.fisheye, 0, "Expected effect fisheye of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.whirl, 0, "Expected effect whirl of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.pixelate, 0, "Expected effect pixelate of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.mosaic, 0, "Expected effect mosaic of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.brightness, 0, "Expected effect brightness of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.ghost, 0, "Expected effect ghost of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.color, 0, "Expected effect color of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.fisheye, 0, "Expected effect fisheye of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.whirl, 0, "Expected effect whirl of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.pixelate, 0, "Expected effect pixelate of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.mosaic, 0, "Expected effect mosaic of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.brightness, 0, "Expected effect brightness of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.ghost, 0, "Expected effect ghost of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.color, 0, "Expected effect color of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.fisheye, 0, "Expected effect fisheye of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.whirl, 0, "Expected effect whirl of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.pixelate, 0, "Expected effect pixelate of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.mosaic, 0, "Expected effect mosaic of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.brightness, 0, "Expected effect brightness of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.ghost, 0, "Expected effect ghost of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Kopf").layerOrder, 1, "Expected Sprite Kopf to be at layer 1");
  t.assert.equal(t.getSprite("Körper").layerOrder, 2, "Expected Sprite Körper to be at layer 2");
  t.assert.equal(t.getSprite("Punkt").layerOrder, 4, "Expected Sprite Punkt to be at layer 4");
  t.assert.equal(t.getSprite("Goodie").layerOrder, 3, "Expected Sprite Goodie to be at layer 3");
  t.assert.withinRange(t.getSprite("Kopf").x, 5, 5, "Expected Sprite Kopf to have x-position 5 +-5");
  t.assert.withinRange(t.getSprite("Kopf").y, 173, 5, "Expected Sprite Kopf to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Körper").x, 8, 5, "Expected Sprite Körper to have x-position 8 +-5");
  t.assert.withinRange(t.getSprite("Körper").y, 173, 5, "Expected Sprite Körper to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Punkt").x, 0, 5, "Expected Sprite Punkt to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Punkt").y, -100, 5, "Expected Sprite Punkt to have y-position -100 +-5");
  t.assert.withinRange(t.getSprite("Goodie").x, 0, 5, "Expected Sprite Goodie to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Goodie").y, 0, 5, "Expected Sprite Goodie to have y-position 0 +-5");
  t.assert.not(t.getSprite("Kopf").sayText, "Expected Sprite Kopf not to say anything");
  t.assert.not(t.getSprite("Körper").sayText, "Expected Sprite Körper not to say anything");
  t.assert.not(t.getSprite("Punkt").sayText, "Expected Sprite Punkt not to say anything");
  t.assert.not(t.getSprite("Goodie").sayText, "Expected Sprite Goodie not to say anything");
  t.assert.withinRange(t.getSprite("Kopf").size, 100, 1, "Expected Sprite Kopf to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Körper").size, 90, 1, "Expected Sprite Körper to have size 90 +-1");
  t.assert.withinRange(t.getSprite("Punkt").size, 100, 1, "Expected Sprite Punkt to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Goodie").size, 100, 1, "Expected Sprite Goodie to have size 100 +-1");
  t.assert.ok(t.getSprite("Kopf").visible, "Expected Sprite Kopf to be visible");
  t.assert.ok(t.getSprite("Körper").visible, "Expected Sprite Körper to be visible");
  t.assert.ok(t.getSprite("Punkt").visible, "Expected Sprite Punkt to be visible");
  t.assert.not(t.getSprite("Goodie").visible, "Expected Sprite Goodie not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kopf").volume, 100, "Expected Sprite Kopf to have volume 100");
  t.assert.equal(t.getSprite("Körper").volume, 100, "Expected Sprite Körper to have volume 100");
  t.assert.equal(t.getSprite("Punkt").volume, 100, "Expected Sprite Punkt to have volume 100");
  t.assert.equal(t.getSprite("Goodie").volume, 100, "Expected Sprite Goodie to have volume 100");
  t.keyPress('up arrow', 3);
  await t.runForSteps(3);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kopf").currentCostume, 0, "Expected Sprite Kopf to have costume 0");
  t.assert.equal(t.getSprite("Körper").currentCostume, 0, "Expected Sprite Körper to have costume 0");
  t.assert.equal(t.getSprite("Punkt").currentCostume, 0, "Expected Sprite Punkt to have costume 0");
  t.assert.equal(t.getSprite("Goodie").currentCostume, 0, "Expected Sprite Goodie to have costume 0");
  t.assert.equal(t.getSprite("Kopf").getCloneCount(), 0, "Expected Sprite Kopf to have 0 clones");
  t.assert.equal(t.getSprite("Körper").getCloneCount(), 0, "Expected Sprite Körper to have 0 clones");
  t.assert.equal(t.getSprite("Punkt").getCloneCount(), 0, "Expected Sprite Punkt to have 0 clones");
  t.assert.equal(t.getSprite("Goodie").getCloneCount(), 0, "Expected Sprite Goodie to have 0 clones");
  t.assert.equal(t.getSprite("Kopf").direction, 0, 1, "Expected Sprite Kopf to face in direction 0 +-1");
  t.assert.equal(t.getSprite("Körper").direction, 90, 1, "Expected Sprite Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Punkt").direction, 90, 1, "Expected Sprite Punkt to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Goodie").direction, 90, 1, "Expected Sprite Goodie to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kopf").effects.color, 0, "Expected effect color of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.fisheye, 0, "Expected effect fisheye of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.whirl, 0, "Expected effect whirl of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.pixelate, 0, "Expected effect pixelate of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.mosaic, 0, "Expected effect mosaic of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.brightness, 0, "Expected effect brightness of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.ghost, 0, "Expected effect ghost of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Körper").effects.color, 0, "Expected effect color of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.fisheye, 0, "Expected effect fisheye of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.whirl, 0, "Expected effect whirl of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.pixelate, 0, "Expected effect pixelate of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.mosaic, 0, "Expected effect mosaic of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.brightness, 0, "Expected effect brightness of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.ghost, 0, "Expected effect ghost of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.color, 0, "Expected effect color of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.fisheye, 0, "Expected effect fisheye of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.whirl, 0, "Expected effect whirl of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.pixelate, 0, "Expected effect pixelate of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.mosaic, 0, "Expected effect mosaic of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.brightness, 0, "Expected effect brightness of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.ghost, 0, "Expected effect ghost of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.color, 0, "Expected effect color of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.fisheye, 0, "Expected effect fisheye of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.whirl, 0, "Expected effect whirl of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.pixelate, 0, "Expected effect pixelate of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.mosaic, 0, "Expected effect mosaic of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.brightness, 0, "Expected effect brightness of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.ghost, 0, "Expected effect ghost of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Kopf").layerOrder, 1, "Expected Sprite Kopf to be at layer 1");
  t.assert.equal(t.getSprite("Körper").layerOrder, 2, "Expected Sprite Körper to be at layer 2");
  t.assert.equal(t.getSprite("Punkt").layerOrder, 4, "Expected Sprite Punkt to be at layer 4");
  t.assert.equal(t.getSprite("Goodie").layerOrder, 3, "Expected Sprite Goodie to be at layer 3");
  t.assert.withinRange(t.getSprite("Kopf").x, 5, 5, "Expected Sprite Kopf to have x-position 5 +-5");
  t.assert.withinRange(t.getSprite("Kopf").y, 173, 5, "Expected Sprite Kopf to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Körper").x, 8, 5, "Expected Sprite Körper to have x-position 8 +-5");
  t.assert.withinRange(t.getSprite("Körper").y, 173, 5, "Expected Sprite Körper to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Punkt").x, 0, 5, "Expected Sprite Punkt to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Punkt").y, -100, 5, "Expected Sprite Punkt to have y-position -100 +-5");
  t.assert.withinRange(t.getSprite("Goodie").x, 0, 5, "Expected Sprite Goodie to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Goodie").y, 0, 5, "Expected Sprite Goodie to have y-position 0 +-5");
  t.assert.not(t.getSprite("Kopf").sayText, "Expected Sprite Kopf not to say anything");
  t.assert.not(t.getSprite("Körper").sayText, "Expected Sprite Körper not to say anything");
  t.assert.not(t.getSprite("Punkt").sayText, "Expected Sprite Punkt not to say anything");
  t.assert.not(t.getSprite("Goodie").sayText, "Expected Sprite Goodie not to say anything");
  t.assert.withinRange(t.getSprite("Kopf").size, 100, 1, "Expected Sprite Kopf to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Körper").size, 90, 1, "Expected Sprite Körper to have size 90 +-1");
  t.assert.withinRange(t.getSprite("Punkt").size, 100, 1, "Expected Sprite Punkt to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Goodie").size, 100, 1, "Expected Sprite Goodie to have size 100 +-1");
  t.assert.ok(t.getSprite("Kopf").visible, "Expected Sprite Kopf to be visible");
  t.assert.ok(t.getSprite("Körper").visible, "Expected Sprite Körper to be visible");
  t.assert.ok(t.getSprite("Punkt").visible, "Expected Sprite Punkt to be visible");
  t.assert.not(t.getSprite("Goodie").visible, "Expected Sprite Goodie not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kopf").volume, 100, "Expected Sprite Kopf to have volume 100");
  t.assert.equal(t.getSprite("Körper").volume, 100, "Expected Sprite Körper to have volume 100");
  t.assert.equal(t.getSprite("Punkt").volume, 100, "Expected Sprite Punkt to have volume 100");
  t.assert.equal(t.getSprite("Goodie").volume, 100, "Expected Sprite Goodie to have volume 100");
  t.keyPress('up arrow', 4);
  await t.runForSteps(4);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kopf").currentCostume, 0, "Expected Sprite Kopf to have costume 0");
  t.assert.equal(t.getSprite("Körper").currentCostume, 0, "Expected Sprite Körper to have costume 0");
  t.assert.equal(t.getSprite("Punkt").currentCostume, 0, "Expected Sprite Punkt to have costume 0");
  t.assert.equal(t.getSprite("Goodie").currentCostume, 0, "Expected Sprite Goodie to have costume 0");
  t.assert.equal(t.getSprite("Kopf").getCloneCount(), 0, "Expected Sprite Kopf to have 0 clones");
  t.assert.equal(t.getSprite("Körper").getCloneCount(), 0, "Expected Sprite Körper to have 0 clones");
  t.assert.equal(t.getSprite("Punkt").getCloneCount(), 0, "Expected Sprite Punkt to have 0 clones");
  t.assert.equal(t.getSprite("Goodie").getCloneCount(), 0, "Expected Sprite Goodie to have 0 clones");
  t.assert.equal(t.getSprite("Kopf").direction, 0, 1, "Expected Sprite Kopf to face in direction 0 +-1");
  t.assert.equal(t.getSprite("Körper").direction, 90, 1, "Expected Sprite Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Punkt").direction, 90, 1, "Expected Sprite Punkt to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Goodie").direction, 90, 1, "Expected Sprite Goodie to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kopf").effects.color, 0, "Expected effect color of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.fisheye, 0, "Expected effect fisheye of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.whirl, 0, "Expected effect whirl of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.pixelate, 0, "Expected effect pixelate of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.mosaic, 0, "Expected effect mosaic of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.brightness, 0, "Expected effect brightness of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.ghost, 0, "Expected effect ghost of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Körper").effects.color, 0, "Expected effect color of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.fisheye, 0, "Expected effect fisheye of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.whirl, 0, "Expected effect whirl of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.pixelate, 0, "Expected effect pixelate of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.mosaic, 0, "Expected effect mosaic of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.brightness, 0, "Expected effect brightness of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.ghost, 0, "Expected effect ghost of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.color, 0, "Expected effect color of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.fisheye, 0, "Expected effect fisheye of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.whirl, 0, "Expected effect whirl of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.pixelate, 0, "Expected effect pixelate of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.mosaic, 0, "Expected effect mosaic of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.brightness, 0, "Expected effect brightness of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.ghost, 0, "Expected effect ghost of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.color, 0, "Expected effect color of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.fisheye, 0, "Expected effect fisheye of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.whirl, 0, "Expected effect whirl of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.pixelate, 0, "Expected effect pixelate of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.mosaic, 0, "Expected effect mosaic of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.brightness, 0, "Expected effect brightness of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.ghost, 0, "Expected effect ghost of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Kopf").layerOrder, 1, "Expected Sprite Kopf to be at layer 1");
  t.assert.equal(t.getSprite("Körper").layerOrder, 2, "Expected Sprite Körper to be at layer 2");
  t.assert.equal(t.getSprite("Punkt").layerOrder, 4, "Expected Sprite Punkt to be at layer 4");
  t.assert.equal(t.getSprite("Goodie").layerOrder, 3, "Expected Sprite Goodie to be at layer 3");
  t.assert.withinRange(t.getSprite("Kopf").x, 5, 5, "Expected Sprite Kopf to have x-position 5 +-5");
  t.assert.withinRange(t.getSprite("Kopf").y, 173, 5, "Expected Sprite Kopf to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Körper").x, 8, 5, "Expected Sprite Körper to have x-position 8 +-5");
  t.assert.withinRange(t.getSprite("Körper").y, 173, 5, "Expected Sprite Körper to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Punkt").x, 0, 5, "Expected Sprite Punkt to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Punkt").y, -100, 5, "Expected Sprite Punkt to have y-position -100 +-5");
  t.assert.withinRange(t.getSprite("Goodie").x, 0, 5, "Expected Sprite Goodie to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Goodie").y, 0, 5, "Expected Sprite Goodie to have y-position 0 +-5");
  t.assert.not(t.getSprite("Kopf").sayText, "Expected Sprite Kopf not to say anything");
  t.assert.not(t.getSprite("Körper").sayText, "Expected Sprite Körper not to say anything");
  t.assert.not(t.getSprite("Punkt").sayText, "Expected Sprite Punkt not to say anything");
  t.assert.not(t.getSprite("Goodie").sayText, "Expected Sprite Goodie not to say anything");
  t.assert.withinRange(t.getSprite("Kopf").size, 100, 1, "Expected Sprite Kopf to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Körper").size, 90, 1, "Expected Sprite Körper to have size 90 +-1");
  t.assert.withinRange(t.getSprite("Punkt").size, 100, 1, "Expected Sprite Punkt to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Goodie").size, 100, 1, "Expected Sprite Goodie to have size 100 +-1");
  t.assert.ok(t.getSprite("Kopf").visible, "Expected Sprite Kopf to be visible");
  t.assert.ok(t.getSprite("Körper").visible, "Expected Sprite Körper to be visible");
  t.assert.ok(t.getSprite("Punkt").visible, "Expected Sprite Punkt to be visible");
  t.assert.not(t.getSprite("Goodie").visible, "Expected Sprite Goodie not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kopf").volume, 100, "Expected Sprite Kopf to have volume 100");
  t.assert.equal(t.getSprite("Körper").volume, 100, "Expected Sprite Körper to have volume 100");
  t.assert.equal(t.getSprite("Punkt").volume, 100, "Expected Sprite Punkt to have volume 100");
  t.assert.equal(t.getSprite("Goodie").volume, 100, "Expected Sprite Goodie to have volume 100");
  t.keyPress('left arrow', 4);
  await t.runForSteps(4);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kopf").currentCostume, 0, "Expected Sprite Kopf to have costume 0");
  t.assert.equal(t.getSprite("Körper").currentCostume, 0, "Expected Sprite Körper to have costume 0");
  t.assert.equal(t.getSprite("Punkt").currentCostume, 0, "Expected Sprite Punkt to have costume 0");
  t.assert.equal(t.getSprite("Goodie").currentCostume, 0, "Expected Sprite Goodie to have costume 0");
  t.assert.equal(t.getSprite("Kopf").getCloneCount(), 0, "Expected Sprite Kopf to have 0 clones");
  t.assert.equal(t.getSprite("Körper").getCloneCount(), 0, "Expected Sprite Körper to have 0 clones");
  t.assert.equal(t.getSprite("Punkt").getCloneCount(), 0, "Expected Sprite Punkt to have 0 clones");
  t.assert.equal(t.getSprite("Goodie").getCloneCount(), 0, "Expected Sprite Goodie to have 0 clones");
  t.assert.equal(t.getSprite("Kopf").direction, -90, 1, "Expected Sprite Kopf to face in direction -90 +-1");
  t.assert.equal(t.getSprite("Körper").direction, 90, 1, "Expected Sprite Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Punkt").direction, 90, 1, "Expected Sprite Punkt to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Goodie").direction, 90, 1, "Expected Sprite Goodie to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kopf").effects.color, 0, "Expected effect color of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.fisheye, 0, "Expected effect fisheye of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.whirl, 0, "Expected effect whirl of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.pixelate, 0, "Expected effect pixelate of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.mosaic, 0, "Expected effect mosaic of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.brightness, 0, "Expected effect brightness of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.ghost, 0, "Expected effect ghost of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Körper").effects.color, 0, "Expected effect color of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.fisheye, 0, "Expected effect fisheye of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.whirl, 0, "Expected effect whirl of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.pixelate, 0, "Expected effect pixelate of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.mosaic, 0, "Expected effect mosaic of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.brightness, 0, "Expected effect brightness of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.ghost, 0, "Expected effect ghost of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.color, 0, "Expected effect color of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.fisheye, 0, "Expected effect fisheye of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.whirl, 0, "Expected effect whirl of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.pixelate, 0, "Expected effect pixelate of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.mosaic, 0, "Expected effect mosaic of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.brightness, 0, "Expected effect brightness of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.ghost, 0, "Expected effect ghost of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.color, 0, "Expected effect color of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.fisheye, 0, "Expected effect fisheye of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.whirl, 0, "Expected effect whirl of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.pixelate, 0, "Expected effect pixelate of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.mosaic, 0, "Expected effect mosaic of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.brightness, 0, "Expected effect brightness of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.ghost, 0, "Expected effect ghost of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Kopf").layerOrder, 1, "Expected Sprite Kopf to be at layer 1");
  t.assert.equal(t.getSprite("Körper").layerOrder, 2, "Expected Sprite Körper to be at layer 2");
  t.assert.equal(t.getSprite("Punkt").layerOrder, 4, "Expected Sprite Punkt to be at layer 4");
  t.assert.equal(t.getSprite("Goodie").layerOrder, 3, "Expected Sprite Goodie to be at layer 3");
  t.assert.withinRange(t.getSprite("Kopf").x, 5, 5, "Expected Sprite Kopf to have x-position 5 +-5");
  t.assert.withinRange(t.getSprite("Kopf").y, 173, 5, "Expected Sprite Kopf to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Körper").x, 8, 5, "Expected Sprite Körper to have x-position 8 +-5");
  t.assert.withinRange(t.getSprite("Körper").y, 173, 5, "Expected Sprite Körper to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Punkt").x, 0, 5, "Expected Sprite Punkt to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Punkt").y, -100, 5, "Expected Sprite Punkt to have y-position -100 +-5");
  t.assert.withinRange(t.getSprite("Goodie").x, 0, 5, "Expected Sprite Goodie to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Goodie").y, 0, 5, "Expected Sprite Goodie to have y-position 0 +-5");
  t.assert.not(t.getSprite("Kopf").sayText, "Expected Sprite Kopf not to say anything");
  t.assert.not(t.getSprite("Körper").sayText, "Expected Sprite Körper not to say anything");
  t.assert.not(t.getSprite("Punkt").sayText, "Expected Sprite Punkt not to say anything");
  t.assert.not(t.getSprite("Goodie").sayText, "Expected Sprite Goodie not to say anything");
  t.assert.withinRange(t.getSprite("Kopf").size, 100, 1, "Expected Sprite Kopf to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Körper").size, 90, 1, "Expected Sprite Körper to have size 90 +-1");
  t.assert.withinRange(t.getSprite("Punkt").size, 100, 1, "Expected Sprite Punkt to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Goodie").size, 100, 1, "Expected Sprite Goodie to have size 100 +-1");
  t.assert.ok(t.getSprite("Kopf").visible, "Expected Sprite Kopf to be visible");
  t.assert.ok(t.getSprite("Körper").visible, "Expected Sprite Körper to be visible");
  t.assert.ok(t.getSprite("Punkt").visible, "Expected Sprite Punkt to be visible");
  t.assert.not(t.getSprite("Goodie").visible, "Expected Sprite Goodie not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kopf").volume, 100, "Expected Sprite Kopf to have volume 100");
  t.assert.equal(t.getSprite("Körper").volume, 100, "Expected Sprite Körper to have volume 100");
  t.assert.equal(t.getSprite("Punkt").volume, 100, "Expected Sprite Punkt to have volume 100");
  t.assert.equal(t.getSprite("Goodie").volume, 100, "Expected Sprite Goodie to have volume 100");
  t.keyPress('right arrow', 4);
  await t.runForSteps(4);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kopf").currentCostume, 0, "Expected Sprite Kopf to have costume 0");
  t.assert.equal(t.getSprite("Körper").currentCostume, 0, "Expected Sprite Körper to have costume 0");
  t.assert.equal(t.getSprite("Punkt").currentCostume, 0, "Expected Sprite Punkt to have costume 0");
  t.assert.equal(t.getSprite("Goodie").currentCostume, 0, "Expected Sprite Goodie to have costume 0");
  t.assert.equal(t.getSprite("Kopf").getCloneCount(), 0, "Expected Sprite Kopf to have 0 clones");
  t.assert.equal(t.getSprite("Körper").getCloneCount(), 0, "Expected Sprite Körper to have 0 clones");
  t.assert.equal(t.getSprite("Punkt").getCloneCount(), 0, "Expected Sprite Punkt to have 0 clones");
  t.assert.equal(t.getSprite("Goodie").getCloneCount(), 0, "Expected Sprite Goodie to have 0 clones");
  t.assert.equal(t.getSprite("Kopf").direction, 90, 1, "Expected Sprite Kopf to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Körper").direction, 90, 1, "Expected Sprite Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Punkt").direction, 90, 1, "Expected Sprite Punkt to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Goodie").direction, 90, 1, "Expected Sprite Goodie to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kopf").effects.color, 0, "Expected effect color of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.fisheye, 0, "Expected effect fisheye of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.whirl, 0, "Expected effect whirl of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.pixelate, 0, "Expected effect pixelate of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.mosaic, 0, "Expected effect mosaic of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.brightness, 0, "Expected effect brightness of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.ghost, 0, "Expected effect ghost of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Körper").effects.color, 0, "Expected effect color of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.fisheye, 0, "Expected effect fisheye of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.whirl, 0, "Expected effect whirl of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.pixelate, 0, "Expected effect pixelate of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.mosaic, 0, "Expected effect mosaic of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.brightness, 0, "Expected effect brightness of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.ghost, 0, "Expected effect ghost of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.color, 0, "Expected effect color of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.fisheye, 0, "Expected effect fisheye of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.whirl, 0, "Expected effect whirl of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.pixelate, 0, "Expected effect pixelate of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.mosaic, 0, "Expected effect mosaic of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.brightness, 0, "Expected effect brightness of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.ghost, 0, "Expected effect ghost of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.color, 0, "Expected effect color of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.fisheye, 0, "Expected effect fisheye of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.whirl, 0, "Expected effect whirl of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.pixelate, 0, "Expected effect pixelate of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.mosaic, 0, "Expected effect mosaic of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.brightness, 0, "Expected effect brightness of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.ghost, 0, "Expected effect ghost of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Kopf").layerOrder, 1, "Expected Sprite Kopf to be at layer 1");
  t.assert.equal(t.getSprite("Körper").layerOrder, 2, "Expected Sprite Körper to be at layer 2");
  t.assert.equal(t.getSprite("Punkt").layerOrder, 4, "Expected Sprite Punkt to be at layer 4");
  t.assert.equal(t.getSprite("Goodie").layerOrder, 3, "Expected Sprite Goodie to be at layer 3");
  t.assert.withinRange(t.getSprite("Kopf").x, 5, 5, "Expected Sprite Kopf to have x-position 5 +-5");
  t.assert.withinRange(t.getSprite("Kopf").y, 173, 5, "Expected Sprite Kopf to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Körper").x, 8, 5, "Expected Sprite Körper to have x-position 8 +-5");
  t.assert.withinRange(t.getSprite("Körper").y, 173, 5, "Expected Sprite Körper to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Punkt").x, 0, 5, "Expected Sprite Punkt to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Punkt").y, -100, 5, "Expected Sprite Punkt to have y-position -100 +-5");
  t.assert.withinRange(t.getSprite("Goodie").x, 0, 5, "Expected Sprite Goodie to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Goodie").y, 0, 5, "Expected Sprite Goodie to have y-position 0 +-5");
  t.assert.not(t.getSprite("Kopf").sayText, "Expected Sprite Kopf not to say anything");
  t.assert.not(t.getSprite("Körper").sayText, "Expected Sprite Körper not to say anything");
  t.assert.not(t.getSprite("Punkt").sayText, "Expected Sprite Punkt not to say anything");
  t.assert.not(t.getSprite("Goodie").sayText, "Expected Sprite Goodie not to say anything");
  t.assert.withinRange(t.getSprite("Kopf").size, 100, 1, "Expected Sprite Kopf to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Körper").size, 90, 1, "Expected Sprite Körper to have size 90 +-1");
  t.assert.withinRange(t.getSprite("Punkt").size, 100, 1, "Expected Sprite Punkt to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Goodie").size, 100, 1, "Expected Sprite Goodie to have size 100 +-1");
  t.assert.ok(t.getSprite("Kopf").visible, "Expected Sprite Kopf to be visible");
  t.assert.ok(t.getSprite("Körper").visible, "Expected Sprite Körper to be visible");
  t.assert.ok(t.getSprite("Punkt").visible, "Expected Sprite Punkt to be visible");
  t.assert.not(t.getSprite("Goodie").visible, "Expected Sprite Goodie not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kopf").volume, 100, "Expected Sprite Kopf to have volume 100");
  t.assert.equal(t.getSprite("Körper").volume, 100, "Expected Sprite Körper to have volume 100");
  t.assert.equal(t.getSprite("Punkt").volume, 100, "Expected Sprite Punkt to have volume 100");
  t.assert.equal(t.getSprite("Goodie").volume, 100, "Expected Sprite Goodie to have volume 100");
  t.keyPress('up arrow', 2);
  await t.runForSteps(2);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kopf").currentCostume, 0, "Expected Sprite Kopf to have costume 0");
  t.assert.equal(t.getSprite("Körper").currentCostume, 0, "Expected Sprite Körper to have costume 0");
  t.assert.equal(t.getSprite("Punkt").currentCostume, 0, "Expected Sprite Punkt to have costume 0");
  t.assert.equal(t.getSprite("Goodie").currentCostume, 0, "Expected Sprite Goodie to have costume 0");
  t.assert.equal(t.getSprite("Kopf").getCloneCount(), 0, "Expected Sprite Kopf to have 0 clones");
  t.assert.equal(t.getSprite("Körper").getCloneCount(), 0, "Expected Sprite Körper to have 0 clones");
  t.assert.equal(t.getSprite("Punkt").getCloneCount(), 0, "Expected Sprite Punkt to have 0 clones");
  t.assert.equal(t.getSprite("Goodie").getCloneCount(), 0, "Expected Sprite Goodie to have 0 clones");
  t.assert.equal(t.getSprite("Kopf").direction, 0, 1, "Expected Sprite Kopf to face in direction 0 +-1");
  t.assert.equal(t.getSprite("Körper").direction, 90, 1, "Expected Sprite Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Punkt").direction, 90, 1, "Expected Sprite Punkt to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Goodie").direction, 90, 1, "Expected Sprite Goodie to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kopf").effects.color, 0, "Expected effect color of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.fisheye, 0, "Expected effect fisheye of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.whirl, 0, "Expected effect whirl of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.pixelate, 0, "Expected effect pixelate of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.mosaic, 0, "Expected effect mosaic of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.brightness, 0, "Expected effect brightness of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.ghost, 0, "Expected effect ghost of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Körper").effects.color, 0, "Expected effect color of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.fisheye, 0, "Expected effect fisheye of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.whirl, 0, "Expected effect whirl of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.pixelate, 0, "Expected effect pixelate of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.mosaic, 0, "Expected effect mosaic of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.brightness, 0, "Expected effect brightness of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.ghost, 0, "Expected effect ghost of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.color, 0, "Expected effect color of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.fisheye, 0, "Expected effect fisheye of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.whirl, 0, "Expected effect whirl of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.pixelate, 0, "Expected effect pixelate of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.mosaic, 0, "Expected effect mosaic of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.brightness, 0, "Expected effect brightness of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.ghost, 0, "Expected effect ghost of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.color, 0, "Expected effect color of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.fisheye, 0, "Expected effect fisheye of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.whirl, 0, "Expected effect whirl of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.pixelate, 0, "Expected effect pixelate of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.mosaic, 0, "Expected effect mosaic of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.brightness, 0, "Expected effect brightness of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.ghost, 0, "Expected effect ghost of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Kopf").layerOrder, 1, "Expected Sprite Kopf to be at layer 1");
  t.assert.equal(t.getSprite("Körper").layerOrder, 2, "Expected Sprite Körper to be at layer 2");
  t.assert.equal(t.getSprite("Punkt").layerOrder, 4, "Expected Sprite Punkt to be at layer 4");
  t.assert.equal(t.getSprite("Goodie").layerOrder, 3, "Expected Sprite Goodie to be at layer 3");
  t.assert.withinRange(t.getSprite("Kopf").x, 5, 5, "Expected Sprite Kopf to have x-position 5 +-5");
  t.assert.withinRange(t.getSprite("Kopf").y, 173, 5, "Expected Sprite Kopf to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Körper").x, 8, 5, "Expected Sprite Körper to have x-position 8 +-5");
  t.assert.withinRange(t.getSprite("Körper").y, 173, 5, "Expected Sprite Körper to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Punkt").x, 0, 5, "Expected Sprite Punkt to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Punkt").y, -100, 5, "Expected Sprite Punkt to have y-position -100 +-5");
  t.assert.withinRange(t.getSprite("Goodie").x, 0, 5, "Expected Sprite Goodie to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Goodie").y, 0, 5, "Expected Sprite Goodie to have y-position 0 +-5");
  t.assert.not(t.getSprite("Kopf").sayText, "Expected Sprite Kopf not to say anything");
  t.assert.not(t.getSprite("Körper").sayText, "Expected Sprite Körper not to say anything");
  t.assert.not(t.getSprite("Punkt").sayText, "Expected Sprite Punkt not to say anything");
  t.assert.not(t.getSprite("Goodie").sayText, "Expected Sprite Goodie not to say anything");
  t.assert.withinRange(t.getSprite("Kopf").size, 100, 1, "Expected Sprite Kopf to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Körper").size, 90, 1, "Expected Sprite Körper to have size 90 +-1");
  t.assert.withinRange(t.getSprite("Punkt").size, 100, 1, "Expected Sprite Punkt to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Goodie").size, 100, 1, "Expected Sprite Goodie to have size 100 +-1");
  t.assert.ok(t.getSprite("Kopf").visible, "Expected Sprite Kopf to be visible");
  t.assert.ok(t.getSprite("Körper").visible, "Expected Sprite Körper to be visible");
  t.assert.ok(t.getSprite("Punkt").visible, "Expected Sprite Punkt to be visible");
  t.assert.not(t.getSprite("Goodie").visible, "Expected Sprite Goodie not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kopf").volume, 100, "Expected Sprite Kopf to have volume 100");
  t.assert.equal(t.getSprite("Körper").volume, 100, "Expected Sprite Körper to have volume 100");
  t.assert.equal(t.getSprite("Punkt").volume, 100, "Expected Sprite Punkt to have volume 100");
  t.assert.equal(t.getSprite("Goodie").volume, 100, "Expected Sprite Goodie to have volume 100");
  t.keyPress('up arrow', 4);
  await t.runForSteps(4);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kopf").currentCostume, 0, "Expected Sprite Kopf to have costume 0");
  t.assert.equal(t.getSprite("Körper").currentCostume, 0, "Expected Sprite Körper to have costume 0");
  t.assert.equal(t.getSprite("Punkt").currentCostume, 0, "Expected Sprite Punkt to have costume 0");
  t.assert.equal(t.getSprite("Goodie").currentCostume, 0, "Expected Sprite Goodie to have costume 0");
  t.assert.equal(t.getSprite("Kopf").getCloneCount(), 0, "Expected Sprite Kopf to have 0 clones");
  t.assert.equal(t.getSprite("Körper").getCloneCount(), 0, "Expected Sprite Körper to have 0 clones");
  t.assert.equal(t.getSprite("Punkt").getCloneCount(), 0, "Expected Sprite Punkt to have 0 clones");
  t.assert.equal(t.getSprite("Goodie").getCloneCount(), 0, "Expected Sprite Goodie to have 0 clones");
  t.assert.equal(t.getSprite("Kopf").direction, 0, 1, "Expected Sprite Kopf to face in direction 0 +-1");
  t.assert.equal(t.getSprite("Körper").direction, 90, 1, "Expected Sprite Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Punkt").direction, 90, 1, "Expected Sprite Punkt to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Goodie").direction, 90, 1, "Expected Sprite Goodie to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kopf").effects.color, 0, "Expected effect color of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.fisheye, 0, "Expected effect fisheye of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.whirl, 0, "Expected effect whirl of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.pixelate, 0, "Expected effect pixelate of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.mosaic, 0, "Expected effect mosaic of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.brightness, 0, "Expected effect brightness of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.ghost, 0, "Expected effect ghost of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Körper").effects.color, 0, "Expected effect color of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.fisheye, 0, "Expected effect fisheye of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.whirl, 0, "Expected effect whirl of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.pixelate, 0, "Expected effect pixelate of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.mosaic, 0, "Expected effect mosaic of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.brightness, 0, "Expected effect brightness of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.ghost, 0, "Expected effect ghost of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.color, 0, "Expected effect color of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.fisheye, 0, "Expected effect fisheye of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.whirl, 0, "Expected effect whirl of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.pixelate, 0, "Expected effect pixelate of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.mosaic, 0, "Expected effect mosaic of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.brightness, 0, "Expected effect brightness of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.ghost, 0, "Expected effect ghost of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.color, 0, "Expected effect color of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.fisheye, 0, "Expected effect fisheye of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.whirl, 0, "Expected effect whirl of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.pixelate, 0, "Expected effect pixelate of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.mosaic, 0, "Expected effect mosaic of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.brightness, 0, "Expected effect brightness of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.ghost, 0, "Expected effect ghost of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Kopf").layerOrder, 1, "Expected Sprite Kopf to be at layer 1");
  t.assert.equal(t.getSprite("Körper").layerOrder, 2, "Expected Sprite Körper to be at layer 2");
  t.assert.equal(t.getSprite("Punkt").layerOrder, 4, "Expected Sprite Punkt to be at layer 4");
  t.assert.equal(t.getSprite("Goodie").layerOrder, 3, "Expected Sprite Goodie to be at layer 3");
  t.assert.withinRange(t.getSprite("Kopf").x, 5, 5, "Expected Sprite Kopf to have x-position 5 +-5");
  t.assert.withinRange(t.getSprite("Kopf").y, 173, 5, "Expected Sprite Kopf to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Körper").x, 8, 5, "Expected Sprite Körper to have x-position 8 +-5");
  t.assert.withinRange(t.getSprite("Körper").y, 173, 5, "Expected Sprite Körper to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Punkt").x, 0, 5, "Expected Sprite Punkt to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Punkt").y, -100, 5, "Expected Sprite Punkt to have y-position -100 +-5");
  t.assert.withinRange(t.getSprite("Goodie").x, 0, 5, "Expected Sprite Goodie to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Goodie").y, 0, 5, "Expected Sprite Goodie to have y-position 0 +-5");
  t.assert.not(t.getSprite("Kopf").sayText, "Expected Sprite Kopf not to say anything");
  t.assert.not(t.getSprite("Körper").sayText, "Expected Sprite Körper not to say anything");
  t.assert.not(t.getSprite("Punkt").sayText, "Expected Sprite Punkt not to say anything");
  t.assert.not(t.getSprite("Goodie").sayText, "Expected Sprite Goodie not to say anything");
  t.assert.withinRange(t.getSprite("Kopf").size, 100, 1, "Expected Sprite Kopf to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Körper").size, 90, 1, "Expected Sprite Körper to have size 90 +-1");
  t.assert.withinRange(t.getSprite("Punkt").size, 100, 1, "Expected Sprite Punkt to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Goodie").size, 100, 1, "Expected Sprite Goodie to have size 100 +-1");
  t.assert.ok(t.getSprite("Kopf").visible, "Expected Sprite Kopf to be visible");
  t.assert.ok(t.getSprite("Körper").visible, "Expected Sprite Körper to be visible");
  t.assert.ok(t.getSprite("Punkt").visible, "Expected Sprite Punkt to be visible");
  t.assert.not(t.getSprite("Goodie").visible, "Expected Sprite Goodie not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kopf").volume, 100, "Expected Sprite Kopf to have volume 100");
  t.assert.equal(t.getSprite("Körper").volume, 100, "Expected Sprite Körper to have volume 100");
  t.assert.equal(t.getSprite("Punkt").volume, 100, "Expected Sprite Punkt to have volume 100");
  t.assert.equal(t.getSprite("Goodie").volume, 100, "Expected Sprite Goodie to have volume 100");
  t.keyPress('down arrow', 2);
  await t.runForSteps(2);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kopf").currentCostume, 0, "Expected Sprite Kopf to have costume 0");
  t.assert.equal(t.getSprite("Körper").currentCostume, 0, "Expected Sprite Körper to have costume 0");
  t.assert.equal(t.getSprite("Punkt").currentCostume, 0, "Expected Sprite Punkt to have costume 0");
  t.assert.equal(t.getSprite("Goodie").currentCostume, 0, "Expected Sprite Goodie to have costume 0");
  t.assert.equal(t.getSprite("Kopf").getCloneCount(), 0, "Expected Sprite Kopf to have 0 clones");
  t.assert.equal(t.getSprite("Körper").getCloneCount(), 0, "Expected Sprite Körper to have 0 clones");
  t.assert.equal(t.getSprite("Punkt").getCloneCount(), 0, "Expected Sprite Punkt to have 0 clones");
  t.assert.equal(t.getSprite("Goodie").getCloneCount(), 0, "Expected Sprite Goodie to have 0 clones");
  t.assert.equal(t.getSprite("Kopf").direction, 180, 1, "Expected Sprite Kopf to face in direction 180 +-1");
  t.assert.equal(t.getSprite("Körper").direction, 90, 1, "Expected Sprite Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Punkt").direction, 90, 1, "Expected Sprite Punkt to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Goodie").direction, 90, 1, "Expected Sprite Goodie to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kopf").effects.color, 0, "Expected effect color of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.fisheye, 0, "Expected effect fisheye of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.whirl, 0, "Expected effect whirl of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.pixelate, 0, "Expected effect pixelate of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.mosaic, 0, "Expected effect mosaic of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.brightness, 0, "Expected effect brightness of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.ghost, 0, "Expected effect ghost of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Körper").effects.color, 0, "Expected effect color of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.fisheye, 0, "Expected effect fisheye of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.whirl, 0, "Expected effect whirl of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.pixelate, 0, "Expected effect pixelate of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.mosaic, 0, "Expected effect mosaic of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.brightness, 0, "Expected effect brightness of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.ghost, 0, "Expected effect ghost of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.color, 0, "Expected effect color of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.fisheye, 0, "Expected effect fisheye of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.whirl, 0, "Expected effect whirl of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.pixelate, 0, "Expected effect pixelate of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.mosaic, 0, "Expected effect mosaic of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.brightness, 0, "Expected effect brightness of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.ghost, 0, "Expected effect ghost of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.color, 0, "Expected effect color of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.fisheye, 0, "Expected effect fisheye of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.whirl, 0, "Expected effect whirl of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.pixelate, 0, "Expected effect pixelate of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.mosaic, 0, "Expected effect mosaic of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.brightness, 0, "Expected effect brightness of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.ghost, 0, "Expected effect ghost of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Kopf").layerOrder, 1, "Expected Sprite Kopf to be at layer 1");
  t.assert.equal(t.getSprite("Körper").layerOrder, 2, "Expected Sprite Körper to be at layer 2");
  t.assert.equal(t.getSprite("Punkt").layerOrder, 4, "Expected Sprite Punkt to be at layer 4");
  t.assert.equal(t.getSprite("Goodie").layerOrder, 3, "Expected Sprite Goodie to be at layer 3");
  t.assert.withinRange(t.getSprite("Kopf").x, 5, 5, "Expected Sprite Kopf to have x-position 5 +-5");
  t.assert.withinRange(t.getSprite("Kopf").y, 173, 5, "Expected Sprite Kopf to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Körper").x, 8, 5, "Expected Sprite Körper to have x-position 8 +-5");
  t.assert.withinRange(t.getSprite("Körper").y, 173, 5, "Expected Sprite Körper to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Punkt").x, 0, 5, "Expected Sprite Punkt to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Punkt").y, -100, 5, "Expected Sprite Punkt to have y-position -100 +-5");
  t.assert.withinRange(t.getSprite("Goodie").x, 0, 5, "Expected Sprite Goodie to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Goodie").y, 0, 5, "Expected Sprite Goodie to have y-position 0 +-5");
  t.assert.not(t.getSprite("Kopf").sayText, "Expected Sprite Kopf not to say anything");
  t.assert.not(t.getSprite("Körper").sayText, "Expected Sprite Körper not to say anything");
  t.assert.not(t.getSprite("Punkt").sayText, "Expected Sprite Punkt not to say anything");
  t.assert.not(t.getSprite("Goodie").sayText, "Expected Sprite Goodie not to say anything");
  t.assert.withinRange(t.getSprite("Kopf").size, 100, 1, "Expected Sprite Kopf to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Körper").size, 90, 1, "Expected Sprite Körper to have size 90 +-1");
  t.assert.withinRange(t.getSprite("Punkt").size, 100, 1, "Expected Sprite Punkt to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Goodie").size, 100, 1, "Expected Sprite Goodie to have size 100 +-1");
  t.assert.ok(t.getSprite("Kopf").visible, "Expected Sprite Kopf to be visible");
  t.assert.ok(t.getSprite("Körper").visible, "Expected Sprite Körper to be visible");
  t.assert.ok(t.getSprite("Punkt").visible, "Expected Sprite Punkt to be visible");
  t.assert.not(t.getSprite("Goodie").visible, "Expected Sprite Goodie not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kopf").volume, 100, "Expected Sprite Kopf to have volume 100");
  t.assert.equal(t.getSprite("Körper").volume, 100, "Expected Sprite Körper to have volume 100");
  t.assert.equal(t.getSprite("Punkt").volume, 100, "Expected Sprite Punkt to have volume 100");
  t.assert.equal(t.getSprite("Goodie").volume, 100, "Expected Sprite Goodie to have volume 100");
  t.keyPress('up arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kopf").currentCostume, 0, "Expected Sprite Kopf to have costume 0");
  t.assert.equal(t.getSprite("Körper").currentCostume, 0, "Expected Sprite Körper to have costume 0");
  t.assert.equal(t.getSprite("Punkt").currentCostume, 0, "Expected Sprite Punkt to have costume 0");
  t.assert.equal(t.getSprite("Goodie").currentCostume, 0, "Expected Sprite Goodie to have costume 0");
  t.assert.equal(t.getSprite("Kopf").getCloneCount(), 0, "Expected Sprite Kopf to have 0 clones");
  t.assert.equal(t.getSprite("Körper").getCloneCount(), 0, "Expected Sprite Körper to have 0 clones");
  t.assert.equal(t.getSprite("Punkt").getCloneCount(), 0, "Expected Sprite Punkt to have 0 clones");
  t.assert.equal(t.getSprite("Goodie").getCloneCount(), 0, "Expected Sprite Goodie to have 0 clones");
  t.assert.equal(t.getSprite("Kopf").direction, 0, 1, "Expected Sprite Kopf to face in direction 0 +-1");
  t.assert.equal(t.getSprite("Körper").direction, 90, 1, "Expected Sprite Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Punkt").direction, 90, 1, "Expected Sprite Punkt to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Goodie").direction, 90, 1, "Expected Sprite Goodie to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kopf").effects.color, 0, "Expected effect color of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.fisheye, 0, "Expected effect fisheye of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.whirl, 0, "Expected effect whirl of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.pixelate, 0, "Expected effect pixelate of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.mosaic, 0, "Expected effect mosaic of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.brightness, 0, "Expected effect brightness of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.ghost, 0, "Expected effect ghost of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Körper").effects.color, 0, "Expected effect color of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.fisheye, 0, "Expected effect fisheye of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.whirl, 0, "Expected effect whirl of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.pixelate, 0, "Expected effect pixelate of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.mosaic, 0, "Expected effect mosaic of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.brightness, 0, "Expected effect brightness of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.ghost, 0, "Expected effect ghost of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.color, 0, "Expected effect color of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.fisheye, 0, "Expected effect fisheye of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.whirl, 0, "Expected effect whirl of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.pixelate, 0, "Expected effect pixelate of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.mosaic, 0, "Expected effect mosaic of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.brightness, 0, "Expected effect brightness of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.ghost, 0, "Expected effect ghost of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.color, 0, "Expected effect color of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.fisheye, 0, "Expected effect fisheye of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.whirl, 0, "Expected effect whirl of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.pixelate, 0, "Expected effect pixelate of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.mosaic, 0, "Expected effect mosaic of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.brightness, 0, "Expected effect brightness of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.ghost, 0, "Expected effect ghost of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Kopf").layerOrder, 1, "Expected Sprite Kopf to be at layer 1");
  t.assert.equal(t.getSprite("Körper").layerOrder, 2, "Expected Sprite Körper to be at layer 2");
  t.assert.equal(t.getSprite("Punkt").layerOrder, 4, "Expected Sprite Punkt to be at layer 4");
  t.assert.equal(t.getSprite("Goodie").layerOrder, 3, "Expected Sprite Goodie to be at layer 3");
  t.assert.withinRange(t.getSprite("Kopf").x, 5, 5, "Expected Sprite Kopf to have x-position 5 +-5");
  t.assert.withinRange(t.getSprite("Kopf").y, 173, 5, "Expected Sprite Kopf to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Körper").x, 8, 5, "Expected Sprite Körper to have x-position 8 +-5");
  t.assert.withinRange(t.getSprite("Körper").y, 173, 5, "Expected Sprite Körper to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Punkt").x, 0, 5, "Expected Sprite Punkt to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Punkt").y, -100, 5, "Expected Sprite Punkt to have y-position -100 +-5");
  t.assert.withinRange(t.getSprite("Goodie").x, 0, 5, "Expected Sprite Goodie to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Goodie").y, 0, 5, "Expected Sprite Goodie to have y-position 0 +-5");
  t.assert.not(t.getSprite("Kopf").sayText, "Expected Sprite Kopf not to say anything");
  t.assert.not(t.getSprite("Körper").sayText, "Expected Sprite Körper not to say anything");
  t.assert.not(t.getSprite("Punkt").sayText, "Expected Sprite Punkt not to say anything");
  t.assert.not(t.getSprite("Goodie").sayText, "Expected Sprite Goodie not to say anything");
  t.assert.withinRange(t.getSprite("Kopf").size, 100, 1, "Expected Sprite Kopf to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Körper").size, 90, 1, "Expected Sprite Körper to have size 90 +-1");
  t.assert.withinRange(t.getSprite("Punkt").size, 100, 1, "Expected Sprite Punkt to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Goodie").size, 100, 1, "Expected Sprite Goodie to have size 100 +-1");
  t.assert.ok(t.getSprite("Kopf").visible, "Expected Sprite Kopf to be visible");
  t.assert.ok(t.getSprite("Körper").visible, "Expected Sprite Körper to be visible");
  t.assert.ok(t.getSprite("Punkt").visible, "Expected Sprite Punkt to be visible");
  t.assert.not(t.getSprite("Goodie").visible, "Expected Sprite Goodie not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kopf").volume, 100, "Expected Sprite Kopf to have volume 100");
  t.assert.equal(t.getSprite("Körper").volume, 100, "Expected Sprite Körper to have volume 100");
  t.assert.equal(t.getSprite("Punkt").volume, 100, "Expected Sprite Punkt to have volume 100");
  t.assert.equal(t.getSprite("Goodie").volume, 100, "Expected Sprite Goodie to have volume 100");
  t.keyPress('up arrow', 3);
  await t.runForSteps(3);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kopf").currentCostume, 0, "Expected Sprite Kopf to have costume 0");
  t.assert.equal(t.getSprite("Körper").currentCostume, 0, "Expected Sprite Körper to have costume 0");
  t.assert.equal(t.getSprite("Punkt").currentCostume, 0, "Expected Sprite Punkt to have costume 0");
  t.assert.equal(t.getSprite("Goodie").currentCostume, 0, "Expected Sprite Goodie to have costume 0");
  t.assert.equal(t.getSprite("Kopf").getCloneCount(), 0, "Expected Sprite Kopf to have 0 clones");
  t.assert.equal(t.getSprite("Körper").getCloneCount(), 0, "Expected Sprite Körper to have 0 clones");
  t.assert.equal(t.getSprite("Punkt").getCloneCount(), 0, "Expected Sprite Punkt to have 0 clones");
  t.assert.equal(t.getSprite("Goodie").getCloneCount(), 0, "Expected Sprite Goodie to have 0 clones");
  t.assert.equal(t.getSprite("Kopf").direction, 0, 1, "Expected Sprite Kopf to face in direction 0 +-1");
  t.assert.equal(t.getSprite("Körper").direction, 90, 1, "Expected Sprite Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Punkt").direction, 90, 1, "Expected Sprite Punkt to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Goodie").direction, 90, 1, "Expected Sprite Goodie to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kopf").effects.color, 0, "Expected effect color of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.fisheye, 0, "Expected effect fisheye of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.whirl, 0, "Expected effect whirl of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.pixelate, 0, "Expected effect pixelate of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.mosaic, 0, "Expected effect mosaic of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.brightness, 0, "Expected effect brightness of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.ghost, 0, "Expected effect ghost of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Körper").effects.color, 0, "Expected effect color of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.fisheye, 0, "Expected effect fisheye of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.whirl, 0, "Expected effect whirl of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.pixelate, 0, "Expected effect pixelate of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.mosaic, 0, "Expected effect mosaic of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.brightness, 0, "Expected effect brightness of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.ghost, 0, "Expected effect ghost of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.color, 0, "Expected effect color of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.fisheye, 0, "Expected effect fisheye of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.whirl, 0, "Expected effect whirl of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.pixelate, 0, "Expected effect pixelate of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.mosaic, 0, "Expected effect mosaic of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.brightness, 0, "Expected effect brightness of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.ghost, 0, "Expected effect ghost of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.color, 0, "Expected effect color of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.fisheye, 0, "Expected effect fisheye of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.whirl, 0, "Expected effect whirl of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.pixelate, 0, "Expected effect pixelate of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.mosaic, 0, "Expected effect mosaic of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.brightness, 0, "Expected effect brightness of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.ghost, 0, "Expected effect ghost of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Kopf").layerOrder, 1, "Expected Sprite Kopf to be at layer 1");
  t.assert.equal(t.getSprite("Körper").layerOrder, 2, "Expected Sprite Körper to be at layer 2");
  t.assert.equal(t.getSprite("Punkt").layerOrder, 4, "Expected Sprite Punkt to be at layer 4");
  t.assert.equal(t.getSprite("Goodie").layerOrder, 3, "Expected Sprite Goodie to be at layer 3");
  t.assert.withinRange(t.getSprite("Kopf").x, 5, 5, "Expected Sprite Kopf to have x-position 5 +-5");
  t.assert.withinRange(t.getSprite("Kopf").y, 173, 5, "Expected Sprite Kopf to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Körper").x, 8, 5, "Expected Sprite Körper to have x-position 8 +-5");
  t.assert.withinRange(t.getSprite("Körper").y, 173, 5, "Expected Sprite Körper to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Punkt").x, 0, 5, "Expected Sprite Punkt to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Punkt").y, -100, 5, "Expected Sprite Punkt to have y-position -100 +-5");
  t.assert.withinRange(t.getSprite("Goodie").x, 0, 5, "Expected Sprite Goodie to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Goodie").y, 0, 5, "Expected Sprite Goodie to have y-position 0 +-5");
  t.assert.not(t.getSprite("Kopf").sayText, "Expected Sprite Kopf not to say anything");
  t.assert.not(t.getSprite("Körper").sayText, "Expected Sprite Körper not to say anything");
  t.assert.not(t.getSprite("Punkt").sayText, "Expected Sprite Punkt not to say anything");
  t.assert.not(t.getSprite("Goodie").sayText, "Expected Sprite Goodie not to say anything");
  t.assert.withinRange(t.getSprite("Kopf").size, 100, 1, "Expected Sprite Kopf to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Körper").size, 90, 1, "Expected Sprite Körper to have size 90 +-1");
  t.assert.withinRange(t.getSprite("Punkt").size, 100, 1, "Expected Sprite Punkt to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Goodie").size, 100, 1, "Expected Sprite Goodie to have size 100 +-1");
  t.assert.ok(t.getSprite("Kopf").visible, "Expected Sprite Kopf to be visible");
  t.assert.ok(t.getSprite("Körper").visible, "Expected Sprite Körper to be visible");
  t.assert.ok(t.getSprite("Punkt").visible, "Expected Sprite Punkt to be visible");
  t.assert.not(t.getSprite("Goodie").visible, "Expected Sprite Goodie not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kopf").volume, 100, "Expected Sprite Kopf to have volume 100");
  t.assert.equal(t.getSprite("Körper").volume, 100, "Expected Sprite Körper to have volume 100");
  t.assert.equal(t.getSprite("Punkt").volume, 100, "Expected Sprite Punkt to have volume 100");
  t.assert.equal(t.getSprite("Goodie").volume, 100, "Expected Sprite Goodie to have volume 100");
  await t.runForSteps(93);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kopf").currentCostume, 0, "Expected Sprite Kopf to have costume 0");
  t.assert.equal(t.getSprite("Körper").currentCostume, 0, "Expected Sprite Körper to have costume 0");
  t.assert.equal(t.getSprite("Punkt").currentCostume, 0, "Expected Sprite Punkt to have costume 0");
  t.assert.equal(t.getSprite("Goodie").currentCostume, 0, "Expected Sprite Goodie to have costume 0");
  t.assert.equal(t.getSprite("Kopf").getCloneCount(), 0, "Expected Sprite Kopf to have 0 clones");
  t.assert.equal(t.getSprite("Körper").getCloneCount(), 0, "Expected Sprite Körper to have 0 clones");
  t.assert.equal(t.getSprite("Punkt").getCloneCount(), 0, "Expected Sprite Punkt to have 0 clones");
  t.assert.equal(t.getSprite("Goodie").getCloneCount(), 0, "Expected Sprite Goodie to have 0 clones");
  t.assert.equal(t.getSprite("Kopf").direction, 0, 1, "Expected Sprite Kopf to face in direction 0 +-1");
  t.assert.equal(t.getSprite("Körper").direction, 90, 1, "Expected Sprite Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Punkt").direction, 90, 1, "Expected Sprite Punkt to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Goodie").direction, 90, 1, "Expected Sprite Goodie to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kopf").effects.color, 0, "Expected effect color of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.fisheye, 0, "Expected effect fisheye of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.whirl, 0, "Expected effect whirl of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.pixelate, 0, "Expected effect pixelate of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.mosaic, 0, "Expected effect mosaic of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.brightness, 0, "Expected effect brightness of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.ghost, 0, "Expected effect ghost of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Körper").effects.color, 0, "Expected effect color of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.fisheye, 0, "Expected effect fisheye of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.whirl, 0, "Expected effect whirl of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.pixelate, 0, "Expected effect pixelate of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.mosaic, 0, "Expected effect mosaic of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.brightness, 0, "Expected effect brightness of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.ghost, 0, "Expected effect ghost of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.color, 0, "Expected effect color of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.fisheye, 0, "Expected effect fisheye of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.whirl, 0, "Expected effect whirl of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.pixelate, 0, "Expected effect pixelate of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.mosaic, 0, "Expected effect mosaic of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.brightness, 0, "Expected effect brightness of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.ghost, 0, "Expected effect ghost of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.color, 0, "Expected effect color of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.fisheye, 0, "Expected effect fisheye of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.whirl, 0, "Expected effect whirl of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.pixelate, 0, "Expected effect pixelate of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.mosaic, 0, "Expected effect mosaic of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.brightness, 0, "Expected effect brightness of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.ghost, 0, "Expected effect ghost of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Kopf").layerOrder, 1, "Expected Sprite Kopf to be at layer 1");
  t.assert.equal(t.getSprite("Körper").layerOrder, 2, "Expected Sprite Körper to be at layer 2");
  t.assert.equal(t.getSprite("Punkt").layerOrder, 4, "Expected Sprite Punkt to be at layer 4");
  t.assert.equal(t.getSprite("Goodie").layerOrder, 3, "Expected Sprite Goodie to be at layer 3");
  t.assert.withinRange(t.getSprite("Kopf").x, 5, 5, "Expected Sprite Kopf to have x-position 5 +-5");
  t.assert.withinRange(t.getSprite("Kopf").y, 173, 5, "Expected Sprite Kopf to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Körper").x, 8, 5, "Expected Sprite Körper to have x-position 8 +-5");
  t.assert.withinRange(t.getSprite("Körper").y, 173, 5, "Expected Sprite Körper to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Punkt").x, 0, 5, "Expected Sprite Punkt to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Punkt").y, -100, 5, "Expected Sprite Punkt to have y-position -100 +-5");
  t.assert.withinRange(t.getSprite("Goodie").x, 0, 5, "Expected Sprite Goodie to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Goodie").y, 0, 5, "Expected Sprite Goodie to have y-position 0 +-5");
  t.assert.not(t.getSprite("Kopf").sayText, "Expected Sprite Kopf not to say anything");
  t.assert.not(t.getSprite("Körper").sayText, "Expected Sprite Körper not to say anything");
  t.assert.not(t.getSprite("Punkt").sayText, "Expected Sprite Punkt not to say anything");
  t.assert.not(t.getSprite("Goodie").sayText, "Expected Sprite Goodie not to say anything");
  t.assert.withinRange(t.getSprite("Kopf").size, 100, 1, "Expected Sprite Kopf to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Körper").size, 90, 1, "Expected Sprite Körper to have size 90 +-1");
  t.assert.withinRange(t.getSprite("Punkt").size, 100, 1, "Expected Sprite Punkt to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Goodie").size, 100, 1, "Expected Sprite Goodie to have size 100 +-1");
  t.assert.ok(t.getSprite("Kopf").visible, "Expected Sprite Kopf to be visible");
  t.assert.ok(t.getSprite("Körper").visible, "Expected Sprite Körper to be visible");
  t.assert.ok(t.getSprite("Punkt").visible, "Expected Sprite Punkt to be visible");
  t.assert.not(t.getSprite("Goodie").visible, "Expected Sprite Goodie not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kopf").volume, 100, "Expected Sprite Kopf to have volume 100");
  t.assert.equal(t.getSprite("Körper").volume, 100, "Expected Sprite Körper to have volume 100");
  t.assert.equal(t.getSprite("Punkt").volume, 100, "Expected Sprite Punkt to have volume 100");
  t.assert.equal(t.getSprite("Goodie").volume, 100, "Expected Sprite Goodie to have volume 100");
  await t.runForSteps(80);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kopf").currentCostume, 0, "Expected Sprite Kopf to have costume 0");
  t.assert.equal(t.getSprite("Körper").currentCostume, 0, "Expected Sprite Körper to have costume 0");
  t.assert.equal(t.getSprite("Punkt").currentCostume, 0, "Expected Sprite Punkt to have costume 0");
  t.assert.equal(t.getSprite("Goodie").currentCostume, 0, "Expected Sprite Goodie to have costume 0");
  t.assert.equal(t.getSprite("Kopf").getCloneCount(), 0, "Expected Sprite Kopf to have 0 clones");
  t.assert.equal(t.getSprite("Körper").getCloneCount(), 0, "Expected Sprite Körper to have 0 clones");
  t.assert.equal(t.getSprite("Punkt").getCloneCount(), 0, "Expected Sprite Punkt to have 0 clones");
  t.assert.equal(t.getSprite("Goodie").getCloneCount(), 0, "Expected Sprite Goodie to have 0 clones");
  t.assert.equal(t.getSprite("Kopf").direction, 0, 1, "Expected Sprite Kopf to face in direction 0 +-1");
  t.assert.equal(t.getSprite("Körper").direction, 90, 1, "Expected Sprite Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Punkt").direction, 90, 1, "Expected Sprite Punkt to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Goodie").direction, 90, 1, "Expected Sprite Goodie to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kopf").effects.color, 0, "Expected effect color of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.fisheye, 0, "Expected effect fisheye of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.whirl, 0, "Expected effect whirl of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.pixelate, 0, "Expected effect pixelate of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.mosaic, 0, "Expected effect mosaic of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.brightness, 0, "Expected effect brightness of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.ghost, 0, "Expected effect ghost of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Körper").effects.color, 0, "Expected effect color of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.fisheye, 0, "Expected effect fisheye of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.whirl, 0, "Expected effect whirl of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.pixelate, 0, "Expected effect pixelate of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.mosaic, 0, "Expected effect mosaic of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.brightness, 0, "Expected effect brightness of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.ghost, 0, "Expected effect ghost of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.color, 0, "Expected effect color of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.fisheye, 0, "Expected effect fisheye of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.whirl, 0, "Expected effect whirl of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.pixelate, 0, "Expected effect pixelate of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.mosaic, 0, "Expected effect mosaic of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.brightness, 0, "Expected effect brightness of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.ghost, 0, "Expected effect ghost of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.color, 0, "Expected effect color of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.fisheye, 0, "Expected effect fisheye of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.whirl, 0, "Expected effect whirl of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.pixelate, 0, "Expected effect pixelate of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.mosaic, 0, "Expected effect mosaic of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.brightness, 0, "Expected effect brightness of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.ghost, 0, "Expected effect ghost of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Kopf").layerOrder, 1, "Expected Sprite Kopf to be at layer 1");
  t.assert.equal(t.getSprite("Körper").layerOrder, 2, "Expected Sprite Körper to be at layer 2");
  t.assert.equal(t.getSprite("Punkt").layerOrder, 4, "Expected Sprite Punkt to be at layer 4");
  t.assert.equal(t.getSprite("Goodie").layerOrder, 3, "Expected Sprite Goodie to be at layer 3");
  t.assert.withinRange(t.getSprite("Kopf").x, 5, 5, "Expected Sprite Kopf to have x-position 5 +-5");
  t.assert.withinRange(t.getSprite("Kopf").y, 173, 5, "Expected Sprite Kopf to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Körper").x, 8, 5, "Expected Sprite Körper to have x-position 8 +-5");
  t.assert.withinRange(t.getSprite("Körper").y, 173, 5, "Expected Sprite Körper to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Punkt").x, 0, 5, "Expected Sprite Punkt to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Punkt").y, -100, 5, "Expected Sprite Punkt to have y-position -100 +-5");
  t.assert.withinRange(t.getSprite("Goodie").x, 0, 5, "Expected Sprite Goodie to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Goodie").y, 0, 5, "Expected Sprite Goodie to have y-position 0 +-5");
  t.assert.not(t.getSprite("Kopf").sayText, "Expected Sprite Kopf not to say anything");
  t.assert.not(t.getSprite("Körper").sayText, "Expected Sprite Körper not to say anything");
  t.assert.not(t.getSprite("Punkt").sayText, "Expected Sprite Punkt not to say anything");
  t.assert.not(t.getSprite("Goodie").sayText, "Expected Sprite Goodie not to say anything");
  t.assert.withinRange(t.getSprite("Kopf").size, 100, 1, "Expected Sprite Kopf to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Körper").size, 90, 1, "Expected Sprite Körper to have size 90 +-1");
  t.assert.withinRange(t.getSprite("Punkt").size, 100, 1, "Expected Sprite Punkt to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Goodie").size, 100, 1, "Expected Sprite Goodie to have size 100 +-1");
  t.assert.ok(t.getSprite("Kopf").visible, "Expected Sprite Kopf to be visible");
  t.assert.ok(t.getSprite("Körper").visible, "Expected Sprite Körper to be visible");
  t.assert.ok(t.getSprite("Punkt").visible, "Expected Sprite Punkt to be visible");
  t.assert.not(t.getSprite("Goodie").visible, "Expected Sprite Goodie not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kopf").volume, 100, "Expected Sprite Kopf to have volume 100");
  t.assert.equal(t.getSprite("Körper").volume, 100, "Expected Sprite Körper to have volume 100");
  t.assert.equal(t.getSprite("Punkt").volume, 100, "Expected Sprite Punkt to have volume 100");
  t.assert.equal(t.getSprite("Goodie").volume, 100, "Expected Sprite Goodie to have volume 100");
  t.keyPress('right arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kopf").currentCostume, 0, "Expected Sprite Kopf to have costume 0");
  t.assert.equal(t.getSprite("Körper").currentCostume, 0, "Expected Sprite Körper to have costume 0");
  t.assert.equal(t.getSprite("Punkt").currentCostume, 0, "Expected Sprite Punkt to have costume 0");
  t.assert.equal(t.getSprite("Goodie").currentCostume, 0, "Expected Sprite Goodie to have costume 0");
  t.assert.equal(t.getSprite("Kopf").getCloneCount(), 0, "Expected Sprite Kopf to have 0 clones");
  t.assert.equal(t.getSprite("Körper").getCloneCount(), 0, "Expected Sprite Körper to have 0 clones");
  t.assert.equal(t.getSprite("Punkt").getCloneCount(), 0, "Expected Sprite Punkt to have 0 clones");
  t.assert.equal(t.getSprite("Goodie").getCloneCount(), 0, "Expected Sprite Goodie to have 0 clones");
  t.assert.equal(t.getSprite("Kopf").direction, 90, 1, "Expected Sprite Kopf to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Körper").direction, 90, 1, "Expected Sprite Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Punkt").direction, 90, 1, "Expected Sprite Punkt to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Goodie").direction, 90, 1, "Expected Sprite Goodie to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kopf").effects.color, 0, "Expected effect color of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.fisheye, 0, "Expected effect fisheye of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.whirl, 0, "Expected effect whirl of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.pixelate, 0, "Expected effect pixelate of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.mosaic, 0, "Expected effect mosaic of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.brightness, 0, "Expected effect brightness of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.ghost, 0, "Expected effect ghost of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Körper").effects.color, 0, "Expected effect color of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.fisheye, 0, "Expected effect fisheye of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.whirl, 0, "Expected effect whirl of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.pixelate, 0, "Expected effect pixelate of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.mosaic, 0, "Expected effect mosaic of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.brightness, 0, "Expected effect brightness of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.ghost, 0, "Expected effect ghost of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.color, 0, "Expected effect color of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.fisheye, 0, "Expected effect fisheye of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.whirl, 0, "Expected effect whirl of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.pixelate, 0, "Expected effect pixelate of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.mosaic, 0, "Expected effect mosaic of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.brightness, 0, "Expected effect brightness of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.ghost, 0, "Expected effect ghost of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.color, 0, "Expected effect color of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.fisheye, 0, "Expected effect fisheye of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.whirl, 0, "Expected effect whirl of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.pixelate, 0, "Expected effect pixelate of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.mosaic, 0, "Expected effect mosaic of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.brightness, 0, "Expected effect brightness of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.ghost, 0, "Expected effect ghost of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Kopf").layerOrder, 1, "Expected Sprite Kopf to be at layer 1");
  t.assert.equal(t.getSprite("Körper").layerOrder, 2, "Expected Sprite Körper to be at layer 2");
  t.assert.equal(t.getSprite("Punkt").layerOrder, 4, "Expected Sprite Punkt to be at layer 4");
  t.assert.equal(t.getSprite("Goodie").layerOrder, 3, "Expected Sprite Goodie to be at layer 3");
  t.assert.withinRange(t.getSprite("Kopf").x, 5, 5, "Expected Sprite Kopf to have x-position 5 +-5");
  t.assert.withinRange(t.getSprite("Kopf").y, 173, 5, "Expected Sprite Kopf to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Körper").x, 8, 5, "Expected Sprite Körper to have x-position 8 +-5");
  t.assert.withinRange(t.getSprite("Körper").y, 173, 5, "Expected Sprite Körper to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Punkt").x, 0, 5, "Expected Sprite Punkt to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Punkt").y, -100, 5, "Expected Sprite Punkt to have y-position -100 +-5");
  t.assert.withinRange(t.getSprite("Goodie").x, 0, 5, "Expected Sprite Goodie to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Goodie").y, 0, 5, "Expected Sprite Goodie to have y-position 0 +-5");
  t.assert.not(t.getSprite("Kopf").sayText, "Expected Sprite Kopf not to say anything");
  t.assert.not(t.getSprite("Körper").sayText, "Expected Sprite Körper not to say anything");
  t.assert.not(t.getSprite("Punkt").sayText, "Expected Sprite Punkt not to say anything");
  t.assert.not(t.getSprite("Goodie").sayText, "Expected Sprite Goodie not to say anything");
  t.assert.withinRange(t.getSprite("Kopf").size, 100, 1, "Expected Sprite Kopf to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Körper").size, 90, 1, "Expected Sprite Körper to have size 90 +-1");
  t.assert.withinRange(t.getSprite("Punkt").size, 100, 1, "Expected Sprite Punkt to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Goodie").size, 100, 1, "Expected Sprite Goodie to have size 100 +-1");
  t.assert.ok(t.getSprite("Kopf").visible, "Expected Sprite Kopf to be visible");
  t.assert.ok(t.getSprite("Körper").visible, "Expected Sprite Körper to be visible");
  t.assert.ok(t.getSprite("Punkt").visible, "Expected Sprite Punkt to be visible");
  t.assert.not(t.getSprite("Goodie").visible, "Expected Sprite Goodie not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kopf").volume, 100, "Expected Sprite Kopf to have volume 100");
  t.assert.equal(t.getSprite("Körper").volume, 100, "Expected Sprite Körper to have volume 100");
  t.assert.equal(t.getSprite("Punkt").volume, 100, "Expected Sprite Punkt to have volume 100");
  t.assert.equal(t.getSprite("Goodie").volume, 100, "Expected Sprite Goodie to have volume 100");
  t.keyPress('right arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kopf").currentCostume, 0, "Expected Sprite Kopf to have costume 0");
  t.assert.equal(t.getSprite("Körper").currentCostume, 0, "Expected Sprite Körper to have costume 0");
  t.assert.equal(t.getSprite("Punkt").currentCostume, 0, "Expected Sprite Punkt to have costume 0");
  t.assert.equal(t.getSprite("Goodie").currentCostume, 0, "Expected Sprite Goodie to have costume 0");
  t.assert.equal(t.getSprite("Kopf").getCloneCount(), 0, "Expected Sprite Kopf to have 0 clones");
  t.assert.equal(t.getSprite("Körper").getCloneCount(), 0, "Expected Sprite Körper to have 0 clones");
  t.assert.equal(t.getSprite("Punkt").getCloneCount(), 0, "Expected Sprite Punkt to have 0 clones");
  t.assert.equal(t.getSprite("Goodie").getCloneCount(), 0, "Expected Sprite Goodie to have 0 clones");
  t.assert.equal(t.getSprite("Kopf").direction, 90, 1, "Expected Sprite Kopf to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Körper").direction, 90, 1, "Expected Sprite Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Punkt").direction, 90, 1, "Expected Sprite Punkt to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Goodie").direction, 90, 1, "Expected Sprite Goodie to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kopf").effects.color, 0, "Expected effect color of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.fisheye, 0, "Expected effect fisheye of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.whirl, 0, "Expected effect whirl of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.pixelate, 0, "Expected effect pixelate of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.mosaic, 0, "Expected effect mosaic of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.brightness, 0, "Expected effect brightness of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.ghost, 0, "Expected effect ghost of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Körper").effects.color, 0, "Expected effect color of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.fisheye, 0, "Expected effect fisheye of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.whirl, 0, "Expected effect whirl of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.pixelate, 0, "Expected effect pixelate of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.mosaic, 0, "Expected effect mosaic of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.brightness, 0, "Expected effect brightness of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.ghost, 0, "Expected effect ghost of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.color, 0, "Expected effect color of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.fisheye, 0, "Expected effect fisheye of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.whirl, 0, "Expected effect whirl of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.pixelate, 0, "Expected effect pixelate of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.mosaic, 0, "Expected effect mosaic of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.brightness, 0, "Expected effect brightness of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.ghost, 0, "Expected effect ghost of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.color, 0, "Expected effect color of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.fisheye, 0, "Expected effect fisheye of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.whirl, 0, "Expected effect whirl of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.pixelate, 0, "Expected effect pixelate of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.mosaic, 0, "Expected effect mosaic of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.brightness, 0, "Expected effect brightness of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.ghost, 0, "Expected effect ghost of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Kopf").layerOrder, 1, "Expected Sprite Kopf to be at layer 1");
  t.assert.equal(t.getSprite("Körper").layerOrder, 2, "Expected Sprite Körper to be at layer 2");
  t.assert.equal(t.getSprite("Punkt").layerOrder, 4, "Expected Sprite Punkt to be at layer 4");
  t.assert.equal(t.getSprite("Goodie").layerOrder, 3, "Expected Sprite Goodie to be at layer 3");
  t.assert.withinRange(t.getSprite("Kopf").x, 5, 5, "Expected Sprite Kopf to have x-position 5 +-5");
  t.assert.withinRange(t.getSprite("Kopf").y, 173, 5, "Expected Sprite Kopf to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Körper").x, 8, 5, "Expected Sprite Körper to have x-position 8 +-5");
  t.assert.withinRange(t.getSprite("Körper").y, 173, 5, "Expected Sprite Körper to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Punkt").x, 0, 5, "Expected Sprite Punkt to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Punkt").y, -100, 5, "Expected Sprite Punkt to have y-position -100 +-5");
  t.assert.withinRange(t.getSprite("Goodie").x, 0, 5, "Expected Sprite Goodie to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Goodie").y, 0, 5, "Expected Sprite Goodie to have y-position 0 +-5");
  t.assert.not(t.getSprite("Kopf").sayText, "Expected Sprite Kopf not to say anything");
  t.assert.not(t.getSprite("Körper").sayText, "Expected Sprite Körper not to say anything");
  t.assert.not(t.getSprite("Punkt").sayText, "Expected Sprite Punkt not to say anything");
  t.assert.not(t.getSprite("Goodie").sayText, "Expected Sprite Goodie not to say anything");
  t.assert.withinRange(t.getSprite("Kopf").size, 100, 1, "Expected Sprite Kopf to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Körper").size, 90, 1, "Expected Sprite Körper to have size 90 +-1");
  t.assert.withinRange(t.getSprite("Punkt").size, 100, 1, "Expected Sprite Punkt to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Goodie").size, 100, 1, "Expected Sprite Goodie to have size 100 +-1");
  t.assert.ok(t.getSprite("Kopf").visible, "Expected Sprite Kopf to be visible");
  t.assert.ok(t.getSprite("Körper").visible, "Expected Sprite Körper to be visible");
  t.assert.ok(t.getSprite("Punkt").visible, "Expected Sprite Punkt to be visible");
  t.assert.not(t.getSprite("Goodie").visible, "Expected Sprite Goodie not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kopf").volume, 100, "Expected Sprite Kopf to have volume 100");
  t.assert.equal(t.getSprite("Körper").volume, 100, "Expected Sprite Körper to have volume 100");
  t.assert.equal(t.getSprite("Punkt").volume, 100, "Expected Sprite Punkt to have volume 100");
  t.assert.equal(t.getSprite("Goodie").volume, 100, "Expected Sprite Goodie to have volume 100");
  t.keyPress('right arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kopf").currentCostume, 0, "Expected Sprite Kopf to have costume 0");
  t.assert.equal(t.getSprite("Körper").currentCostume, 0, "Expected Sprite Körper to have costume 0");
  t.assert.equal(t.getSprite("Punkt").currentCostume, 0, "Expected Sprite Punkt to have costume 0");
  t.assert.equal(t.getSprite("Goodie").currentCostume, 0, "Expected Sprite Goodie to have costume 0");
  t.assert.equal(t.getSprite("Kopf").getCloneCount(), 0, "Expected Sprite Kopf to have 0 clones");
  t.assert.equal(t.getSprite("Körper").getCloneCount(), 0, "Expected Sprite Körper to have 0 clones");
  t.assert.equal(t.getSprite("Punkt").getCloneCount(), 0, "Expected Sprite Punkt to have 0 clones");
  t.assert.equal(t.getSprite("Goodie").getCloneCount(), 0, "Expected Sprite Goodie to have 0 clones");
  t.assert.equal(t.getSprite("Kopf").direction, 90, 1, "Expected Sprite Kopf to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Körper").direction, 90, 1, "Expected Sprite Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Punkt").direction, 90, 1, "Expected Sprite Punkt to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Goodie").direction, 90, 1, "Expected Sprite Goodie to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kopf").effects.color, 0, "Expected effect color of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.fisheye, 0, "Expected effect fisheye of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.whirl, 0, "Expected effect whirl of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.pixelate, 0, "Expected effect pixelate of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.mosaic, 0, "Expected effect mosaic of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.brightness, 0, "Expected effect brightness of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.ghost, 0, "Expected effect ghost of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Körper").effects.color, 0, "Expected effect color of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.fisheye, 0, "Expected effect fisheye of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.whirl, 0, "Expected effect whirl of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.pixelate, 0, "Expected effect pixelate of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.mosaic, 0, "Expected effect mosaic of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.brightness, 0, "Expected effect brightness of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.ghost, 0, "Expected effect ghost of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.color, 0, "Expected effect color of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.fisheye, 0, "Expected effect fisheye of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.whirl, 0, "Expected effect whirl of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.pixelate, 0, "Expected effect pixelate of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.mosaic, 0, "Expected effect mosaic of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.brightness, 0, "Expected effect brightness of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.ghost, 0, "Expected effect ghost of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.color, 0, "Expected effect color of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.fisheye, 0, "Expected effect fisheye of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.whirl, 0, "Expected effect whirl of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.pixelate, 0, "Expected effect pixelate of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.mosaic, 0, "Expected effect mosaic of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.brightness, 0, "Expected effect brightness of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.ghost, 0, "Expected effect ghost of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Kopf").layerOrder, 1, "Expected Sprite Kopf to be at layer 1");
  t.assert.equal(t.getSprite("Körper").layerOrder, 2, "Expected Sprite Körper to be at layer 2");
  t.assert.equal(t.getSprite("Punkt").layerOrder, 4, "Expected Sprite Punkt to be at layer 4");
  t.assert.equal(t.getSprite("Goodie").layerOrder, 3, "Expected Sprite Goodie to be at layer 3");
  t.assert.withinRange(t.getSprite("Kopf").x, 5, 5, "Expected Sprite Kopf to have x-position 5 +-5");
  t.assert.withinRange(t.getSprite("Kopf").y, 173, 5, "Expected Sprite Kopf to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Körper").x, 8, 5, "Expected Sprite Körper to have x-position 8 +-5");
  t.assert.withinRange(t.getSprite("Körper").y, 173, 5, "Expected Sprite Körper to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Punkt").x, 0, 5, "Expected Sprite Punkt to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Punkt").y, -100, 5, "Expected Sprite Punkt to have y-position -100 +-5");
  t.assert.withinRange(t.getSprite("Goodie").x, 0, 5, "Expected Sprite Goodie to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Goodie").y, 0, 5, "Expected Sprite Goodie to have y-position 0 +-5");
  t.assert.not(t.getSprite("Kopf").sayText, "Expected Sprite Kopf not to say anything");
  t.assert.not(t.getSprite("Körper").sayText, "Expected Sprite Körper not to say anything");
  t.assert.not(t.getSprite("Punkt").sayText, "Expected Sprite Punkt not to say anything");
  t.assert.not(t.getSprite("Goodie").sayText, "Expected Sprite Goodie not to say anything");
  t.assert.withinRange(t.getSprite("Kopf").size, 100, 1, "Expected Sprite Kopf to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Körper").size, 90, 1, "Expected Sprite Körper to have size 90 +-1");
  t.assert.withinRange(t.getSprite("Punkt").size, 100, 1, "Expected Sprite Punkt to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Goodie").size, 100, 1, "Expected Sprite Goodie to have size 100 +-1");
  t.assert.ok(t.getSprite("Kopf").visible, "Expected Sprite Kopf to be visible");
  t.assert.ok(t.getSprite("Körper").visible, "Expected Sprite Körper to be visible");
  t.assert.ok(t.getSprite("Punkt").visible, "Expected Sprite Punkt to be visible");
  t.assert.not(t.getSprite("Goodie").visible, "Expected Sprite Goodie not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kopf").volume, 100, "Expected Sprite Kopf to have volume 100");
  t.assert.equal(t.getSprite("Körper").volume, 100, "Expected Sprite Körper to have volume 100");
  t.assert.equal(t.getSprite("Punkt").volume, 100, "Expected Sprite Punkt to have volume 100");
  t.assert.equal(t.getSprite("Goodie").volume, 100, "Expected Sprite Goodie to have volume 100");
  t.keyPress('up arrow', 3);
  await t.runForSteps(3);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kopf").currentCostume, 0, "Expected Sprite Kopf to have costume 0");
  t.assert.equal(t.getSprite("Körper").currentCostume, 0, "Expected Sprite Körper to have costume 0");
  t.assert.equal(t.getSprite("Punkt").currentCostume, 0, "Expected Sprite Punkt to have costume 0");
  t.assert.equal(t.getSprite("Goodie").currentCostume, 0, "Expected Sprite Goodie to have costume 0");
  t.assert.equal(t.getSprite("Kopf").getCloneCount(), 0, "Expected Sprite Kopf to have 0 clones");
  t.assert.equal(t.getSprite("Körper").getCloneCount(), 0, "Expected Sprite Körper to have 0 clones");
  t.assert.equal(t.getSprite("Punkt").getCloneCount(), 0, "Expected Sprite Punkt to have 0 clones");
  t.assert.equal(t.getSprite("Goodie").getCloneCount(), 0, "Expected Sprite Goodie to have 0 clones");
  t.assert.equal(t.getSprite("Kopf").direction, 0, 1, "Expected Sprite Kopf to face in direction 0 +-1");
  t.assert.equal(t.getSprite("Körper").direction, 90, 1, "Expected Sprite Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Punkt").direction, 90, 1, "Expected Sprite Punkt to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Goodie").direction, 90, 1, "Expected Sprite Goodie to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kopf").effects.color, 0, "Expected effect color of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.fisheye, 0, "Expected effect fisheye of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.whirl, 0, "Expected effect whirl of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.pixelate, 0, "Expected effect pixelate of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.mosaic, 0, "Expected effect mosaic of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.brightness, 0, "Expected effect brightness of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.ghost, 0, "Expected effect ghost of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Körper").effects.color, 0, "Expected effect color of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.fisheye, 0, "Expected effect fisheye of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.whirl, 0, "Expected effect whirl of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.pixelate, 0, "Expected effect pixelate of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.mosaic, 0, "Expected effect mosaic of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.brightness, 0, "Expected effect brightness of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.ghost, 0, "Expected effect ghost of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.color, 0, "Expected effect color of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.fisheye, 0, "Expected effect fisheye of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.whirl, 0, "Expected effect whirl of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.pixelate, 0, "Expected effect pixelate of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.mosaic, 0, "Expected effect mosaic of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.brightness, 0, "Expected effect brightness of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.ghost, 0, "Expected effect ghost of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.color, 0, "Expected effect color of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.fisheye, 0, "Expected effect fisheye of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.whirl, 0, "Expected effect whirl of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.pixelate, 0, "Expected effect pixelate of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.mosaic, 0, "Expected effect mosaic of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.brightness, 0, "Expected effect brightness of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.ghost, 0, "Expected effect ghost of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Kopf").layerOrder, 1, "Expected Sprite Kopf to be at layer 1");
  t.assert.equal(t.getSprite("Körper").layerOrder, 2, "Expected Sprite Körper to be at layer 2");
  t.assert.equal(t.getSprite("Punkt").layerOrder, 4, "Expected Sprite Punkt to be at layer 4");
  t.assert.equal(t.getSprite("Goodie").layerOrder, 3, "Expected Sprite Goodie to be at layer 3");
  t.assert.withinRange(t.getSprite("Kopf").x, 5, 5, "Expected Sprite Kopf to have x-position 5 +-5");
  t.assert.withinRange(t.getSprite("Kopf").y, 173, 5, "Expected Sprite Kopf to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Körper").x, 8, 5, "Expected Sprite Körper to have x-position 8 +-5");
  t.assert.withinRange(t.getSprite("Körper").y, 173, 5, "Expected Sprite Körper to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Punkt").x, 0, 5, "Expected Sprite Punkt to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Punkt").y, -100, 5, "Expected Sprite Punkt to have y-position -100 +-5");
  t.assert.withinRange(t.getSprite("Goodie").x, 0, 5, "Expected Sprite Goodie to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Goodie").y, 0, 5, "Expected Sprite Goodie to have y-position 0 +-5");
  t.assert.not(t.getSprite("Kopf").sayText, "Expected Sprite Kopf not to say anything");
  t.assert.not(t.getSprite("Körper").sayText, "Expected Sprite Körper not to say anything");
  t.assert.not(t.getSprite("Punkt").sayText, "Expected Sprite Punkt not to say anything");
  t.assert.not(t.getSprite("Goodie").sayText, "Expected Sprite Goodie not to say anything");
  t.assert.withinRange(t.getSprite("Kopf").size, 100, 1, "Expected Sprite Kopf to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Körper").size, 90, 1, "Expected Sprite Körper to have size 90 +-1");
  t.assert.withinRange(t.getSprite("Punkt").size, 100, 1, "Expected Sprite Punkt to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Goodie").size, 100, 1, "Expected Sprite Goodie to have size 100 +-1");
  t.assert.ok(t.getSprite("Kopf").visible, "Expected Sprite Kopf to be visible");
  t.assert.ok(t.getSprite("Körper").visible, "Expected Sprite Körper to be visible");
  t.assert.ok(t.getSprite("Punkt").visible, "Expected Sprite Punkt to be visible");
  t.assert.not(t.getSprite("Goodie").visible, "Expected Sprite Goodie not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kopf").volume, 100, "Expected Sprite Kopf to have volume 100");
  t.assert.equal(t.getSprite("Körper").volume, 100, "Expected Sprite Körper to have volume 100");
  t.assert.equal(t.getSprite("Punkt").volume, 100, "Expected Sprite Punkt to have volume 100");
  t.assert.equal(t.getSprite("Goodie").volume, 100, "Expected Sprite Goodie to have volume 100");
  await t.runForSteps(20);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kopf").currentCostume, 0, "Expected Sprite Kopf to have costume 0");
  t.assert.equal(t.getSprite("Körper").currentCostume, 0, "Expected Sprite Körper to have costume 0");
  t.assert.equal(t.getSprite("Punkt").currentCostume, 0, "Expected Sprite Punkt to have costume 0");
  t.assert.equal(t.getSprite("Goodie").currentCostume, 0, "Expected Sprite Goodie to have costume 0");
  t.assert.equal(t.getSprite("Kopf").getCloneCount(), 0, "Expected Sprite Kopf to have 0 clones");
  t.assert.equal(t.getSprite("Körper").getCloneCount(), 0, "Expected Sprite Körper to have 0 clones");
  t.assert.equal(t.getSprite("Punkt").getCloneCount(), 0, "Expected Sprite Punkt to have 0 clones");
  t.assert.equal(t.getSprite("Goodie").getCloneCount(), 0, "Expected Sprite Goodie to have 0 clones");
  t.assert.equal(t.getSprite("Kopf").direction, 0, 1, "Expected Sprite Kopf to face in direction 0 +-1");
  t.assert.equal(t.getSprite("Körper").direction, 90, 1, "Expected Sprite Körper to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Punkt").direction, 90, 1, "Expected Sprite Punkt to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Goodie").direction, 90, 1, "Expected Sprite Goodie to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kopf").effects.color, 0, "Expected effect color of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.fisheye, 0, "Expected effect fisheye of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.whirl, 0, "Expected effect whirl of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.pixelate, 0, "Expected effect pixelate of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.mosaic, 0, "Expected effect mosaic of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.brightness, 0, "Expected effect brightness of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Kopf").effects.ghost, 0, "Expected effect ghost of Sprite Kopf to be 0");
  t.assert.equal(t.getSprite("Körper").effects.color, 0, "Expected effect color of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.fisheye, 0, "Expected effect fisheye of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.whirl, 0, "Expected effect whirl of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.pixelate, 0, "Expected effect pixelate of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.mosaic, 0, "Expected effect mosaic of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.brightness, 0, "Expected effect brightness of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Körper").effects.ghost, 0, "Expected effect ghost of Sprite Körper to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.color, 0, "Expected effect color of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.fisheye, 0, "Expected effect fisheye of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.whirl, 0, "Expected effect whirl of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.pixelate, 0, "Expected effect pixelate of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.mosaic, 0, "Expected effect mosaic of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.brightness, 0, "Expected effect brightness of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Punkt").effects.ghost, 0, "Expected effect ghost of Sprite Punkt to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.color, 0, "Expected effect color of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.fisheye, 0, "Expected effect fisheye of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.whirl, 0, "Expected effect whirl of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.pixelate, 0, "Expected effect pixelate of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.mosaic, 0, "Expected effect mosaic of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.brightness, 0, "Expected effect brightness of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Goodie").effects.ghost, 0, "Expected effect ghost of Sprite Goodie to be 0");
  t.assert.equal(t.getSprite("Kopf").layerOrder, 1, "Expected Sprite Kopf to be at layer 1");
  t.assert.equal(t.getSprite("Körper").layerOrder, 2, "Expected Sprite Körper to be at layer 2");
  t.assert.equal(t.getSprite("Punkt").layerOrder, 4, "Expected Sprite Punkt to be at layer 4");
  t.assert.equal(t.getSprite("Goodie").layerOrder, 3, "Expected Sprite Goodie to be at layer 3");
  t.assert.withinRange(t.getSprite("Kopf").x, 5, 5, "Expected Sprite Kopf to have x-position 5 +-5");
  t.assert.withinRange(t.getSprite("Kopf").y, 173, 5, "Expected Sprite Kopf to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Körper").x, 8, 5, "Expected Sprite Körper to have x-position 8 +-5");
  t.assert.withinRange(t.getSprite("Körper").y, 173, 5, "Expected Sprite Körper to have y-position 173 +-5");
  t.assert.withinRange(t.getSprite("Punkt").x, 0, 5, "Expected Sprite Punkt to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Punkt").y, -100, 5, "Expected Sprite Punkt to have y-position -100 +-5");
  t.assert.withinRange(t.getSprite("Goodie").x, 0, 5, "Expected Sprite Goodie to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Goodie").y, 0, 5, "Expected Sprite Goodie to have y-position 0 +-5");
  t.assert.not(t.getSprite("Kopf").sayText, "Expected Sprite Kopf not to say anything");
  t.assert.not(t.getSprite("Körper").sayText, "Expected Sprite Körper not to say anything");
  t.assert.not(t.getSprite("Punkt").sayText, "Expected Sprite Punkt not to say anything");
  t.assert.not(t.getSprite("Goodie").sayText, "Expected Sprite Goodie not to say anything");
  t.assert.withinRange(t.getSprite("Kopf").size, 100, 1, "Expected Sprite Kopf to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Körper").size, 90, 1, "Expected Sprite Körper to have size 90 +-1");
  t.assert.withinRange(t.getSprite("Punkt").size, 100, 1, "Expected Sprite Punkt to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Goodie").size, 100, 1, "Expected Sprite Goodie to have size 100 +-1");
  t.assert.ok(t.getSprite("Kopf").visible, "Expected Sprite Kopf to be visible");
  t.assert.ok(t.getSprite("Körper").visible, "Expected Sprite Körper to be visible");
  t.assert.ok(t.getSprite("Punkt").visible, "Expected Sprite Punkt to be visible");
  t.assert.not(t.getSprite("Goodie").visible, "Expected Sprite Goodie not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kopf").volume, 100, "Expected Sprite Kopf to have volume 100");
  t.assert.equal(t.getSprite("Körper").volume, 100, "Expected Sprite Körper to have volume 100");
  t.assert.equal(t.getSprite("Punkt").volume, 100, "Expected Sprite Punkt to have volume 100");
  t.assert.equal(t.getSprite("Goodie").volume, 100, "Expected Sprite Goodie to have volume 100");
  t.end();
}

module.exports = [
  {
      test: test0,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687939128421',
      type: 'standard',
  },
  {
      test: test1,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687939128421',
      type: 'standard',
  }
]
