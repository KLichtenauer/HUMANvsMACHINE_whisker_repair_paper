const test0 = async function (t) {
  t.keyPress('right arrow', 2);
  await t.runForSteps(2);
  await t.runForSteps(1);
  t.dragSprite('Raumschiff', 151.16846857752722, 46.04073656715908, null);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 130, 1, "Expected Sprite Schwarzes Loch to face in direction 130 +-1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 151.42728762262973, 5, "Expected Sprite Raumschiff to have x-position 151.42728762262973 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 47.006662393448146, 5, "Expected Sprite Raumschiff to have y-position 47.006662393448146 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, 8.952628887912777, 5, "Expected Sprite Schwarzes Loch to have x-position 8.952628887912777 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -75.078341604963, 5, "Expected Sprite Schwarzes Loch to have y-position -75.078341604963 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 139.8, 5, "Expected Clone 1 of Stern to have x-position 139.8 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 20.8, 5, "Expected Clone 1 of Stern to have y-position 20.8 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 140.06666666666666, 5, "Expected Clone 2 of Stern to have x-position 140.06666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 19.566666666666666, 5, "Expected Clone 2 of Stern to have y-position 19.566666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 139.88333333333333, 5, "Expected Clone 3 of Stern to have x-position 139.88333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 20.133333333333333, 5, "Expected Clone 3 of Stern to have y-position 20.133333333333333 +-5");
  t.assert.equal(t.getSprite("Stern").getVariable("xPosition").value, "-210", "Expected xPosition to have value -210 in Sprite Stern");
  t.assert.equal(t.getSprite("Stern").getVariable("yPosition").value, "150", "Expected yPosition to have value 150 in Sprite Stern");
  await t.runForSteps(32);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Stern").getClone(4).currentCostume, 0, "Expected Clone 4 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).currentCostume, 0, "Expected Clone 5 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).currentCostume, 0, "Expected Clone 6 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 6, "Expected Sprite Stern to have 6 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 100, 1, "Expected Sprite Schwarzes Loch to face in direction 100 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(4).direction, 90, 1, "Expected Clone 4 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(5).direction, 90, 1, "Expected Clone 5 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(6).direction, 90, 1, "Expected Clone 6 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.color, 0, "Expected effect color of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.fisheye, 0, "Expected effect fisheye of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.whirl, 0, "Expected effect whirl of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.pixelate, 0, "Expected effect pixelate of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.mosaic, 0, "Expected effect mosaic of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.brightness, 0, "Expected effect brightness of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.ghost, 0, "Expected effect ghost of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.color, 0, "Expected effect color of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.fisheye, 0, "Expected effect fisheye of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.whirl, 0, "Expected effect whirl of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.pixelate, 0, "Expected effect pixelate of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.mosaic, 0, "Expected effect mosaic of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.brightness, 0, "Expected effect brightness of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.ghost, 0, "Expected effect ghost of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.color, 0, "Expected effect color of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.fisheye, 0, "Expected effect fisheye of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.whirl, 0, "Expected effect whirl of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.pixelate, 0, "Expected effect pixelate of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.mosaic, 0, "Expected effect mosaic of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.brightness, 0, "Expected effect brightness of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.ghost, 0, "Expected effect ghost of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 10, "Expected Sprite Raumschiff to be at layer 10");
  t.assert.equal(t.getSprite("Stern").layerOrder, 9, "Expected Sprite Stern to be at layer 9");
  t.assert.equal(t.getSprite("Stern").getClone(4).getLayerOrder(), 6, "Expected Clone 4 of Stern to be at layer 6");
  t.assert.equal(t.getSprite("Stern").getClone(5).getLayerOrder(), 7, "Expected Clone 5 of Stern to be at layer 7");
  t.assert.equal(t.getSprite("Stern").getClone(6).getLayerOrder(), 8, "Expected Clone 6 of Stern to be at layer 8");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 159.96831611101265, 5, "Expected Sprite Raumschiff to have x-position 159.96831611101265 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 78.88221466098733, 5, "Expected Sprite Raumschiff to have y-position 78.88221466098733 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, -5, 5, "Expected Sprite Schwarzes Loch to have x-position -5 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -70, 5, "Expected Sprite Schwarzes Loch to have y-position -70 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 137.6, 5, "Expected Clone 1 of Stern to have x-position 137.6 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 29.6, 5, "Expected Clone 1 of Stern to have y-position 29.6 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 141.16666666666666, 5, "Expected Clone 2 of Stern to have x-position 141.16666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 12.416666666666666, 5, "Expected Clone 2 of Stern to have y-position 12.416666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 136.03333333333333, 5, "Expected Clone 3 of Stern to have x-position 136.03333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 24.53333333333333, 5, "Expected Clone 3 of Stern to have y-position 24.53333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -203.06666666666666, 5, "Expected Clone 4 of Stern to have x-position -203.06666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 160.13333333333333, 5, "Expected Clone 4 of Stern to have y-position 160.13333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -204.31666666666666, 5, "Expected Clone 5 of Stern to have x-position -204.31666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 153.61666666666667, 5, "Expected Clone 5 of Stern to have y-position 153.61666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).x, -210, 5, "Expected Clone 6 of Stern to have x-position -210 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).y, 153.5, 5, "Expected Clone 6 of Stern to have y-position 153.5 +-5");
  t.assert.not(t.getSprite("Stern").getClone(4).sayText, "Expected Clone 4 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(5).sayText, "Expected Clone 5 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(6).sayText, "Expected Clone 6 of Stern not to say anything");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).size, 50, 1, "Expected Clone 4 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).size, 50, 1, "Expected Clone 5 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).size, 50, 1, "Expected Clone 6 of Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Stern").getClone(4).visible, "Expected Clone 4 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(5).visible, "Expected Clone 5 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(6).visible, "Expected Clone 6 of Stern to be visible");
  t.assert.equal(t.getSprite("Stern").getClone(4).volume, 100, "Expected Clone 4 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(5).volume, 100, "Expected Clone 5 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(6).volume, 100, "Expected Clone 6 of Stern to have volume 100");
  await t.runForSteps(5);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 160, 1, "Expected Sprite Schwarzes Loch to face in direction 160 +-1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 161.52123038162773, 5, "Expected Sprite Raumschiff to have x-position 161.52123038162773 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 84.67776961872173, 5, "Expected Sprite Raumschiff to have y-position 84.67776961872173 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, 18.496789151940366, 5, "Expected Sprite Schwarzes Loch to have x-position 18.496789151940366 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -86.45262888791278, 5, "Expected Sprite Schwarzes Loch to have y-position -86.45262888791278 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 137.2, 5, "Expected Clone 1 of Stern to have x-position 137.2 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 31.2, 5, "Expected Clone 1 of Stern to have y-position 31.2 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 141.36666666666667, 5, "Expected Clone 2 of Stern to have x-position 141.36666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 11.116666666666667, 5, "Expected Clone 2 of Stern to have y-position 11.116666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 135.33333333333334, 5, "Expected Clone 3 of Stern to have x-position 135.33333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 25.333333333333332, 5, "Expected Clone 3 of Stern to have y-position 25.333333333333332 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -201.76666666666668, 5, "Expected Clone 4 of Stern to have x-position -201.76666666666668 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 162.03333333333333, 5, "Expected Clone 4 of Stern to have y-position 162.03333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -203.21666666666667, 5, "Expected Clone 5 of Stern to have x-position -203.21666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 154.31666666666666, 5, "Expected Clone 5 of Stern to have y-position 154.31666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).x, -210, 5, "Expected Clone 6 of Stern to have x-position -210 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).y, 154.2, 5, "Expected Clone 6 of Stern to have y-position 154.2 +-5");
  t.keyPress('right arrow', 3);
  await t.runForSteps(3);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Raumschiff").direction, 60, 1, "Expected Sprite Raumschiff to face in direction 60 +-1");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, -160, 1, "Expected Sprite Schwarzes Loch to face in direction -160 +-1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 163.85318161170125, 5, "Expected Sprite Raumschiff to have x-position 163.85318161170125 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 87.71682762998178, 5, "Expected Sprite Raumschiff to have y-position 87.71682762998178 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, 20.20688986856871, 5, "Expected Sprite Schwarzes Loch to have x-position 20.20688986856871 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -105.9991695219644, 5, "Expected Sprite Schwarzes Loch to have y-position -105.9991695219644 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 136.93333333333334, 5, "Expected Clone 1 of Stern to have x-position 136.93333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 32.266666666666666, 5, "Expected Clone 1 of Stern to have y-position 32.266666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 141.5, 5, "Expected Clone 2 of Stern to have x-position 141.5 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 10.25, 5, "Expected Clone 2 of Stern to have y-position 10.25 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 134.86666666666667, 5, "Expected Clone 3 of Stern to have x-position 134.86666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 25.866666666666667, 5, "Expected Clone 3 of Stern to have y-position 25.866666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -200.9, 5, "Expected Clone 4 of Stern to have x-position -200.9 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 163.3, 5, "Expected Clone 4 of Stern to have y-position 163.3 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -202.48333333333332, 5, "Expected Clone 5 of Stern to have x-position -202.48333333333332 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 154.78333333333333, 5, "Expected Clone 5 of Stern to have y-position 154.78333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).x, -210, 5, "Expected Clone 6 of Stern to have x-position -210 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).y, 154.66666666666666, 5, "Expected Clone 6 of Stern to have y-position 154.66666666666666 +-5");
  t.dragSprite('Raumschiff', -89.23695863939811, -94.30743514383276, null);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, -150, 1, "Expected Sprite Schwarzes Loch to face in direction -150 +-1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -88.37093323561368, 5, "Expected Sprite Raumschiff to have x-position -88.37093323561368 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -93.80743514383276, 5, "Expected Sprite Raumschiff to have y-position -93.80743514383276 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, 18.496789151940362, 5, "Expected Sprite Schwarzes Loch to have x-position 18.496789151940362 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -110.69763262589395, 5, "Expected Sprite Schwarzes Loch to have y-position -110.69763262589395 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 136.86666666666667, 5, "Expected Clone 1 of Stern to have x-position 136.86666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 32.53333333333333, 5, "Expected Clone 1 of Stern to have y-position 32.53333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 141.53333333333333, 5, "Expected Clone 2 of Stern to have x-position 141.53333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 10.033333333333333, 5, "Expected Clone 2 of Stern to have y-position 10.033333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 134.75, 5, "Expected Clone 3 of Stern to have x-position 134.75 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 26, 5, "Expected Clone 3 of Stern to have y-position 26 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -200.68333333333334, 5, "Expected Clone 4 of Stern to have x-position -200.68333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 163.61666666666667, 5, "Expected Clone 4 of Stern to have y-position 163.61666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -202.3, 5, "Expected Clone 5 of Stern to have x-position -202.3 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 154.9, 5, "Expected Clone 5 of Stern to have y-position 154.9 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).x, -210, 5, "Expected Clone 6 of Stern to have x-position -210 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).y, 154.78333333333333, 5, "Expected Clone 6 of Stern to have y-position 154.78333333333333 +-5");
  t.keyPress('right arrow', 4);
  await t.runForSteps(4);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Raumschiff").direction, 120, 1, "Expected Sprite Raumschiff to face in direction 120 +-1");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, -100, 1, "Expected Sprite Schwarzes Loch to face in direction -100 +-1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -83.70703077546668, 5, "Expected Sprite Raumschiff to have x-position -83.70703077546668 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -93.80743514383276, 5, "Expected Sprite Raumschiff to have y-position -93.80743514383276 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, -0.07596123493896201, 5, "Expected Sprite Schwarzes Loch to have x-position -0.07596123493896201 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -126.28202062547207, 5, "Expected Sprite Schwarzes Loch to have y-position -126.28202062547207 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 136.53333333333333, 5, "Expected Clone 1 of Stern to have x-position 136.53333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 33.86666666666667, 5, "Expected Clone 1 of Stern to have y-position 33.86666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 141.7, 5, "Expected Clone 2 of Stern to have x-position 141.7 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 8.950000000000001, 5, "Expected Clone 2 of Stern to have y-position 8.950000000000001 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 134.16666666666666, 5, "Expected Clone 3 of Stern to have x-position 134.16666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 26.666666666666668, 5, "Expected Clone 3 of Stern to have y-position 26.666666666666668 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -199.6, 5, "Expected Clone 4 of Stern to have x-position -199.6 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 165.2, 5, "Expected Clone 4 of Stern to have y-position 165.2 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -201.38333333333333, 5, "Expected Clone 5 of Stern to have x-position -201.38333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 155.48333333333332, 5, "Expected Clone 5 of Stern to have y-position 155.48333333333332 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).x, -210, 5, "Expected Clone 6 of Stern to have x-position -210 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).y, 155.36666666666667, 5, "Expected Clone 6 of Stern to have y-position 155.36666666666667 +-5");
  t.keyPress('right arrow', 2);
  await t.runForSteps(2);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Raumschiff").direction, 150, 1, "Expected Sprite Raumschiff to face in direction 150 +-1");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, -70, 1, "Expected Sprite Schwarzes Loch to face in direction -70 +-1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -81.63389859049569, 5, "Expected Sprite Raumschiff to have x-position -81.63389859049569 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -95.88056732880375, 5, "Expected Sprite Raumschiff to have y-position -95.88056732880375 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, -14.924038765061042, 5, "Expected Sprite Schwarzes Loch to have x-position -14.924038765061042 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -126.28202062547207, 5, "Expected Sprite Schwarzes Loch to have y-position -126.28202062547207 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 136.33333333333334, 5, "Expected Clone 1 of Stern to have x-position 136.33333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 34.666666666666664, 5, "Expected Clone 1 of Stern to have y-position 34.666666666666664 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 141.8, 5, "Expected Clone 2 of Stern to have x-position 141.8 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 8.299999999999999, 5, "Expected Clone 2 of Stern to have y-position 8.299999999999999 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 133.81666666666666, 5, "Expected Clone 3 of Stern to have x-position 133.81666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 27.066666666666666, 5, "Expected Clone 3 of Stern to have y-position 27.066666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -198.95, 5, "Expected Clone 4 of Stern to have x-position -198.95 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 166.15, 5, "Expected Clone 4 of Stern to have y-position 166.15 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -200.83333333333334, 5, "Expected Clone 5 of Stern to have x-position -200.83333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 155.83333333333334, 5, "Expected Clone 5 of Stern to have y-position 155.83333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).x, -210, 5, "Expected Clone 6 of Stern to have x-position -210 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).y, 155.71666666666667, 5, "Expected Clone 6 of Stern to have y-position 155.71666666666667 +-5");
  t.dragSprite('Raumschiff', 240, -180, null);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, -60, 1, "Expected Sprite Schwarzes Loch to face in direction -60 +-1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 240.5, 5, "Expected Sprite Raumschiff to have x-position 240.5 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -180.86602540378445, 5, "Expected Sprite Raumschiff to have y-position -180.86602540378445 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, -19.622501868990582, 5, "Expected Sprite Schwarzes Loch to have x-position -19.622501868990582 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -124.57191990884373, 5, "Expected Sprite Schwarzes Loch to have y-position -124.57191990884373 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 136.26666666666668, 5, "Expected Clone 1 of Stern to have x-position 136.26666666666668 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 34.93333333333334, 5, "Expected Clone 1 of Stern to have y-position 34.93333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 141.83333333333334, 5, "Expected Clone 2 of Stern to have x-position 141.83333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 8.083333333333334, 5, "Expected Clone 2 of Stern to have y-position 8.083333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 133.7, 5, "Expected Clone 3 of Stern to have x-position 133.7 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 27.2, 5, "Expected Clone 3 of Stern to have y-position 27.2 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -198.73333333333332, 5, "Expected Clone 4 of Stern to have x-position -198.73333333333332 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 166.46666666666667, 5, "Expected Clone 4 of Stern to have y-position 166.46666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -200.65, 5, "Expected Clone 5 of Stern to have x-position -200.65 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 155.95, 5, "Expected Clone 5 of Stern to have y-position 155.95 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).x, -210, 5, "Expected Clone 6 of Stern to have x-position -210 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).y, 155.83333333333334, 5, "Expected Clone 6 of Stern to have y-position 155.83333333333334 +-5");
  t.assert.equal(t.getSprite("Raumschiff").sayText, "Überstanden!", "Expected Sprite Raumschiff to say Überstanden!");
  await t.runForSteps(59);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 180, 1, "Expected Sprite Schwarzes Loch to face in direction 180 +-1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 260, 5, "Expected Sprite Raumschiff to have x-position 260 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -197, 5, "Expected Sprite Raumschiff to have y-position -197 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, 21.07513075690336, 5, "Expected Sprite Schwarzes Loch to have x-position 21.07513075690336 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -96.07513075690336, 5, "Expected Sprite Schwarzes Loch to have y-position -96.07513075690336 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 151.58333333333334, 5, "Expected Clone 1 of Stern to have x-position 151.58333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 34.166666666666664, 5, "Expected Clone 1 of Stern to have y-position 34.166666666666664 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 138.4, 5, "Expected Clone 2 of Stern to have x-position 138.4 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 24.1, 5, "Expected Clone 2 of Stern to have y-position 24.1 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 134.76666666666668, 5, "Expected Clone 3 of Stern to have x-position 134.76666666666668 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 21.816666666666666, 5, "Expected Clone 3 of Stern to have y-position 21.816666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -214, 5, "Expected Clone 4 of Stern to have x-position -214 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 137.55, 5, "Expected Clone 4 of Stern to have y-position 137.55 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -213.16666666666666, 5, "Expected Clone 5 of Stern to have x-position -213.16666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 152, 5, "Expected Clone 5 of Stern to have y-position 152 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).x, -225.51666666666665, 5, "Expected Clone 6 of Stern to have x-position -225.51666666666665 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).y, 152.1, 5, "Expected Clone 6 of Stern to have y-position 152.1 +-5");
  await t.runForSteps(100);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, -80, 1, "Expected Sprite Schwarzes Loch to face in direction -80 +-1");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 4, "Expected Sprite Raumschiff to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 3, "Expected Sprite Stern to be at layer 3");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, -10.000000000000002, 5, "Expected Sprite Schwarzes Loch to have x-position -10.000000000000002 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -127.15026151380673, 5, "Expected Sprite Schwarzes Loch to have y-position -127.15026151380673 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.end();
}
const test1 = async function (t) {
  t.dragSprite('Raumschiff', 104, 44, null);
  await t.runForSteps(1);
  t.dragSprite('Raumschiff', -116.27101203405113, -120.37497269039156, null);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Stern").getClone(2).currentCostume, 0, "Expected Clone 2 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 2, "Expected Sprite Stern to have 2 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 110, 1, "Expected Sprite Schwarzes Loch to face in direction 110 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(2).direction, 90, 1, "Expected Clone 2 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 6, "Expected Sprite Raumschiff to be at layer 6");
  t.assert.equal(t.getSprite("Stern").layerOrder, 5, "Expected Sprite Stern to be at layer 5");
  t.assert.equal(t.getSprite("Stern").getClone(2).getLayerOrder(), 4, "Expected Clone 2 of Stern to be at layer 4");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -116.52983107915365, 5, "Expected Sprite Raumschiff to have x-position -116.52983107915365 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -119.40904686410249, 5, "Expected Sprite Raumschiff to have y-position -119.40904686410249 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, -0.07596123493896023, 5, "Expected Sprite Schwarzes Loch to have x-position -0.07596123493896023 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -70.86824088833465, 5, "Expected Sprite Schwarzes Loch to have y-position -70.86824088833465 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 139.93333333333334, 5, "Expected Clone 1 of Stern to have x-position 139.93333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 20.266666666666666, 5, "Expected Clone 1 of Stern to have y-position 20.266666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 140, 5, "Expected Clone 2 of Stern to have x-position 140 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 20, 5, "Expected Clone 2 of Stern to have y-position 20 +-5");
  t.assert.not(t.getSprite("Stern").getClone(2).sayText, "Expected Clone 2 of Stern not to say anything");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).size, 50, 1, "Expected Clone 2 of Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Stern").getClone(2).visible, "Expected Clone 2 of Stern to be visible");
  t.assert.equal(t.getSprite("Stern").getClone(2).volume, 100, "Expected Clone 2 of Stern to have volume 100");
  t.dragSprite('Raumschiff', 309, -217, null);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Stern").getClone(3).currentCostume, 0, "Expected Clone 3 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 3, "Expected Sprite Stern to have 3 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 120, 1, "Expected Sprite Schwarzes Loch to face in direction 120 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(3).direction, 90, 1, "Expected Clone 3 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 7, "Expected Sprite Raumschiff to be at layer 7");
  t.assert.equal(t.getSprite("Stern").layerOrder, 6, "Expected Sprite Stern to be at layer 6");
  t.assert.equal(t.getSprite("Stern").getClone(3).getLayerOrder(), 5, "Expected Clone 3 of Stern to be at layer 5");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 245.7411809548975, 5, "Expected Sprite Raumschiff to have x-position 245.7411809548975 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -199.03407417371093, 5, "Expected Sprite Raumschiff to have y-position -199.03407417371093 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, 4.622501868990582, 5, "Expected Sprite Schwarzes Loch to have x-position 4.622501868990582 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -72.578341604963, 5, "Expected Sprite Schwarzes Loch to have y-position -72.578341604963 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 139.86666666666667, 5, "Expected Clone 1 of Stern to have x-position 139.86666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 20.533333333333335, 5, "Expected Clone 1 of Stern to have y-position 20.533333333333335 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 140.03333333333333, 5, "Expected Clone 2 of Stern to have x-position 140.03333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 19.783333333333335, 5, "Expected Clone 2 of Stern to have y-position 19.783333333333335 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 140, 5, "Expected Clone 3 of Stern to have x-position 140 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 20, 5, "Expected Clone 3 of Stern to have y-position 20 +-5");
  t.assert.not(t.getSprite("Stern").getClone(3).sayText, "Expected Clone 3 of Stern not to say anything");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).size, 50, 1, "Expected Clone 3 of Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Stern").getClone(3).visible, "Expected Clone 3 of Stern to be visible");
  t.assert.equal(t.getSprite("Stern").getClone(3).volume, 100, "Expected Clone 3 of Stern to have volume 100");
  t.dragSprite('Raumschiff', -105.26572444031656, -24.000177470085454, null);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 130, 1, "Expected Sprite Schwarzes Loch to face in direction 130 +-1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -105.52454348541909, 5, "Expected Sprite Raumschiff to have x-position -105.52454348541909 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -23.034251643796384, 5, "Expected Sprite Raumschiff to have y-position -23.034251643796384 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, 8.952628887912777, 5, "Expected Sprite Schwarzes Loch to have x-position 8.952628887912777 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -75.078341604963, 5, "Expected Sprite Schwarzes Loch to have y-position -75.078341604963 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 139.8, 5, "Expected Clone 1 of Stern to have x-position 139.8 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 20.8, 5, "Expected Clone 1 of Stern to have y-position 20.8 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 140.06666666666666, 5, "Expected Clone 2 of Stern to have x-position 140.06666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 19.566666666666666, 5, "Expected Clone 2 of Stern to have y-position 19.566666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 139.88333333333333, 5, "Expected Clone 3 of Stern to have x-position 139.88333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 20.133333333333333, 5, "Expected Clone 3 of Stern to have y-position 20.133333333333333 +-5");
  t.assert.equal(t.getSprite("Stern").getVariable("xPosition").value, "-210", "Expected xPosition to have value -210 in Sprite Stern");
  t.assert.equal(t.getSprite("Stern").getVariable("yPosition").value, "150", "Expected yPosition to have value 150 in Sprite Stern");
  t.keyPress('right arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Stern").getClone(4).currentCostume, 0, "Expected Clone 4 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).currentCostume, 0, "Expected Clone 5 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 5, "Expected Sprite Stern to have 5 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 0, 1, "Expected Sprite Raumschiff to face in direction 0 +-1");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 150, 1, "Expected Sprite Schwarzes Loch to face in direction 150 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(4).direction, 90, 1, "Expected Clone 4 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(5).direction, 90, 1, "Expected Clone 5 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.color, 0, "Expected effect color of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.fisheye, 0, "Expected effect fisheye of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.whirl, 0, "Expected effect whirl of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.pixelate, 0, "Expected effect pixelate of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.mosaic, 0, "Expected effect mosaic of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.brightness, 0, "Expected effect brightness of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.ghost, 0, "Expected effect ghost of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.color, 0, "Expected effect color of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.fisheye, 0, "Expected effect fisheye of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.whirl, 0, "Expected effect whirl of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.pixelate, 0, "Expected effect pixelate of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.mosaic, 0, "Expected effect mosaic of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.brightness, 0, "Expected effect brightness of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.ghost, 0, "Expected effect ghost of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 9, "Expected Sprite Raumschiff to be at layer 9");
  t.assert.equal(t.getSprite("Stern").layerOrder, 8, "Expected Sprite Stern to be at layer 8");
  t.assert.equal(t.getSprite("Stern").getClone(4).getLayerOrder(), 6, "Expected Clone 4 of Stern to be at layer 6");
  t.assert.equal(t.getSprite("Stern").getClone(5).getLayerOrder(), 7, "Expected Clone 5 of Stern to be at layer 7");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -105.78336253052161, 5, "Expected Sprite Raumschiff to have x-position -105.78336253052161 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -21.068325817507315, 5, "Expected Sprite Raumschiff to have y-position -21.068325817507315 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, 15.996789151940364, 5, "Expected Sprite Schwarzes Loch to have x-position 15.996789151940364 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -82.12250186899058, 5, "Expected Sprite Schwarzes Loch to have y-position -82.12250186899058 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 139.66666666666666, 5, "Expected Clone 1 of Stern to have x-position 139.66666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 21.333333333333332, 5, "Expected Clone 1 of Stern to have y-position 21.333333333333332 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 140.13333333333333, 5, "Expected Clone 2 of Stern to have x-position 140.13333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 19.133333333333333, 5, "Expected Clone 2 of Stern to have y-position 19.133333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 139.65, 5, "Expected Clone 3 of Stern to have x-position 139.65 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 20.4, 5, "Expected Clone 3 of Stern to have y-position 20.4 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -209.78333333333333, 5, "Expected Clone 4 of Stern to have x-position -209.78333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 150.31666666666666, 5, "Expected Clone 4 of Stern to have y-position 150.31666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -210, 5, "Expected Clone 5 of Stern to have x-position -210 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 150, 5, "Expected Clone 5 of Stern to have y-position 150 +-5");
  t.assert.not(t.getSprite("Stern").getClone(4).sayText, "Expected Clone 4 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(5).sayText, "Expected Clone 5 of Stern not to say anything");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).size, 50, 1, "Expected Clone 4 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).size, 50, 1, "Expected Clone 5 of Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Stern").getClone(4).visible, "Expected Clone 4 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(5).visible, "Expected Clone 5 of Stern to be visible");
  t.assert.equal(t.getSprite("Stern").getClone(4).volume, 100, "Expected Clone 4 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(5).volume, 100, "Expected Clone 5 of Stern to have volume 100");
  await t.runForSteps(5);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Stern").getClone(6).currentCostume, 0, "Expected Clone 6 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 6, "Expected Sprite Stern to have 6 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, -150, 1, "Expected Sprite Schwarzes Loch to face in direction -150 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(6).direction, 90, 1, "Expected Clone 6 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.color, 0, "Expected effect color of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.fisheye, 0, "Expected effect fisheye of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.whirl, 0, "Expected effect whirl of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.pixelate, 0, "Expected effect pixelate of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.mosaic, 0, "Expected effect mosaic of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.brightness, 0, "Expected effect brightness of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.ghost, 0, "Expected effect ghost of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 10, "Expected Sprite Raumschiff to be at layer 10");
  t.assert.equal(t.getSprite("Stern").layerOrder, 9, "Expected Sprite Stern to be at layer 9");
  t.assert.equal(t.getSprite("Stern").getClone(6).getLayerOrder(), 8, "Expected Clone 6 of Stern to be at layer 8");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -105.78336253052161, 5, "Expected Sprite Raumschiff to have x-position -105.78336253052161 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -15.068325817507315, 5, "Expected Sprite Raumschiff to have y-position -15.068325817507315 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, 18.496789151940362, 5, "Expected Sprite Schwarzes Loch to have x-position 18.496789151940362 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -110.69763262589395, 5, "Expected Sprite Schwarzes Loch to have y-position -110.69763262589395 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 139.26666666666668, 5, "Expected Clone 1 of Stern to have x-position 139.26666666666668 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 22.933333333333334, 5, "Expected Clone 1 of Stern to have y-position 22.933333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 140.33333333333334, 5, "Expected Clone 2 of Stern to have x-position 140.33333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 17.833333333333332, 5, "Expected Clone 2 of Stern to have y-position 17.833333333333332 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 138.95, 5, "Expected Clone 3 of Stern to have x-position 138.95 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 21.2, 5, "Expected Clone 3 of Stern to have y-position 21.2 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -208.48333333333332, 5, "Expected Clone 4 of Stern to have x-position -208.48333333333332 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 152.21666666666667, 5, "Expected Clone 4 of Stern to have y-position 152.21666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -208.9, 5, "Expected Clone 5 of Stern to have x-position -208.9 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 150.7, 5, "Expected Clone 5 of Stern to have y-position 150.7 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).x, -210, 5, "Expected Clone 6 of Stern to have x-position -210 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).y, 150.58333333333334, 5, "Expected Clone 6 of Stern to have y-position 150.58333333333334 +-5");
  t.assert.not(t.getSprite("Stern").getClone(6).sayText, "Expected Clone 6 of Stern not to say anything");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).size, 50, 1, "Expected Clone 6 of Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Stern").getClone(6).visible, "Expected Clone 6 of Stern to be visible");
  t.assert.equal(t.getSprite("Stern").getClone(6).volume, 100, "Expected Clone 6 of Stern to have volume 100");
  await t.runForSteps(50);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 80, 1, "Expected Sprite Schwarzes Loch to face in direction 80 +-1");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 4, "Expected Sprite Raumschiff to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 3, "Expected Sprite Stern to be at layer 3");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -105.78336253052161, 5, "Expected Sprite Raumschiff to have x-position -105.78336253052161 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 7.931674182492685, 5, "Expected Sprite Raumschiff to have y-position 7.931674182492685 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, -14.92403876506104, 5, "Expected Sprite Schwarzes Loch to have x-position -14.92403876506104 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -70.86824088833465, 5, "Expected Sprite Schwarzes Loch to have y-position -70.86824088833465 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 5, 1, "Expected Sprite Raumschiff to have size 5 +-1");
  t.end();
}

module.exports = [
  {
      test: test0,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687939165331',
      type: 'standard',
  },
  {
      test: test1,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687939165331',
      type: 'standard',
  }
]
