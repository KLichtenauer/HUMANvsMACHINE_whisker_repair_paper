const test0 = async function (t) {
  await t.runForSteps(57);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 130.36453657309733, 1, "Expected Sprite Raumschiff to face in direction 130.36453657309733 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -111.61503913990303, 5, "Expected Sprite Raumschiff to have x-position -111.61503913990303 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 94.87278326891752, 5, "Expected Sprite Raumschiff to have y-position 94.87278326891752 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, -49.66666666666666, 5, "Expected Sprite Großes Schwarzes Loch to have x-position -49.66666666666666 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, 6.666666666666671, 5, "Expected Sprite Großes Schwarzes Loch to have y-position 6.666666666666671 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 126.7, 5, "Expected Sprite Stern to have x-position 126.7 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 72.69999999999999, 5, "Expected Sprite Stern to have y-position 72.69999999999999 +-5");
  t.assert.equal(t.getSprite("Raumschiff").sayText, "Hilfe!", "Expected Sprite Raumschiff to say Hilfe!");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.dragSprite('Raumschiff', 119, 154, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, -142.30575953331083, 1, "Expected Sprite Raumschiff to face in direction -142.30575953331083 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 117.77710499784847, 5, "Expected Sprite Raumschiff to have x-position 117.77710499784847 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 152.41742999721566, 5, "Expected Sprite Raumschiff to have y-position 152.41742999721566 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, -50.8888888888889, 5, "Expected Sprite Großes Schwarzes Loch to have x-position -50.8888888888889 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, 5.555555555555557, 5, "Expected Sprite Großes Schwarzes Loch to have y-position 5.555555555555557 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 140.23333333333332, 5, "Expected Sprite Stern to have x-position 140.23333333333332 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 8.9, 5, "Expected Sprite Stern to have y-position 8.9 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch not to be visible");
  t.assert.not(t.getSprite("Stern").visible, "Expected Sprite Stern not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.end();
}
const test1 = async function (t) {
  t.mouseMove(-148, -176);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 171.4530399926558, 1, "Expected Sprite Raumschiff to face in direction 171.4530399926558 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -199.70276006906914, 5, "Expected Sprite Raumschiff to have x-position -199.70276006906914 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 168.0222112288062, 5, "Expected Sprite Raumschiff to have y-position 168.0222112288062 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, 20, 5, "Expected Sprite Großes Schwarzes Loch to have x-position 20 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, 70, 5, "Expected Sprite Großes Schwarzes Loch to have y-position 70 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 140, 5, "Expected Sprite Stern to have x-position 140 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 10, 5, "Expected Sprite Stern to have y-position 10 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  await t.runForSteps(85);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 171.45303999265576, 1, "Expected Sprite Raumschiff to face in direction 171.45303999265576 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -174.14012600901543, 5, "Expected Sprite Raumschiff to have x-position -174.14012600901543 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -2.067623093859374, 5, "Expected Sprite Raumschiff to have y-position -2.067623093859374 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, -85.11111111111111, 5, "Expected Sprite Großes Schwarzes Loch to have x-position -85.11111111111111 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, -25.555555555555557, 5, "Expected Sprite Großes Schwarzes Loch to have y-position -25.555555555555557 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 55.16666666666666, 5, "Expected Sprite Stern to have x-position 55.16666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 12.25, 5, "Expected Sprite Stern to have y-position 12.25 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  await t.runForSteps(74);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 171.45303999265576, 1, "Expected Sprite Raumschiff to face in direction 171.45303999265576 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -166.1146478738823, 5, "Expected Sprite Raumschiff to have x-position -166.1146478738823 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -55.46791991609157, 5, "Expected Sprite Raumschiff to have y-position -55.46791991609157 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, -41.44444444444445, 5, "Expected Sprite Großes Schwarzes Loch to have x-position -41.44444444444445 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, -19.77777777777778, 5, "Expected Sprite Großes Schwarzes Loch to have y-position -19.77777777777778 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 239, 5, "Expected Sprite Stern to have x-position 239 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 179, 5, "Expected Sprite Stern to have y-position 179 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.not(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff not to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.end();
}
const test2 = async function (t) {
  t.mouseMove(217, 39);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 107.44004252914202, 1, "Expected Sprite Raumschiff to face in direction 107.44004252914202 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -198.09193779266204, 5, "Expected Sprite Raumschiff to have x-position -198.09193779266204 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 169.4005847741936, 5, "Expected Sprite Raumschiff to have y-position 169.4005847741936 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, 20, 5, "Expected Sprite Großes Schwarzes Loch to have x-position 20 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, 70, 5, "Expected Sprite Großes Schwarzes Loch to have y-position 70 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 140, 5, "Expected Sprite Stern to have x-position 140 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 10, 5, "Expected Sprite Stern to have y-position 10 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.dragSprite('Stern', -198, 169, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 107.44004252914202, 1, "Expected Sprite Raumschiff to face in direction 107.44004252914202 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -196.18387558532407, 5, "Expected Sprite Raumschiff to have x-position -196.18387558532407 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 168.80116954838718, 5, "Expected Sprite Raumschiff to have y-position 168.80116954838718 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, 18.77777777777778, 5, "Expected Sprite Großes Schwarzes Loch to have x-position 18.77777777777778 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, 68.88888888888889, 5, "Expected Sprite Großes Schwarzes Loch to have y-position 68.88888888888889 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -192.6, 5, "Expected Sprite Stern to have x-position -192.6 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 167.45, 5, "Expected Sprite Stern to have y-position 167.45 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.equal(t.getSprite("Stern").sayText, "Du schaffst das!", "Expected Sprite Stern to say Du schaffst das!");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  await t.runForSteps(28);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 107.44004252914202, 1, "Expected Sprite Raumschiff to face in direction 107.44004252914202 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -140.85007157252315, 5, "Expected Sprite Raumschiff to have x-position -140.85007157252315 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 151.41812800000127, 5, "Expected Sprite Raumschiff to have y-position 151.41812800000127 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, -16.666666666666664, 5, "Expected Sprite Großes Schwarzes Loch to have x-position -16.666666666666664 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, 36.66666666666667, 5, "Expected Sprite Großes Schwarzes Loch to have y-position 36.66666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -36, 5, "Expected Sprite Stern to have x-position -36 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 122.5, 5, "Expected Sprite Stern to have y-position 122.5 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.equal(t.getSprite("Stern").sayText, "Du schaffst das!", "Expected Sprite Stern to say Du schaffst das!");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.dragSprite('Raumschiff', -156.99064694689775, 50.09516785978733, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 91.69929353531401, 1, "Expected Sprite Raumschiff to face in direction 91.69929353531401 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -154.9915264952334, 5, "Expected Sprite Raumschiff to have x-position -154.9915264952334 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 50.03586002103729, 5, "Expected Sprite Raumschiff to have y-position 50.03586002103729 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, -17.888888888888886, 5, "Expected Sprite Großes Schwarzes Loch to have x-position -17.888888888888886 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, 35.55555555555556, 5, "Expected Sprite Großes Schwarzes Loch to have y-position 35.55555555555556 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -30.599999999999994, 5, "Expected Sprite Stern to have x-position -30.599999999999994 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 120.94999999999999, 5, "Expected Sprite Stern to have y-position 120.94999999999999 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.not(t.getSprite("Stern").visible, "Expected Sprite Stern not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.end();
}

module.exports = [
  {
      test: test0,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687939357866',
      type: 'standard',
  },
  {
      test: test1,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687939357866',
      type: 'standard',
  },
  {
      test: test2,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687939357866',
      type: 'standard',
  }
]
