const test0 = async function (t) {
  t.dragSprite('Qualle', -142.4303729169093, -167.00000000000003, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, 148.25471257764477, 1, "Expected Sprite Fisch to face in direction 148.25471257764477 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 90, 1, "Expected Sprite Kugelfisch to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, -49.90429975096373, 1, "Expected Sprite Qualle to face in direction -49.90429975096373 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, -189, 5, "Expected Sprite Fisch to have x-position -189 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, -128, 5, "Expected Sprite Fisch to have y-position -128 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -15, 5, "Expected Sprite Stern to have x-position -15 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, -98, 5, "Expected Sprite Stern to have y-position -98 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, -143, 5, "Expected Sprite Kugelfisch to have x-position -143 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, 80, 5, "Expected Sprite Kugelfisch to have y-position 80 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, 50, 5, "Expected Sprite Qualle to have x-position 50 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, 72, 5, "Expected Sprite Qualle to have y-position 72 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 60, 1, "Expected Sprite Kugelfisch to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  t.dragSprite('Kugelfisch', -158.34327090641108, -64.37718920127938, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, 148.25471257764477, 1, "Expected Sprite Fisch to face in direction 148.25471257764477 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 90, 1, "Expected Sprite Kugelfisch to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, -49.90429975096373, 1, "Expected Sprite Qualle to face in direction -49.90429975096373 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, -189, 5, "Expected Sprite Fisch to have x-position -189 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, -128, 5, "Expected Sprite Fisch to have y-position -128 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -15, 5, "Expected Sprite Stern to have x-position -15 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, -98, 5, "Expected Sprite Stern to have y-position -98 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, -156.34327090641108, 5, "Expected Sprite Kugelfisch to have x-position -156.34327090641108 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, -64.37718920127938, 5, "Expected Sprite Kugelfisch to have y-position -64.37718920127938 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, 50, 5, "Expected Sprite Qualle to have x-position 50 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, 72, 5, "Expected Sprite Qualle to have y-position 72 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 60, 1, "Expected Sprite Kugelfisch to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  t.dragSprite('Qualle', -148.41626705934516, -179.17260426125958, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, 148.25471257764477, 1, "Expected Sprite Fisch to face in direction 148.25471257764477 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 90, 1, "Expected Sprite Kugelfisch to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, -49.90429975096373, 1, "Expected Sprite Qualle to face in direction -49.90429975096373 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, -189, 5, "Expected Sprite Fisch to have x-position -189 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, -128, 5, "Expected Sprite Fisch to have y-position -128 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -15, 5, "Expected Sprite Stern to have x-position -15 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, -98, 5, "Expected Sprite Stern to have y-position -98 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, -154.34327090641108, 5, "Expected Sprite Kugelfisch to have x-position -154.34327090641108 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, -64.37718920127938, 5, "Expected Sprite Kugelfisch to have y-position -64.37718920127938 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, -148.41626705934516, 5, "Expected Sprite Qualle to have x-position -148.41626705934516 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, -179.17260426125958, 5, "Expected Sprite Qualle to have y-position -179.17260426125958 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 60, 1, "Expected Sprite Kugelfisch to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  t.dragSprite('Stern', -160.8346900727604, -142.78835422775555, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, 148.25471257764477, 1, "Expected Sprite Fisch to face in direction 148.25471257764477 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 90, 1, "Expected Sprite Kugelfisch to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, -49.90429975096373, 1, "Expected Sprite Qualle to face in direction -49.90429975096373 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, -189, 5, "Expected Sprite Fisch to have x-position -189 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, -128, 5, "Expected Sprite Fisch to have y-position -128 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -10, 5, "Expected Sprite Stern to have x-position -10 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, -150, 5, "Expected Sprite Stern to have y-position -150 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, -152.34327090641108, 5, "Expected Sprite Kugelfisch to have x-position -152.34327090641108 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, -64.37718920127938, 5, "Expected Sprite Kugelfisch to have y-position -64.37718920127938 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, -148.41626705934516, 5, "Expected Sprite Qualle to have x-position -148.41626705934516 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, -179.17260426125958, 5, "Expected Sprite Qualle to have y-position -179.17260426125958 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 60, 1, "Expected Sprite Kugelfisch to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  t.dragSprite('Kugelfisch', -149.49188390137803, -180, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, 148.25471257764477, 1, "Expected Sprite Fisch to face in direction 148.25471257764477 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 90, 1, "Expected Sprite Kugelfisch to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, -49.90429975096373, 1, "Expected Sprite Qualle to face in direction -49.90429975096373 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, -189, 5, "Expected Sprite Fisch to have x-position -189 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, -128, 5, "Expected Sprite Fisch to have y-position -128 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -10, 5, "Expected Sprite Stern to have x-position -10 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, -150, 5, "Expected Sprite Stern to have y-position -150 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, -147.49188390137803, 5, "Expected Sprite Kugelfisch to have x-position -147.49188390137803 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, -180, 5, "Expected Sprite Kugelfisch to have y-position -180 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, -148.41626705934516, 5, "Expected Sprite Qualle to have x-position -148.41626705934516 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, -179.17260426125958, 5, "Expected Sprite Qualle to have y-position -179.17260426125958 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 60, 1, "Expected Sprite Kugelfisch to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  await t.runForSteps(34);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, -176.18592516570965, 1, "Expected Sprite Fisch to face in direction -176.18592516570965 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 90, 1, "Expected Sprite Kugelfisch to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, 39.63639377765537, 1, "Expected Sprite Qualle to face in direction 39.63639377765537 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, 0, 5, "Expected Sprite Fisch to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, 0, 5, "Expected Sprite Fisch to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -10, 5, "Expected Sprite Stern to have x-position -10 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, -150, 5, "Expected Sprite Stern to have y-position -150 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, -77.49188390137803, 5, "Expected Sprite Kugelfisch to have x-position -77.49188390137803 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, -180, 5, "Expected Sprite Kugelfisch to have y-position -180 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, -134.3821748026886, 5, "Expected Sprite Qualle to have x-position -134.3821748026886 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, -162.23022383430484, 5, "Expected Sprite Qualle to have y-position -162.23022383430484 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 60, 1, "Expected Sprite Kugelfisch to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  await t.runForSteps(44);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, -176.18592516570965, 1, "Expected Sprite Fisch to face in direction -176.18592516570965 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 180, 1, "Expected Sprite Kugelfisch to face in direction 180 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, 39.636393777655364, 1, "Expected Sprite Qualle to face in direction 39.636393777655364 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, 0, 5, "Expected Sprite Fisch to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, 0, 5, "Expected Sprite Fisch to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -10, 5, "Expected Sprite Stern to have x-position -10 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, -150, 5, "Expected Sprite Stern to have y-position -150 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, -17.49188390137803, 5, "Expected Sprite Kugelfisch to have x-position -17.49188390137803 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, -208, 5, "Expected Sprite Kugelfisch to have y-position -208 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, -71.22875964773426, 5, "Expected Sprite Qualle to have x-position -71.22875964773426 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, -85.98951191300885, 5, "Expected Sprite Qualle to have y-position -85.98951191300885 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 70, 1, "Expected Sprite Kugelfisch to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  t.dragSprite('Stern', 19.639100290724816, 24.82233873861174, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, 38.35057072713069, 1, "Expected Sprite Fisch to face in direction 38.35057072713069 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 180, 1, "Expected Sprite Kugelfisch to face in direction 180 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, 39.636393777655364, 1, "Expected Sprite Qualle to face in direction 39.636393777655364 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, 0, 5, "Expected Sprite Fisch to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, 0, 5, "Expected Sprite Fisch to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -197, 5, "Expected Sprite Stern to have x-position -197 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 99, 5, "Expected Sprite Stern to have y-position 99 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, -17.49188390137803, 5, "Expected Sprite Kugelfisch to have x-position -17.49188390137803 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, -208, 5, "Expected Sprite Kugelfisch to have y-position -208 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, -69.82535042206862, 5, "Expected Sprite Qualle to have x-position -69.82535042206862 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, -84.2952738703134, 5, "Expected Sprite Qualle to have y-position -84.2952738703134 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 70, 1, "Expected Sprite Kugelfisch to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  t.dragSprite('Stern', 0, 0, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, 90, 1, "Expected Sprite Fisch to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 180, 1, "Expected Sprite Kugelfisch to face in direction 180 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, 39.63639377765537, 1, "Expected Sprite Qualle to face in direction 39.63639377765537 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, 0, 5, "Expected Sprite Fisch to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, 0, 5, "Expected Sprite Fisch to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -203, 5, "Expected Sprite Stern to have x-position -203 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 45, 5, "Expected Sprite Stern to have y-position 45 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, -17.49188390137803, 5, "Expected Sprite Kugelfisch to have x-position -17.49188390137803 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, -208, 5, "Expected Sprite Kugelfisch to have y-position -208 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, -68.29435853952428, 5, "Expected Sprite Qualle to have x-position -68.29435853952428 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, -82.44701418737289, 5, "Expected Sprite Qualle to have y-position -82.44701418737289 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 70, 1, "Expected Sprite Kugelfisch to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  t.dragSprite('Kugelfisch', 48.54177004499383, -67.08854742756112, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, -77.5010805403613, 1, "Expected Sprite Fisch to face in direction -77.5010805403613 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 180, 1, "Expected Sprite Kugelfisch to face in direction 180 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, 39.63639377765537, 1, "Expected Sprite Qualle to face in direction 39.63639377765537 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, 0, 5, "Expected Sprite Fisch to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, 0, 5, "Expected Sprite Fisch to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -203, 5, "Expected Sprite Stern to have x-position -203 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 45, 5, "Expected Sprite Stern to have y-position 45 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, 48.54177004499383, 5, "Expected Sprite Kugelfisch to have x-position 48.54177004499383 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, -69.08854742756112, 5, "Expected Sprite Kugelfisch to have y-position -69.08854742756112 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, -66.63578400010124, 5, "Expected Sprite Qualle to have x-position -66.63578400010124 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, -80.44473286418734, 5, "Expected Sprite Qualle to have y-position -80.44473286418734 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 70, 1, "Expected Sprite Kugelfisch to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  t.dragSprite('Stern', 0, 0, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, 90, 1, "Expected Sprite Fisch to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 180, 1, "Expected Sprite Kugelfisch to face in direction 180 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, 39.63639377765537, 1, "Expected Sprite Qualle to face in direction 39.63639377765537 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, 0, 5, "Expected Sprite Fisch to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, 0, 5, "Expected Sprite Fisch to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -162, 5, "Expected Sprite Stern to have x-position -162 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, -119, 5, "Expected Sprite Stern to have y-position -119 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, 48.54177004499383, 5, "Expected Sprite Kugelfisch to have x-position 48.54177004499383 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, -71.08854742756112, 5, "Expected Sprite Kugelfisch to have y-position -71.08854742756112 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, -64.9772094606782, 5, "Expected Sprite Qualle to have x-position -64.9772094606782 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, -78.4424515410018, 5, "Expected Sprite Qualle to have y-position -78.4424515410018 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 70, 1, "Expected Sprite Kugelfisch to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  t.dragSprite('Kugelfisch', 0, 0, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, -126.29980920084512, 1, "Expected Sprite Fisch to face in direction -126.29980920084512 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 180, 1, "Expected Sprite Kugelfisch to face in direction 180 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, 39.636393777655364, 1, "Expected Sprite Qualle to face in direction 39.636393777655364 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, 0, 5, "Expected Sprite Fisch to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, 0, 5, "Expected Sprite Fisch to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -162, 5, "Expected Sprite Stern to have x-position -162 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, -119, 5, "Expected Sprite Stern to have y-position -119 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, 1.2246467991473532e-16, 5, "Expected Sprite Kugelfisch to have x-position 1.2246467991473532e-16 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, -2, 5, "Expected Sprite Kugelfisch to have y-position -2 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, -63.19105226437647, 5, "Expected Sprite Qualle to have x-position -63.19105226437647 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, -76.28614857757121, 5, "Expected Sprite Qualle to have y-position -76.28614857757121 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 70, 1, "Expected Sprite Kugelfisch to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  t.end();
}
const test1 = async function (t) {
  await t.runForSteps(72);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, -171.2977762100532, 1, "Expected Sprite Fisch to face in direction -171.2977762100532 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 90, 1, "Expected Sprite Kugelfisch to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, -145.22216863363613, 1, "Expected Sprite Qualle to face in direction -145.22216863363613 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, 0, 5, "Expected Sprite Fisch to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, 0, 5, "Expected Sprite Fisch to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -15, 5, "Expected Sprite Stern to have x-position -15 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, -98, 5, "Expected Sprite Stern to have y-position -98 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, -45, 5, "Expected Sprite Kugelfisch to have x-position -45 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, 80, 5, "Expected Sprite Kugelfisch to have y-position 80 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, 27.18416762018622, 5, "Expected Sprite Qualle to have x-position 27.18416762018622 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, 39.145201373068176, 5, "Expected Sprite Qualle to have y-position 39.145201373068176 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 60, 1, "Expected Sprite Kugelfisch to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  t.end();
}

module.exports = [
  {
      test: test0,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687937532832',
      type: 'standard',
  },
  {
      test: test1,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687937532832',
      type: 'standard',
  }
]
