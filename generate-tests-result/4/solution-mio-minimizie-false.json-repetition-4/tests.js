const test0 = async function (t) {
  await t.runForSteps(30);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 130.36453657309738, 1, "Expected Sprite Raumschiff to face in direction 130.36453657309738 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -152.75976229891373, 5, "Expected Sprite Raumschiff to have x-position -152.75976229891373 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 129.8457979540768, 5, "Expected Sprite Raumschiff to have y-position 129.8457979540768 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, -16.666666666666664, 5, "Expected Sprite Großes Schwarzes Loch to have x-position -16.666666666666664 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, 36.66666666666667, 5, "Expected Sprite Großes Schwarzes Loch to have y-position 36.66666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 88.5, 5, "Expected Sprite Stern to have x-position 88.5 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 28.5, 5, "Expected Sprite Stern to have y-position 28.5 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.dragSprite('Stern', -165.61811881784067, 111.66376342065212, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 130.36453657309738, 1, "Expected Sprite Raumschiff to face in direction 130.36453657309738 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -151.23588366339482, 5, "Expected Sprite Raumschiff to have x-position -151.23588366339482 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 128.55050111388573, 5, "Expected Sprite Raumschiff to have y-position 128.55050111388573 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, -17.888888888888886, 5, "Expected Sprite Großes Schwarzes Loch to have x-position -17.888888888888886 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, 35.55555555555556, 5, "Expected Sprite Großes Schwarzes Loch to have y-position 35.55555555555556 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -60.93209076195632, 5, "Expected Sprite Stern to have x-position -60.93209076195632 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 78.25415231998186, 5, "Expected Sprite Stern to have y-position 78.25415231998186 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.dragSprite('Stern', -133.80992052218446, 141.84504860309642, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 130.36453657309738, 1, "Expected Sprite Raumschiff to face in direction 130.36453657309738 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -149.7120050278759, 5, "Expected Sprite Raumschiff to have x-position -149.7120050278759 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 127.25520427369464, 5, "Expected Sprite Raumschiff to have y-position 127.25520427369464 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, -19.111111111111114, 5, "Expected Sprite Großes Schwarzes Loch to have x-position -19.111111111111114 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, 34.44444444444444, 5, "Expected Sprite Großes Schwarzes Loch to have y-position 34.44444444444444 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -42.71129624368608, 5, "Expected Sprite Stern to have x-position -42.71129624368608 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 91.26102268144498, 5, "Expected Sprite Stern to have y-position 91.26102268144498 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.dragSprite('Raumschiff', -182.41859423458493, 57.15506985160083, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 107.39672454147872, 1, "Expected Sprite Raumschiff to face in direction 107.39672454147872 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -180.51007938982065, 5, "Expected Sprite Raumschiff to have x-position -180.51007938982065 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 56.55709737120201, 5, "Expected Sprite Raumschiff to have y-position 56.55709737120201 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, -20.33333333333333, 5, "Expected Sprite Großes Schwarzes Loch to have x-position -20.33333333333333 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, 33.333333333333336, 5, "Expected Sprite Großes Schwarzes Loch to have y-position 33.333333333333336 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -39.864464234983004, 5, "Expected Sprite Stern to have x-position -39.864464234983004 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 89.68027187139339, 5, "Expected Sprite Stern to have y-position 89.68027187139339 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.mouseMove(-191, 115);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, -10.175671218330706, 1, "Expected Sprite Raumschiff to face in direction -10.175671218330706 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -180.8634130255082, 5, "Expected Sprite Raumschiff to have x-position -180.8634130255082 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 58.525638796189504, 5, "Expected Sprite Raumschiff to have y-position 58.525638796189504 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, -21.555555555555557, 5, "Expected Sprite Großes Schwarzes Loch to have x-position -21.555555555555557 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, 32.22222222222222, 5, "Expected Sprite Großes Schwarzes Loch to have y-position 32.22222222222222 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -37.01763222627993, 5, "Expected Sprite Stern to have x-position -37.01763222627993 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 88.09952106134179, 5, "Expected Sprite Stern to have y-position 88.09952106134179 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.dragSprite('Raumschiff', -191.20402819449123, 96.1003576231052, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 0.6185037859867606, 1, "Expected Sprite Raumschiff to face in direction 0.6185037859867606 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -191.18243875879836, 5, "Expected Sprite Raumschiff to have x-position -191.18243875879836 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 98.10024109377704, 5, "Expected Sprite Raumschiff to have y-position 98.10024109377704 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, -22.77777777777778, 5, "Expected Sprite Großes Schwarzes Loch to have x-position -22.77777777777778 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, 31.111111111111107, 5, "Expected Sprite Großes Schwarzes Loch to have y-position 31.111111111111107 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -34.170800217576854, 5, "Expected Sprite Stern to have x-position -34.170800217576854 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 86.51877025129016, 5, "Expected Sprite Stern to have y-position 86.51877025129016 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.dragSprite('Stern', -173.56959826386003, 84.45544754283551, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 0.618503785986718, 1, "Expected Sprite Raumschiff to face in direction 0.618503785986718 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -191.1608493231055, 5, "Expected Sprite Raumschiff to have x-position -191.1608493231055 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 100.10012456444889, 5, "Expected Sprite Raumschiff to have y-position 100.10012456444889 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, -24, 5, "Expected Sprite Großes Schwarzes Loch to have x-position -24 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, 30, 5, "Expected Sprite Großes Schwarzes Loch to have y-position 30 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -47.22783930554402, 5, "Expected Sprite Stern to have x-position -47.22783930554402 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 61.98217901713421, 5, "Expected Sprite Stern to have y-position 61.98217901713421 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.dragSprite('Raumschiff', -183.39468859696098, 54.44879520967854, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, -7.158937028256204, 1, "Expected Sprite Raumschiff to face in direction -7.158937028256204 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -183.6439329342562, 5, "Expected Sprite Raumschiff to have x-position -183.6439329342562 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 56.43320375136704, 5, "Expected Sprite Raumschiff to have y-position 56.43320375136704 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, -25.22222222222222, 5, "Expected Sprite Großes Schwarzes Loch to have x-position -25.22222222222222 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, 28.888888888888893, 5, "Expected Sprite Großes Schwarzes Loch to have y-position 28.888888888888893 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -43.71834600114633, 5, "Expected Sprite Stern to have x-position -43.71834600114633 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 61.35792155808694, 5, "Expected Sprite Stern to have y-position 61.35792155808694 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.mouseMove(-183, 59);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 14.083164934785728, 1, "Expected Sprite Raumschiff to face in direction 14.083164934785728 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -183.157272881494, 5, "Expected Sprite Raumschiff to have x-position -183.157272881494 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 58.373090859692034, 5, "Expected Sprite Raumschiff to have y-position 58.373090859692034 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, -26.444444444444443, 5, "Expected Sprite Großes Schwarzes Loch to have x-position -26.444444444444443 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, 27.77777777777778, 5, "Expected Sprite Großes Schwarzes Loch to have y-position 27.77777777777778 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -40.20885269674869, 5, "Expected Sprite Stern to have x-position -40.20885269674869 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 60.733664099039686, 5, "Expected Sprite Stern to have y-position 60.733664099039686 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.dragSprite('Stern', -166.56201003994252, 72.72087333989488, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 14.083164934784747, 1, "Expected Sprite Raumschiff to face in direction 14.083164934784747 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -182.67061282873186, 5, "Expected Sprite Raumschiff to have x-position -182.67061282873186 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 60.31297796801704, 5, "Expected Sprite Raumschiff to have y-position 60.31297796801704 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, -27.66666666666667, 5, "Expected Sprite Großes Schwarzes Loch to have x-position -27.66666666666667 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, 26.666666666666664, 5, "Expected Sprite Großes Schwarzes Loch to have y-position 26.666666666666664 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -34.24670351397987, 5, "Expected Sprite Stern to have x-position -34.24670351397987 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 56.0023056689632, 5, "Expected Sprite Stern to have y-position 56.0023056689632 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  await t.runForSteps(74);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, -165.9168350652157, 1, "Expected Sprite Raumschiff to face in direction -165.9168350652157 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -183.157272881494, 5, "Expected Sprite Raumschiff to have x-position -183.157272881494 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 58.373090859692034, 5, "Expected Sprite Raumschiff to have y-position 58.373090859692034 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, -39.333333333333336, 5, "Expected Sprite Großes Schwarzes Loch to have x-position -39.333333333333336 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, -19.333333333333336, 5, "Expected Sprite Großes Schwarzes Loch to have y-position -19.333333333333336 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 216.31666666666666, 5, "Expected Sprite Stern to have x-position 216.31666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 76.15, 5, "Expected Sprite Stern to have y-position 76.15 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  await t.runForSteps(91);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, -165.9168350652157, 1, "Expected Sprite Raumschiff to face in direction -165.9168350652157 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -183.157272881494, 5, "Expected Sprite Raumschiff to have x-position -183.157272881494 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 58.373090859692034, 5, "Expected Sprite Raumschiff to have y-position 58.373090859692034 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, 47.22222222222222, 5, "Expected Sprite Großes Schwarzes Loch to have x-position 47.22222222222222 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, -1.1111111111111107, 5, "Expected Sprite Großes Schwarzes Loch to have y-position -1.1111111111111107 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 94.69999999999999, 5, "Expected Sprite Stern to have x-position 94.69999999999999 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, -0.9666666666666615, 5, "Expected Sprite Stern to have y-position -0.9666666666666615 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.dragSprite('Stern', -183, 58, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 14.083164934784747, 1, "Expected Sprite Raumschiff to face in direction 14.083164934784747 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -182.67061282873186, 5, "Expected Sprite Raumschiff to have x-position -182.67061282873186 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 60.31297796801704, 5, "Expected Sprite Raumschiff to have y-position 60.31297796801704 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, 45.111111111111114, 5, "Expected Sprite Großes Schwarzes Loch to have x-position 45.111111111111114 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, -1.5555555555555536, 5, "Expected Sprite Großes Schwarzes Loch to have y-position -1.5555555555555536 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -103, 5, "Expected Sprite Stern to have x-position -103 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 72.4, 5, "Expected Sprite Stern to have y-position 72.4 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.dragSprite('Raumschiff', 79.60936866694173, 180, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, -114.73837907334365, 1, "Expected Sprite Raumschiff to face in direction -114.73837907334365 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 77.79291252864148, 5, "Expected Sprite Raumschiff to have x-position 77.79291252864148 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 179.1630489275762, 5, "Expected Sprite Raumschiff to have y-position 179.1630489275762 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, 43, 5, "Expected Sprite Großes Schwarzes Loch to have x-position 43 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, -2, 5, "Expected Sprite Großes Schwarzes Loch to have y-position -2 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -99.66666666666666, 5, "Expected Sprite Stern to have x-position -99.66666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 73, 5, "Expected Sprite Stern to have y-position 73 +-5");
  t.assert.equal(t.getSprite("Raumschiff").sayText, "Hilfe!", "Expected Sprite Raumschiff to say Hilfe!");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.dragSprite('Stern', 95.11922674405427, 180, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, -114.73837907334365, 1, "Expected Sprite Raumschiff to face in direction -114.73837907334365 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 75.97645639034123, 5, "Expected Sprite Raumschiff to have x-position 75.97645639034123 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 178.3260978551524, 5, "Expected Sprite Raumschiff to have y-position 178.3260978551524 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, 40.888888888888886, 5, "Expected Sprite Großes Schwarzes Loch to have x-position 40.888888888888886 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, -2.4444444444444446, 5, "Expected Sprite Großes Schwarzes Loch to have y-position -2.4444444444444446 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 61.26756182163076, 5, "Expected Sprite Stern to have x-position 61.26756182163076 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 142.73333333333335, 5, "Expected Sprite Stern to have y-position 142.73333333333335 +-5");
  t.assert.equal(t.getSprite("Raumschiff").sayText, "Hilfe!", "Expected Sprite Raumschiff to say Hilfe!");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.dragSprite('Raumschiff', 139.13249877806732, 131.14267168685092, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, -102.62329500338069, 1, "Expected Sprite Raumschiff to face in direction -102.62329500338069 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 137.18084279846894, 5, "Expected Sprite Raumschiff to have x-position 137.18084279846894 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 130.7055916743842, 5, "Expected Sprite Raumschiff to have y-position 130.7055916743842 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, 38.77777777777777, 5, "Expected Sprite Großes Schwarzes Loch to have x-position 38.77777777777777 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, -2.8888888888888893, 5, "Expected Sprite Großes Schwarzes Loch to have y-position -2.8888888888888893 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 239, 5, "Expected Sprite Stern to have x-position 239 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 179, 5, "Expected Sprite Stern to have y-position 179 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch not to be visible");
  t.assert.not(t.getSprite("Stern").visible, "Expected Sprite Stern not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.end();
}
const test1 = async function (t) {
  t.dragSprite('Raumschiff', -166.73810667021536, 19.14793527585877, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 130.36453657309735, 1, "Expected Sprite Raumschiff to face in direction 130.36453657309735 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -198.4761213644811, 5, "Expected Sprite Raumschiff to have x-position -198.4761213644811 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 168.70470315980893, 5, "Expected Sprite Raumschiff to have y-position 168.70470315980893 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, 20, 5, "Expected Sprite Großes Schwarzes Loch to have x-position 20 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, 70, 5, "Expected Sprite Großes Schwarzes Loch to have y-position 70 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 140, 5, "Expected Sprite Stern to have x-position 140 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 10, 5, "Expected Sprite Stern to have y-position 10 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.dragSprite('Stern', -214.69380371888514, 153.56670171414632, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 130.36453657309735, 1, "Expected Sprite Raumschiff to face in direction 130.36453657309735 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -196.95224272896218, 5, "Expected Sprite Raumschiff to have x-position -196.95224272896218 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 167.40940631961786, 5, "Expected Sprite Raumschiff to have y-position 167.40940631961786 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, 18.77777777777778, 5, "Expected Sprite Großes Schwarzes Loch to have x-position 18.77777777777778 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, 68.88888888888889, 5, "Expected Sprite Großes Schwarzes Loch to have y-position 68.88888888888889 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -210.49890699023706, 5, "Expected Sprite Stern to have x-position -210.49890699023706 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 151.79059001891054, 5, "Expected Sprite Stern to have y-position 151.79059001891054 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.equal(t.getSprite("Stern").sayText, "Du schaffst das!", "Expected Sprite Stern to say Du schaffst das!");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  await t.runForSteps(98);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 130.36453657309733, 1, "Expected Sprite Raumschiff to face in direction 130.36453657309733 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -107.04340323334625, 5, "Expected Sprite Raumschiff to have x-position -107.04340323334625 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 90.98689274834426, 5, "Expected Sprite Raumschiff to have y-position 90.98689274834426 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, -53.33333333333333, 5, "Expected Sprite Großes Schwarzes Loch to have x-position -53.33333333333333 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, 3.333333333333343, 5, "Expected Sprite Großes Schwarzes Loch to have y-position 3.333333333333343 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -84.65200513079446, 5, "Expected Sprite Stern to have x-position -84.65200513079446 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 98.50723916183739, 5, "Expected Sprite Stern to have y-position 98.50723916183739 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.not(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff not to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.not(t.getSprite("Stern").visible, "Expected Sprite Stern not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.end();
}

module.exports = [
  {
      test: test0,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687937460876',
      type: 'standard',
  },
  {
      test: test1,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687937460876',
      type: 'standard',
  }
]
