const test0 = async function (t) {
  await t.runForSteps(68);
  await t.runForSteps(1);
  t.dragSprite('Rot', 17.518055320130216, -3.0587692216605964, 1);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Rot").x, 103, 5, "Expected Sprite Rot to have x-position 103 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -3, 5, "Expected Sprite Rot to have y-position -3 +-5");
  t.keyPress('right arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Scheibe").direction, 93, 1, "Expected Sprite Scheibe to face in direction 93 +-1");
  t.assert.withinRange(t.getSprite("Rot").x, -36, 5, "Expected Sprite Rot to have x-position -36 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -64, 5, "Expected Sprite Rot to have y-position -64 +-5");
  await t.runForSteps(69);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Rot").getClone(1).currentCostume, 0, "Expected Clone 1 of Rot to have costume 0");
  t.assert.equal(t.getSprite("Rot").getClone(2).currentCostume, 0, "Expected Clone 2 of Rot to have costume 0");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 2, "Expected Sprite Rot to have 2 clones");
  t.assert.equal(t.getSprite("Rot").direction, -128.10757687751487, 1, "Expected Sprite Rot to face in direction -128.10757687751487 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).direction, 126.99085970296278, 1, "Expected Clone 1 of Rot to face in direction 126.99085970296278 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(2).direction, -128.10757687751487, 1, "Expected Clone 2 of Rot to face in direction -128.10757687751487 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 4, "Expected Sprite Scheibe to be at layer 4");
  t.assert.equal(t.getSprite("Rot").layerOrder, 3, "Expected Sprite Rot to be at layer 3");
  t.assert.equal(t.getSprite("Rot").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Rot to be at layer 1");
  t.assert.equal(t.getSprite("Rot").getClone(2).getLayerOrder(), 2, "Expected Clone 2 of Rot to be at layer 2");
  t.assert.withinRange(t.getSprite("Rot").x, 204, 5, "Expected Sprite Rot to have x-position 204 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 160, 5, "Expected Sprite Rot to have y-position 160 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, -58.01111111111112, 5, "Expected Clone 1 of Rot to have x-position -58.01111111111112 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, 43.7, 5, "Expected Clone 1 of Rot to have y-position 43.7 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(2).x, 204, 5, "Expected Clone 2 of Rot to have x-position 204 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(2).y, 160, 5, "Expected Clone 2 of Rot to have y-position 160 +-5");
  t.assert.not(t.getSprite("Rot").getClone(1).sayText, "Expected Clone 1 of Rot not to say anything");
  t.assert.not(t.getSprite("Rot").getClone(2).sayText, "Expected Clone 2 of Rot not to say anything");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).size, 80, 1, "Expected Clone 1 of Rot to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Rot").getClone(2).size, 80, 1, "Expected Clone 2 of Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Rot").getClone(1).visible, "Expected Clone 1 of Rot to be visible");
  t.assert.ok(t.getSprite("Rot").getClone(2).visible, "Expected Clone 2 of Rot to be visible");
  t.assert.equal(t.getSprite("Rot").getClone(1).volume, 100, "Expected Clone 1 of Rot to have volume 100");
  t.assert.equal(t.getSprite("Rot").getClone(2).volume, 100, "Expected Clone 2 of Rot to have volume 100");
  t.dragSprite('Rot', 55.216209367924165, -6.287971356648821, null);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Rot").x, 55.216209367924165, 5, "Expected Sprite Rot to have x-position 55.216209367924165 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -6.287971356648821, 5, "Expected Sprite Rot to have y-position -6.287971356648821 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, -55.48888888888888, 5, "Expected Clone 1 of Rot to have x-position -55.48888888888888 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, 41.80000000000001, 5, "Expected Clone 1 of Rot to have y-position 41.80000000000001 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(2).x, 201.73333333333332, 5, "Expected Clone 2 of Rot to have x-position 201.73333333333332 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(2).y, 158.22222222222223, 5, "Expected Clone 2 of Rot to have y-position 158.22222222222223 +-5");
  t.dragSprite('Rot', -17.892365192486704, 0.9211991966615194, 1);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 1, "Expected Sprite Rot to have 1 clones");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 3, "Expected Sprite Scheibe to be at layer 3");
  t.assert.equal(t.getSprite("Rot").layerOrder, 2, "Expected Sprite Rot to be at layer 2");
  t.assert.equal(t.getSprite("Rot").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, 199.46666666666667, 5, "Expected Clone 1 of Rot to have x-position 199.46666666666667 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, 156.44444444444446, 5, "Expected Clone 1 of Rot to have y-position 156.44444444444446 +-5");
  await t.runForSteps(58);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Rot").x, -186, 5, "Expected Sprite Rot to have x-position -186 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 69, 5, "Expected Sprite Rot to have y-position 69 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, 65.73333333333332, 5, "Expected Clone 1 of Rot to have x-position 65.73333333333332 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, 51.55555555555554, 5, "Expected Clone 1 of Rot to have y-position 51.55555555555554 +-5");
  t.keyPress('left arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Scheibe").direction, 90, 1, "Expected Sprite Scheibe to face in direction 90 +-1");
  t.assert.withinRange(t.getSprite("Rot").x, -33, 5, "Expected Sprite Rot to have x-position -33 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 71, 5, "Expected Sprite Rot to have y-position 71 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, 61.20000000000002, 5, "Expected Clone 1 of Rot to have x-position 61.20000000000002 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, 48, 5, "Expected Clone 1 of Rot to have y-position 48 +-5");
  t.dragSprite('Rot', 35.66010134568517, -49.199933932482274, null);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Rot").x, 95, 5, "Expected Sprite Rot to have x-position 95 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 49, 5, "Expected Sprite Rot to have y-position 49 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, 58.93333333333334, 5, "Expected Clone 1 of Rot to have x-position 58.93333333333334 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, 46.222222222222214, 5, "Expected Clone 1 of Rot to have y-position 46.222222222222214 +-5");
  await t.runForSteps(57);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Rot").getClone(1).currentCostume, 0, "Expected Clone 1 of Rot to have costume 0");
  t.assert.equal(t.getSprite("Rot").direction, -131.74277805933303, 1, "Expected Sprite Rot to face in direction -131.74277805933303 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).direction, -131.74277805933303, 1, "Expected Clone 1 of Rot to face in direction -131.74277805933303 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Rot").x, 195, 5, "Expected Sprite Rot to have x-position 195 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 174, 5, "Expected Sprite Rot to have y-position 174 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, 73.66666666666667, 5, "Expected Clone 1 of Rot to have x-position 73.66666666666667 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, 65.73333333333333, 5, "Expected Clone 1 of Rot to have y-position 65.73333333333333 +-5");
  t.assert.not(t.getSprite("Rot").getClone(1).sayText, "Expected Clone 1 of Rot not to say anything");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).size, 80, 1, "Expected Clone 1 of Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Rot").getClone(1).visible, "Expected Clone 1 of Rot to be visible");
  t.assert.equal(t.getSprite("Rot").getClone(1).volume, 100, "Expected Clone 1 of Rot to have volume 100");
  t.keyPress('right arrow', 3);
  await t.runForSteps(3);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Scheibe").direction, 99, 1, "Expected Sprite Scheibe to face in direction 99 +-1");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, 65, 5, "Expected Clone 1 of Rot to have x-position 65 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, 58, 5, "Expected Clone 1 of Rot to have y-position 58 +-5");
  t.keyPress('right arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Scheibe").direction, 102, 1, "Expected Sprite Scheibe to face in direction 102 +-1");
  t.assert.withinRange(t.getSprite("Rot").x, 165, 5, "Expected Sprite Rot to have x-position 165 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -151, 5, "Expected Sprite Rot to have y-position -151 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, 60.66666666666666, 5, "Expected Clone 1 of Rot to have x-position 60.66666666666666 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, 54.13333333333334, 5, "Expected Clone 1 of Rot to have y-position 54.13333333333334 +-5");
  t.dragSprite('Rot', 40.261514518028946, -4.984191841538227, null);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Rot").x, 202, 5, "Expected Sprite Rot to have x-position 202 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -174, 5, "Expected Sprite Rot to have y-position -174 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, 58.5, 5, "Expected Clone 1 of Rot to have x-position 58.5 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, 52.2, 5, "Expected Clone 1 of Rot to have y-position 52.2 +-5");
  t.keyPress('right arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Rot").getClone(2).currentCostume, 0, "Expected Clone 2 of Rot to have costume 0");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 2, "Expected Sprite Rot to have 2 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 105, 1, "Expected Sprite Scheibe to face in direction 105 +-1");
  t.assert.equal(t.getSprite("Rot").direction, -49.258846122170354, 1, "Expected Sprite Rot to face in direction -49.258846122170354 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(2).direction, -49.258846122170354, 1, "Expected Clone 2 of Rot to face in direction -49.258846122170354 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 4, "Expected Sprite Scheibe to be at layer 4");
  t.assert.equal(t.getSprite("Rot").layerOrder, 3, "Expected Sprite Rot to be at layer 3");
  t.assert.equal(t.getSprite("Rot").getClone(2).getLayerOrder(), 2, "Expected Clone 2 of Rot to be at layer 2");
  t.assert.withinRange(t.getSprite("Rot").getClone(2).x, 199.75555555555556, 5, "Expected Clone 2 of Rot to have x-position 199.75555555555556 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(2).y, -172.06666666666666, 5, "Expected Clone 2 of Rot to have y-position -172.06666666666666 +-5");
  t.assert.not(t.getSprite("Rot").getClone(2).sayText, "Expected Clone 2 of Rot not to say anything");
  t.assert.withinRange(t.getSprite("Rot").getClone(2).size, 80, 1, "Expected Clone 2 of Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Rot").getClone(2).visible, "Expected Clone 2 of Rot to be visible");
  t.assert.equal(t.getSprite("Rot").getClone(2).volume, 100, "Expected Clone 2 of Rot to have volume 100");
  t.dragSprite('Rot', 63.043448803208435, -11.54133280674256, null);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Rot").x, 63.043448803208435, 5, "Expected Sprite Rot to have x-position 63.043448803208435 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -11.54133280674256, 5, "Expected Sprite Rot to have y-position -11.54133280674256 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(2).x, 197.51111111111112, 5, "Expected Clone 2 of Rot to have x-position 197.51111111111112 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(2).y, -170.13333333333333, 5, "Expected Clone 2 of Rot to have y-position -170.13333333333333 +-5");
  t.dragSprite('Rot', 23.59765631190859, -20.28625446578469, null);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Rot").x, 23.59765631190859, 5, "Expected Sprite Rot to have x-position 23.59765631190859 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -20.28625446578469, 5, "Expected Sprite Rot to have y-position -20.28625446578469 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(2).x, 195.26666666666668, 5, "Expected Clone 2 of Rot to have x-position 195.26666666666668 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(2).y, -168.2, 5, "Expected Clone 2 of Rot to have y-position -168.2 +-5");
  t.keyPress('left arrow', 2);
  await t.runForSteps(2);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 1, "Expected Sprite Rot to have 1 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 99, 1, "Expected Sprite Scheibe to face in direction 99 +-1");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 3, "Expected Sprite Scheibe to be at layer 3");
  t.assert.equal(t.getSprite("Rot").layerOrder, 2, "Expected Sprite Rot to be at layer 2");
  t.assert.equal(t.getSprite("Rot").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, 188.53333333333333, 5, "Expected Clone 1 of Rot to have x-position 188.53333333333333 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, -162.4, 5, "Expected Clone 1 of Rot to have y-position -162.4 +-5");
  t.dragSprite('Rot', -2.167067364724153, 17.482554889401175, 2);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  await t.runForSteps(6);
  await t.runForSteps(1);
  t.keyPress('left arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Scheibe").direction, 96, 1, "Expected Sprite Scheibe to face in direction 96 +-1");
  t.keyPress('right arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Scheibe").direction, 99, 1, "Expected Sprite Scheibe to face in direction 99 +-1");
  t.keyPress('right arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Scheibe").direction, 102, 1, "Expected Sprite Scheibe to face in direction 102 +-1");
  t.keyPress('right arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Scheibe").direction, 105, 1, "Expected Sprite Scheibe to face in direction 105 +-1");
  t.keyPress('left arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Scheibe").direction, 102, 1, "Expected Sprite Scheibe to face in direction 102 +-1");
  t.keyPress('left arrow', 3);
  await t.runForSteps(3);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Scheibe").direction, 93, 1, "Expected Sprite Scheibe to face in direction 93 +-1");
  await t.runForSteps(69);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Rot").getClone(1).currentCostume, 0, "Expected Clone 1 of Rot to have costume 0");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 1, "Expected Sprite Rot to have 1 clones");
  t.assert.equal(t.getSprite("Rot").direction, -129.13612798923106, 1, "Expected Sprite Rot to face in direction -129.13612798923106 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).direction, -129.13612798923106, 1, "Expected Clone 1 of Rot to face in direction -129.13612798923106 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 3, "Expected Sprite Scheibe to be at layer 3");
  t.assert.equal(t.getSprite("Rot").layerOrder, 2, "Expected Sprite Rot to be at layer 2");
  t.assert.equal(t.getSprite("Rot").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Rot").x, 204, 5, "Expected Sprite Rot to have x-position 204 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 166, 5, "Expected Sprite Rot to have y-position 166 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, 188.13333333333333, 5, "Expected Clone 1 of Rot to have x-position 188.13333333333333 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, 153.0888888888889, 5, "Expected Clone 1 of Rot to have y-position 153.0888888888889 +-5");
  t.assert.not(t.getSprite("Rot").getClone(1).sayText, "Expected Clone 1 of Rot not to say anything");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).size, 80, 1, "Expected Clone 1 of Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Rot").getClone(1).visible, "Expected Clone 1 of Rot to be visible");
  t.assert.equal(t.getSprite("Rot").getClone(1).volume, 100, "Expected Clone 1 of Rot to have volume 100");
  t.dragSprite('Rot', 0, 0, 1);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  await t.runForSteps(95);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Rot").getClone(1).currentCostume, 0, "Expected Clone 1 of Rot to have costume 0");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 1, "Expected Sprite Rot to have 1 clones");
  t.assert.equal(t.getSprite("Rot").direction, 119.38060786128922, 1, "Expected Sprite Rot to face in direction 119.38060786128922 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).direction, 119.38060786128922, 1, "Expected Clone 1 of Rot to face in direction 119.38060786128922 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 3, "Expected Sprite Scheibe to be at layer 3");
  t.assert.equal(t.getSprite("Rot").layerOrder, 2, "Expected Sprite Rot to be at layer 2");
  t.assert.equal(t.getSprite("Rot").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Rot").x, -238, 5, "Expected Sprite Rot to have x-position -238 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 134, 5, "Expected Sprite Rot to have y-position 134 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, -177.17777777777778, 5, "Expected Clone 1 of Rot to have x-position -177.17777777777778 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, 99.75555555555556, 5, "Expected Clone 1 of Rot to have y-position 99.75555555555556 +-5");
  t.assert.not(t.getSprite("Rot").getClone(1).sayText, "Expected Clone 1 of Rot not to say anything");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).size, 80, 1, "Expected Clone 1 of Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Rot").getClone(1).visible, "Expected Clone 1 of Rot to be visible");
  t.assert.equal(t.getSprite("Rot").getClone(1).volume, 100, "Expected Clone 1 of Rot to have volume 100");
  await t.runForSteps(44);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Rot").getClone(2).currentCostume, 0, "Expected Clone 2 of Rot to have costume 0");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 2, "Expected Sprite Rot to have 2 clones");
  t.assert.equal(t.getSprite("Rot").direction, 62.06869861499828, 1, "Expected Sprite Rot to face in direction 62.06869861499828 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(2).direction, 62.06869861499828, 1, "Expected Clone 2 of Rot to face in direction 62.06869861499828 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 4, "Expected Sprite Scheibe to be at layer 4");
  t.assert.equal(t.getSprite("Rot").layerOrder, 3, "Expected Sprite Rot to be at layer 3");
  t.assert.equal(t.getSprite("Rot").getClone(2).getLayerOrder(), 2, "Expected Clone 2 of Rot to be at layer 2");
  t.assert.withinRange(t.getSprite("Rot").x, -232, 5, "Expected Sprite Rot to have x-position -232 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -123, 5, "Expected Sprite Rot to have y-position -123 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, -58.17777777777778, 5, "Expected Clone 1 of Rot to have x-position -58.17777777777778 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, 32.75555555555556, 5, "Expected Clone 1 of Rot to have y-position 32.75555555555556 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(2).x, -216.53333333333333, 5, "Expected Clone 2 of Rot to have x-position -216.53333333333333 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(2).y, -114.8, 5, "Expected Clone 2 of Rot to have y-position -114.8 +-5");
  t.assert.not(t.getSprite("Rot").getClone(2).sayText, "Expected Clone 2 of Rot not to say anything");
  t.assert.withinRange(t.getSprite("Rot").getClone(2).size, 80, 1, "Expected Clone 2 of Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Rot").getClone(2).visible, "Expected Clone 2 of Rot to be visible");
  t.assert.equal(t.getSprite("Rot").getClone(2).volume, 100, "Expected Clone 2 of Rot to have volume 100");
  t.keyPress('right arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Scheibe").direction, 96, 1, "Expected Sprite Scheibe to face in direction 96 +-1");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, -52.888888888888886, 5, "Expected Clone 1 of Rot to have x-position -52.888888888888886 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, 29.77777777777777, 5, "Expected Clone 1 of Rot to have y-position 29.77777777777777 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(2).x, -211.37777777777777, 5, "Expected Clone 2 of Rot to have x-position -211.37777777777777 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(2).y, -112.06666666666666, 5, "Expected Clone 2 of Rot to have y-position -112.06666666666666 +-5");
  await t.runForSteps(56);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.end();
}

module.exports = [
  {
      test: test0,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687937618364',
      type: 'standard',
  }
]
