const test0 = async function (t) {
  t.keyPress('right arrow', 4);
  await t.runForSteps(4);
  await t.runForSteps(1);
  t.dragSprite('Raumschiff', 240, -180, null);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Stern").getClone(5).currentCostume, 0, "Expected Clone 5 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 5, "Expected Sprite Stern to have 5 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 150, 1, "Expected Sprite Schwarzes Loch to face in direction 150 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(5).direction, 90, 1, "Expected Clone 5 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.color, 0, "Expected effect color of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.fisheye, 0, "Expected effect fisheye of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.whirl, 0, "Expected effect whirl of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.pixelate, 0, "Expected effect pixelate of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.mosaic, 0, "Expected effect mosaic of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.brightness, 0, "Expected effect brightness of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.ghost, 0, "Expected effect ghost of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 9, "Expected Sprite Raumschiff to be at layer 9");
  t.assert.equal(t.getSprite("Stern").layerOrder, 8, "Expected Sprite Stern to be at layer 8");
  t.assert.equal(t.getSprite("Stern").getClone(5).getLayerOrder(), 7, "Expected Clone 5 of Stern to be at layer 7");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 240.70710678118655, 5, "Expected Sprite Raumschiff to have x-position 240.70710678118655 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -179.29289321881345, 5, "Expected Sprite Raumschiff to have y-position -179.29289321881345 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, 15.996789151940364, 5, "Expected Sprite Schwarzes Loch to have x-position 15.996789151940364 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -82.12250186899058, 5, "Expected Sprite Schwarzes Loch to have y-position -82.12250186899058 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 140.16666666666666, 5, "Expected Clone 1 of Stern to have x-position 140.16666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 18.583333333333332, 5, "Expected Clone 1 of Stern to have y-position 18.583333333333332 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 140, 5, "Expected Clone 2 of Stern to have x-position 140 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 18.666666666666668, 5, "Expected Clone 2 of Stern to have y-position 18.666666666666668 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 139.5, 5, "Expected Clone 3 of Stern to have x-position 139.5 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 20.7, 5, "Expected Clone 3 of Stern to have y-position 20.7 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -210.11666666666667, 5, "Expected Clone 4 of Stern to have x-position -210.11666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 150.1, 5, "Expected Clone 4 of Stern to have y-position 150.1 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -210, 5, "Expected Clone 5 of Stern to have x-position -210 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 150, 5, "Expected Clone 5 of Stern to have y-position 150 +-5");
  t.assert.equal(t.getSprite("Raumschiff").sayText, "Überstanden!", "Expected Sprite Raumschiff to say Überstanden!");
  t.assert.not(t.getSprite("Stern").getClone(5).sayText, "Expected Clone 5 of Stern not to say anything");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).size, 50, 1, "Expected Clone 5 of Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Stern").getClone(5).visible, "Expected Clone 5 of Stern to be visible");
  t.assert.equal(t.getSprite("Stern").getClone(5).volume, 100, "Expected Clone 5 of Stern to have volume 100");
  await t.runForSteps(78);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Stern").getClone(6).currentCostume, 0, "Expected Clone 6 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 6, "Expected Sprite Stern to have 6 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, -140, 1, "Expected Sprite Schwarzes Loch to face in direction -140 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(6).direction, 90, 1, "Expected Clone 6 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.color, 0, "Expected effect color of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.fisheye, 0, "Expected effect fisheye of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.whirl, 0, "Expected effect whirl of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.pixelate, 0, "Expected effect pixelate of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.mosaic, 0, "Expected effect mosaic of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.brightness, 0, "Expected effect brightness of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.ghost, 0, "Expected effect ghost of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 10, "Expected Sprite Raumschiff to be at layer 10");
  t.assert.equal(t.getSprite("Stern").layerOrder, 9, "Expected Sprite Stern to be at layer 9");
  t.assert.equal(t.getSprite("Stern").getClone(6).getLayerOrder(), 8, "Expected Clone 6 of Stern to be at layer 8");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 255, 5, "Expected Sprite Raumschiff to have x-position 255 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -161.3517677218589, 5, "Expected Sprite Raumschiff to have y-position -161.3517677218589 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, 15.99678915194036, 5, "Expected Sprite Schwarzes Loch to have x-position 15.99678915194036 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -115.02775964481614, 5, "Expected Sprite Schwarzes Loch to have y-position -115.02775964481614 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 146.21666666666667, 5, "Expected Clone 1 of Stern to have x-position 146.21666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 17.183333333333334, 5, "Expected Clone 1 of Stern to have y-position 17.183333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 134.13333333333333, 5, "Expected Clone 2 of Stern to have x-position 134.13333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 1.0999999999999999, 5, "Expected Clone 2 of Stern to have y-position 1.0999999999999999 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 136.3, 5, "Expected Clone 3 of Stern to have x-position 136.3 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 23.15, 5, "Expected Clone 3 of Stern to have y-position 23.15 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -212.56666666666666, 5, "Expected Clone 4 of Stern to have x-position -212.56666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 150.93333333333334, 5, "Expected Clone 4 of Stern to have y-position 150.93333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -225.5, 5, "Expected Clone 5 of Stern to have x-position -225.5 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 151.1, 5, "Expected Clone 5 of Stern to have y-position 151.1 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).x, -192.43333333333334, 5, "Expected Clone 6 of Stern to have x-position -192.43333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).y, 149.45, 5, "Expected Clone 6 of Stern to have y-position 149.45 +-5");
  t.assert.not(t.getSprite("Stern").getClone(6).sayText, "Expected Clone 6 of Stern not to say anything");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).size, 50, 1, "Expected Clone 6 of Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Stern").getClone(6).visible, "Expected Clone 6 of Stern to be visible");
  t.assert.equal(t.getSprite("Stern").getClone(6).volume, 100, "Expected Clone 6 of Stern to have volume 100");
  t.keyPress('right arrow', 2);
  await t.runForSteps(2);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Raumschiff").direction, 75, 1, "Expected Sprite Raumschiff to face in direction 75 +-1");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, -110, 1, "Expected Sprite Schwarzes Loch to face in direction -110 +-1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 256, 5, "Expected Sprite Raumschiff to have x-position 256 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -159.88584189556983, 5, "Expected Sprite Raumschiff to have y-position -159.88584189556983 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, 4.622501868990581, 5, "Expected Sprite Schwarzes Loch to have x-position 4.622501868990581 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -124.57191990884373, 5, "Expected Sprite Schwarzes Loch to have y-position -124.57191990884373 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 146.76666666666668, 5, "Expected Clone 1 of Stern to have x-position 146.76666666666668 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 19.033333333333335, 5, "Expected Clone 1 of Stern to have y-position 19.033333333333335 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 133.33333333333334, 5, "Expected Clone 2 of Stern to have x-position 133.33333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 1.25, 5, "Expected Clone 2 of Stern to have y-position 1.25 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 137.2, 5, "Expected Clone 3 of Stern to have x-position 137.2 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 21.6, 5, "Expected Clone 3 of Stern to have y-position 21.6 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -211.86666666666667, 5, "Expected Clone 4 of Stern to have x-position -211.86666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 150.13333333333333, 5, "Expected Clone 4 of Stern to have y-position 150.13333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -225.25, 5, "Expected Clone 5 of Stern to have x-position -225.25 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 152.45, 5, "Expected Clone 5 of Stern to have y-position 152.45 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).x, -192.33333333333334, 5, "Expected Clone 6 of Stern to have x-position -192.33333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).y, 149, 5, "Expected Clone 6 of Stern to have y-position 149 +-5");
  t.dragSprite('Raumschiff', 104, 44, null);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, -100, 1, "Expected Sprite Schwarzes Loch to face in direction -100 +-1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 104.96592582628907, 5, "Expected Sprite Raumschiff to have x-position 104.96592582628907 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 44.25881904510252, 5, "Expected Sprite Raumschiff to have y-position 44.25881904510252 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, -0.07596123493896201, 5, "Expected Sprite Schwarzes Loch to have x-position -0.07596123493896201 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -126.28202062547207, 5, "Expected Sprite Schwarzes Loch to have y-position -126.28202062547207 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 146.95, 5, "Expected Clone 1 of Stern to have x-position 146.95 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 19.650000000000002, 5, "Expected Clone 1 of Stern to have y-position 19.650000000000002 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 133.06666666666666, 5, "Expected Clone 2 of Stern to have x-position 133.06666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 1.3, 5, "Expected Clone 2 of Stern to have y-position 1.3 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 137.5, 5, "Expected Clone 3 of Stern to have x-position 137.5 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 21.083333333333332, 5, "Expected Clone 3 of Stern to have y-position 21.083333333333332 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -211.63333333333333, 5, "Expected Clone 4 of Stern to have x-position -211.63333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 149.86666666666667, 5, "Expected Clone 4 of Stern to have y-position 149.86666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -225.16666666666666, 5, "Expected Clone 5 of Stern to have x-position -225.16666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 152.9, 5, "Expected Clone 5 of Stern to have y-position 152.9 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).x, -192.3, 5, "Expected Clone 6 of Stern to have x-position -192.3 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).y, 148.85, 5, "Expected Clone 6 of Stern to have y-position 148.85 +-5");
  await t.runForSteps(88);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, -150, 1, "Expected Sprite Schwarzes Loch to face in direction -150 +-1");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 4, "Expected Sprite Raumschiff to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 3, "Expected Sprite Stern to be at layer 3");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 134.9096264412501, 5, "Expected Sprite Raumschiff to have x-position 134.9096264412501 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 52.282209443280635, 5, "Expected Sprite Raumschiff to have y-position 52.282209443280635 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, 18.496789151940362, 5, "Expected Sprite Schwarzes Loch to have x-position 18.496789151940362 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -110.69763262589395, 5, "Expected Sprite Schwarzes Loch to have y-position -110.69763262589395 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 5, 1, "Expected Sprite Raumschiff to have size 5 +-1");
  t.end();
}
const test1 = async function (t) {
  t.dragSprite('Raumschiff', -134.4360219109128, -74.34369625332597, null);
  await t.runForSteps(1);
  t.dragSprite('Raumschiff', 240, -180, null);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Stern").getClone(2).currentCostume, 0, "Expected Clone 2 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 2, "Expected Sprite Stern to have 2 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 110, 1, "Expected Sprite Schwarzes Loch to face in direction 110 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(2).direction, 90, 1, "Expected Clone 2 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 6, "Expected Sprite Raumschiff to be at layer 6");
  t.assert.equal(t.getSprite("Stern").layerOrder, 5, "Expected Sprite Stern to be at layer 5");
  t.assert.equal(t.getSprite("Stern").getClone(2).getLayerOrder(), 4, "Expected Clone 2 of Stern to be at layer 4");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 239.7411809548975, 5, "Expected Sprite Raumschiff to have x-position 239.7411809548975 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -179.03407417371093, 5, "Expected Sprite Raumschiff to have y-position -179.03407417371093 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, -0.07596123493896023, 5, "Expected Sprite Schwarzes Loch to have x-position -0.07596123493896023 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -70.86824088833465, 5, "Expected Sprite Schwarzes Loch to have y-position -70.86824088833465 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 140.03333333333333, 5, "Expected Clone 1 of Stern to have x-position 140.03333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 19.716666666666665, 5, "Expected Clone 1 of Stern to have y-position 19.716666666666665 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 140, 5, "Expected Clone 2 of Stern to have x-position 140 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 20, 5, "Expected Clone 2 of Stern to have y-position 20 +-5");
  t.assert.not(t.getSprite("Stern").getClone(2).sayText, "Expected Clone 2 of Stern not to say anything");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).size, 50, 1, "Expected Clone 2 of Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Stern").getClone(2).visible, "Expected Clone 2 of Stern to be visible");
  t.assert.equal(t.getSprite("Stern").getClone(2).volume, 100, "Expected Clone 2 of Stern to have volume 100");
  t.keyPress('right arrow', 3);
  await t.runForSteps(3);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Stern").getClone(3).currentCostume, 0, "Expected Clone 3 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).currentCostume, 0, "Expected Clone 4 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).currentCostume, 0, "Expected Clone 5 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 5, "Expected Sprite Stern to have 5 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 30, 1, "Expected Sprite Raumschiff to face in direction 30 +-1");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 150, 1, "Expected Sprite Schwarzes Loch to face in direction 150 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(3).direction, 90, 1, "Expected Clone 3 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(4).direction, 90, 1, "Expected Clone 4 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(5).direction, 90, 1, "Expected Clone 5 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.color, 0, "Expected effect color of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.fisheye, 0, "Expected effect fisheye of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.whirl, 0, "Expected effect whirl of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.pixelate, 0, "Expected effect pixelate of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.mosaic, 0, "Expected effect mosaic of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.brightness, 0, "Expected effect brightness of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.ghost, 0, "Expected effect ghost of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.color, 0, "Expected effect color of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.fisheye, 0, "Expected effect fisheye of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.whirl, 0, "Expected effect whirl of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.pixelate, 0, "Expected effect pixelate of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.mosaic, 0, "Expected effect mosaic of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.brightness, 0, "Expected effect brightness of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.ghost, 0, "Expected effect ghost of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 9, "Expected Sprite Raumschiff to be at layer 9");
  t.assert.equal(t.getSprite("Stern").layerOrder, 8, "Expected Sprite Stern to be at layer 8");
  t.assert.equal(t.getSprite("Stern").getClone(3).getLayerOrder(), 5, "Expected Clone 3 of Stern to be at layer 5");
  t.assert.equal(t.getSprite("Stern").getClone(4).getLayerOrder(), 6, "Expected Clone 4 of Stern to be at layer 6");
  t.assert.equal(t.getSprite("Stern").getClone(5).getLayerOrder(), 7, "Expected Clone 5 of Stern to be at layer 7");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 244.11687111580864, 5, "Expected Sprite Raumschiff to have x-position 244.11687111580864 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -179.73027179092708, 5, "Expected Sprite Raumschiff to have y-position -179.73027179092708 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, 15.996789151940364, 5, "Expected Sprite Schwarzes Loch to have x-position 15.996789151940364 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -82.12250186899058, 5, "Expected Sprite Schwarzes Loch to have y-position -82.12250186899058 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 140.16666666666666, 5, "Expected Clone 1 of Stern to have x-position 140.16666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 18.583333333333332, 5, "Expected Clone 1 of Stern to have y-position 18.583333333333332 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 140, 5, "Expected Clone 2 of Stern to have x-position 140 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 18.666666666666668, 5, "Expected Clone 2 of Stern to have y-position 18.666666666666668 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 139.5, 5, "Expected Clone 3 of Stern to have x-position 139.5 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 20.7, 5, "Expected Clone 3 of Stern to have y-position 20.7 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -210.33333333333334, 5, "Expected Clone 4 of Stern to have x-position -210.33333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 150, 5, "Expected Clone 4 of Stern to have y-position 150 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -210, 5, "Expected Clone 5 of Stern to have x-position -210 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 150, 5, "Expected Clone 5 of Stern to have y-position 150 +-5");
  t.assert.equal(t.getSprite("Raumschiff").sayText, "Überstanden!", "Expected Sprite Raumschiff to say Überstanden!");
  t.assert.not(t.getSprite("Stern").getClone(3).sayText, "Expected Clone 3 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(4).sayText, "Expected Clone 4 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(5).sayText, "Expected Clone 5 of Stern not to say anything");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).size, 50, 1, "Expected Clone 3 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).size, 50, 1, "Expected Clone 4 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).size, 50, 1, "Expected Clone 5 of Stern to have size 50 +-1");
  t.assert.equal(t.getSprite("Stern").getVariable("xPosition").value, "-210", "Expected xPosition to have value -210 in Sprite Stern");
  t.assert.equal(t.getSprite("Stern").getVariable("yPosition").value, "150", "Expected yPosition to have value 150 in Sprite Stern");
  t.assert.ok(t.getSprite("Stern").getClone(3).visible, "Expected Clone 3 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(4).visible, "Expected Clone 4 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(5).visible, "Expected Clone 5 of Stern to be visible");
  t.assert.equal(t.getSprite("Stern").getClone(3).volume, 100, "Expected Clone 3 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(4).volume, 100, "Expected Clone 4 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(5).volume, 100, "Expected Clone 5 of Stern to have volume 100");
  await t.runForSteps(97);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Stern").getClone(6).currentCostume, 0, "Expected Clone 6 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 6, "Expected Sprite Stern to have 6 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 50, 1, "Expected Sprite Schwarzes Loch to face in direction 50 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(6).direction, 90, 1, "Expected Clone 6 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.color, 0, "Expected effect color of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.fisheye, 0, "Expected effect fisheye of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.whirl, 0, "Expected effect whirl of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.pixelate, 0, "Expected effect pixelate of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.mosaic, 0, "Expected effect mosaic of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.brightness, 0, "Expected effect brightness of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.ghost, 0, "Expected effect ghost of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 10, "Expected Sprite Raumschiff to be at layer 10");
  t.assert.equal(t.getSprite("Stern").layerOrder, 9, "Expected Sprite Stern to be at layer 9");
  t.assert.equal(t.getSprite("Stern").getClone(6).getLayerOrder(), 8, "Expected Clone 6 of Stern to be at layer 8");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 251, 5, "Expected Sprite Raumschiff to have x-position 251 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -137.37822173508863, 5, "Expected Sprite Raumschiff to have y-position -137.37822173508863 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, -27.782851103507667, 5, "Expected Sprite Schwarzes Loch to have x-position -27.782851103507667 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -78.2922796533957, 5, "Expected Sprite Schwarzes Loch to have y-position -78.2922796533957 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 149.7, 5, "Expected Clone 1 of Stern to have x-position 149.7 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 28.9, 5, "Expected Clone 1 of Stern to have y-position 28.9 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 129.06666666666666, 5, "Expected Clone 2 of Stern to have x-position 129.06666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 2.05, 5, "Expected Clone 2 of Stern to have y-position 2.05 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 142, 5, "Expected Clone 3 of Stern to have x-position 142 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 13.333333333333336, 5, "Expected Clone 3 of Stern to have y-position 13.333333333333336 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -212.9, 5, "Expected Clone 4 of Stern to have x-position -212.9 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 143.66666666666666, 5, "Expected Clone 4 of Stern to have y-position 143.66666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -223.91666666666666, 5, "Expected Clone 5 of Stern to have x-position -223.91666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 159.65, 5, "Expected Clone 5 of Stern to have y-position 159.65 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).x, -191.8, 5, "Expected Clone 6 of Stern to have x-position -191.8 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).y, 146.6, 5, "Expected Clone 6 of Stern to have y-position 146.6 +-5");
  t.assert.not(t.getSprite("Stern").getClone(6).sayText, "Expected Clone 6 of Stern not to say anything");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).size, 50, 1, "Expected Clone 6 of Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Stern").getClone(6).visible, "Expected Clone 6 of Stern to be visible");
  t.assert.equal(t.getSprite("Stern").getClone(6).volume, 100, "Expected Clone 6 of Stern to have volume 100");
  await t.runForSteps(53);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 110, 1, "Expected Sprite Schwarzes Loch to face in direction 110 +-1");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 4, "Expected Sprite Raumschiff to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 3, "Expected Sprite Stern to be at layer 3");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 251, 5, "Expected Sprite Raumschiff to have x-position 251 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -101.00515477614226, 5, "Expected Sprite Raumschiff to have y-position -101.00515477614226 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, -0.07596123493896023, 5, "Expected Sprite Schwarzes Loch to have x-position -0.07596123493896023 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -70.86824088833465, 5, "Expected Sprite Schwarzes Loch to have y-position -70.86824088833465 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.end();
}

module.exports = [
  {
      test: test0,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687937558345',
      type: 'standard',
  },
  {
      test: test1,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687937558345',
      type: 'standard',
  }
]
