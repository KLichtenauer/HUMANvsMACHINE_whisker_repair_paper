const test0 = async function (t) {
  await t.runForSteps(31);
  await t.runForSteps(1);
  t.keyPress('left arrow', 3);
  await t.runForSteps(3);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Skikatze").x, 12, 5, "Expected Sprite Skikatze to have x-position 12 +-5");
  t.assert.withinRange(t.getSprite("Skikatze").y, 100, 5, "Expected Sprite Skikatze to have y-position 100 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, 48, 5, "Expected Clone 1 of Hindernis to have x-position 48 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, -60, 5, "Expected Clone 1 of Hindernis to have y-position -60 +-5");
  await t.runForSteps(36);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Skikatze").currentCostume, 1, "Expected Sprite Skikatze to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").currentCostume, 1, "Expected Sprite Hindernis to have costume 1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).currentCostume, 0, "Expected Clone 1 of Hindernis to have costume 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).direction, 90, 1, "Expected Clone 1 of Hindernis to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Hindernis to be 0");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Hindernis to be at layer 1");
  t.assert.withinRange(t.getSprite("Skikatze").x, 34, 5, "Expected Sprite Skikatze to have x-position 34 +-5");
  t.assert.withinRange(t.getSprite("Skikatze").y, 100, 5, "Expected Sprite Skikatze to have y-position 100 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, 160, 5, "Expected Clone 1 of Hindernis to have x-position 160 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, 180, 5, "Expected Clone 1 of Hindernis to have y-position 180 +-5");
  t.assert.not(t.getSprite("Hindernis").getClone(1).sayText, "Expected Clone 1 of Hindernis not to say anything");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).size, 60, 1, "Expected Clone 1 of Hindernis to have size 60 +-1");
  t.assert.not(t.getSprite("Hindernis").getClone(1).visible, "Expected Clone 1 of Hindernis not to be visible");
  t.assert.equal(t.getSprite("Hindernis").getClone(1).volume, 100, "Expected Clone 1 of Hindernis to have volume 100");
  await t.runForSteps(10);
  await t.runForSteps(1);
  await t.runForSteps(94);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, 55, 5, "Expected Clone 1 of Hindernis to have x-position 55 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, 180, 5, "Expected Clone 1 of Hindernis to have y-position 180 +-5");
  await t.runForSteps(34);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, 12, 5, "Expected Clone 1 of Hindernis to have x-position 12 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, 8.900000000000006, 5, "Expected Clone 1 of Hindernis to have y-position 8.900000000000006 +-5");
  t.assert.ok(t.getSprite("Hindernis").getClone(1).visible, "Expected Clone 1 of Hindernis to be visible");
  await t.runForSteps(52);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, 12, 5, "Expected Clone 1 of Hindernis to have x-position 12 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, 180, 5, "Expected Clone 1 of Hindernis to have y-position 180 +-5");
  t.assert.not(t.getSprite("Hindernis").getClone(1).visible, "Expected Clone 1 of Hindernis not to be visible");
  await t.runForSteps(97);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, -132, 5, "Expected Clone 1 of Hindernis to have x-position -132 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, -174, 5, "Expected Clone 1 of Hindernis to have y-position -174 +-5");
  t.assert.ok(t.getSprite("Hindernis").getClone(1).visible, "Expected Clone 1 of Hindernis to be visible");
  await t.runForSteps(2);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, -132, 5, "Expected Clone 1 of Hindernis to have x-position -132 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, -156.3, 5, "Expected Clone 1 of Hindernis to have y-position -156.3 +-5");
  await t.runForSteps(76);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, -132, 5, "Expected Clone 1 of Hindernis to have x-position -132 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, 180, 5, "Expected Clone 1 of Hindernis to have y-position 180 +-5");
  t.assert.not(t.getSprite("Hindernis").getClone(1).visible, "Expected Clone 1 of Hindernis not to be visible");
  await t.runForSteps(95);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, -31, 5, "Expected Clone 1 of Hindernis to have x-position -31 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, 180, 5, "Expected Clone 1 of Hindernis to have y-position 180 +-5");
  await t.runForSteps(58);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, 91, 5, "Expected Clone 1 of Hindernis to have x-position 91 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, 138.7, 5, "Expected Clone 1 of Hindernis to have y-position 138.7 +-5");
  t.assert.ok(t.getSprite("Hindernis").getClone(1).visible, "Expected Clone 1 of Hindernis to be visible");
  await t.runForSteps(82);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, -52, 5, "Expected Clone 1 of Hindernis to have x-position -52 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, 91.5, 5, "Expected Clone 1 of Hindernis to have y-position 91.5 +-5");
  await t.runForSteps(68);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, -68, 5, "Expected Clone 1 of Hindernis to have x-position -68 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, -38.29999999999998, 5, "Expected Clone 1 of Hindernis to have y-position -38.29999999999998 +-5");
  await t.runForSteps(4);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, -68, 5, "Expected Clone 1 of Hindernis to have x-position -68 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, -8.800000000000011, 5, "Expected Clone 1 of Hindernis to have y-position -8.800000000000011 +-5");
  await t.runForSteps(30);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, -68, 5, "Expected Clone 1 of Hindernis to have x-position -68 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, 174.09999999999997, 5, "Expected Clone 1 of Hindernis to have y-position 174.09999999999997 +-5");
  await t.runForSteps(57);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, -74, 5, "Expected Clone 1 of Hindernis to have x-position -74 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, -20.599999999999994, 5, "Expected Clone 1 of Hindernis to have y-position -20.599999999999994 +-5");
  await t.runForSteps(18);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, -74, 5, "Expected Clone 1 of Hindernis to have x-position -74 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, 91.5, 5, "Expected Clone 1 of Hindernis to have y-position 91.5 +-5");
  await t.runForSteps(80);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, 58, 5, "Expected Clone 1 of Hindernis to have x-position 58 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, 32.5, 5, "Expected Clone 1 of Hindernis to have y-position 32.5 +-5");
  await t.runForSteps(41);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, 58, 5, "Expected Clone 1 of Hindernis to have x-position 58 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, 180, 5, "Expected Clone 1 of Hindernis to have y-position 180 +-5");
  t.assert.not(t.getSprite("Hindernis").getClone(1).visible, "Expected Clone 1 of Hindernis not to be visible");
  await t.runForSteps(41);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, -117, 5, "Expected Clone 1 of Hindernis to have x-position -117 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, -8.800000000000011, 5, "Expected Clone 1 of Hindernis to have y-position -8.800000000000011 +-5");
  t.assert.ok(t.getSprite("Hindernis").getClone(1).visible, "Expected Clone 1 of Hindernis to be visible");
  await t.runForSteps(13);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, -117, 5, "Expected Clone 1 of Hindernis to have x-position -117 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, 73.79999999999998, 5, "Expected Clone 1 of Hindernis to have y-position 73.79999999999998 +-5");
  await t.runForSteps(2);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, -117, 5, "Expected Clone 1 of Hindernis to have x-position -117 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, 91.5, 5, "Expected Clone 1 of Hindernis to have y-position 91.5 +-5");
  await t.runForSteps(33);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, -117, 5, "Expected Clone 1 of Hindernis to have x-position -117 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, 180, 5, "Expected Clone 1 of Hindernis to have y-position 180 +-5");
  t.assert.not(t.getSprite("Hindernis").getClone(1).visible, "Expected Clone 1 of Hindernis not to be visible");
  await t.runForSteps(68);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, -53, 5, "Expected Clone 1 of Hindernis to have x-position -53 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, 162.3, 5, "Expected Clone 1 of Hindernis to have y-position 162.3 +-5");
  t.assert.ok(t.getSprite("Hindernis").getClone(1).visible, "Expected Clone 1 of Hindernis to be visible");
  await t.runForSteps(77);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, -155, 5, "Expected Clone 1 of Hindernis to have x-position -155 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, 85.59999999999997, 5, "Expected Clone 1 of Hindernis to have y-position 85.59999999999997 +-5");
  await t.runForSteps(94);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, 159, 5, "Expected Clone 1 of Hindernis to have x-position 159 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, 109.19999999999999, 5, "Expected Clone 1 of Hindernis to have y-position 109.19999999999999 +-5");
  await t.runForSteps(45);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, 18, 5, "Expected Clone 1 of Hindernis to have x-position 18 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, -156.3, 5, "Expected Clone 1 of Hindernis to have y-position -156.3 +-5");
  await t.runForSteps(48);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, 18, 5, "Expected Clone 1 of Hindernis to have x-position 18 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, 132.8, 5, "Expected Clone 1 of Hindernis to have y-position 132.8 +-5");
  await t.runForSteps(63);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, 79, 5, "Expected Clone 1 of Hindernis to have x-position 79 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, -26.5, 5, "Expected Clone 1 of Hindernis to have y-position -26.5 +-5");
  await t.runForSteps(84);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, -139, 5, "Expected Clone 1 of Hindernis to have x-position -139 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, -61.900000000000006, 5, "Expected Clone 1 of Hindernis to have y-position -61.900000000000006 +-5");
  await t.runForSteps(75);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, 36, 5, "Expected Clone 1 of Hindernis to have x-position 36 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, -150.4, 5, "Expected Clone 1 of Hindernis to have y-position -150.4 +-5");
  await t.runForSteps(22);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, 36, 5, "Expected Clone 1 of Hindernis to have x-position 36 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, -14.699999999999989, 5, "Expected Clone 1 of Hindernis to have y-position -14.699999999999989 +-5");
  await t.runForSteps(66);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).x, -119, 5, "Expected Clone 1 of Hindernis to have x-position -119 +-5");
  t.assert.withinRange(t.getSprite("Hindernis").getClone(1).y, -156.3, 5, "Expected Clone 1 of Hindernis to have y-position -156.3 +-5");
  t.end();
}

module.exports = [
  {
      test: test0,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687937575741',
      type: 'standard',
  }
]
