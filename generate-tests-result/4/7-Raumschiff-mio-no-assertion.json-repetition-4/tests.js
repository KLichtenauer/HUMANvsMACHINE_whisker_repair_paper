const test0 = async function (t) {
  t.dragSprite('Raumschiff', 309, -217, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").currentCostume, 0, "Expected Sprite Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Mond").currentCostume, 0, "Expected Sprite Mond to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).currentCostume, 0, "Expected Clone 1 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 1, "Expected Sprite Stern to have 1 clones");
  t.assert.equal(t.getSprite("Mond").getCloneCount(), 0, "Expected Sprite Mond to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, -15, 1, "Expected Sprite Raumschiff to face in direction -15 +-1");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 100, 1, "Expected Sprite Schwarzes Loch to face in direction 100 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Mond").direction, 90, 1, "Expected Sprite Mond to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(1).direction, 90, 1, "Expected Clone 1 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Mond").effects.color, 0, "Expected effect color of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.fisheye, 0, "Expected effect fisheye of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.whirl, 0, "Expected effect whirl of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.pixelate, 0, "Expected effect pixelate of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.mosaic, 0, "Expected effect mosaic of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.brightness, 0, "Expected effect brightness of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.ghost, 0, "Expected effect ghost of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 5, "Expected Sprite Raumschiff to be at layer 5");
  t.assert.equal(t.getSprite("Schwarzes Loch").layerOrder, 1, "Expected Sprite Schwarzes Loch to be at layer 1");
  t.assert.equal(t.getSprite("Stern").layerOrder, 4, "Expected Sprite Stern to be at layer 4");
  t.assert.equal(t.getSprite("Mond").layerOrder, 2, "Expected Sprite Mond to be at layer 2");
  t.assert.equal(t.getSprite("Stern").getClone(1).getLayerOrder(), 3, "Expected Clone 1 of Stern to be at layer 3");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -200.2588190451025, 5, "Expected Sprite Raumschiff to have x-position -200.2588190451025 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -169.03407417371093, 5, "Expected Sprite Raumschiff to have y-position -169.03407417371093 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, -5, 5, "Expected Sprite Schwarzes Loch to have x-position -5 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -70, 5, "Expected Sprite Schwarzes Loch to have y-position -70 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 144, 5, "Expected Sprite Stern to have x-position 144 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 20, 5, "Expected Sprite Stern to have y-position 20 +-5");
  t.assert.withinRange(t.getSprite("Mond").x, 309, 5, "Expected Sprite Mond to have x-position 309 +-5");
  t.assert.withinRange(t.getSprite("Mond").y, -217, 5, "Expected Sprite Mond to have y-position -217 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 140, 5, "Expected Clone 1 of Stern to have x-position 140 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 20, 5, "Expected Clone 1 of Stern to have y-position 20 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Schwarzes Loch").sayText, "Expected Sprite Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Mond").sayText, "Expected Sprite Mond not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(1).sayText, "Expected Clone 1 of Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").size, 80, 1, "Expected Sprite Schwarzes Loch to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Mond").size, 100, 1, "Expected Sprite Mond to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).size, 50, 1, "Expected Clone 1 of Stern to have size 50 +-1");
  t.assert.equal(t.getSprite("Stern").getVariable("xPosition").value, "140", "Expected xPosition to have value 140 in Sprite Stern");
  t.assert.equal(t.getSprite("Stern").getVariable("yPosition").value, "20", "Expected yPosition to have value 20 in Sprite Stern");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Schwarzes Loch").visible, "Expected Sprite Schwarzes Loch to be visible");
  t.assert.not(t.getSprite("Stern").visible, "Expected Sprite Stern not to be visible");
  t.assert.ok(t.getSprite("Mond").visible, "Expected Sprite Mond to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(1).visible, "Expected Clone 1 of Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Schwarzes Loch").volume, 100, "Expected Sprite Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Mond").volume, 100, "Expected Sprite Mond to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(1).volume, 100, "Expected Clone 1 of Stern to have volume 100");
  t.end();
}
const test1 = async function (t) {
  t.dragSprite('Raumschiff', 309, -217, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").currentCostume, 0, "Expected Sprite Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Mond").currentCostume, 0, "Expected Sprite Mond to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).currentCostume, 0, "Expected Clone 1 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 1, "Expected Sprite Stern to have 1 clones");
  t.assert.equal(t.getSprite("Mond").getCloneCount(), 0, "Expected Sprite Mond to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, -15, 1, "Expected Sprite Raumschiff to face in direction -15 +-1");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 100, 1, "Expected Sprite Schwarzes Loch to face in direction 100 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Mond").direction, 90, 1, "Expected Sprite Mond to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(1).direction, 90, 1, "Expected Clone 1 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Mond").effects.color, 0, "Expected effect color of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.fisheye, 0, "Expected effect fisheye of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.whirl, 0, "Expected effect whirl of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.pixelate, 0, "Expected effect pixelate of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.mosaic, 0, "Expected effect mosaic of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.brightness, 0, "Expected effect brightness of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.ghost, 0, "Expected effect ghost of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 5, "Expected Sprite Raumschiff to be at layer 5");
  t.assert.equal(t.getSprite("Schwarzes Loch").layerOrder, 1, "Expected Sprite Schwarzes Loch to be at layer 1");
  t.assert.equal(t.getSprite("Stern").layerOrder, 4, "Expected Sprite Stern to be at layer 4");
  t.assert.equal(t.getSprite("Mond").layerOrder, 2, "Expected Sprite Mond to be at layer 2");
  t.assert.equal(t.getSprite("Stern").getClone(1).getLayerOrder(), 3, "Expected Clone 1 of Stern to be at layer 3");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -200.2588190451025, 5, "Expected Sprite Raumschiff to have x-position -200.2588190451025 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -169.03407417371093, 5, "Expected Sprite Raumschiff to have y-position -169.03407417371093 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, -5, 5, "Expected Sprite Schwarzes Loch to have x-position -5 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -70, 5, "Expected Sprite Schwarzes Loch to have y-position -70 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 144, 5, "Expected Sprite Stern to have x-position 144 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 20, 5, "Expected Sprite Stern to have y-position 20 +-5");
  t.assert.withinRange(t.getSprite("Mond").x, 309, 5, "Expected Sprite Mond to have x-position 309 +-5");
  t.assert.withinRange(t.getSprite("Mond").y, -217, 5, "Expected Sprite Mond to have y-position -217 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 140, 5, "Expected Clone 1 of Stern to have x-position 140 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 20, 5, "Expected Clone 1 of Stern to have y-position 20 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Schwarzes Loch").sayText, "Expected Sprite Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Mond").sayText, "Expected Sprite Mond not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(1).sayText, "Expected Clone 1 of Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").size, 80, 1, "Expected Sprite Schwarzes Loch to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Mond").size, 100, 1, "Expected Sprite Mond to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).size, 50, 1, "Expected Clone 1 of Stern to have size 50 +-1");
  t.assert.equal(t.getSprite("Stern").getVariable("xPosition").value, "140", "Expected xPosition to have value 140 in Sprite Stern");
  t.assert.equal(t.getSprite("Stern").getVariable("yPosition").value, "20", "Expected yPosition to have value 20 in Sprite Stern");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Schwarzes Loch").visible, "Expected Sprite Schwarzes Loch to be visible");
  t.assert.not(t.getSprite("Stern").visible, "Expected Sprite Stern not to be visible");
  t.assert.ok(t.getSprite("Mond").visible, "Expected Sprite Mond to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(1).visible, "Expected Clone 1 of Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Schwarzes Loch").volume, 100, "Expected Sprite Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Mond").volume, 100, "Expected Sprite Mond to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(1).volume, 100, "Expected Clone 1 of Stern to have volume 100");
  t.dragSprite('Raumschiff', 240, -180, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").currentCostume, 0, "Expected Sprite Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Mond").currentCostume, 0, "Expected Sprite Mond to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).currentCostume, 0, "Expected Clone 1 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).currentCostume, 0, "Expected Clone 2 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 2, "Expected Sprite Stern to have 2 clones");
  t.assert.equal(t.getSprite("Mond").getCloneCount(), 0, "Expected Sprite Mond to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, -15, 1, "Expected Sprite Raumschiff to face in direction -15 +-1");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 110, 1, "Expected Sprite Schwarzes Loch to face in direction 110 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Mond").direction, 90, 1, "Expected Sprite Mond to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(1).direction, 90, 1, "Expected Clone 1 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(2).direction, 90, 1, "Expected Clone 2 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Mond").effects.color, 0, "Expected effect color of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.fisheye, 0, "Expected effect fisheye of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.whirl, 0, "Expected effect whirl of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.pixelate, 0, "Expected effect pixelate of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.mosaic, 0, "Expected effect mosaic of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.brightness, 0, "Expected effect brightness of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.ghost, 0, "Expected effect ghost of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 6, "Expected Sprite Raumschiff to be at layer 6");
  t.assert.equal(t.getSprite("Schwarzes Loch").layerOrder, 1, "Expected Sprite Schwarzes Loch to be at layer 1");
  t.assert.equal(t.getSprite("Stern").layerOrder, 5, "Expected Sprite Stern to be at layer 5");
  t.assert.equal(t.getSprite("Mond").layerOrder, 2, "Expected Sprite Mond to be at layer 2");
  t.assert.equal(t.getSprite("Stern").getClone(1).getLayerOrder(), 3, "Expected Clone 1 of Stern to be at layer 3");
  t.assert.equal(t.getSprite("Stern").getClone(2).getLayerOrder(), 4, "Expected Clone 2 of Stern to be at layer 4");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 239.7411809548975, 5, "Expected Sprite Raumschiff to have x-position 239.7411809548975 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -179.03407417371093, 5, "Expected Sprite Raumschiff to have y-position -179.03407417371093 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, -0.07596123493896023, 5, "Expected Sprite Schwarzes Loch to have x-position -0.07596123493896023 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -70.86824088833465, 5, "Expected Sprite Schwarzes Loch to have y-position -70.86824088833465 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 144, 5, "Expected Sprite Stern to have x-position 144 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 20, 5, "Expected Sprite Stern to have y-position 20 +-5");
  t.assert.withinRange(t.getSprite("Mond").x, 309, 5, "Expected Sprite Mond to have x-position 309 +-5");
  t.assert.withinRange(t.getSprite("Mond").y, -217, 5, "Expected Sprite Mond to have y-position -217 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 140.01666666666668, 5, "Expected Clone 1 of Stern to have x-position 140.01666666666668 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 19.883333333333333, 5, "Expected Clone 1 of Stern to have y-position 19.883333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 140, 5, "Expected Clone 2 of Stern to have x-position 140 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 20, 5, "Expected Clone 2 of Stern to have y-position 20 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Schwarzes Loch").sayText, "Expected Sprite Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Mond").sayText, "Expected Sprite Mond not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(1).sayText, "Expected Clone 1 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(2).sayText, "Expected Clone 2 of Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").size, 80, 1, "Expected Sprite Schwarzes Loch to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Mond").size, 100, 1, "Expected Sprite Mond to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).size, 50, 1, "Expected Clone 1 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).size, 50, 1, "Expected Clone 2 of Stern to have size 50 +-1");
  t.assert.equal(t.getSprite("Stern").getVariable("xPosition").value, "140", "Expected xPosition to have value 140 in Sprite Stern");
  t.assert.equal(t.getSprite("Stern").getVariable("yPosition").value, "20", "Expected yPosition to have value 20 in Sprite Stern");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Schwarzes Loch").visible, "Expected Sprite Schwarzes Loch to be visible");
  t.assert.not(t.getSprite("Stern").visible, "Expected Sprite Stern not to be visible");
  t.assert.ok(t.getSprite("Mond").visible, "Expected Sprite Mond to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(1).visible, "Expected Clone 1 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(2).visible, "Expected Clone 2 of Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Schwarzes Loch").volume, 100, "Expected Sprite Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Mond").volume, 100, "Expected Sprite Mond to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(1).volume, 100, "Expected Clone 1 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(2).volume, 100, "Expected Clone 2 of Stern to have volume 100");
  await t.runForSteps(200);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").currentCostume, 0, "Expected Sprite Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Mond").currentCostume, 0, "Expected Sprite Mond to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Mond").getCloneCount(), 0, "Expected Sprite Mond to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, -15, 1, "Expected Sprite Raumschiff to face in direction -15 +-1");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 110, 1, "Expected Sprite Schwarzes Loch to face in direction 110 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Mond").direction, 90, 1, "Expected Sprite Mond to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Mond").effects.color, 0, "Expected effect color of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.fisheye, 0, "Expected effect fisheye of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.whirl, 0, "Expected effect whirl of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.pixelate, 0, "Expected effect pixelate of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.mosaic, 0, "Expected effect mosaic of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.brightness, 0, "Expected effect brightness of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.ghost, 0, "Expected effect ghost of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 4, "Expected Sprite Raumschiff to be at layer 4");
  t.assert.equal(t.getSprite("Schwarzes Loch").layerOrder, 1, "Expected Sprite Schwarzes Loch to be at layer 1");
  t.assert.equal(t.getSprite("Stern").layerOrder, 3, "Expected Sprite Stern to be at layer 3");
  t.assert.equal(t.getSprite("Mond").layerOrder, 2, "Expected Sprite Mond to be at layer 2");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 217.01226694851857, 5, "Expected Sprite Raumschiff to have x-position 217.01226694851857 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -91.81630745562461, 5, "Expected Sprite Raumschiff to have y-position -91.81630745562461 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, -0.07596123493896023, 5, "Expected Sprite Schwarzes Loch to have x-position -0.07596123493896023 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -70.86824088833465, 5, "Expected Sprite Schwarzes Loch to have y-position -70.86824088833465 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 144, 5, "Expected Sprite Stern to have x-position 144 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 20, 5, "Expected Sprite Stern to have y-position 20 +-5");
  t.assert.withinRange(t.getSprite("Mond").x, 309, 5, "Expected Sprite Mond to have x-position 309 +-5");
  t.assert.withinRange(t.getSprite("Mond").y, -217, 5, "Expected Sprite Mond to have y-position -217 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Schwarzes Loch").sayText, "Expected Sprite Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Mond").sayText, "Expected Sprite Mond not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").size, 80, 1, "Expected Sprite Schwarzes Loch to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Mond").size, 100, 1, "Expected Sprite Mond to have size 100 +-1");
  t.assert.equal(t.getSprite("Stern").getVariable("xPosition").value, "-210", "Expected xPosition to have value -210 in Sprite Stern");
  t.assert.equal(t.getSprite("Stern").getVariable("yPosition").value, "150", "Expected yPosition to have value 150 in Sprite Stern");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Schwarzes Loch").visible, "Expected Sprite Schwarzes Loch to be visible");
  t.assert.not(t.getSprite("Stern").visible, "Expected Sprite Stern not to be visible");
  t.assert.ok(t.getSprite("Mond").visible, "Expected Sprite Mond to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Schwarzes Loch").volume, 100, "Expected Sprite Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Mond").volume, 100, "Expected Sprite Mond to have volume 100");
  t.end();
}
const test2 = async function (t) {
  await t.runForSteps(9);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").currentCostume, 0, "Expected Sprite Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Mond").currentCostume, 0, "Expected Sprite Mond to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).currentCostume, 0, "Expected Clone 1 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).currentCostume, 0, "Expected Clone 2 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).currentCostume, 0, "Expected Clone 3 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).currentCostume, 0, "Expected Clone 4 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).currentCostume, 0, "Expected Clone 5 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).currentCostume, 0, "Expected Clone 6 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 6, "Expected Sprite Stern to have 6 clones");
  t.assert.equal(t.getSprite("Mond").getCloneCount(), 0, "Expected Sprite Mond to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, -15, 1, "Expected Sprite Raumschiff to face in direction -15 +-1");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, -170, 1, "Expected Sprite Schwarzes Loch to face in direction -170 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Mond").direction, 90, 1, "Expected Sprite Mond to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(1).direction, 90, 1, "Expected Clone 1 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(2).direction, 90, 1, "Expected Clone 2 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(3).direction, 90, 1, "Expected Clone 3 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(4).direction, 90, 1, "Expected Clone 4 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(5).direction, 90, 1, "Expected Clone 5 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(6).direction, 90, 1, "Expected Clone 6 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Mond").effects.color, 0, "Expected effect color of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.fisheye, 0, "Expected effect fisheye of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.whirl, 0, "Expected effect whirl of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.pixelate, 0, "Expected effect pixelate of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.mosaic, 0, "Expected effect mosaic of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.brightness, 0, "Expected effect brightness of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.ghost, 0, "Expected effect ghost of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.color, 0, "Expected effect color of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.fisheye, 0, "Expected effect fisheye of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.whirl, 0, "Expected effect whirl of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.pixelate, 0, "Expected effect pixelate of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.mosaic, 0, "Expected effect mosaic of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.brightness, 0, "Expected effect brightness of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.ghost, 0, "Expected effect ghost of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.color, 0, "Expected effect color of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.fisheye, 0, "Expected effect fisheye of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.whirl, 0, "Expected effect whirl of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.pixelate, 0, "Expected effect pixelate of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.mosaic, 0, "Expected effect mosaic of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.brightness, 0, "Expected effect brightness of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.ghost, 0, "Expected effect ghost of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.color, 0, "Expected effect color of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.fisheye, 0, "Expected effect fisheye of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.whirl, 0, "Expected effect whirl of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.pixelate, 0, "Expected effect pixelate of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.mosaic, 0, "Expected effect mosaic of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.brightness, 0, "Expected effect brightness of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.ghost, 0, "Expected effect ghost of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 10, "Expected Sprite Raumschiff to be at layer 10");
  t.assert.equal(t.getSprite("Schwarzes Loch").layerOrder, 1, "Expected Sprite Schwarzes Loch to be at layer 1");
  t.assert.equal(t.getSprite("Stern").layerOrder, 9, "Expected Sprite Stern to be at layer 9");
  t.assert.equal(t.getSprite("Mond").layerOrder, 2, "Expected Sprite Mond to be at layer 2");
  t.assert.equal(t.getSprite("Stern").getClone(1).getLayerOrder(), 3, "Expected Clone 1 of Stern to be at layer 3");
  t.assert.equal(t.getSprite("Stern").getClone(2).getLayerOrder(), 4, "Expected Clone 2 of Stern to be at layer 4");
  t.assert.equal(t.getSprite("Stern").getClone(3).getLayerOrder(), 5, "Expected Clone 3 of Stern to be at layer 5");
  t.assert.equal(t.getSprite("Stern").getClone(4).getLayerOrder(), 6, "Expected Clone 4 of Stern to be at layer 6");
  t.assert.equal(t.getSprite("Stern").getClone(5).getLayerOrder(), 7, "Expected Clone 5 of Stern to be at layer 7");
  t.assert.equal(t.getSprite("Stern").getClone(6).getLayerOrder(), 8, "Expected Clone 6 of Stern to be at layer 8");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -202.58819045102513, 5, "Expected Sprite Raumschiff to have x-position -202.58819045102513 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -160.34074173710934, 5, "Expected Sprite Raumschiff to have y-position -160.34074173710934 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, 21.07513075690336, 5, "Expected Sprite Schwarzes Loch to have x-position 21.07513075690336 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -101.07513075690336, 5, "Expected Sprite Schwarzes Loch to have y-position -101.07513075690336 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 144, 5, "Expected Sprite Stern to have x-position 144 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 20, 5, "Expected Sprite Stern to have y-position 20 +-5");
  t.assert.withinRange(t.getSprite("Mond").x, 309, 5, "Expected Sprite Mond to have x-position 309 +-5");
  t.assert.withinRange(t.getSprite("Mond").y, -217, 5, "Expected Sprite Mond to have y-position -217 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 140.15, 5, "Expected Clone 1 of Stern to have x-position 140.15 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 18.95, 5, "Expected Clone 1 of Stern to have y-position 18.95 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 139.06666666666666, 5, "Expected Clone 2 of Stern to have x-position 139.06666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 19.6, 5, "Expected Clone 2 of Stern to have y-position 19.6 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 140.81666666666666, 5, "Expected Clone 3 of Stern to have x-position 140.81666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 21.283333333333335, 5, "Expected Clone 3 of Stern to have y-position 21.283333333333335 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -210.5, 5, "Expected Clone 4 of Stern to have x-position -210.5 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 149.75, 5, "Expected Clone 4 of Stern to have y-position 149.75 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -210.4, 5, "Expected Clone 5 of Stern to have x-position -210.4 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 149.2, 5, "Expected Clone 5 of Stern to have y-position 149.2 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).x, -210.3, 5, "Expected Clone 6 of Stern to have x-position -210.3 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).y, 150.8, 5, "Expected Clone 6 of Stern to have y-position 150.8 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Schwarzes Loch").sayText, "Expected Sprite Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Mond").sayText, "Expected Sprite Mond not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(1).sayText, "Expected Clone 1 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(2).sayText, "Expected Clone 2 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(3).sayText, "Expected Clone 3 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(4).sayText, "Expected Clone 4 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(5).sayText, "Expected Clone 5 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(6).sayText, "Expected Clone 6 of Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").size, 80, 1, "Expected Sprite Schwarzes Loch to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Mond").size, 100, 1, "Expected Sprite Mond to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).size, 50, 1, "Expected Clone 1 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).size, 50, 1, "Expected Clone 2 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).size, 50, 1, "Expected Clone 3 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).size, 50, 1, "Expected Clone 4 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).size, 50, 1, "Expected Clone 5 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).size, 50, 1, "Expected Clone 6 of Stern to have size 50 +-1");
  t.assert.equal(t.getSprite("Stern").getVariable("xPosition").value, "-210", "Expected xPosition to have value -210 in Sprite Stern");
  t.assert.equal(t.getSprite("Stern").getVariable("yPosition").value, "150", "Expected yPosition to have value 150 in Sprite Stern");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Schwarzes Loch").visible, "Expected Sprite Schwarzes Loch to be visible");
  t.assert.not(t.getSprite("Stern").visible, "Expected Sprite Stern not to be visible");
  t.assert.ok(t.getSprite("Mond").visible, "Expected Sprite Mond to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(1).visible, "Expected Clone 1 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(2).visible, "Expected Clone 2 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(3).visible, "Expected Clone 3 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(4).visible, "Expected Clone 4 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(5).visible, "Expected Clone 5 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(6).visible, "Expected Clone 6 of Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Schwarzes Loch").volume, 100, "Expected Sprite Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Mond").volume, 100, "Expected Sprite Mond to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(1).volume, 100, "Expected Clone 1 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(2).volume, 100, "Expected Clone 2 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(3).volume, 100, "Expected Clone 3 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(4).volume, 100, "Expected Clone 4 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(5).volume, 100, "Expected Clone 5 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(6).volume, 100, "Expected Clone 6 of Stern to have volume 100");
  t.dragSprite('Raumschiff', 104, 44, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").currentCostume, 0, "Expected Sprite Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Mond").currentCostume, 0, "Expected Sprite Mond to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).currentCostume, 0, "Expected Clone 1 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).currentCostume, 0, "Expected Clone 2 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).currentCostume, 0, "Expected Clone 3 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).currentCostume, 0, "Expected Clone 4 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).currentCostume, 0, "Expected Clone 5 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).currentCostume, 0, "Expected Clone 6 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 6, "Expected Sprite Stern to have 6 clones");
  t.assert.equal(t.getSprite("Mond").getCloneCount(), 0, "Expected Sprite Mond to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, -15, 1, "Expected Sprite Raumschiff to face in direction -15 +-1");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, -160, 1, "Expected Sprite Schwarzes Loch to face in direction -160 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Mond").direction, 90, 1, "Expected Sprite Mond to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(1).direction, 90, 1, "Expected Clone 1 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(2).direction, 90, 1, "Expected Clone 2 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(3).direction, 90, 1, "Expected Clone 3 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(4).direction, 90, 1, "Expected Clone 4 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(5).direction, 90, 1, "Expected Clone 5 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(6).direction, 90, 1, "Expected Clone 6 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Mond").effects.color, 0, "Expected effect color of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.fisheye, 0, "Expected effect fisheye of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.whirl, 0, "Expected effect whirl of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.pixelate, 0, "Expected effect pixelate of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.mosaic, 0, "Expected effect mosaic of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.brightness, 0, "Expected effect brightness of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.ghost, 0, "Expected effect ghost of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.color, 0, "Expected effect color of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.fisheye, 0, "Expected effect fisheye of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.whirl, 0, "Expected effect whirl of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.pixelate, 0, "Expected effect pixelate of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.mosaic, 0, "Expected effect mosaic of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.brightness, 0, "Expected effect brightness of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.ghost, 0, "Expected effect ghost of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.color, 0, "Expected effect color of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.fisheye, 0, "Expected effect fisheye of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.whirl, 0, "Expected effect whirl of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.pixelate, 0, "Expected effect pixelate of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.mosaic, 0, "Expected effect mosaic of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.brightness, 0, "Expected effect brightness of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.ghost, 0, "Expected effect ghost of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.color, 0, "Expected effect color of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.fisheye, 0, "Expected effect fisheye of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.whirl, 0, "Expected effect whirl of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.pixelate, 0, "Expected effect pixelate of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.mosaic, 0, "Expected effect mosaic of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.brightness, 0, "Expected effect brightness of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.ghost, 0, "Expected effect ghost of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 10, "Expected Sprite Raumschiff to be at layer 10");
  t.assert.equal(t.getSprite("Schwarzes Loch").layerOrder, 1, "Expected Sprite Schwarzes Loch to be at layer 1");
  t.assert.equal(t.getSprite("Stern").layerOrder, 9, "Expected Sprite Stern to be at layer 9");
  t.assert.equal(t.getSprite("Mond").layerOrder, 2, "Expected Sprite Mond to be at layer 2");
  t.assert.equal(t.getSprite("Stern").getClone(1).getLayerOrder(), 3, "Expected Clone 1 of Stern to be at layer 3");
  t.assert.equal(t.getSprite("Stern").getClone(2).getLayerOrder(), 4, "Expected Clone 2 of Stern to be at layer 4");
  t.assert.equal(t.getSprite("Stern").getClone(3).getLayerOrder(), 5, "Expected Clone 3 of Stern to be at layer 5");
  t.assert.equal(t.getSprite("Stern").getClone(4).getLayerOrder(), 6, "Expected Clone 4 of Stern to be at layer 6");
  t.assert.equal(t.getSprite("Stern").getClone(5).getLayerOrder(), 7, "Expected Clone 5 of Stern to be at layer 7");
  t.assert.equal(t.getSprite("Stern").getClone(6).getLayerOrder(), 8, "Expected Clone 6 of Stern to be at layer 8");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 103.74118095489747, 5, "Expected Sprite Raumschiff to have x-position 103.74118095489747 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 44.965925826289066, 5, "Expected Sprite Raumschiff to have y-position 44.965925826289066 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, 20.20688986856871, 5, "Expected Sprite Schwarzes Loch to have x-position 20.20688986856871 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -105.9991695219644, 5, "Expected Sprite Schwarzes Loch to have y-position -105.9991695219644 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 144, 5, "Expected Sprite Stern to have x-position 144 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 20, 5, "Expected Sprite Stern to have y-position 20 +-5");
  t.assert.withinRange(t.getSprite("Mond").x, 309, 5, "Expected Sprite Mond to have x-position 309 +-5");
  t.assert.withinRange(t.getSprite("Mond").y, -217, 5, "Expected Sprite Mond to have y-position -217 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 140.16666666666666, 5, "Expected Clone 1 of Stern to have x-position 140.16666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 18.833333333333332, 5, "Expected Clone 1 of Stern to have y-position 18.833333333333332 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 138.95, 5, "Expected Clone 2 of Stern to have x-position 138.95 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 19.55, 5, "Expected Clone 2 of Stern to have y-position 19.55 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 140.93333333333334, 5, "Expected Clone 3 of Stern to have x-position 140.93333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 21.466666666666665, 5, "Expected Clone 3 of Stern to have y-position 21.466666666666665 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -210.6, 5, "Expected Clone 4 of Stern to have x-position -210.6 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 149.7, 5, "Expected Clone 4 of Stern to have y-position 149.7 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -210.5, 5, "Expected Clone 5 of Stern to have x-position -210.5 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 149, 5, "Expected Clone 5 of Stern to have y-position 149 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).x, -210.4, 5, "Expected Clone 6 of Stern to have x-position -210.4 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).y, 151.06666666666666, 5, "Expected Clone 6 of Stern to have y-position 151.06666666666666 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Schwarzes Loch").sayText, "Expected Sprite Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Mond").sayText, "Expected Sprite Mond not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(1).sayText, "Expected Clone 1 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(2).sayText, "Expected Clone 2 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(3).sayText, "Expected Clone 3 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(4).sayText, "Expected Clone 4 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(5).sayText, "Expected Clone 5 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(6).sayText, "Expected Clone 6 of Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").size, 80, 1, "Expected Sprite Schwarzes Loch to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Mond").size, 100, 1, "Expected Sprite Mond to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).size, 50, 1, "Expected Clone 1 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).size, 50, 1, "Expected Clone 2 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).size, 50, 1, "Expected Clone 3 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).size, 50, 1, "Expected Clone 4 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).size, 50, 1, "Expected Clone 5 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).size, 50, 1, "Expected Clone 6 of Stern to have size 50 +-1");
  t.assert.equal(t.getSprite("Stern").getVariable("xPosition").value, "-210", "Expected xPosition to have value -210 in Sprite Stern");
  t.assert.equal(t.getSprite("Stern").getVariable("yPosition").value, "150", "Expected yPosition to have value 150 in Sprite Stern");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Schwarzes Loch").visible, "Expected Sprite Schwarzes Loch to be visible");
  t.assert.not(t.getSprite("Stern").visible, "Expected Sprite Stern not to be visible");
  t.assert.ok(t.getSprite("Mond").visible, "Expected Sprite Mond to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(1).visible, "Expected Clone 1 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(2).visible, "Expected Clone 2 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(3).visible, "Expected Clone 3 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(4).visible, "Expected Clone 4 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(5).visible, "Expected Clone 5 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(6).visible, "Expected Clone 6 of Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Schwarzes Loch").volume, 100, "Expected Sprite Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Mond").volume, 100, "Expected Sprite Mond to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(1).volume, 100, "Expected Clone 1 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(2).volume, 100, "Expected Clone 2 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(3).volume, 100, "Expected Clone 3 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(4).volume, 100, "Expected Clone 4 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(5).volume, 100, "Expected Clone 5 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(6).volume, 100, "Expected Clone 6 of Stern to have volume 100");
  await t.runForSteps(68);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").currentCostume, 0, "Expected Sprite Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Mond").currentCostume, 0, "Expected Sprite Mond to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Mond").getCloneCount(), 0, "Expected Sprite Mond to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, -15, 1, "Expected Sprite Raumschiff to face in direction -15 +-1");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 150, 1, "Expected Sprite Schwarzes Loch to face in direction 150 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Mond").direction, 90, 1, "Expected Sprite Mond to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Mond").effects.color, 0, "Expected effect color of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.fisheye, 0, "Expected effect fisheye of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.whirl, 0, "Expected effect whirl of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.pixelate, 0, "Expected effect pixelate of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.mosaic, 0, "Expected effect mosaic of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.brightness, 0, "Expected effect brightness of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.ghost, 0, "Expected effect ghost of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 4, "Expected Sprite Raumschiff to be at layer 4");
  t.assert.equal(t.getSprite("Schwarzes Loch").layerOrder, 1, "Expected Sprite Schwarzes Loch to be at layer 1");
  t.assert.equal(t.getSprite("Stern").layerOrder, 3, "Expected Sprite Stern to be at layer 3");
  t.assert.equal(t.getSprite("Mond").layerOrder, 2, "Expected Sprite Mond to be at layer 2");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 95.71779055671914, 5, "Expected Sprite Raumschiff to have x-position 95.71779055671914 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 74.90962644125011, 5, "Expected Sprite Raumschiff to have y-position 74.90962644125011 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, 15.996789151940364, 5, "Expected Sprite Schwarzes Loch to have x-position 15.996789151940364 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -82.12250186899058, 5, "Expected Sprite Schwarzes Loch to have y-position -82.12250186899058 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 144, 5, "Expected Sprite Stern to have x-position 144 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 20, 5, "Expected Sprite Stern to have y-position 20 +-5");
  t.assert.withinRange(t.getSprite("Mond").x, 309, 5, "Expected Sprite Mond to have x-position 309 +-5");
  t.assert.withinRange(t.getSprite("Mond").y, -217, 5, "Expected Sprite Mond to have y-position -217 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Schwarzes Loch").sayText, "Expected Sprite Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Mond").sayText, "Expected Sprite Mond not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 5, 1, "Expected Sprite Raumschiff to have size 5 +-1");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").size, 80, 1, "Expected Sprite Schwarzes Loch to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Mond").size, 100, 1, "Expected Sprite Mond to have size 100 +-1");
  t.assert.equal(t.getSprite("Stern").getVariable("xPosition").value, "-210", "Expected xPosition to have value -210 in Sprite Stern");
  t.assert.equal(t.getSprite("Stern").getVariable("yPosition").value, "150", "Expected yPosition to have value 150 in Sprite Stern");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Schwarzes Loch").visible, "Expected Sprite Schwarzes Loch to be visible");
  t.assert.not(t.getSprite("Stern").visible, "Expected Sprite Stern not to be visible");
  t.assert.ok(t.getSprite("Mond").visible, "Expected Sprite Mond to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Schwarzes Loch").volume, 100, "Expected Sprite Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Mond").volume, 100, "Expected Sprite Mond to have volume 100");
  t.end();
}
const test3 = async function (t) {
  await t.runForSteps(9);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").currentCostume, 0, "Expected Sprite Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Mond").currentCostume, 0, "Expected Sprite Mond to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).currentCostume, 0, "Expected Clone 1 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).currentCostume, 0, "Expected Clone 2 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).currentCostume, 0, "Expected Clone 3 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).currentCostume, 0, "Expected Clone 4 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).currentCostume, 0, "Expected Clone 5 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).currentCostume, 0, "Expected Clone 6 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 6, "Expected Sprite Stern to have 6 clones");
  t.assert.equal(t.getSprite("Mond").getCloneCount(), 0, "Expected Sprite Mond to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, -15, 1, "Expected Sprite Raumschiff to face in direction -15 +-1");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, -170, 1, "Expected Sprite Schwarzes Loch to face in direction -170 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Mond").direction, 90, 1, "Expected Sprite Mond to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(1).direction, 90, 1, "Expected Clone 1 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(2).direction, 90, 1, "Expected Clone 2 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(3).direction, 90, 1, "Expected Clone 3 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(4).direction, 90, 1, "Expected Clone 4 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(5).direction, 90, 1, "Expected Clone 5 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(6).direction, 90, 1, "Expected Clone 6 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Mond").effects.color, 0, "Expected effect color of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.fisheye, 0, "Expected effect fisheye of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.whirl, 0, "Expected effect whirl of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.pixelate, 0, "Expected effect pixelate of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.mosaic, 0, "Expected effect mosaic of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.brightness, 0, "Expected effect brightness of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.ghost, 0, "Expected effect ghost of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.color, 0, "Expected effect color of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.fisheye, 0, "Expected effect fisheye of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.whirl, 0, "Expected effect whirl of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.pixelate, 0, "Expected effect pixelate of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.mosaic, 0, "Expected effect mosaic of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.brightness, 0, "Expected effect brightness of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.ghost, 0, "Expected effect ghost of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.color, 0, "Expected effect color of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.fisheye, 0, "Expected effect fisheye of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.whirl, 0, "Expected effect whirl of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.pixelate, 0, "Expected effect pixelate of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.mosaic, 0, "Expected effect mosaic of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.brightness, 0, "Expected effect brightness of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.ghost, 0, "Expected effect ghost of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.color, 0, "Expected effect color of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.fisheye, 0, "Expected effect fisheye of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.whirl, 0, "Expected effect whirl of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.pixelate, 0, "Expected effect pixelate of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.mosaic, 0, "Expected effect mosaic of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.brightness, 0, "Expected effect brightness of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.ghost, 0, "Expected effect ghost of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 10, "Expected Sprite Raumschiff to be at layer 10");
  t.assert.equal(t.getSprite("Schwarzes Loch").layerOrder, 1, "Expected Sprite Schwarzes Loch to be at layer 1");
  t.assert.equal(t.getSprite("Stern").layerOrder, 9, "Expected Sprite Stern to be at layer 9");
  t.assert.equal(t.getSprite("Mond").layerOrder, 2, "Expected Sprite Mond to be at layer 2");
  t.assert.equal(t.getSprite("Stern").getClone(1).getLayerOrder(), 3, "Expected Clone 1 of Stern to be at layer 3");
  t.assert.equal(t.getSprite("Stern").getClone(2).getLayerOrder(), 4, "Expected Clone 2 of Stern to be at layer 4");
  t.assert.equal(t.getSprite("Stern").getClone(3).getLayerOrder(), 5, "Expected Clone 3 of Stern to be at layer 5");
  t.assert.equal(t.getSprite("Stern").getClone(4).getLayerOrder(), 6, "Expected Clone 4 of Stern to be at layer 6");
  t.assert.equal(t.getSprite("Stern").getClone(5).getLayerOrder(), 7, "Expected Clone 5 of Stern to be at layer 7");
  t.assert.equal(t.getSprite("Stern").getClone(6).getLayerOrder(), 8, "Expected Clone 6 of Stern to be at layer 8");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -202.58819045102513, 5, "Expected Sprite Raumschiff to have x-position -202.58819045102513 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -160.34074173710934, 5, "Expected Sprite Raumschiff to have y-position -160.34074173710934 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, 21.07513075690336, 5, "Expected Sprite Schwarzes Loch to have x-position 21.07513075690336 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -101.07513075690336, 5, "Expected Sprite Schwarzes Loch to have y-position -101.07513075690336 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 144, 5, "Expected Sprite Stern to have x-position 144 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 20, 5, "Expected Sprite Stern to have y-position 20 +-5");
  t.assert.withinRange(t.getSprite("Mond").x, 309, 5, "Expected Sprite Mond to have x-position 309 +-5");
  t.assert.withinRange(t.getSprite("Mond").y, -217, 5, "Expected Sprite Mond to have y-position -217 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 140.15, 5, "Expected Clone 1 of Stern to have x-position 140.15 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 18.95, 5, "Expected Clone 1 of Stern to have y-position 18.95 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 139.06666666666666, 5, "Expected Clone 2 of Stern to have x-position 139.06666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 19.6, 5, "Expected Clone 2 of Stern to have y-position 19.6 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 140.81666666666666, 5, "Expected Clone 3 of Stern to have x-position 140.81666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 21.283333333333335, 5, "Expected Clone 3 of Stern to have y-position 21.283333333333335 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -210.5, 5, "Expected Clone 4 of Stern to have x-position -210.5 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 149.75, 5, "Expected Clone 4 of Stern to have y-position 149.75 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -210.4, 5, "Expected Clone 5 of Stern to have x-position -210.4 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 149.2, 5, "Expected Clone 5 of Stern to have y-position 149.2 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).x, -210.3, 5, "Expected Clone 6 of Stern to have x-position -210.3 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).y, 150.8, 5, "Expected Clone 6 of Stern to have y-position 150.8 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Schwarzes Loch").sayText, "Expected Sprite Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Mond").sayText, "Expected Sprite Mond not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(1).sayText, "Expected Clone 1 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(2).sayText, "Expected Clone 2 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(3).sayText, "Expected Clone 3 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(4).sayText, "Expected Clone 4 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(5).sayText, "Expected Clone 5 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(6).sayText, "Expected Clone 6 of Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").size, 80, 1, "Expected Sprite Schwarzes Loch to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Mond").size, 100, 1, "Expected Sprite Mond to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).size, 50, 1, "Expected Clone 1 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).size, 50, 1, "Expected Clone 2 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).size, 50, 1, "Expected Clone 3 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).size, 50, 1, "Expected Clone 4 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).size, 50, 1, "Expected Clone 5 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).size, 50, 1, "Expected Clone 6 of Stern to have size 50 +-1");
  t.assert.equal(t.getSprite("Stern").getVariable("xPosition").value, "-210", "Expected xPosition to have value -210 in Sprite Stern");
  t.assert.equal(t.getSprite("Stern").getVariable("yPosition").value, "150", "Expected yPosition to have value 150 in Sprite Stern");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Schwarzes Loch").visible, "Expected Sprite Schwarzes Loch to be visible");
  t.assert.not(t.getSprite("Stern").visible, "Expected Sprite Stern not to be visible");
  t.assert.ok(t.getSprite("Mond").visible, "Expected Sprite Mond to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(1).visible, "Expected Clone 1 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(2).visible, "Expected Clone 2 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(3).visible, "Expected Clone 3 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(4).visible, "Expected Clone 4 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(5).visible, "Expected Clone 5 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(6).visible, "Expected Clone 6 of Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Schwarzes Loch").volume, 100, "Expected Sprite Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Mond").volume, 100, "Expected Sprite Mond to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(1).volume, 100, "Expected Clone 1 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(2).volume, 100, "Expected Clone 2 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(3).volume, 100, "Expected Clone 3 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(4).volume, 100, "Expected Clone 4 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(5).volume, 100, "Expected Clone 5 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(6).volume, 100, "Expected Clone 6 of Stern to have volume 100");
  t.keyPress('right arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").currentCostume, 0, "Expected Sprite Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Mond").currentCostume, 0, "Expected Sprite Mond to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).currentCostume, 0, "Expected Clone 1 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).currentCostume, 0, "Expected Clone 2 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).currentCostume, 0, "Expected Clone 3 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).currentCostume, 0, "Expected Clone 4 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).currentCostume, 0, "Expected Clone 5 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).currentCostume, 0, "Expected Clone 6 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 6, "Expected Sprite Stern to have 6 clones");
  t.assert.equal(t.getSprite("Mond").getCloneCount(), 0, "Expected Sprite Mond to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 0, 1, "Expected Sprite Raumschiff to face in direction 0 +-1");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, -150, 1, "Expected Sprite Schwarzes Loch to face in direction -150 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Mond").direction, 90, 1, "Expected Sprite Mond to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(1).direction, 90, 1, "Expected Clone 1 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(2).direction, 90, 1, "Expected Clone 2 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(3).direction, 90, 1, "Expected Clone 3 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(4).direction, 90, 1, "Expected Clone 4 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(5).direction, 90, 1, "Expected Clone 5 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(6).direction, 90, 1, "Expected Clone 6 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Mond").effects.color, 0, "Expected effect color of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.fisheye, 0, "Expected effect fisheye of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.whirl, 0, "Expected effect whirl of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.pixelate, 0, "Expected effect pixelate of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.mosaic, 0, "Expected effect mosaic of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.brightness, 0, "Expected effect brightness of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.ghost, 0, "Expected effect ghost of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.color, 0, "Expected effect color of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.fisheye, 0, "Expected effect fisheye of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.whirl, 0, "Expected effect whirl of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.pixelate, 0, "Expected effect pixelate of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.mosaic, 0, "Expected effect mosaic of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.brightness, 0, "Expected effect brightness of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.ghost, 0, "Expected effect ghost of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.color, 0, "Expected effect color of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.fisheye, 0, "Expected effect fisheye of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.whirl, 0, "Expected effect whirl of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.pixelate, 0, "Expected effect pixelate of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.mosaic, 0, "Expected effect mosaic of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.brightness, 0, "Expected effect brightness of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.ghost, 0, "Expected effect ghost of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.color, 0, "Expected effect color of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.fisheye, 0, "Expected effect fisheye of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.whirl, 0, "Expected effect whirl of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.pixelate, 0, "Expected effect pixelate of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.mosaic, 0, "Expected effect mosaic of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.brightness, 0, "Expected effect brightness of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.ghost, 0, "Expected effect ghost of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 10, "Expected Sprite Raumschiff to be at layer 10");
  t.assert.equal(t.getSprite("Schwarzes Loch").layerOrder, 1, "Expected Sprite Schwarzes Loch to be at layer 1");
  t.assert.equal(t.getSprite("Stern").layerOrder, 9, "Expected Sprite Stern to be at layer 9");
  t.assert.equal(t.getSprite("Mond").layerOrder, 2, "Expected Sprite Mond to be at layer 2");
  t.assert.equal(t.getSprite("Stern").getClone(1).getLayerOrder(), 3, "Expected Clone 1 of Stern to be at layer 3");
  t.assert.equal(t.getSprite("Stern").getClone(2).getLayerOrder(), 4, "Expected Clone 2 of Stern to be at layer 4");
  t.assert.equal(t.getSprite("Stern").getClone(3).getLayerOrder(), 5, "Expected Clone 3 of Stern to be at layer 5");
  t.assert.equal(t.getSprite("Stern").getClone(4).getLayerOrder(), 6, "Expected Clone 4 of Stern to be at layer 6");
  t.assert.equal(t.getSprite("Stern").getClone(5).getLayerOrder(), 7, "Expected Clone 5 of Stern to be at layer 7");
  t.assert.equal(t.getSprite("Stern").getClone(6).getLayerOrder(), 8, "Expected Clone 6 of Stern to be at layer 8");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -202.84700949612764, 5, "Expected Sprite Raumschiff to have x-position -202.84700949612764 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -158.37481591082027, 5, "Expected Sprite Raumschiff to have y-position -158.37481591082027 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, 18.496789151940362, 5, "Expected Sprite Schwarzes Loch to have x-position 18.496789151940362 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -110.69763262589395, 5, "Expected Sprite Schwarzes Loch to have y-position -110.69763262589395 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 144, 5, "Expected Sprite Stern to have x-position 144 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 20, 5, "Expected Sprite Stern to have y-position 20 +-5");
  t.assert.withinRange(t.getSprite("Mond").x, 309, 5, "Expected Sprite Mond to have x-position 309 +-5");
  t.assert.withinRange(t.getSprite("Mond").y, -217, 5, "Expected Sprite Mond to have y-position -217 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 140.18333333333334, 5, "Expected Clone 1 of Stern to have x-position 140.18333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 18.71666666666667, 5, "Expected Clone 1 of Stern to have y-position 18.71666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 138.83333333333334, 5, "Expected Clone 2 of Stern to have x-position 138.83333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 19.5, 5, "Expected Clone 2 of Stern to have y-position 19.5 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 141.05, 5, "Expected Clone 3 of Stern to have x-position 141.05 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 21.65, 5, "Expected Clone 3 of Stern to have y-position 21.65 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -210.7, 5, "Expected Clone 4 of Stern to have x-position -210.7 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 149.65, 5, "Expected Clone 4 of Stern to have y-position 149.65 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -210.6, 5, "Expected Clone 5 of Stern to have x-position -210.6 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 148.8, 5, "Expected Clone 5 of Stern to have y-position 148.8 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).x, -210.5, 5, "Expected Clone 6 of Stern to have x-position -210.5 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).y, 151.33333333333334, 5, "Expected Clone 6 of Stern to have y-position 151.33333333333334 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Schwarzes Loch").sayText, "Expected Sprite Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Mond").sayText, "Expected Sprite Mond not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(1).sayText, "Expected Clone 1 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(2).sayText, "Expected Clone 2 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(3).sayText, "Expected Clone 3 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(4).sayText, "Expected Clone 4 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(5).sayText, "Expected Clone 5 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(6).sayText, "Expected Clone 6 of Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").size, 80, 1, "Expected Sprite Schwarzes Loch to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Mond").size, 100, 1, "Expected Sprite Mond to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).size, 50, 1, "Expected Clone 1 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).size, 50, 1, "Expected Clone 2 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).size, 50, 1, "Expected Clone 3 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).size, 50, 1, "Expected Clone 4 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).size, 50, 1, "Expected Clone 5 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).size, 50, 1, "Expected Clone 6 of Stern to have size 50 +-1");
  t.assert.equal(t.getSprite("Stern").getVariable("xPosition").value, "-210", "Expected xPosition to have value -210 in Sprite Stern");
  t.assert.equal(t.getSprite("Stern").getVariable("yPosition").value, "150", "Expected yPosition to have value 150 in Sprite Stern");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Schwarzes Loch").visible, "Expected Sprite Schwarzes Loch to be visible");
  t.assert.not(t.getSprite("Stern").visible, "Expected Sprite Stern not to be visible");
  t.assert.ok(t.getSprite("Mond").visible, "Expected Sprite Mond to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(1).visible, "Expected Clone 1 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(2).visible, "Expected Clone 2 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(3).visible, "Expected Clone 3 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(4).visible, "Expected Clone 4 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(5).visible, "Expected Clone 5 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(6).visible, "Expected Clone 6 of Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Schwarzes Loch").volume, 100, "Expected Sprite Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Mond").volume, 100, "Expected Sprite Mond to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(1).volume, 100, "Expected Clone 1 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(2).volume, 100, "Expected Clone 2 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(3).volume, 100, "Expected Clone 3 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(4).volume, 100, "Expected Clone 4 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(5).volume, 100, "Expected Clone 5 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(6).volume, 100, "Expected Clone 6 of Stern to have volume 100");
  t.end();
}

module.exports = [
  {
      test: test0,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687937760699',
      type: 'standard',
  },
  {
      test: test1,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687937760699',
      type: 'standard',
  },
  {
      test: test2,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687937760699',
      type: 'standard',
  },
  {
      test: test3,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687937760699',
      type: 'standard',
  }
]
