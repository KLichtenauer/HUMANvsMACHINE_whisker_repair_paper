const test0 = async function (t) {
  t.dragSprite('Katze', -59.16505535405821, -56.3364828633481, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Katze").currentCostume, 0, "Expected Sprite Katze to have costume 0");
  t.assert.equal(t.getSprite("Tera").currentCostume, 0, "Expected Sprite Tera to have costume 0");
  t.assert.equal(t.getSprite("Katze").getCloneCount(), 0, "Expected Sprite Katze to have 0 clones");
  t.assert.equal(t.getSprite("Tera").getCloneCount(), 0, "Expected Sprite Tera to have 0 clones");
  t.assert.equal(t.getSprite("Katze").direction, 90, 1, "Expected Sprite Katze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Tera").direction, 90, 1, "Expected Sprite Tera to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Katze").effects.color, 0, "Expected effect color of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.fisheye, 0, "Expected effect fisheye of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.whirl, 0, "Expected effect whirl of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.pixelate, 0, "Expected effect pixelate of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.mosaic, 0, "Expected effect mosaic of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.brightness, 0, "Expected effect brightness of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.ghost, 0, "Expected effect ghost of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Tera").effects.color, 0, "Expected effect color of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.fisheye, 0, "Expected effect fisheye of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.whirl, 0, "Expected effect whirl of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.pixelate, 0, "Expected effect pixelate of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.mosaic, 0, "Expected effect mosaic of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.brightness, 0, "Expected effect brightness of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.ghost, 0, "Expected effect ghost of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Katze").layerOrder, 3, "Expected Sprite Katze to be at layer 3");
  t.assert.equal(t.getSprite("Tera").layerOrder, 2, "Expected Sprite Tera to be at layer 2");
  t.assert.withinRange(t.getSprite("Katze").x, -195, 5, "Expected Sprite Katze to have x-position -195 +-5");
  t.assert.withinRange(t.getSprite("Katze").y, 0, 5, "Expected Sprite Katze to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Tera").x, -74, 5, "Expected Sprite Tera to have x-position -74 +-5");
  t.assert.withinRange(t.getSprite("Tera").y, -107, 5, "Expected Sprite Tera to have y-position -107 +-5");
  t.assert.not(t.getSprite("Katze").sayText, "Expected Sprite Katze not to say anything");
  t.assert.not(t.getSprite("Tera").sayText, "Expected Sprite Tera not to say anything");
  t.assert.withinRange(t.getSprite("Katze").size, 70, 1, "Expected Sprite Katze to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Tera").size, 60, 1, "Expected Sprite Tera to have size 60 +-1");
  t.assert.equal(t.getSprite("Katze").getVariable("Meine Z端ge").value, "0", "Expected Meine Z端ge to have value 0 in Sprite Katze");
  t.assert.ok(t.getSprite("Katze").visible, "Expected Sprite Katze to be visible");
  t.assert.not(t.getSprite("Tera").visible, "Expected Sprite Tera not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Katze").volume, 100, "Expected Sprite Katze to have volume 100");
  t.assert.equal(t.getSprite("Tera").volume, 100, "Expected Sprite Tera to have volume 100");
  t.dragSprite('Katze', -60.51533285494396, -45.44618084963669, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Katze").currentCostume, 0, "Expected Sprite Katze to have costume 0");
  t.assert.equal(t.getSprite("Tera").currentCostume, 0, "Expected Sprite Tera to have costume 0");
  t.assert.equal(t.getSprite("Katze").getCloneCount(), 0, "Expected Sprite Katze to have 0 clones");
  t.assert.equal(t.getSprite("Tera").getCloneCount(), 0, "Expected Sprite Tera to have 0 clones");
  t.assert.equal(t.getSprite("Katze").direction, 90, 1, "Expected Sprite Katze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Tera").direction, 90, 1, "Expected Sprite Tera to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Katze").effects.color, 0, "Expected effect color of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.fisheye, 0, "Expected effect fisheye of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.whirl, 0, "Expected effect whirl of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.pixelate, 0, "Expected effect pixelate of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.mosaic, 0, "Expected effect mosaic of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.brightness, 0, "Expected effect brightness of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.ghost, 0, "Expected effect ghost of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Tera").effects.color, 0, "Expected effect color of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.fisheye, 0, "Expected effect fisheye of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.whirl, 0, "Expected effect whirl of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.pixelate, 0, "Expected effect pixelate of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.mosaic, 0, "Expected effect mosaic of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.brightness, 0, "Expected effect brightness of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.ghost, 0, "Expected effect ghost of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Katze").layerOrder, 3, "Expected Sprite Katze to be at layer 3");
  t.assert.equal(t.getSprite("Tera").layerOrder, 2, "Expected Sprite Tera to be at layer 2");
  t.assert.withinRange(t.getSprite("Katze").x, -60.51533285494396, 5, "Expected Sprite Katze to have x-position -60.51533285494396 +-5");
  t.assert.withinRange(t.getSprite("Katze").y, -45.44618084963669, 5, "Expected Sprite Katze to have y-position -45.44618084963669 +-5");
  t.assert.withinRange(t.getSprite("Tera").x, -74, 5, "Expected Sprite Tera to have x-position -74 +-5");
  t.assert.withinRange(t.getSprite("Tera").y, -107, 5, "Expected Sprite Tera to have y-position -107 +-5");
  t.assert.not(t.getSprite("Katze").sayText, "Expected Sprite Katze not to say anything");
  t.assert.not(t.getSprite("Tera").sayText, "Expected Sprite Tera not to say anything");
  t.assert.withinRange(t.getSprite("Katze").size, 70, 1, "Expected Sprite Katze to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Tera").size, 60, 1, "Expected Sprite Tera to have size 60 +-1");
  t.assert.equal(t.getSprite("Katze").getVariable("Meine Z端ge").value, "0", "Expected Meine Z端ge to have value 0 in Sprite Katze");
  t.assert.ok(t.getSprite("Katze").visible, "Expected Sprite Katze to be visible");
  t.assert.not(t.getSprite("Tera").visible, "Expected Sprite Tera not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Katze").volume, 100, "Expected Sprite Katze to have volume 100");
  t.assert.equal(t.getSprite("Tera").volume, 100, "Expected Sprite Tera to have volume 100");
  t.dragSprite('Katze', -54.43586596230989, -97.68300767095037, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Katze").currentCostume, 0, "Expected Sprite Katze to have costume 0");
  t.assert.equal(t.getSprite("Tera").currentCostume, 0, "Expected Sprite Tera to have costume 0");
  t.assert.equal(t.getSprite("Katze").getCloneCount(), 0, "Expected Sprite Katze to have 0 clones");
  t.assert.equal(t.getSprite("Tera").getCloneCount(), 0, "Expected Sprite Tera to have 0 clones");
  t.assert.equal(t.getSprite("Katze").direction, 90, 1, "Expected Sprite Katze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Tera").direction, 90, 1, "Expected Sprite Tera to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Katze").effects.color, 0, "Expected effect color of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.fisheye, 0, "Expected effect fisheye of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.whirl, 0, "Expected effect whirl of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.pixelate, 0, "Expected effect pixelate of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.mosaic, 0, "Expected effect mosaic of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.brightness, 0, "Expected effect brightness of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.ghost, 0, "Expected effect ghost of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Tera").effects.color, 0, "Expected effect color of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.fisheye, 0, "Expected effect fisheye of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.whirl, 0, "Expected effect whirl of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.pixelate, 0, "Expected effect pixelate of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.mosaic, 0, "Expected effect mosaic of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.brightness, 0, "Expected effect brightness of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.ghost, 0, "Expected effect ghost of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Katze").layerOrder, 3, "Expected Sprite Katze to be at layer 3");
  t.assert.equal(t.getSprite("Tera").layerOrder, 2, "Expected Sprite Tera to be at layer 2");
  t.assert.withinRange(t.getSprite("Katze").x, -54.43586596230989, 5, "Expected Sprite Katze to have x-position -54.43586596230989 +-5");
  t.assert.withinRange(t.getSprite("Katze").y, -97.68300767095037, 5, "Expected Sprite Katze to have y-position -97.68300767095037 +-5");
  t.assert.withinRange(t.getSprite("Tera").x, 26, 5, "Expected Sprite Tera to have x-position 26 +-5");
  t.assert.withinRange(t.getSprite("Tera").y, -7, 5, "Expected Sprite Tera to have y-position -7 +-5");
  t.assert.not(t.getSprite("Katze").sayText, "Expected Sprite Katze not to say anything");
  t.assert.not(t.getSprite("Tera").sayText, "Expected Sprite Tera not to say anything");
  t.assert.withinRange(t.getSprite("Katze").size, 70, 1, "Expected Sprite Katze to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Tera").size, 60, 1, "Expected Sprite Tera to have size 60 +-1");
  t.assert.equal(t.getSprite("Katze").getVariable("Meine Z端ge").value, "0", "Expected Meine Z端ge to have value 0 in Sprite Katze");
  t.assert.ok(t.getSprite("Katze").visible, "Expected Sprite Katze to be visible");
  t.assert.not(t.getSprite("Tera").visible, "Expected Sprite Tera not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Katze").volume, 100, "Expected Sprite Katze to have volume 100");
  t.assert.equal(t.getSprite("Tera").volume, 100, "Expected Sprite Tera to have volume 100");
  t.mouseDown(true);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Katze").currentCostume, 0, "Expected Sprite Katze to have costume 0");
  t.assert.equal(t.getSprite("Tera").currentCostume, 0, "Expected Sprite Tera to have costume 0");
  t.assert.equal(t.getSprite("Katze").getCloneCount(), 0, "Expected Sprite Katze to have 0 clones");
  t.assert.equal(t.getSprite("Tera").getCloneCount(), 0, "Expected Sprite Tera to have 0 clones");
  t.assert.equal(t.getSprite("Katze").direction, 90, 1, "Expected Sprite Katze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Tera").direction, 90, 1, "Expected Sprite Tera to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Katze").effects.color, 0, "Expected effect color of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.fisheye, 0, "Expected effect fisheye of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.whirl, 0, "Expected effect whirl of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.pixelate, 0, "Expected effect pixelate of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.mosaic, 0, "Expected effect mosaic of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.brightness, 0, "Expected effect brightness of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.ghost, 0, "Expected effect ghost of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Tera").effects.color, 0, "Expected effect color of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.fisheye, 0, "Expected effect fisheye of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.whirl, 0, "Expected effect whirl of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.pixelate, 0, "Expected effect pixelate of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.mosaic, 0, "Expected effect mosaic of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.brightness, 0, "Expected effect brightness of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.ghost, 0, "Expected effect ghost of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Katze").layerOrder, 3, "Expected Sprite Katze to be at layer 3");
  t.assert.equal(t.getSprite("Tera").layerOrder, 2, "Expected Sprite Tera to be at layer 2");
  t.assert.withinRange(t.getSprite("Katze").x, 0, 5, "Expected Sprite Katze to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Katze").y, 0, 5, "Expected Sprite Katze to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Tera").x, 26, 5, "Expected Sprite Tera to have x-position 26 +-5");
  t.assert.withinRange(t.getSprite("Tera").y, -7, 5, "Expected Sprite Tera to have y-position -7 +-5");
  t.assert.not(t.getSprite("Katze").sayText, "Expected Sprite Katze not to say anything");
  t.assert.not(t.getSprite("Tera").sayText, "Expected Sprite Tera not to say anything");
  t.assert.withinRange(t.getSprite("Katze").size, 70, 1, "Expected Sprite Katze to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Tera").size, 60, 1, "Expected Sprite Tera to have size 60 +-1");
  t.assert.equal(t.getSprite("Katze").getVariable("Meine Z端ge").value, "0", "Expected Meine Z端ge to have value 0 in Sprite Katze");
  t.assert.ok(t.getSprite("Katze").visible, "Expected Sprite Katze to be visible");
  t.assert.not(t.getSprite("Tera").visible, "Expected Sprite Tera not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Katze").volume, 100, "Expected Sprite Katze to have volume 100");
  t.assert.equal(t.getSprite("Tera").volume, 100, "Expected Sprite Tera to have volume 100");
  t.mouseMove(32, -101);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Katze").currentCostume, 0, "Expected Sprite Katze to have costume 0");
  t.assert.equal(t.getSprite("Tera").currentCostume, 0, "Expected Sprite Tera to have costume 0");
  t.assert.equal(t.getSprite("Katze").getCloneCount(), 0, "Expected Sprite Katze to have 0 clones");
  t.assert.equal(t.getSprite("Tera").getCloneCount(), 0, "Expected Sprite Tera to have 0 clones");
  t.assert.equal(t.getSprite("Katze").direction, 90, 1, "Expected Sprite Katze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Tera").direction, 90, 1, "Expected Sprite Tera to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Katze").effects.color, 0, "Expected effect color of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.fisheye, 0, "Expected effect fisheye of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.whirl, 0, "Expected effect whirl of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.pixelate, 0, "Expected effect pixelate of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.mosaic, 0, "Expected effect mosaic of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.brightness, 0, "Expected effect brightness of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.ghost, 0, "Expected effect ghost of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Tera").effects.color, 0, "Expected effect color of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.fisheye, 0, "Expected effect fisheye of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.whirl, 0, "Expected effect whirl of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.pixelate, 0, "Expected effect pixelate of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.mosaic, 0, "Expected effect mosaic of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.brightness, 0, "Expected effect brightness of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.ghost, 0, "Expected effect ghost of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Katze").layerOrder, 3, "Expected Sprite Katze to be at layer 3");
  t.assert.equal(t.getSprite("Tera").layerOrder, 2, "Expected Sprite Tera to be at layer 2");
  t.assert.withinRange(t.getSprite("Katze").x, 0, 5, "Expected Sprite Katze to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Katze").y, 0, 5, "Expected Sprite Katze to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Tera").x, 26, 5, "Expected Sprite Tera to have x-position 26 +-5");
  t.assert.withinRange(t.getSprite("Tera").y, 93, 5, "Expected Sprite Tera to have y-position 93 +-5");
  t.assert.not(t.getSprite("Katze").sayText, "Expected Sprite Katze not to say anything");
  t.assert.not(t.getSprite("Tera").sayText, "Expected Sprite Tera not to say anything");
  t.assert.withinRange(t.getSprite("Katze").size, 70, 1, "Expected Sprite Katze to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Tera").size, 60, 1, "Expected Sprite Tera to have size 60 +-1");
  t.assert.equal(t.getSprite("Katze").getVariable("Meine Z端ge").value, "0", "Expected Meine Z端ge to have value 0 in Sprite Katze");
  t.assert.ok(t.getSprite("Katze").visible, "Expected Sprite Katze to be visible");
  t.assert.not(t.getSprite("Tera").visible, "Expected Sprite Tera not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Katze").volume, 100, "Expected Sprite Katze to have volume 100");
  t.assert.equal(t.getSprite("Tera").volume, 100, "Expected Sprite Tera to have volume 100");
  t.dragSprite('Katze', -120, -105, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Katze").currentCostume, 0, "Expected Sprite Katze to have costume 0");
  t.assert.equal(t.getSprite("Tera").currentCostume, 0, "Expected Sprite Tera to have costume 0");
  t.assert.equal(t.getSprite("Katze").getCloneCount(), 0, "Expected Sprite Katze to have 0 clones");
  t.assert.equal(t.getSprite("Tera").getCloneCount(), 0, "Expected Sprite Tera to have 0 clones");
  t.assert.equal(t.getSprite("Katze").direction, 90, 1, "Expected Sprite Katze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Tera").direction, 90, 1, "Expected Sprite Tera to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Katze").effects.color, 0, "Expected effect color of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.fisheye, 0, "Expected effect fisheye of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.whirl, 0, "Expected effect whirl of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.pixelate, 0, "Expected effect pixelate of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.mosaic, 0, "Expected effect mosaic of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.brightness, 0, "Expected effect brightness of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.ghost, 0, "Expected effect ghost of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Tera").effects.color, 0, "Expected effect color of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.fisheye, 0, "Expected effect fisheye of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.whirl, 0, "Expected effect whirl of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.pixelate, 0, "Expected effect pixelate of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.mosaic, 0, "Expected effect mosaic of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.brightness, 0, "Expected effect brightness of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.ghost, 0, "Expected effect ghost of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Katze").layerOrder, 3, "Expected Sprite Katze to be at layer 3");
  t.assert.equal(t.getSprite("Tera").layerOrder, 2, "Expected Sprite Tera to be at layer 2");
  t.assert.withinRange(t.getSprite("Katze").x, -120, 5, "Expected Sprite Katze to have x-position -120 +-5");
  t.assert.withinRange(t.getSprite("Katze").y, -105, 5, "Expected Sprite Katze to have y-position -105 +-5");
  t.assert.withinRange(t.getSprite("Tera").x, 126, 5, "Expected Sprite Tera to have x-position 126 +-5");
  t.assert.withinRange(t.getSprite("Tera").y, 93, 5, "Expected Sprite Tera to have y-position 93 +-5");
  t.assert.not(t.getSprite("Katze").sayText, "Expected Sprite Katze not to say anything");
  t.assert.not(t.getSprite("Tera").sayText, "Expected Sprite Tera not to say anything");
  t.assert.withinRange(t.getSprite("Katze").size, 70, 1, "Expected Sprite Katze to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Tera").size, 60, 1, "Expected Sprite Tera to have size 60 +-1");
  t.assert.equal(t.getSprite("Katze").getVariable("Meine Z端ge").value, "0", "Expected Meine Z端ge to have value 0 in Sprite Katze");
  t.assert.ok(t.getSprite("Katze").visible, "Expected Sprite Katze to be visible");
  t.assert.not(t.getSprite("Tera").visible, "Expected Sprite Tera not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Katze").volume, 100, "Expected Sprite Katze to have volume 100");
  t.assert.equal(t.getSprite("Tera").volume, 100, "Expected Sprite Tera to have volume 100");
  t.mouseMove(-239, -111);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Katze").currentCostume, 0, "Expected Sprite Katze to have costume 0");
  t.assert.equal(t.getSprite("Tera").currentCostume, 0, "Expected Sprite Tera to have costume 0");
  t.assert.equal(t.getSprite("Katze").getCloneCount(), 0, "Expected Sprite Katze to have 0 clones");
  t.assert.equal(t.getSprite("Tera").getCloneCount(), 0, "Expected Sprite Tera to have 0 clones");
  t.assert.equal(t.getSprite("Katze").direction, 90, 1, "Expected Sprite Katze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Tera").direction, 90, 1, "Expected Sprite Tera to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Katze").effects.color, 0, "Expected effect color of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.fisheye, 0, "Expected effect fisheye of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.whirl, 0, "Expected effect whirl of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.pixelate, 0, "Expected effect pixelate of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.mosaic, 0, "Expected effect mosaic of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.brightness, 0, "Expected effect brightness of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.ghost, 0, "Expected effect ghost of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Tera").effects.color, 0, "Expected effect color of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.fisheye, 0, "Expected effect fisheye of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.whirl, 0, "Expected effect whirl of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.pixelate, 0, "Expected effect pixelate of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.mosaic, 0, "Expected effect mosaic of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.brightness, 0, "Expected effect brightness of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.ghost, 0, "Expected effect ghost of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Katze").layerOrder, 3, "Expected Sprite Katze to be at layer 3");
  t.assert.equal(t.getSprite("Tera").layerOrder, 2, "Expected Sprite Tera to be at layer 2");
  t.assert.withinRange(t.getSprite("Katze").x, -120, 5, "Expected Sprite Katze to have x-position -120 +-5");
  t.assert.withinRange(t.getSprite("Katze").y, -105, 5, "Expected Sprite Katze to have y-position -105 +-5");
  t.assert.withinRange(t.getSprite("Tera").x, 126, 5, "Expected Sprite Tera to have x-position 126 +-5");
  t.assert.withinRange(t.getSprite("Tera").y, -107, 5, "Expected Sprite Tera to have y-position -107 +-5");
  t.assert.not(t.getSprite("Katze").sayText, "Expected Sprite Katze not to say anything");
  t.assert.not(t.getSprite("Tera").sayText, "Expected Sprite Tera not to say anything");
  t.assert.withinRange(t.getSprite("Katze").size, 70, 1, "Expected Sprite Katze to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Tera").size, 60, 1, "Expected Sprite Tera to have size 60 +-1");
  t.assert.equal(t.getSprite("Katze").getVariable("Meine Z端ge").value, "0", "Expected Meine Z端ge to have value 0 in Sprite Katze");
  t.assert.ok(t.getSprite("Katze").visible, "Expected Sprite Katze to be visible");
  t.assert.not(t.getSprite("Tera").visible, "Expected Sprite Tera not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Katze").volume, 100, "Expected Sprite Katze to have volume 100");
  t.assert.equal(t.getSprite("Tera").volume, 100, "Expected Sprite Tera to have volume 100");
  await t.runForSteps(43);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Katze").currentCostume, 0, "Expected Sprite Katze to have costume 0");
  t.assert.equal(t.getSprite("Tera").currentCostume, 0, "Expected Sprite Tera to have costume 0");
  t.assert.equal(t.getSprite("Katze").getCloneCount(), 0, "Expected Sprite Katze to have 0 clones");
  t.assert.equal(t.getSprite("Tera").getCloneCount(), 0, "Expected Sprite Tera to have 0 clones");
  t.assert.equal(t.getSprite("Katze").direction, 90, 1, "Expected Sprite Katze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Tera").direction, 90, 1, "Expected Sprite Tera to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Katze").effects.color, 0, "Expected effect color of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.fisheye, 0, "Expected effect fisheye of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.whirl, 0, "Expected effect whirl of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.pixelate, 0, "Expected effect pixelate of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.mosaic, 0, "Expected effect mosaic of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.brightness, 0, "Expected effect brightness of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.ghost, 0, "Expected effect ghost of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Tera").effects.color, 0, "Expected effect color of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.fisheye, 0, "Expected effect fisheye of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.whirl, 0, "Expected effect whirl of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.pixelate, 0, "Expected effect pixelate of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.mosaic, 0, "Expected effect mosaic of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.brightness, 0, "Expected effect brightness of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.ghost, 0, "Expected effect ghost of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Katze").layerOrder, 3, "Expected Sprite Katze to be at layer 3");
  t.assert.equal(t.getSprite("Tera").layerOrder, 2, "Expected Sprite Tera to be at layer 2");
  t.assert.withinRange(t.getSprite("Katze").x, -120, 5, "Expected Sprite Katze to have x-position -120 +-5");
  t.assert.withinRange(t.getSprite("Katze").y, -105, 5, "Expected Sprite Katze to have y-position -105 +-5");
  t.assert.withinRange(t.getSprite("Tera").x, 126, 5, "Expected Sprite Tera to have x-position 126 +-5");
  t.assert.withinRange(t.getSprite("Tera").y, 93, 5, "Expected Sprite Tera to have y-position 93 +-5");
  t.assert.not(t.getSprite("Katze").sayText, "Expected Sprite Katze not to say anything");
  t.assert.not(t.getSprite("Tera").sayText, "Expected Sprite Tera not to say anything");
  t.assert.withinRange(t.getSprite("Katze").size, 70, 1, "Expected Sprite Katze to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Tera").size, 60, 1, "Expected Sprite Tera to have size 60 +-1");
  t.assert.equal(t.getSprite("Katze").getVariable("Meine Z端ge").value, "0", "Expected Meine Z端ge to have value 0 in Sprite Katze");
  t.assert.ok(t.getSprite("Katze").visible, "Expected Sprite Katze to be visible");
  t.assert.not(t.getSprite("Tera").visible, "Expected Sprite Tera not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Katze").volume, 100, "Expected Sprite Katze to have volume 100");
  t.assert.equal(t.getSprite("Tera").volume, 100, "Expected Sprite Tera to have volume 100");
  await t.runForSteps(11);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Katze").currentCostume, 0, "Expected Sprite Katze to have costume 0");
  t.assert.equal(t.getSprite("Tera").currentCostume, 0, "Expected Sprite Tera to have costume 0");
  t.assert.equal(t.getSprite("Katze").getCloneCount(), 0, "Expected Sprite Katze to have 0 clones");
  t.assert.equal(t.getSprite("Tera").getCloneCount(), 0, "Expected Sprite Tera to have 0 clones");
  t.assert.equal(t.getSprite("Katze").direction, 90, 1, "Expected Sprite Katze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Tera").direction, 90, 1, "Expected Sprite Tera to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Katze").effects.color, 0, "Expected effect color of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.fisheye, 0, "Expected effect fisheye of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.whirl, 0, "Expected effect whirl of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.pixelate, 0, "Expected effect pixelate of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.mosaic, 0, "Expected effect mosaic of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.brightness, 0, "Expected effect brightness of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.ghost, 0, "Expected effect ghost of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Tera").effects.color, 0, "Expected effect color of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.fisheye, 0, "Expected effect fisheye of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.whirl, 0, "Expected effect whirl of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.pixelate, 0, "Expected effect pixelate of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.mosaic, 0, "Expected effect mosaic of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.brightness, 0, "Expected effect brightness of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.ghost, 0, "Expected effect ghost of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Katze").layerOrder, 3, "Expected Sprite Katze to be at layer 3");
  t.assert.equal(t.getSprite("Tera").layerOrder, 2, "Expected Sprite Tera to be at layer 2");
  t.assert.withinRange(t.getSprite("Katze").x, -120, 5, "Expected Sprite Katze to have x-position -120 +-5");
  t.assert.withinRange(t.getSprite("Katze").y, -105, 5, "Expected Sprite Katze to have y-position -105 +-5");
  t.assert.withinRange(t.getSprite("Tera").x, -74, 5, "Expected Sprite Tera to have x-position -74 +-5");
  t.assert.withinRange(t.getSprite("Tera").y, -107, 5, "Expected Sprite Tera to have y-position -107 +-5");
  t.assert.not(t.getSprite("Katze").sayText, "Expected Sprite Katze not to say anything");
  t.assert.not(t.getSprite("Tera").sayText, "Expected Sprite Tera not to say anything");
  t.assert.withinRange(t.getSprite("Katze").size, 70, 1, "Expected Sprite Katze to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Tera").size, 60, 1, "Expected Sprite Tera to have size 60 +-1");
  t.assert.equal(t.getSprite("Katze").getVariable("Meine Z端ge").value, "0", "Expected Meine Z端ge to have value 0 in Sprite Katze");
  t.assert.ok(t.getSprite("Katze").visible, "Expected Sprite Katze to be visible");
  t.assert.not(t.getSprite("Tera").visible, "Expected Sprite Tera not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Katze").volume, 100, "Expected Sprite Katze to have volume 100");
  t.assert.equal(t.getSprite("Tera").volume, 100, "Expected Sprite Tera to have volume 100");
  await t.runForSteps(45);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Katze").currentCostume, 0, "Expected Sprite Katze to have costume 0");
  t.assert.equal(t.getSprite("Tera").currentCostume, 0, "Expected Sprite Tera to have costume 0");
  t.assert.equal(t.getSprite("Katze").getCloneCount(), 0, "Expected Sprite Katze to have 0 clones");
  t.assert.equal(t.getSprite("Tera").getCloneCount(), 0, "Expected Sprite Tera to have 0 clones");
  t.assert.equal(t.getSprite("Katze").direction, 90, 1, "Expected Sprite Katze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Tera").direction, 90, 1, "Expected Sprite Tera to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Katze").effects.color, 0, "Expected effect color of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.fisheye, 0, "Expected effect fisheye of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.whirl, 0, "Expected effect whirl of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.pixelate, 0, "Expected effect pixelate of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.mosaic, 0, "Expected effect mosaic of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.brightness, 0, "Expected effect brightness of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.ghost, 0, "Expected effect ghost of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Tera").effects.color, 0, "Expected effect color of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.fisheye, 0, "Expected effect fisheye of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.whirl, 0, "Expected effect whirl of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.pixelate, 0, "Expected effect pixelate of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.mosaic, 0, "Expected effect mosaic of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.brightness, 0, "Expected effect brightness of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.ghost, 0, "Expected effect ghost of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Katze").layerOrder, 3, "Expected Sprite Katze to be at layer 3");
  t.assert.equal(t.getSprite("Tera").layerOrder, 2, "Expected Sprite Tera to be at layer 2");
  t.assert.withinRange(t.getSprite("Katze").x, -120, 5, "Expected Sprite Katze to have x-position -120 +-5");
  t.assert.withinRange(t.getSprite("Katze").y, -105, 5, "Expected Sprite Katze to have y-position -105 +-5");
  t.assert.withinRange(t.getSprite("Tera").x, -74, 5, "Expected Sprite Tera to have x-position -74 +-5");
  t.assert.withinRange(t.getSprite("Tera").y, -7, 5, "Expected Sprite Tera to have y-position -7 +-5");
  t.assert.not(t.getSprite("Katze").sayText, "Expected Sprite Katze not to say anything");
  t.assert.not(t.getSprite("Tera").sayText, "Expected Sprite Tera not to say anything");
  t.assert.withinRange(t.getSprite("Katze").size, 70, 1, "Expected Sprite Katze to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Tera").size, 60, 1, "Expected Sprite Tera to have size 60 +-1");
  t.assert.equal(t.getSprite("Katze").getVariable("Meine Z端ge").value, "0", "Expected Meine Z端ge to have value 0 in Sprite Katze");
  t.assert.ok(t.getSprite("Katze").visible, "Expected Sprite Katze to be visible");
  t.assert.not(t.getSprite("Tera").visible, "Expected Sprite Tera not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Katze").volume, 100, "Expected Sprite Katze to have volume 100");
  t.assert.equal(t.getSprite("Tera").volume, 100, "Expected Sprite Tera to have volume 100");
  t.dragSprite('Katze', -125, -60, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Katze").currentCostume, 0, "Expected Sprite Katze to have costume 0");
  t.assert.equal(t.getSprite("Tera").currentCostume, 0, "Expected Sprite Tera to have costume 0");
  t.assert.equal(t.getSprite("Katze").getCloneCount(), 0, "Expected Sprite Katze to have 0 clones");
  t.assert.equal(t.getSprite("Tera").getCloneCount(), 0, "Expected Sprite Tera to have 0 clones");
  t.assert.equal(t.getSprite("Katze").direction, 90, 1, "Expected Sprite Katze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Tera").direction, 90, 1, "Expected Sprite Tera to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Katze").effects.color, 0, "Expected effect color of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.fisheye, 0, "Expected effect fisheye of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.whirl, 0, "Expected effect whirl of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.pixelate, 0, "Expected effect pixelate of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.mosaic, 0, "Expected effect mosaic of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.brightness, 0, "Expected effect brightness of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.ghost, 0, "Expected effect ghost of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Tera").effects.color, 0, "Expected effect color of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.fisheye, 0, "Expected effect fisheye of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.whirl, 0, "Expected effect whirl of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.pixelate, 0, "Expected effect pixelate of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.mosaic, 0, "Expected effect mosaic of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.brightness, 0, "Expected effect brightness of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.ghost, 0, "Expected effect ghost of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Katze").layerOrder, 3, "Expected Sprite Katze to be at layer 3");
  t.assert.equal(t.getSprite("Tera").layerOrder, 2, "Expected Sprite Tera to be at layer 2");
  t.assert.withinRange(t.getSprite("Katze").x, -125, 5, "Expected Sprite Katze to have x-position -125 +-5");
  t.assert.withinRange(t.getSprite("Katze").y, -60, 5, "Expected Sprite Katze to have y-position -60 +-5");
  t.assert.withinRange(t.getSprite("Tera").x, -74, 5, "Expected Sprite Tera to have x-position -74 +-5");
  t.assert.withinRange(t.getSprite("Tera").y, -7, 5, "Expected Sprite Tera to have y-position -7 +-5");
  t.assert.not(t.getSprite("Katze").sayText, "Expected Sprite Katze not to say anything");
  t.assert.not(t.getSprite("Tera").sayText, "Expected Sprite Tera not to say anything");
  t.assert.withinRange(t.getSprite("Katze").size, 70, 1, "Expected Sprite Katze to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Tera").size, 60, 1, "Expected Sprite Tera to have size 60 +-1");
  t.assert.equal(t.getSprite("Katze").getVariable("Meine Z端ge").value, "0", "Expected Meine Z端ge to have value 0 in Sprite Katze");
  t.assert.ok(t.getSprite("Katze").visible, "Expected Sprite Katze to be visible");
  t.assert.not(t.getSprite("Tera").visible, "Expected Sprite Tera not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Katze").volume, 100, "Expected Sprite Katze to have volume 100");
  t.assert.equal(t.getSprite("Tera").volume, 100, "Expected Sprite Tera to have volume 100");
  await t.runForSteps(49);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Katze").currentCostume, 0, "Expected Sprite Katze to have costume 0");
  t.assert.equal(t.getSprite("Tera").currentCostume, 0, "Expected Sprite Tera to have costume 0");
  t.assert.equal(t.getSprite("Katze").getCloneCount(), 0, "Expected Sprite Katze to have 0 clones");
  t.assert.equal(t.getSprite("Tera").getCloneCount(), 0, "Expected Sprite Tera to have 0 clones");
  t.assert.equal(t.getSprite("Katze").direction, 90, 1, "Expected Sprite Katze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Tera").direction, 90, 1, "Expected Sprite Tera to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Katze").effects.color, 0, "Expected effect color of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.fisheye, 0, "Expected effect fisheye of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.whirl, 0, "Expected effect whirl of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.pixelate, 0, "Expected effect pixelate of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.mosaic, 0, "Expected effect mosaic of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.brightness, 0, "Expected effect brightness of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.ghost, 0, "Expected effect ghost of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Tera").effects.color, 0, "Expected effect color of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.fisheye, 0, "Expected effect fisheye of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.whirl, 0, "Expected effect whirl of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.pixelate, 0, "Expected effect pixelate of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.mosaic, 0, "Expected effect mosaic of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.brightness, 0, "Expected effect brightness of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.ghost, 0, "Expected effect ghost of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Katze").layerOrder, 3, "Expected Sprite Katze to be at layer 3");
  t.assert.equal(t.getSprite("Tera").layerOrder, 2, "Expected Sprite Tera to be at layer 2");
  t.assert.withinRange(t.getSprite("Katze").x, -125, 5, "Expected Sprite Katze to have x-position -125 +-5");
  t.assert.withinRange(t.getSprite("Katze").y, -60, 5, "Expected Sprite Katze to have y-position -60 +-5");
  t.assert.withinRange(t.getSprite("Tera").x, 126, 5, "Expected Sprite Tera to have x-position 126 +-5");
  t.assert.withinRange(t.getSprite("Tera").y, 93, 5, "Expected Sprite Tera to have y-position 93 +-5");
  t.assert.not(t.getSprite("Katze").sayText, "Expected Sprite Katze not to say anything");
  t.assert.not(t.getSprite("Tera").sayText, "Expected Sprite Tera not to say anything");
  t.assert.withinRange(t.getSprite("Katze").size, 70, 1, "Expected Sprite Katze to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Tera").size, 60, 1, "Expected Sprite Tera to have size 60 +-1");
  t.assert.equal(t.getSprite("Katze").getVariable("Meine Z端ge").value, "0", "Expected Meine Z端ge to have value 0 in Sprite Katze");
  t.assert.ok(t.getSprite("Katze").visible, "Expected Sprite Katze to be visible");
  t.assert.not(t.getSprite("Tera").visible, "Expected Sprite Tera not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Katze").volume, 100, "Expected Sprite Katze to have volume 100");
  t.assert.equal(t.getSprite("Tera").volume, 100, "Expected Sprite Tera to have volume 100");
  t.mouseMove(199, -169);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Katze").currentCostume, 0, "Expected Sprite Katze to have costume 0");
  t.assert.equal(t.getSprite("Tera").currentCostume, 0, "Expected Sprite Tera to have costume 0");
  t.assert.equal(t.getSprite("Katze").getCloneCount(), 0, "Expected Sprite Katze to have 0 clones");
  t.assert.equal(t.getSprite("Tera").getCloneCount(), 0, "Expected Sprite Tera to have 0 clones");
  t.assert.equal(t.getSprite("Katze").direction, 90, 1, "Expected Sprite Katze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Tera").direction, 90, 1, "Expected Sprite Tera to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Katze").effects.color, 0, "Expected effect color of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.fisheye, 0, "Expected effect fisheye of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.whirl, 0, "Expected effect whirl of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.pixelate, 0, "Expected effect pixelate of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.mosaic, 0, "Expected effect mosaic of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.brightness, 0, "Expected effect brightness of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.ghost, 0, "Expected effect ghost of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Tera").effects.color, 0, "Expected effect color of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.fisheye, 0, "Expected effect fisheye of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.whirl, 0, "Expected effect whirl of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.pixelate, 0, "Expected effect pixelate of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.mosaic, 0, "Expected effect mosaic of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.brightness, 0, "Expected effect brightness of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.ghost, 0, "Expected effect ghost of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Katze").layerOrder, 3, "Expected Sprite Katze to be at layer 3");
  t.assert.equal(t.getSprite("Tera").layerOrder, 2, "Expected Sprite Tera to be at layer 2");
  t.assert.withinRange(t.getSprite("Katze").x, -125, 5, "Expected Sprite Katze to have x-position -125 +-5");
  t.assert.withinRange(t.getSprite("Katze").y, -60, 5, "Expected Sprite Katze to have y-position -60 +-5");
  t.assert.withinRange(t.getSprite("Tera").x, 126, 5, "Expected Sprite Tera to have x-position 126 +-5");
  t.assert.withinRange(t.getSprite("Tera").y, 93, 5, "Expected Sprite Tera to have y-position 93 +-5");
  t.assert.not(t.getSprite("Katze").sayText, "Expected Sprite Katze not to say anything");
  t.assert.not(t.getSprite("Tera").sayText, "Expected Sprite Tera not to say anything");
  t.assert.withinRange(t.getSprite("Katze").size, 70, 1, "Expected Sprite Katze to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Tera").size, 60, 1, "Expected Sprite Tera to have size 60 +-1");
  t.assert.equal(t.getSprite("Katze").getVariable("Meine Z端ge").value, "0", "Expected Meine Z端ge to have value 0 in Sprite Katze");
  t.assert.ok(t.getSprite("Katze").visible, "Expected Sprite Katze to be visible");
  t.assert.not(t.getSprite("Tera").visible, "Expected Sprite Tera not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Katze").volume, 100, "Expected Sprite Katze to have volume 100");
  t.assert.equal(t.getSprite("Tera").volume, 100, "Expected Sprite Tera to have volume 100");
  await t.runForSteps(35);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Katze").currentCostume, 0, "Expected Sprite Katze to have costume 0");
  t.assert.equal(t.getSprite("Tera").currentCostume, 0, "Expected Sprite Tera to have costume 0");
  t.assert.equal(t.getSprite("Katze").getCloneCount(), 0, "Expected Sprite Katze to have 0 clones");
  t.assert.equal(t.getSprite("Tera").getCloneCount(), 0, "Expected Sprite Tera to have 0 clones");
  t.assert.equal(t.getSprite("Katze").direction, 90, 1, "Expected Sprite Katze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Tera").direction, 90, 1, "Expected Sprite Tera to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Katze").effects.color, 0, "Expected effect color of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.fisheye, 0, "Expected effect fisheye of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.whirl, 0, "Expected effect whirl of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.pixelate, 0, "Expected effect pixelate of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.mosaic, 0, "Expected effect mosaic of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.brightness, 0, "Expected effect brightness of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.ghost, 0, "Expected effect ghost of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Tera").effects.color, 0, "Expected effect color of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.fisheye, 0, "Expected effect fisheye of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.whirl, 0, "Expected effect whirl of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.pixelate, 0, "Expected effect pixelate of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.mosaic, 0, "Expected effect mosaic of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.brightness, 0, "Expected effect brightness of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.ghost, 0, "Expected effect ghost of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Katze").layerOrder, 3, "Expected Sprite Katze to be at layer 3");
  t.assert.equal(t.getSprite("Tera").layerOrder, 2, "Expected Sprite Tera to be at layer 2");
  t.assert.withinRange(t.getSprite("Katze").x, -125, 5, "Expected Sprite Katze to have x-position -125 +-5");
  t.assert.withinRange(t.getSprite("Katze").y, -60, 5, "Expected Sprite Katze to have y-position -60 +-5");
  t.assert.withinRange(t.getSprite("Tera").x, 126, 5, "Expected Sprite Tera to have x-position 126 +-5");
  t.assert.withinRange(t.getSprite("Tera").y, -7, 5, "Expected Sprite Tera to have y-position -7 +-5");
  t.assert.not(t.getSprite("Katze").sayText, "Expected Sprite Katze not to say anything");
  t.assert.not(t.getSprite("Tera").sayText, "Expected Sprite Tera not to say anything");
  t.assert.withinRange(t.getSprite("Katze").size, 70, 1, "Expected Sprite Katze to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Tera").size, 60, 1, "Expected Sprite Tera to have size 60 +-1");
  t.assert.equal(t.getSprite("Katze").getVariable("Meine Z端ge").value, "0", "Expected Meine Z端ge to have value 0 in Sprite Katze");
  t.assert.ok(t.getSprite("Katze").visible, "Expected Sprite Katze to be visible");
  t.assert.not(t.getSprite("Tera").visible, "Expected Sprite Tera not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Katze").volume, 100, "Expected Sprite Katze to have volume 100");
  t.assert.equal(t.getSprite("Tera").volume, 100, "Expected Sprite Tera to have volume 100");
  await t.runForSteps(96);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Katze").currentCostume, 0, "Expected Sprite Katze to have costume 0");
  t.assert.equal(t.getSprite("Tera").currentCostume, 0, "Expected Sprite Tera to have costume 0");
  t.assert.equal(t.getSprite("Katze").getCloneCount(), 0, "Expected Sprite Katze to have 0 clones");
  t.assert.equal(t.getSprite("Tera").getCloneCount(), 0, "Expected Sprite Tera to have 0 clones");
  t.assert.equal(t.getSprite("Katze").direction, 90, 1, "Expected Sprite Katze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Tera").direction, 90, 1, "Expected Sprite Tera to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Katze").effects.color, 0, "Expected effect color of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.fisheye, 0, "Expected effect fisheye of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.whirl, 0, "Expected effect whirl of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.pixelate, 0, "Expected effect pixelate of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.mosaic, 0, "Expected effect mosaic of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.brightness, 0, "Expected effect brightness of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.ghost, 0, "Expected effect ghost of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Tera").effects.color, 0, "Expected effect color of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.fisheye, 0, "Expected effect fisheye of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.whirl, 0, "Expected effect whirl of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.pixelate, 0, "Expected effect pixelate of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.mosaic, 0, "Expected effect mosaic of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.brightness, 0, "Expected effect brightness of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.ghost, 0, "Expected effect ghost of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Katze").layerOrder, 3, "Expected Sprite Katze to be at layer 3");
  t.assert.equal(t.getSprite("Tera").layerOrder, 2, "Expected Sprite Tera to be at layer 2");
  t.assert.withinRange(t.getSprite("Katze").x, -125, 5, "Expected Sprite Katze to have x-position -125 +-5");
  t.assert.withinRange(t.getSprite("Katze").y, -60, 5, "Expected Sprite Katze to have y-position -60 +-5");
  t.assert.withinRange(t.getSprite("Tera").x, 126, 5, "Expected Sprite Tera to have x-position 126 +-5");
  t.assert.withinRange(t.getSprite("Tera").y, 93, 5, "Expected Sprite Tera to have y-position 93 +-5");
  t.assert.not(t.getSprite("Katze").sayText, "Expected Sprite Katze not to say anything");
  t.assert.not(t.getSprite("Tera").sayText, "Expected Sprite Tera not to say anything");
  t.assert.withinRange(t.getSprite("Katze").size, 70, 1, "Expected Sprite Katze to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Tera").size, 60, 1, "Expected Sprite Tera to have size 60 +-1");
  t.assert.equal(t.getSprite("Katze").getVariable("Meine Z端ge").value, "0", "Expected Meine Z端ge to have value 0 in Sprite Katze");
  t.assert.ok(t.getSprite("Katze").visible, "Expected Sprite Katze to be visible");
  t.assert.not(t.getSprite("Tera").visible, "Expected Sprite Tera not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Katze").volume, 100, "Expected Sprite Katze to have volume 100");
  t.assert.equal(t.getSprite("Tera").volume, 100, "Expected Sprite Tera to have volume 100");
  t.mouseDown(false);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Katze").currentCostume, 0, "Expected Sprite Katze to have costume 0");
  t.assert.equal(t.getSprite("Tera").currentCostume, 0, "Expected Sprite Tera to have costume 0");
  t.assert.equal(t.getSprite("Katze").getCloneCount(), 0, "Expected Sprite Katze to have 0 clones");
  t.assert.equal(t.getSprite("Tera").getCloneCount(), 0, "Expected Sprite Tera to have 0 clones");
  t.assert.equal(t.getSprite("Katze").direction, 90, 1, "Expected Sprite Katze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Tera").direction, 90, 1, "Expected Sprite Tera to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Katze").effects.color, 0, "Expected effect color of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.fisheye, 0, "Expected effect fisheye of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.whirl, 0, "Expected effect whirl of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.pixelate, 0, "Expected effect pixelate of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.mosaic, 0, "Expected effect mosaic of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.brightness, 0, "Expected effect brightness of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.ghost, 0, "Expected effect ghost of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Tera").effects.color, 0, "Expected effect color of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.fisheye, 0, "Expected effect fisheye of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.whirl, 0, "Expected effect whirl of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.pixelate, 0, "Expected effect pixelate of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.mosaic, 0, "Expected effect mosaic of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.brightness, 0, "Expected effect brightness of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.ghost, 0, "Expected effect ghost of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Katze").layerOrder, 3, "Expected Sprite Katze to be at layer 3");
  t.assert.equal(t.getSprite("Tera").layerOrder, 2, "Expected Sprite Tera to be at layer 2");
  t.assert.withinRange(t.getSprite("Katze").x, -125, 5, "Expected Sprite Katze to have x-position -125 +-5");
  t.assert.withinRange(t.getSprite("Katze").y, -60, 5, "Expected Sprite Katze to have y-position -60 +-5");
  t.assert.withinRange(t.getSprite("Tera").x, 126, 5, "Expected Sprite Tera to have x-position 126 +-5");
  t.assert.withinRange(t.getSprite("Tera").y, 93, 5, "Expected Sprite Tera to have y-position 93 +-5");
  t.assert.not(t.getSprite("Katze").sayText, "Expected Sprite Katze not to say anything");
  t.assert.not(t.getSprite("Tera").sayText, "Expected Sprite Tera not to say anything");
  t.assert.withinRange(t.getSprite("Katze").size, 70, 1, "Expected Sprite Katze to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Tera").size, 60, 1, "Expected Sprite Tera to have size 60 +-1");
  t.assert.equal(t.getSprite("Katze").getVariable("Meine Z端ge").value, "0", "Expected Meine Z端ge to have value 0 in Sprite Katze");
  t.assert.ok(t.getSprite("Katze").visible, "Expected Sprite Katze to be visible");
  t.assert.not(t.getSprite("Tera").visible, "Expected Sprite Tera not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Katze").volume, 100, "Expected Sprite Katze to have volume 100");
  t.assert.equal(t.getSprite("Tera").volume, 100, "Expected Sprite Tera to have volume 100");
  t.mouseMove(-225, -69);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Katze").currentCostume, 0, "Expected Sprite Katze to have costume 0");
  t.assert.equal(t.getSprite("Tera").currentCostume, 0, "Expected Sprite Tera to have costume 0");
  t.assert.equal(t.getSprite("Katze").getCloneCount(), 0, "Expected Sprite Katze to have 0 clones");
  t.assert.equal(t.getSprite("Tera").getCloneCount(), 0, "Expected Sprite Tera to have 0 clones");
  t.assert.equal(t.getSprite("Katze").direction, 90, 1, "Expected Sprite Katze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Tera").direction, 90, 1, "Expected Sprite Tera to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Katze").effects.color, 0, "Expected effect color of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.fisheye, 0, "Expected effect fisheye of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.whirl, 0, "Expected effect whirl of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.pixelate, 0, "Expected effect pixelate of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.mosaic, 0, "Expected effect mosaic of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.brightness, 0, "Expected effect brightness of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.ghost, 0, "Expected effect ghost of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Tera").effects.color, 0, "Expected effect color of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.fisheye, 0, "Expected effect fisheye of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.whirl, 0, "Expected effect whirl of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.pixelate, 0, "Expected effect pixelate of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.mosaic, 0, "Expected effect mosaic of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.brightness, 0, "Expected effect brightness of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.ghost, 0, "Expected effect ghost of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Katze").layerOrder, 3, "Expected Sprite Katze to be at layer 3");
  t.assert.equal(t.getSprite("Tera").layerOrder, 2, "Expected Sprite Tera to be at layer 2");
  t.assert.withinRange(t.getSprite("Katze").x, -125, 5, "Expected Sprite Katze to have x-position -125 +-5");
  t.assert.withinRange(t.getSprite("Katze").y, -60, 5, "Expected Sprite Katze to have y-position -60 +-5");
  t.assert.withinRange(t.getSprite("Tera").x, 126, 5, "Expected Sprite Tera to have x-position 126 +-5");
  t.assert.withinRange(t.getSprite("Tera").y, -107, 5, "Expected Sprite Tera to have y-position -107 +-5");
  t.assert.not(t.getSprite("Katze").sayText, "Expected Sprite Katze not to say anything");
  t.assert.not(t.getSprite("Tera").sayText, "Expected Sprite Tera not to say anything");
  t.assert.withinRange(t.getSprite("Katze").size, 70, 1, "Expected Sprite Katze to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Tera").size, 60, 1, "Expected Sprite Tera to have size 60 +-1");
  t.assert.equal(t.getSprite("Katze").getVariable("Meine Z端ge").value, "0", "Expected Meine Z端ge to have value 0 in Sprite Katze");
  t.assert.ok(t.getSprite("Katze").visible, "Expected Sprite Katze to be visible");
  t.assert.not(t.getSprite("Tera").visible, "Expected Sprite Tera not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Katze").volume, 100, "Expected Sprite Katze to have volume 100");
  t.assert.equal(t.getSprite("Tera").volume, 100, "Expected Sprite Tera to have volume 100");
  t.mouseMove(33, 6);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Katze").currentCostume, 0, "Expected Sprite Katze to have costume 0");
  t.assert.equal(t.getSprite("Tera").currentCostume, 0, "Expected Sprite Tera to have costume 0");
  t.assert.equal(t.getSprite("Katze").getCloneCount(), 0, "Expected Sprite Katze to have 0 clones");
  t.assert.equal(t.getSprite("Tera").getCloneCount(), 0, "Expected Sprite Tera to have 0 clones");
  t.assert.equal(t.getSprite("Katze").direction, 90, 1, "Expected Sprite Katze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Tera").direction, 90, 1, "Expected Sprite Tera to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Katze").effects.color, 0, "Expected effect color of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.fisheye, 0, "Expected effect fisheye of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.whirl, 0, "Expected effect whirl of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.pixelate, 0, "Expected effect pixelate of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.mosaic, 0, "Expected effect mosaic of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.brightness, 0, "Expected effect brightness of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.ghost, 0, "Expected effect ghost of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Tera").effects.color, 0, "Expected effect color of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.fisheye, 0, "Expected effect fisheye of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.whirl, 0, "Expected effect whirl of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.pixelate, 0, "Expected effect pixelate of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.mosaic, 0, "Expected effect mosaic of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.brightness, 0, "Expected effect brightness of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.ghost, 0, "Expected effect ghost of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Katze").layerOrder, 3, "Expected Sprite Katze to be at layer 3");
  t.assert.equal(t.getSprite("Tera").layerOrder, 2, "Expected Sprite Tera to be at layer 2");
  t.assert.withinRange(t.getSprite("Katze").x, -125, 5, "Expected Sprite Katze to have x-position -125 +-5");
  t.assert.withinRange(t.getSprite("Katze").y, -60, 5, "Expected Sprite Katze to have y-position -60 +-5");
  t.assert.withinRange(t.getSprite("Tera").x, -74, 5, "Expected Sprite Tera to have x-position -74 +-5");
  t.assert.withinRange(t.getSprite("Tera").y, -107, 5, "Expected Sprite Tera to have y-position -107 +-5");
  t.assert.not(t.getSprite("Katze").sayText, "Expected Sprite Katze not to say anything");
  t.assert.not(t.getSprite("Tera").sayText, "Expected Sprite Tera not to say anything");
  t.assert.withinRange(t.getSprite("Katze").size, 70, 1, "Expected Sprite Katze to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Tera").size, 60, 1, "Expected Sprite Tera to have size 60 +-1");
  t.assert.equal(t.getSprite("Katze").getVariable("Meine Z端ge").value, "0", "Expected Meine Z端ge to have value 0 in Sprite Katze");
  t.assert.ok(t.getSprite("Katze").visible, "Expected Sprite Katze to be visible");
  t.assert.not(t.getSprite("Tera").visible, "Expected Sprite Tera not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Katze").volume, 100, "Expected Sprite Katze to have volume 100");
  t.assert.equal(t.getSprite("Tera").volume, 100, "Expected Sprite Tera to have volume 100");
  t.mouseMove(117, 94);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Katze").currentCostume, 0, "Expected Sprite Katze to have costume 0");
  t.assert.equal(t.getSprite("Tera").currentCostume, 0, "Expected Sprite Tera to have costume 0");
  t.assert.equal(t.getSprite("Katze").getCloneCount(), 0, "Expected Sprite Katze to have 0 clones");
  t.assert.equal(t.getSprite("Tera").getCloneCount(), 0, "Expected Sprite Tera to have 0 clones");
  t.assert.equal(t.getSprite("Katze").direction, 90, 1, "Expected Sprite Katze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Tera").direction, 90, 1, "Expected Sprite Tera to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Katze").effects.color, 0, "Expected effect color of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.fisheye, 0, "Expected effect fisheye of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.whirl, 0, "Expected effect whirl of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.pixelate, 0, "Expected effect pixelate of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.mosaic, 0, "Expected effect mosaic of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.brightness, 0, "Expected effect brightness of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.ghost, 0, "Expected effect ghost of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Tera").effects.color, 0, "Expected effect color of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.fisheye, 0, "Expected effect fisheye of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.whirl, 0, "Expected effect whirl of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.pixelate, 0, "Expected effect pixelate of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.mosaic, 0, "Expected effect mosaic of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.brightness, 0, "Expected effect brightness of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.ghost, 0, "Expected effect ghost of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Katze").layerOrder, 3, "Expected Sprite Katze to be at layer 3");
  t.assert.equal(t.getSprite("Tera").layerOrder, 2, "Expected Sprite Tera to be at layer 2");
  t.assert.withinRange(t.getSprite("Katze").x, -125, 5, "Expected Sprite Katze to have x-position -125 +-5");
  t.assert.withinRange(t.getSprite("Katze").y, -60, 5, "Expected Sprite Katze to have y-position -60 +-5");
  t.assert.withinRange(t.getSprite("Tera").x, -74, 5, "Expected Sprite Tera to have x-position -74 +-5");
  t.assert.withinRange(t.getSprite("Tera").y, -107, 5, "Expected Sprite Tera to have y-position -107 +-5");
  t.assert.not(t.getSprite("Katze").sayText, "Expected Sprite Katze not to say anything");
  t.assert.not(t.getSprite("Tera").sayText, "Expected Sprite Tera not to say anything");
  t.assert.withinRange(t.getSprite("Katze").size, 70, 1, "Expected Sprite Katze to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Tera").size, 60, 1, "Expected Sprite Tera to have size 60 +-1");
  t.assert.equal(t.getSprite("Katze").getVariable("Meine Z端ge").value, "0", "Expected Meine Z端ge to have value 0 in Sprite Katze");
  t.assert.ok(t.getSprite("Katze").visible, "Expected Sprite Katze to be visible");
  t.assert.not(t.getSprite("Tera").visible, "Expected Sprite Tera not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Katze").volume, 100, "Expected Sprite Katze to have volume 100");
  t.assert.equal(t.getSprite("Tera").volume, 100, "Expected Sprite Tera to have volume 100");
  await t.runForSteps(66);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Katze").currentCostume, 0, "Expected Sprite Katze to have costume 0");
  t.assert.equal(t.getSprite("Tera").currentCostume, 0, "Expected Sprite Tera to have costume 0");
  t.assert.equal(t.getSprite("Katze").getCloneCount(), 0, "Expected Sprite Katze to have 0 clones");
  t.assert.equal(t.getSprite("Tera").getCloneCount(), 0, "Expected Sprite Tera to have 0 clones");
  t.assert.equal(t.getSprite("Katze").direction, 90, 1, "Expected Sprite Katze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Tera").direction, 90, 1, "Expected Sprite Tera to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Katze").effects.color, 0, "Expected effect color of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.fisheye, 0, "Expected effect fisheye of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.whirl, 0, "Expected effect whirl of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.pixelate, 0, "Expected effect pixelate of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.mosaic, 0, "Expected effect mosaic of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.brightness, 0, "Expected effect brightness of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.ghost, 0, "Expected effect ghost of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Tera").effects.color, 0, "Expected effect color of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.fisheye, 0, "Expected effect fisheye of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.whirl, 0, "Expected effect whirl of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.pixelate, 0, "Expected effect pixelate of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.mosaic, 0, "Expected effect mosaic of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.brightness, 0, "Expected effect brightness of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.ghost, 0, "Expected effect ghost of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Katze").layerOrder, 3, "Expected Sprite Katze to be at layer 3");
  t.assert.equal(t.getSprite("Tera").layerOrder, 2, "Expected Sprite Tera to be at layer 2");
  t.assert.withinRange(t.getSprite("Katze").x, -125, 5, "Expected Sprite Katze to have x-position -125 +-5");
  t.assert.withinRange(t.getSprite("Katze").y, -60, 5, "Expected Sprite Katze to have y-position -60 +-5");
  t.assert.withinRange(t.getSprite("Tera").x, 26, 5, "Expected Sprite Tera to have x-position 26 +-5");
  t.assert.withinRange(t.getSprite("Tera").y, 93, 5, "Expected Sprite Tera to have y-position 93 +-5");
  t.assert.not(t.getSprite("Katze").sayText, "Expected Sprite Katze not to say anything");
  t.assert.not(t.getSprite("Tera").sayText, "Expected Sprite Tera not to say anything");
  t.assert.withinRange(t.getSprite("Katze").size, 70, 1, "Expected Sprite Katze to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Tera").size, 60, 1, "Expected Sprite Tera to have size 60 +-1");
  t.assert.equal(t.getSprite("Katze").getVariable("Meine Z端ge").value, "0", "Expected Meine Z端ge to have value 0 in Sprite Katze");
  t.assert.ok(t.getSprite("Katze").visible, "Expected Sprite Katze to be visible");
  t.assert.not(t.getSprite("Tera").visible, "Expected Sprite Tera not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Katze").volume, 100, "Expected Sprite Katze to have volume 100");
  t.assert.equal(t.getSprite("Tera").volume, 100, "Expected Sprite Tera to have volume 100");
  await t.runForSteps(21);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Katze").currentCostume, 0, "Expected Sprite Katze to have costume 0");
  t.assert.equal(t.getSprite("Tera").currentCostume, 0, "Expected Sprite Tera to have costume 0");
  t.assert.equal(t.getSprite("Katze").getCloneCount(), 0, "Expected Sprite Katze to have 0 clones");
  t.assert.equal(t.getSprite("Tera").getCloneCount(), 0, "Expected Sprite Tera to have 0 clones");
  t.assert.equal(t.getSprite("Katze").direction, 90, 1, "Expected Sprite Katze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Tera").direction, 90, 1, "Expected Sprite Tera to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Katze").effects.color, 0, "Expected effect color of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.fisheye, 0, "Expected effect fisheye of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.whirl, 0, "Expected effect whirl of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.pixelate, 0, "Expected effect pixelate of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.mosaic, 0, "Expected effect mosaic of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.brightness, 0, "Expected effect brightness of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.ghost, 0, "Expected effect ghost of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Tera").effects.color, 0, "Expected effect color of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.fisheye, 0, "Expected effect fisheye of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.whirl, 0, "Expected effect whirl of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.pixelate, 0, "Expected effect pixelate of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.mosaic, 0, "Expected effect mosaic of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.brightness, 0, "Expected effect brightness of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.ghost, 0, "Expected effect ghost of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Katze").layerOrder, 3, "Expected Sprite Katze to be at layer 3");
  t.assert.equal(t.getSprite("Tera").layerOrder, 2, "Expected Sprite Tera to be at layer 2");
  t.assert.withinRange(t.getSprite("Katze").x, -125, 5, "Expected Sprite Katze to have x-position -125 +-5");
  t.assert.withinRange(t.getSprite("Katze").y, -60, 5, "Expected Sprite Katze to have y-position -60 +-5");
  t.assert.withinRange(t.getSprite("Tera").x, -74, 5, "Expected Sprite Tera to have x-position -74 +-5");
  t.assert.withinRange(t.getSprite("Tera").y, -7, 5, "Expected Sprite Tera to have y-position -7 +-5");
  t.assert.not(t.getSprite("Katze").sayText, "Expected Sprite Katze not to say anything");
  t.assert.not(t.getSprite("Tera").sayText, "Expected Sprite Tera not to say anything");
  t.assert.withinRange(t.getSprite("Katze").size, 70, 1, "Expected Sprite Katze to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Tera").size, 60, 1, "Expected Sprite Tera to have size 60 +-1");
  t.assert.equal(t.getSprite("Katze").getVariable("Meine Z端ge").value, "0", "Expected Meine Z端ge to have value 0 in Sprite Katze");
  t.assert.ok(t.getSprite("Katze").visible, "Expected Sprite Katze to be visible");
  t.assert.not(t.getSprite("Tera").visible, "Expected Sprite Tera not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Katze").volume, 100, "Expected Sprite Katze to have volume 100");
  t.assert.equal(t.getSprite("Tera").volume, 100, "Expected Sprite Tera to have volume 100");
  await t.runForSteps(21);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Katze").currentCostume, 0, "Expected Sprite Katze to have costume 0");
  t.assert.equal(t.getSprite("Tera").currentCostume, 0, "Expected Sprite Tera to have costume 0");
  t.assert.equal(t.getSprite("Katze").getCloneCount(), 0, "Expected Sprite Katze to have 0 clones");
  t.assert.equal(t.getSprite("Tera").getCloneCount(), 0, "Expected Sprite Tera to have 0 clones");
  t.assert.equal(t.getSprite("Katze").direction, 90, 1, "Expected Sprite Katze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Tera").direction, 90, 1, "Expected Sprite Tera to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Katze").effects.color, 0, "Expected effect color of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.fisheye, 0, "Expected effect fisheye of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.whirl, 0, "Expected effect whirl of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.pixelate, 0, "Expected effect pixelate of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.mosaic, 0, "Expected effect mosaic of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.brightness, 0, "Expected effect brightness of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.ghost, 0, "Expected effect ghost of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Tera").effects.color, 0, "Expected effect color of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.fisheye, 0, "Expected effect fisheye of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.whirl, 0, "Expected effect whirl of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.pixelate, 0, "Expected effect pixelate of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.mosaic, 0, "Expected effect mosaic of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.brightness, 0, "Expected effect brightness of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.ghost, 0, "Expected effect ghost of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Katze").layerOrder, 3, "Expected Sprite Katze to be at layer 3");
  t.assert.equal(t.getSprite("Tera").layerOrder, 2, "Expected Sprite Tera to be at layer 2");
  t.assert.withinRange(t.getSprite("Katze").x, -125, 5, "Expected Sprite Katze to have x-position -125 +-5");
  t.assert.withinRange(t.getSprite("Katze").y, -60, 5, "Expected Sprite Katze to have y-position -60 +-5");
  t.assert.withinRange(t.getSprite("Tera").x, 26, 5, "Expected Sprite Tera to have x-position 26 +-5");
  t.assert.withinRange(t.getSprite("Tera").y, 93, 5, "Expected Sprite Tera to have y-position 93 +-5");
  t.assert.not(t.getSprite("Katze").sayText, "Expected Sprite Katze not to say anything");
  t.assert.not(t.getSprite("Tera").sayText, "Expected Sprite Tera not to say anything");
  t.assert.withinRange(t.getSprite("Katze").size, 70, 1, "Expected Sprite Katze to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Tera").size, 60, 1, "Expected Sprite Tera to have size 60 +-1");
  t.assert.equal(t.getSprite("Katze").getVariable("Meine Z端ge").value, "0", "Expected Meine Z端ge to have value 0 in Sprite Katze");
  t.assert.ok(t.getSprite("Katze").visible, "Expected Sprite Katze to be visible");
  t.assert.not(t.getSprite("Tera").visible, "Expected Sprite Tera not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Katze").volume, 100, "Expected Sprite Katze to have volume 100");
  t.assert.equal(t.getSprite("Tera").volume, 100, "Expected Sprite Tera to have volume 100");
  await t.runForSteps(67);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Katze").currentCostume, 0, "Expected Sprite Katze to have costume 0");
  t.assert.equal(t.getSprite("Tera").currentCostume, 0, "Expected Sprite Tera to have costume 0");
  t.assert.equal(t.getSprite("Katze").getCloneCount(), 0, "Expected Sprite Katze to have 0 clones");
  t.assert.equal(t.getSprite("Tera").getCloneCount(), 0, "Expected Sprite Tera to have 0 clones");
  t.assert.equal(t.getSprite("Katze").direction, 90, 1, "Expected Sprite Katze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Tera").direction, 90, 1, "Expected Sprite Tera to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Katze").effects.color, 0, "Expected effect color of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.fisheye, 0, "Expected effect fisheye of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.whirl, 0, "Expected effect whirl of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.pixelate, 0, "Expected effect pixelate of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.mosaic, 0, "Expected effect mosaic of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.brightness, 0, "Expected effect brightness of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.ghost, 0, "Expected effect ghost of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Tera").effects.color, 0, "Expected effect color of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.fisheye, 0, "Expected effect fisheye of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.whirl, 0, "Expected effect whirl of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.pixelate, 0, "Expected effect pixelate of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.mosaic, 0, "Expected effect mosaic of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.brightness, 0, "Expected effect brightness of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.ghost, 0, "Expected effect ghost of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Katze").layerOrder, 3, "Expected Sprite Katze to be at layer 3");
  t.assert.equal(t.getSprite("Tera").layerOrder, 2, "Expected Sprite Tera to be at layer 2");
  t.assert.withinRange(t.getSprite("Katze").x, -125, 5, "Expected Sprite Katze to have x-position -125 +-5");
  t.assert.withinRange(t.getSprite("Katze").y, -60, 5, "Expected Sprite Katze to have y-position -60 +-5");
  t.assert.withinRange(t.getSprite("Tera").x, -74, 5, "Expected Sprite Tera to have x-position -74 +-5");
  t.assert.withinRange(t.getSprite("Tera").y, 93, 5, "Expected Sprite Tera to have y-position 93 +-5");
  t.assert.not(t.getSprite("Katze").sayText, "Expected Sprite Katze not to say anything");
  t.assert.not(t.getSprite("Tera").sayText, "Expected Sprite Tera not to say anything");
  t.assert.withinRange(t.getSprite("Katze").size, 70, 1, "Expected Sprite Katze to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Tera").size, 60, 1, "Expected Sprite Tera to have size 60 +-1");
  t.assert.equal(t.getSprite("Katze").getVariable("Meine Z端ge").value, "0", "Expected Meine Z端ge to have value 0 in Sprite Katze");
  t.assert.ok(t.getSprite("Katze").visible, "Expected Sprite Katze to be visible");
  t.assert.not(t.getSprite("Tera").visible, "Expected Sprite Tera not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Katze").volume, 100, "Expected Sprite Katze to have volume 100");
  t.assert.equal(t.getSprite("Tera").volume, 100, "Expected Sprite Tera to have volume 100");
  t.mouseMove(118, 155);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Katze").currentCostume, 0, "Expected Sprite Katze to have costume 0");
  t.assert.equal(t.getSprite("Tera").currentCostume, 0, "Expected Sprite Tera to have costume 0");
  t.assert.equal(t.getSprite("Katze").getCloneCount(), 0, "Expected Sprite Katze to have 0 clones");
  t.assert.equal(t.getSprite("Tera").getCloneCount(), 0, "Expected Sprite Tera to have 0 clones");
  t.assert.equal(t.getSprite("Katze").direction, 90, 1, "Expected Sprite Katze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Tera").direction, 90, 1, "Expected Sprite Tera to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Katze").effects.color, 0, "Expected effect color of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.fisheye, 0, "Expected effect fisheye of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.whirl, 0, "Expected effect whirl of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.pixelate, 0, "Expected effect pixelate of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.mosaic, 0, "Expected effect mosaic of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.brightness, 0, "Expected effect brightness of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.ghost, 0, "Expected effect ghost of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Tera").effects.color, 0, "Expected effect color of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.fisheye, 0, "Expected effect fisheye of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.whirl, 0, "Expected effect whirl of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.pixelate, 0, "Expected effect pixelate of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.mosaic, 0, "Expected effect mosaic of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.brightness, 0, "Expected effect brightness of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.ghost, 0, "Expected effect ghost of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Katze").layerOrder, 3, "Expected Sprite Katze to be at layer 3");
  t.assert.equal(t.getSprite("Tera").layerOrder, 2, "Expected Sprite Tera to be at layer 2");
  t.assert.withinRange(t.getSprite("Katze").x, -125, 5, "Expected Sprite Katze to have x-position -125 +-5");
  t.assert.withinRange(t.getSprite("Katze").y, -60, 5, "Expected Sprite Katze to have y-position -60 +-5");
  t.assert.withinRange(t.getSprite("Tera").x, -74, 5, "Expected Sprite Tera to have x-position -74 +-5");
  t.assert.withinRange(t.getSprite("Tera").y, 93, 5, "Expected Sprite Tera to have y-position 93 +-5");
  t.assert.not(t.getSprite("Katze").sayText, "Expected Sprite Katze not to say anything");
  t.assert.not(t.getSprite("Tera").sayText, "Expected Sprite Tera not to say anything");
  t.assert.withinRange(t.getSprite("Katze").size, 70, 1, "Expected Sprite Katze to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Tera").size, 60, 1, "Expected Sprite Tera to have size 60 +-1");
  t.assert.equal(t.getSprite("Katze").getVariable("Meine Z端ge").value, "0", "Expected Meine Z端ge to have value 0 in Sprite Katze");
  t.assert.ok(t.getSprite("Katze").visible, "Expected Sprite Katze to be visible");
  t.assert.not(t.getSprite("Tera").visible, "Expected Sprite Tera not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Katze").volume, 100, "Expected Sprite Katze to have volume 100");
  t.assert.equal(t.getSprite("Tera").volume, 100, "Expected Sprite Tera to have volume 100");
  t.mouseMove(-5, -44);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Katze").currentCostume, 0, "Expected Sprite Katze to have costume 0");
  t.assert.equal(t.getSprite("Tera").currentCostume, 0, "Expected Sprite Tera to have costume 0");
  t.assert.equal(t.getSprite("Katze").getCloneCount(), 0, "Expected Sprite Katze to have 0 clones");
  t.assert.equal(t.getSprite("Tera").getCloneCount(), 0, "Expected Sprite Tera to have 0 clones");
  t.assert.equal(t.getSprite("Katze").direction, 90, 1, "Expected Sprite Katze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Tera").direction, 90, 1, "Expected Sprite Tera to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Katze").effects.color, 0, "Expected effect color of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.fisheye, 0, "Expected effect fisheye of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.whirl, 0, "Expected effect whirl of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.pixelate, 0, "Expected effect pixelate of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.mosaic, 0, "Expected effect mosaic of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.brightness, 0, "Expected effect brightness of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.ghost, 0, "Expected effect ghost of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Tera").effects.color, 0, "Expected effect color of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.fisheye, 0, "Expected effect fisheye of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.whirl, 0, "Expected effect whirl of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.pixelate, 0, "Expected effect pixelate of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.mosaic, 0, "Expected effect mosaic of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.brightness, 0, "Expected effect brightness of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.ghost, 0, "Expected effect ghost of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Katze").layerOrder, 3, "Expected Sprite Katze to be at layer 3");
  t.assert.equal(t.getSprite("Tera").layerOrder, 2, "Expected Sprite Tera to be at layer 2");
  t.assert.withinRange(t.getSprite("Katze").x, -125, 5, "Expected Sprite Katze to have x-position -125 +-5");
  t.assert.withinRange(t.getSprite("Katze").y, -60, 5, "Expected Sprite Katze to have y-position -60 +-5");
  t.assert.withinRange(t.getSprite("Tera").x, -74, 5, "Expected Sprite Tera to have x-position -74 +-5");
  t.assert.withinRange(t.getSprite("Tera").y, -107, 5, "Expected Sprite Tera to have y-position -107 +-5");
  t.assert.not(t.getSprite("Katze").sayText, "Expected Sprite Katze not to say anything");
  t.assert.not(t.getSprite("Tera").sayText, "Expected Sprite Tera not to say anything");
  t.assert.withinRange(t.getSprite("Katze").size, 70, 1, "Expected Sprite Katze to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Tera").size, 60, 1, "Expected Sprite Tera to have size 60 +-1");
  t.assert.equal(t.getSprite("Katze").getVariable("Meine Z端ge").value, "0", "Expected Meine Z端ge to have value 0 in Sprite Katze");
  t.assert.ok(t.getSprite("Katze").visible, "Expected Sprite Katze to be visible");
  t.assert.not(t.getSprite("Tera").visible, "Expected Sprite Tera not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Katze").volume, 100, "Expected Sprite Katze to have volume 100");
  t.assert.equal(t.getSprite("Tera").volume, 100, "Expected Sprite Tera to have volume 100");
  t.mouseMove(137, 89);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Katze").currentCostume, 0, "Expected Sprite Katze to have costume 0");
  t.assert.equal(t.getSprite("Tera").currentCostume, 0, "Expected Sprite Tera to have costume 0");
  t.assert.equal(t.getSprite("Katze").getCloneCount(), 0, "Expected Sprite Katze to have 0 clones");
  t.assert.equal(t.getSprite("Tera").getCloneCount(), 0, "Expected Sprite Tera to have 0 clones");
  t.assert.equal(t.getSprite("Katze").direction, 90, 1, "Expected Sprite Katze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Tera").direction, 90, 1, "Expected Sprite Tera to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Katze").effects.color, 0, "Expected effect color of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.fisheye, 0, "Expected effect fisheye of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.whirl, 0, "Expected effect whirl of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.pixelate, 0, "Expected effect pixelate of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.mosaic, 0, "Expected effect mosaic of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.brightness, 0, "Expected effect brightness of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.ghost, 0, "Expected effect ghost of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Tera").effects.color, 0, "Expected effect color of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.fisheye, 0, "Expected effect fisheye of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.whirl, 0, "Expected effect whirl of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.pixelate, 0, "Expected effect pixelate of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.mosaic, 0, "Expected effect mosaic of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.brightness, 0, "Expected effect brightness of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.ghost, 0, "Expected effect ghost of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Katze").layerOrder, 3, "Expected Sprite Katze to be at layer 3");
  t.assert.equal(t.getSprite("Tera").layerOrder, 2, "Expected Sprite Tera to be at layer 2");
  t.assert.withinRange(t.getSprite("Katze").x, -125, 5, "Expected Sprite Katze to have x-position -125 +-5");
  t.assert.withinRange(t.getSprite("Katze").y, -60, 5, "Expected Sprite Katze to have y-position -60 +-5");
  t.assert.withinRange(t.getSprite("Tera").x, 26, 5, "Expected Sprite Tera to have x-position 26 +-5");
  t.assert.withinRange(t.getSprite("Tera").y, -107, 5, "Expected Sprite Tera to have y-position -107 +-5");
  t.assert.not(t.getSprite("Katze").sayText, "Expected Sprite Katze not to say anything");
  t.assert.not(t.getSprite("Tera").sayText, "Expected Sprite Tera not to say anything");
  t.assert.withinRange(t.getSprite("Katze").size, 70, 1, "Expected Sprite Katze to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Tera").size, 60, 1, "Expected Sprite Tera to have size 60 +-1");
  t.assert.equal(t.getSprite("Katze").getVariable("Meine Z端ge").value, "0", "Expected Meine Z端ge to have value 0 in Sprite Katze");
  t.assert.ok(t.getSprite("Katze").visible, "Expected Sprite Katze to be visible");
  t.assert.not(t.getSprite("Tera").visible, "Expected Sprite Tera not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Katze").volume, 100, "Expected Sprite Katze to have volume 100");
  t.assert.equal(t.getSprite("Tera").volume, 100, "Expected Sprite Tera to have volume 100");
  t.mouseDown(true);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Katze").currentCostume, 0, "Expected Sprite Katze to have costume 0");
  t.assert.equal(t.getSprite("Tera").currentCostume, 0, "Expected Sprite Tera to have costume 0");
  t.assert.equal(t.getSprite("Katze").getCloneCount(), 0, "Expected Sprite Katze to have 0 clones");
  t.assert.equal(t.getSprite("Tera").getCloneCount(), 0, "Expected Sprite Tera to have 0 clones");
  t.assert.equal(t.getSprite("Katze").direction, 90, 1, "Expected Sprite Katze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Tera").direction, 90, 1, "Expected Sprite Tera to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Katze").effects.color, 0, "Expected effect color of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.fisheye, 0, "Expected effect fisheye of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.whirl, 0, "Expected effect whirl of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.pixelate, 0, "Expected effect pixelate of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.mosaic, 0, "Expected effect mosaic of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.brightness, 0, "Expected effect brightness of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.ghost, 0, "Expected effect ghost of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Tera").effects.color, 0, "Expected effect color of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.fisheye, 0, "Expected effect fisheye of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.whirl, 0, "Expected effect whirl of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.pixelate, 0, "Expected effect pixelate of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.mosaic, 0, "Expected effect mosaic of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.brightness, 0, "Expected effect brightness of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.ghost, 0, "Expected effect ghost of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Katze").layerOrder, 3, "Expected Sprite Katze to be at layer 3");
  t.assert.equal(t.getSprite("Tera").layerOrder, 2, "Expected Sprite Tera to be at layer 2");
  t.assert.withinRange(t.getSprite("Katze").x, -195, 5, "Expected Sprite Katze to have x-position -195 +-5");
  t.assert.withinRange(t.getSprite("Katze").y, 0, 5, "Expected Sprite Katze to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Tera").x, 26, 5, "Expected Sprite Tera to have x-position 26 +-5");
  t.assert.withinRange(t.getSprite("Tera").y, -7, 5, "Expected Sprite Tera to have y-position -7 +-5");
  t.assert.not(t.getSprite("Katze").sayText, "Expected Sprite Katze not to say anything");
  t.assert.not(t.getSprite("Tera").sayText, "Expected Sprite Tera not to say anything");
  t.assert.withinRange(t.getSprite("Katze").size, 70, 1, "Expected Sprite Katze to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Tera").size, 60, 1, "Expected Sprite Tera to have size 60 +-1");
  t.assert.equal(t.getSprite("Katze").getVariable("Meine Z端ge").value, "1", "Expected Meine Z端ge to have value 1 in Sprite Katze");
  t.assert.ok(t.getSprite("Katze").visible, "Expected Sprite Katze to be visible");
  t.assert.not(t.getSprite("Tera").visible, "Expected Sprite Tera not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Katze").volume, 100, "Expected Sprite Katze to have volume 100");
  t.assert.equal(t.getSprite("Tera").volume, 100, "Expected Sprite Tera to have volume 100");
  t.mouseDown(false);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Katze").currentCostume, 0, "Expected Sprite Katze to have costume 0");
  t.assert.equal(t.getSprite("Tera").currentCostume, 0, "Expected Sprite Tera to have costume 0");
  t.assert.equal(t.getSprite("Katze").getCloneCount(), 0, "Expected Sprite Katze to have 0 clones");
  t.assert.equal(t.getSprite("Tera").getCloneCount(), 0, "Expected Sprite Tera to have 0 clones");
  t.assert.equal(t.getSprite("Katze").direction, 90, 1, "Expected Sprite Katze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Tera").direction, 90, 1, "Expected Sprite Tera to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Katze").effects.color, 0, "Expected effect color of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.fisheye, 0, "Expected effect fisheye of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.whirl, 0, "Expected effect whirl of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.pixelate, 0, "Expected effect pixelate of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.mosaic, 0, "Expected effect mosaic of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.brightness, 0, "Expected effect brightness of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.ghost, 0, "Expected effect ghost of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Tera").effects.color, 0, "Expected effect color of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.fisheye, 0, "Expected effect fisheye of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.whirl, 0, "Expected effect whirl of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.pixelate, 0, "Expected effect pixelate of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.mosaic, 0, "Expected effect mosaic of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.brightness, 0, "Expected effect brightness of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.ghost, 0, "Expected effect ghost of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Katze").layerOrder, 3, "Expected Sprite Katze to be at layer 3");
  t.assert.equal(t.getSprite("Tera").layerOrder, 2, "Expected Sprite Tera to be at layer 2");
  t.assert.withinRange(t.getSprite("Katze").x, -195, 5, "Expected Sprite Katze to have x-position -195 +-5");
  t.assert.withinRange(t.getSprite("Katze").y, 0, 5, "Expected Sprite Katze to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Tera").x, 26, 5, "Expected Sprite Tera to have x-position 26 +-5");
  t.assert.withinRange(t.getSprite("Tera").y, -7, 5, "Expected Sprite Tera to have y-position -7 +-5");
  t.assert.not(t.getSprite("Katze").sayText, "Expected Sprite Katze not to say anything");
  t.assert.not(t.getSprite("Tera").sayText, "Expected Sprite Tera not to say anything");
  t.assert.withinRange(t.getSprite("Katze").size, 70, 1, "Expected Sprite Katze to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Tera").size, 60, 1, "Expected Sprite Tera to have size 60 +-1");
  t.assert.equal(t.getSprite("Katze").getVariable("Meine Z端ge").value, "1", "Expected Meine Z端ge to have value 1 in Sprite Katze");
  t.assert.ok(t.getSprite("Katze").visible, "Expected Sprite Katze to be visible");
  t.assert.not(t.getSprite("Tera").visible, "Expected Sprite Tera not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Katze").volume, 100, "Expected Sprite Katze to have volume 100");
  t.assert.equal(t.getSprite("Tera").volume, 100, "Expected Sprite Tera to have volume 100");
  t.dragSprite('Katze', -111.29336087121105, 8.470335782703373, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Katze").currentCostume, 0, "Expected Sprite Katze to have costume 0");
  t.assert.equal(t.getSprite("Tera").currentCostume, 0, "Expected Sprite Tera to have costume 0");
  t.assert.equal(t.getSprite("Katze").getCloneCount(), 0, "Expected Sprite Katze to have 0 clones");
  t.assert.equal(t.getSprite("Tera").getCloneCount(), 0, "Expected Sprite Tera to have 0 clones");
  t.assert.equal(t.getSprite("Katze").direction, 90, 1, "Expected Sprite Katze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Tera").direction, 90, 1, "Expected Sprite Tera to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Katze").effects.color, 0, "Expected effect color of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.fisheye, 0, "Expected effect fisheye of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.whirl, 0, "Expected effect whirl of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.pixelate, 0, "Expected effect pixelate of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.mosaic, 0, "Expected effect mosaic of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.brightness, 0, "Expected effect brightness of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.ghost, 0, "Expected effect ghost of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Tera").effects.color, 0, "Expected effect color of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.fisheye, 0, "Expected effect fisheye of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.whirl, 0, "Expected effect whirl of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.pixelate, 0, "Expected effect pixelate of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.mosaic, 0, "Expected effect mosaic of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.brightness, 0, "Expected effect brightness of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.ghost, 0, "Expected effect ghost of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Katze").layerOrder, 3, "Expected Sprite Katze to be at layer 3");
  t.assert.equal(t.getSprite("Tera").layerOrder, 2, "Expected Sprite Tera to be at layer 2");
  t.assert.withinRange(t.getSprite("Katze").x, -111.29336087121105, 5, "Expected Sprite Katze to have x-position -111.29336087121105 +-5");
  t.assert.withinRange(t.getSprite("Katze").y, 8.470335782703373, 5, "Expected Sprite Katze to have y-position 8.470335782703373 +-5");
  t.assert.withinRange(t.getSprite("Tera").x, 126, 5, "Expected Sprite Tera to have x-position 126 +-5");
  t.assert.withinRange(t.getSprite("Tera").y, 93, 5, "Expected Sprite Tera to have y-position 93 +-5");
  t.assert.not(t.getSprite("Katze").sayText, "Expected Sprite Katze not to say anything");
  t.assert.not(t.getSprite("Tera").sayText, "Expected Sprite Tera not to say anything");
  t.assert.withinRange(t.getSprite("Katze").size, 70, 1, "Expected Sprite Katze to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Tera").size, 60, 1, "Expected Sprite Tera to have size 60 +-1");
  t.assert.equal(t.getSprite("Katze").getVariable("Meine Z端ge").value, "1", "Expected Meine Z端ge to have value 1 in Sprite Katze");
  t.assert.ok(t.getSprite("Katze").visible, "Expected Sprite Katze to be visible");
  t.assert.not(t.getSprite("Tera").visible, "Expected Sprite Tera not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Katze").volume, 100, "Expected Sprite Katze to have volume 100");
  t.assert.equal(t.getSprite("Tera").volume, 100, "Expected Sprite Tera to have volume 100");
  t.mouseMove(163, -96);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Katze").currentCostume, 0, "Expected Sprite Katze to have costume 0");
  t.assert.equal(t.getSprite("Tera").currentCostume, 0, "Expected Sprite Tera to have costume 0");
  t.assert.equal(t.getSprite("Katze").getCloneCount(), 0, "Expected Sprite Katze to have 0 clones");
  t.assert.equal(t.getSprite("Tera").getCloneCount(), 0, "Expected Sprite Tera to have 0 clones");
  t.assert.equal(t.getSprite("Katze").direction, 90, 1, "Expected Sprite Katze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Tera").direction, 90, 1, "Expected Sprite Tera to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Katze").effects.color, 0, "Expected effect color of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.fisheye, 0, "Expected effect fisheye of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.whirl, 0, "Expected effect whirl of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.pixelate, 0, "Expected effect pixelate of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.mosaic, 0, "Expected effect mosaic of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.brightness, 0, "Expected effect brightness of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.ghost, 0, "Expected effect ghost of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Tera").effects.color, 0, "Expected effect color of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.fisheye, 0, "Expected effect fisheye of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.whirl, 0, "Expected effect whirl of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.pixelate, 0, "Expected effect pixelate of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.mosaic, 0, "Expected effect mosaic of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.brightness, 0, "Expected effect brightness of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.ghost, 0, "Expected effect ghost of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Katze").layerOrder, 3, "Expected Sprite Katze to be at layer 3");
  t.assert.equal(t.getSprite("Tera").layerOrder, 2, "Expected Sprite Tera to be at layer 2");
  t.assert.withinRange(t.getSprite("Katze").x, -111.29336087121105, 5, "Expected Sprite Katze to have x-position -111.29336087121105 +-5");
  t.assert.withinRange(t.getSprite("Katze").y, 8.470335782703373, 5, "Expected Sprite Katze to have y-position 8.470335782703373 +-5");
  t.assert.withinRange(t.getSprite("Tera").x, 126, 5, "Expected Sprite Tera to have x-position 126 +-5");
  t.assert.withinRange(t.getSprite("Tera").y, 93, 5, "Expected Sprite Tera to have y-position 93 +-5");
  t.assert.not(t.getSprite("Katze").sayText, "Expected Sprite Katze not to say anything");
  t.assert.not(t.getSprite("Tera").sayText, "Expected Sprite Tera not to say anything");
  t.assert.withinRange(t.getSprite("Katze").size, 70, 1, "Expected Sprite Katze to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Tera").size, 60, 1, "Expected Sprite Tera to have size 60 +-1");
  t.assert.equal(t.getSprite("Katze").getVariable("Meine Z端ge").value, "1", "Expected Meine Z端ge to have value 1 in Sprite Katze");
  t.assert.ok(t.getSprite("Katze").visible, "Expected Sprite Katze to be visible");
  t.assert.not(t.getSprite("Tera").visible, "Expected Sprite Tera not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Katze").volume, 100, "Expected Sprite Katze to have volume 100");
  t.assert.equal(t.getSprite("Tera").volume, 100, "Expected Sprite Tera to have volume 100");
  t.mouseDown(true);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Katze").currentCostume, 0, "Expected Sprite Katze to have costume 0");
  t.assert.equal(t.getSprite("Tera").currentCostume, 0, "Expected Sprite Tera to have costume 0");
  t.assert.equal(t.getSprite("Katze").getCloneCount(), 0, "Expected Sprite Katze to have 0 clones");
  t.assert.equal(t.getSprite("Tera").getCloneCount(), 0, "Expected Sprite Tera to have 0 clones");
  t.assert.equal(t.getSprite("Katze").direction, 90, 1, "Expected Sprite Katze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Tera").direction, 90, 1, "Expected Sprite Tera to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Katze").effects.color, 0, "Expected effect color of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.fisheye, 0, "Expected effect fisheye of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.whirl, 0, "Expected effect whirl of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.pixelate, 0, "Expected effect pixelate of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.mosaic, 0, "Expected effect mosaic of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.brightness, 0, "Expected effect brightness of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.ghost, 0, "Expected effect ghost of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Tera").effects.color, 0, "Expected effect color of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.fisheye, 0, "Expected effect fisheye of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.whirl, 0, "Expected effect whirl of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.pixelate, 0, "Expected effect pixelate of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.mosaic, 0, "Expected effect mosaic of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.brightness, 0, "Expected effect brightness of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.ghost, 0, "Expected effect ghost of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Katze").layerOrder, 3, "Expected Sprite Katze to be at layer 3");
  t.assert.equal(t.getSprite("Tera").layerOrder, 2, "Expected Sprite Tera to be at layer 2");
  t.assert.withinRange(t.getSprite("Katze").x, 163, 5, "Expected Sprite Katze to have x-position 163 +-5");
  t.assert.withinRange(t.getSprite("Katze").y, -96, 5, "Expected Sprite Katze to have y-position -96 +-5");
  t.assert.withinRange(t.getSprite("Tera").x, 126, 5, "Expected Sprite Tera to have x-position 126 +-5");
  t.assert.withinRange(t.getSprite("Tera").y, 93, 5, "Expected Sprite Tera to have y-position 93 +-5");
  t.assert.not(t.getSprite("Katze").sayText, "Expected Sprite Katze not to say anything");
  t.assert.not(t.getSprite("Tera").sayText, "Expected Sprite Tera not to say anything");
  t.assert.withinRange(t.getSprite("Katze").size, 70, 1, "Expected Sprite Katze to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Tera").size, 60, 1, "Expected Sprite Tera to have size 60 +-1");
  t.assert.equal(t.getSprite("Katze").getVariable("Meine Z端ge").value, "1", "Expected Meine Z端ge to have value 1 in Sprite Katze");
  t.assert.ok(t.getSprite("Katze").visible, "Expected Sprite Katze to be visible");
  t.assert.not(t.getSprite("Tera").visible, "Expected Sprite Tera not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Katze").volume, 100, "Expected Sprite Katze to have volume 100");
  t.assert.equal(t.getSprite("Tera").volume, 100, "Expected Sprite Tera to have volume 100");
  t.mouseDown(false);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Katze").currentCostume, 0, "Expected Sprite Katze to have costume 0");
  t.assert.equal(t.getSprite("Tera").currentCostume, 0, "Expected Sprite Tera to have costume 0");
  t.assert.equal(t.getSprite("Katze").getCloneCount(), 0, "Expected Sprite Katze to have 0 clones");
  t.assert.equal(t.getSprite("Tera").getCloneCount(), 0, "Expected Sprite Tera to have 0 clones");
  t.assert.equal(t.getSprite("Katze").direction, 90, 1, "Expected Sprite Katze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Tera").direction, 90, 1, "Expected Sprite Tera to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Katze").effects.color, 0, "Expected effect color of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.fisheye, 0, "Expected effect fisheye of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.whirl, 0, "Expected effect whirl of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.pixelate, 0, "Expected effect pixelate of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.mosaic, 0, "Expected effect mosaic of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.brightness, 0, "Expected effect brightness of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.ghost, 0, "Expected effect ghost of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Tera").effects.color, 0, "Expected effect color of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.fisheye, 0, "Expected effect fisheye of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.whirl, 0, "Expected effect whirl of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.pixelate, 0, "Expected effect pixelate of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.mosaic, 0, "Expected effect mosaic of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.brightness, 0, "Expected effect brightness of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.ghost, 0, "Expected effect ghost of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Katze").layerOrder, 3, "Expected Sprite Katze to be at layer 3");
  t.assert.equal(t.getSprite("Tera").layerOrder, 2, "Expected Sprite Tera to be at layer 2");
  t.assert.withinRange(t.getSprite("Katze").x, 163, 5, "Expected Sprite Katze to have x-position 163 +-5");
  t.assert.withinRange(t.getSprite("Katze").y, -96, 5, "Expected Sprite Katze to have y-position -96 +-5");
  t.assert.withinRange(t.getSprite("Tera").x, -74, 5, "Expected Sprite Tera to have x-position -74 +-5");
  t.assert.withinRange(t.getSprite("Tera").y, -107, 5, "Expected Sprite Tera to have y-position -107 +-5");
  t.assert.not(t.getSprite("Katze").sayText, "Expected Sprite Katze not to say anything");
  t.assert.not(t.getSprite("Tera").sayText, "Expected Sprite Tera not to say anything");
  t.assert.withinRange(t.getSprite("Katze").size, 70, 1, "Expected Sprite Katze to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Tera").size, 60, 1, "Expected Sprite Tera to have size 60 +-1");
  t.assert.equal(t.getSprite("Katze").getVariable("Meine Z端ge").value, "1", "Expected Meine Z端ge to have value 1 in Sprite Katze");
  t.assert.ok(t.getSprite("Katze").visible, "Expected Sprite Katze to be visible");
  t.assert.not(t.getSprite("Tera").visible, "Expected Sprite Tera not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Katze").volume, 100, "Expected Sprite Katze to have volume 100");
  t.assert.equal(t.getSprite("Tera").volume, 100, "Expected Sprite Tera to have volume 100");
  t.mouseMove(-70, -116);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Katze").currentCostume, 0, "Expected Sprite Katze to have costume 0");
  t.assert.equal(t.getSprite("Tera").currentCostume, 0, "Expected Sprite Tera to have costume 0");
  t.assert.equal(t.getSprite("Katze").getCloneCount(), 0, "Expected Sprite Katze to have 0 clones");
  t.assert.equal(t.getSprite("Tera").getCloneCount(), 0, "Expected Sprite Tera to have 0 clones");
  t.assert.equal(t.getSprite("Katze").direction, 90, 1, "Expected Sprite Katze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Tera").direction, 90, 1, "Expected Sprite Tera to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Katze").effects.color, 0, "Expected effect color of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.fisheye, 0, "Expected effect fisheye of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.whirl, 0, "Expected effect whirl of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.pixelate, 0, "Expected effect pixelate of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.mosaic, 0, "Expected effect mosaic of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.brightness, 0, "Expected effect brightness of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.ghost, 0, "Expected effect ghost of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Tera").effects.color, 0, "Expected effect color of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.fisheye, 0, "Expected effect fisheye of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.whirl, 0, "Expected effect whirl of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.pixelate, 0, "Expected effect pixelate of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.mosaic, 0, "Expected effect mosaic of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.brightness, 0, "Expected effect brightness of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.ghost, 0, "Expected effect ghost of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Katze").layerOrder, 3, "Expected Sprite Katze to be at layer 3");
  t.assert.equal(t.getSprite("Tera").layerOrder, 2, "Expected Sprite Tera to be at layer 2");
  t.assert.withinRange(t.getSprite("Katze").x, 163, 5, "Expected Sprite Katze to have x-position 163 +-5");
  t.assert.withinRange(t.getSprite("Katze").y, -96, 5, "Expected Sprite Katze to have y-position -96 +-5");
  t.assert.withinRange(t.getSprite("Tera").x, -74, 5, "Expected Sprite Tera to have x-position -74 +-5");
  t.assert.withinRange(t.getSprite("Tera").y, -107, 5, "Expected Sprite Tera to have y-position -107 +-5");
  t.assert.not(t.getSprite("Katze").sayText, "Expected Sprite Katze not to say anything");
  t.assert.not(t.getSprite("Tera").sayText, "Expected Sprite Tera not to say anything");
  t.assert.withinRange(t.getSprite("Katze").size, 70, 1, "Expected Sprite Katze to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Tera").size, 60, 1, "Expected Sprite Tera to have size 60 +-1");
  t.assert.equal(t.getSprite("Katze").getVariable("Meine Z端ge").value, "1", "Expected Meine Z端ge to have value 1 in Sprite Katze");
  t.assert.ok(t.getSprite("Katze").visible, "Expected Sprite Katze to be visible");
  t.assert.not(t.getSprite("Tera").visible, "Expected Sprite Tera not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Katze").volume, 100, "Expected Sprite Katze to have volume 100");
  t.assert.equal(t.getSprite("Tera").volume, 100, "Expected Sprite Tera to have volume 100");
  t.mouseDown(true);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Katze").currentCostume, 0, "Expected Sprite Katze to have costume 0");
  t.assert.equal(t.getSprite("Tera").currentCostume, 0, "Expected Sprite Tera to have costume 0");
  t.assert.equal(t.getSprite("Katze").getCloneCount(), 0, "Expected Sprite Katze to have 0 clones");
  t.assert.equal(t.getSprite("Tera").getCloneCount(), 0, "Expected Sprite Tera to have 0 clones");
  t.assert.equal(t.getSprite("Katze").direction, 90, 1, "Expected Sprite Katze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Tera").direction, 90, 1, "Expected Sprite Tera to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Katze").effects.color, 0, "Expected effect color of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.fisheye, 0, "Expected effect fisheye of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.whirl, 0, "Expected effect whirl of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.pixelate, 0, "Expected effect pixelate of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.mosaic, 0, "Expected effect mosaic of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.brightness, 0, "Expected effect brightness of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.ghost, 0, "Expected effect ghost of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Tera").effects.color, 0, "Expected effect color of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.fisheye, 0, "Expected effect fisheye of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.whirl, 0, "Expected effect whirl of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.pixelate, 0, "Expected effect pixelate of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.mosaic, 0, "Expected effect mosaic of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.brightness, 0, "Expected effect brightness of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.ghost, 0, "Expected effect ghost of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Katze").layerOrder, 3, "Expected Sprite Katze to be at layer 3");
  t.assert.equal(t.getSprite("Tera").layerOrder, 2, "Expected Sprite Tera to be at layer 2");
  t.assert.withinRange(t.getSprite("Katze").x, -195, 5, "Expected Sprite Katze to have x-position -195 +-5");
  t.assert.withinRange(t.getSprite("Katze").y, 0, 5, "Expected Sprite Katze to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Tera").x, -74, 5, "Expected Sprite Tera to have x-position -74 +-5");
  t.assert.withinRange(t.getSprite("Tera").y, -107, 5, "Expected Sprite Tera to have y-position -107 +-5");
  t.assert.not(t.getSprite("Katze").sayText, "Expected Sprite Katze not to say anything");
  t.assert.not(t.getSprite("Tera").sayText, "Expected Sprite Tera not to say anything");
  t.assert.withinRange(t.getSprite("Katze").size, 70, 1, "Expected Sprite Katze to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Tera").size, 60, 1, "Expected Sprite Tera to have size 60 +-1");
  t.assert.equal(t.getSprite("Katze").getVariable("Meine Z端ge").value, "2", "Expected Meine Z端ge to have value 2 in Sprite Katze");
  t.assert.ok(t.getSprite("Katze").visible, "Expected Sprite Katze to be visible");
  t.assert.not(t.getSprite("Tera").visible, "Expected Sprite Tera not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Katze").volume, 100, "Expected Sprite Katze to have volume 100");
  t.assert.equal(t.getSprite("Tera").volume, 100, "Expected Sprite Tera to have volume 100");
  await t.runForSteps(49);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Katze").currentCostume, 0, "Expected Sprite Katze to have costume 0");
  t.assert.equal(t.getSprite("Tera").currentCostume, 0, "Expected Sprite Tera to have costume 0");
  t.assert.equal(t.getSprite("Katze").getCloneCount(), 0, "Expected Sprite Katze to have 0 clones");
  t.assert.equal(t.getSprite("Tera").getCloneCount(), 0, "Expected Sprite Tera to have 0 clones");
  t.assert.equal(t.getSprite("Katze").direction, 90, 1, "Expected Sprite Katze to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Tera").direction, 90, 1, "Expected Sprite Tera to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Katze").effects.color, 0, "Expected effect color of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.fisheye, 0, "Expected effect fisheye of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.whirl, 0, "Expected effect whirl of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.pixelate, 0, "Expected effect pixelate of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.mosaic, 0, "Expected effect mosaic of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.brightness, 0, "Expected effect brightness of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Katze").effects.ghost, 0, "Expected effect ghost of Sprite Katze to be 0");
  t.assert.equal(t.getSprite("Tera").effects.color, 0, "Expected effect color of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.fisheye, 0, "Expected effect fisheye of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.whirl, 0, "Expected effect whirl of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.pixelate, 0, "Expected effect pixelate of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.mosaic, 0, "Expected effect mosaic of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.brightness, 0, "Expected effect brightness of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Tera").effects.ghost, 0, "Expected effect ghost of Sprite Tera to be 0");
  t.assert.equal(t.getSprite("Katze").layerOrder, 3, "Expected Sprite Katze to be at layer 3");
  t.assert.equal(t.getSprite("Tera").layerOrder, 2, "Expected Sprite Tera to be at layer 2");
  t.assert.withinRange(t.getSprite("Katze").x, -195, 5, "Expected Sprite Katze to have x-position -195 +-5");
  t.assert.withinRange(t.getSprite("Katze").y, 0, 5, "Expected Sprite Katze to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Tera").x, 126, 5, "Expected Sprite Tera to have x-position 126 +-5");
  t.assert.withinRange(t.getSprite("Tera").y, 93, 5, "Expected Sprite Tera to have y-position 93 +-5");
  t.assert.not(t.getSprite("Katze").sayText, "Expected Sprite Katze not to say anything");
  t.assert.not(t.getSprite("Tera").sayText, "Expected Sprite Tera not to say anything");
  t.assert.withinRange(t.getSprite("Katze").size, 70, 1, "Expected Sprite Katze to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Tera").size, 60, 1, "Expected Sprite Tera to have size 60 +-1");
  t.assert.equal(t.getSprite("Katze").getVariable("Meine Z端ge").value, "2", "Expected Meine Z端ge to have value 2 in Sprite Katze");
  t.assert.ok(t.getSprite("Katze").visible, "Expected Sprite Katze to be visible");
  t.assert.not(t.getSprite("Tera").visible, "Expected Sprite Tera not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Katze").volume, 100, "Expected Sprite Katze to have volume 100");
  t.assert.equal(t.getSprite("Tera").volume, 100, "Expected Sprite Tera to have volume 100");
  t.end();
}

module.exports = [
  {
      test: test0,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687937479861',
      type: 'standard',
  }
]
