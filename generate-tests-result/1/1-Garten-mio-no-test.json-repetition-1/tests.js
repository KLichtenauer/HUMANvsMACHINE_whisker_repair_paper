const test0 = async function (t) {
  t.dragSprite('Blume', -21.37961561677826, 127.18937079155955, null);
  await t.runForSteps(1);
  t.keyPress('up arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.keyPress('up arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.keyPress('left arrow', 2);
  await t.runForSteps(2);
  await t.runForSteps(1);
  t.keyPress('down arrow', 3);
  await t.runForSteps(3);
  await t.runForSteps(1);
  t.keyPress('down arrow', 2);
  await t.runForSteps(2);
  await t.runForSteps(1);
  t.keyPress('down arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Blume").direction, 90, 1, "Expected Sprite Blume to face in direction 90 +-1");
  t.dragSprite('Blume', -107.48731109922352, 98.16803948720644, null);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Blume").x, -107.48731109922352, 5, "Expected Sprite Blume to have x-position -107.48731109922352 +-5");
  t.assert.withinRange(t.getSprite("Blume").y, 98.16803948720644, 5, "Expected Sprite Blume to have y-position 98.16803948720644 +-5");
  t.keyPress('right arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  await t.runForSteps(75);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Kaktus").getClone(1).currentCostume, 0, "Expected Clone 1 of Kaktus to have costume 0");
  t.assert.equal(t.getSprite("Kaktus").getCloneCount(), 1, "Expected Sprite Kaktus to have 1 clones");
  t.assert.equal(t.getSprite("Blume").direction, 95, 1, "Expected Sprite Blume to face in direction 95 +-1");
  t.assert.equal(t.getSprite("Kaktus").getClone(1).direction, 90, 1, "Expected Clone 1 of Kaktus to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kaktus").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Gärtnerin").layerOrder, 3, "Expected Sprite Gärtnerin to be at layer 3");
  t.assert.equal(t.getSprite("Blume").layerOrder, 4, "Expected Sprite Blume to be at layer 4");
  t.assert.equal(t.getSprite("Kaktus").layerOrder, 2, "Expected Sprite Kaktus to be at layer 2");
  t.assert.equal(t.getSprite("Kaktus").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Kaktus to be at layer 1");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(1).x, -16, 5, "Expected Clone 1 of Kaktus to have x-position -16 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(1).y, -151, 5, "Expected Clone 1 of Kaktus to have y-position -151 +-5");
  t.assert.not(t.getSprite("Gärtnerin").sayText, "Expected Sprite Gärtnerin not to say anything");
  t.assert.not(t.getSprite("Kaktus").getClone(1).sayText, "Expected Clone 1 of Kaktus not to say anything");
  t.assert.withinRange(t.getSprite("Gärtnerin").size, 20, 1, "Expected Sprite Gärtnerin to have size 20 +-1");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(1).size, 20, 1, "Expected Clone 1 of Kaktus to have size 20 +-1");
  t.assert.ok(t.getSprite("Kaktus").getClone(1).visible, "Expected Clone 1 of Kaktus to be visible");
  t.assert.equal(t.getSprite("Kaktus").getClone(1).volume, 100, "Expected Clone 1 of Kaktus to have volume 100");
  t.keyPress('left arrow', 2);
  await t.runForSteps(2);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Gärtnerin").x, -180, 5, "Expected Sprite Gärtnerin to have x-position -180 +-5");
  t.assert.withinRange(t.getSprite("Gärtnerin").y, 60, 5, "Expected Sprite Gärtnerin to have y-position 60 +-5");
  await t.runForSteps(91);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Kaktus").getClone(2).currentCostume, 0, "Expected Clone 2 of Kaktus to have costume 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(3).currentCostume, 0, "Expected Clone 3 of Kaktus to have costume 0");
  t.assert.equal(t.getSprite("Kaktus").getCloneCount(), 3, "Expected Sprite Kaktus to have 3 clones");
  t.assert.equal(t.getSprite("Kaktus").getClone(2).direction, 90, 1, "Expected Clone 2 of Kaktus to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kaktus").getClone(3).direction, 90, 1, "Expected Clone 3 of Kaktus to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kaktus").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Gärtnerin").layerOrder, 5, "Expected Sprite Gärtnerin to be at layer 5");
  t.assert.equal(t.getSprite("Blume").layerOrder, 6, "Expected Sprite Blume to be at layer 6");
  t.assert.equal(t.getSprite("Kaktus").layerOrder, 4, "Expected Sprite Kaktus to be at layer 4");
  t.assert.equal(t.getSprite("Kaktus").getClone(2).getLayerOrder(), 2, "Expected Clone 2 of Kaktus to be at layer 2");
  t.assert.equal(t.getSprite("Kaktus").getClone(3).getLayerOrder(), 3, "Expected Clone 3 of Kaktus to be at layer 3");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(2).x, 124, 5, "Expected Clone 2 of Kaktus to have x-position 124 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(2).y, -151, 5, "Expected Clone 2 of Kaktus to have y-position -151 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(3).x, 153, 5, "Expected Clone 3 of Kaktus to have x-position 153 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(3).y, 131, 5, "Expected Clone 3 of Kaktus to have y-position 131 +-5");
  t.assert.not(t.getSprite("Kaktus").getClone(2).sayText, "Expected Clone 2 of Kaktus not to say anything");
  t.assert.not(t.getSprite("Kaktus").getClone(3).sayText, "Expected Clone 3 of Kaktus not to say anything");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(2).size, 20, 1, "Expected Clone 2 of Kaktus to have size 20 +-1");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(3).size, 20, 1, "Expected Clone 3 of Kaktus to have size 20 +-1");
  t.assert.ok(t.getSprite("Kaktus").getClone(2).visible, "Expected Clone 2 of Kaktus to be visible");
  t.assert.ok(t.getSprite("Kaktus").getClone(3).visible, "Expected Clone 3 of Kaktus to be visible");
  t.assert.equal(t.getSprite("Kaktus").getClone(2).volume, 100, "Expected Clone 2 of Kaktus to have volume 100");
  t.assert.equal(t.getSprite("Kaktus").getClone(3).volume, 100, "Expected Clone 3 of Kaktus to have volume 100");
  t.dragSprite('Blume', -213.40369198697744, -12.425738698358728, null);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Blume").x, -213.40369198697744, 5, "Expected Sprite Blume to have x-position -213.40369198697744 +-5");
  t.assert.withinRange(t.getSprite("Blume").y, -12.425738698358728, 5, "Expected Sprite Blume to have y-position -12.425738698358728 +-5");
  t.keyPress('up arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Gärtnerin").x, -180, 5, "Expected Sprite Gärtnerin to have x-position -180 +-5");
  t.assert.withinRange(t.getSprite("Gärtnerin").y, 65, 5, "Expected Sprite Gärtnerin to have y-position 65 +-5");
  t.keyPress('down arrow', 4);
  await t.runForSteps(4);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Gärtnerin").x, -180, 5, "Expected Sprite Gärtnerin to have x-position -180 +-5");
  t.assert.withinRange(t.getSprite("Gärtnerin").y, 45, 5, "Expected Sprite Gärtnerin to have y-position 45 +-5");
  t.assert.withinRange(t.getSprite("Blume").x, 217, 5, "Expected Sprite Blume to have x-position 217 +-5");
  t.assert.withinRange(t.getSprite("Blume").y, -74, 5, "Expected Sprite Blume to have y-position -74 +-5");
  t.keyPress('down arrow', 4);
  await t.runForSteps(4);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Blume").direction, 90, 1, "Expected Sprite Blume to face in direction 90 +-1");
  t.assert.withinRange(t.getSprite("Gärtnerin").x, -180, 5, "Expected Sprite Gärtnerin to have x-position -180 +-5");
  t.assert.withinRange(t.getSprite("Gärtnerin").y, 25, 5, "Expected Sprite Gärtnerin to have y-position 25 +-5");
  t.keyPress('right arrow', 2);
  await t.runForSteps(2);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Gärtnerin").x, -170, 5, "Expected Sprite Gärtnerin to have x-position -170 +-5");
  t.assert.withinRange(t.getSprite("Gärtnerin").y, 25, 5, "Expected Sprite Gärtnerin to have y-position 25 +-5");
  t.keyPress('up arrow', 4);
  await t.runForSteps(4);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Gärtnerin").x, -170, 5, "Expected Sprite Gärtnerin to have x-position -170 +-5");
  t.assert.withinRange(t.getSprite("Gärtnerin").y, 45, 5, "Expected Sprite Gärtnerin to have y-position 45 +-5");
  await t.runForSteps(15);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Blume").direction, 95, 1, "Expected Sprite Blume to face in direction 95 +-1");
  await t.runForSteps(78);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Kaktus").getClone(4).currentCostume, 0, "Expected Clone 4 of Kaktus to have costume 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(5).currentCostume, 0, "Expected Clone 5 of Kaktus to have costume 0");
  t.assert.equal(t.getSprite("Kaktus").getCloneCount(), 5, "Expected Sprite Kaktus to have 5 clones");
  t.assert.equal(t.getSprite("Blume").direction, 90, 1, "Expected Sprite Blume to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kaktus").getClone(4).direction, 90, 1, "Expected Clone 4 of Kaktus to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kaktus").getClone(5).direction, 90, 1, "Expected Clone 5 of Kaktus to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kaktus").getClone(4).effects.color, 0, "Expected effect color of Clone 4 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(4).effects.fisheye, 0, "Expected effect fisheye of Clone 4 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(4).effects.whirl, 0, "Expected effect whirl of Clone 4 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(4).effects.pixelate, 0, "Expected effect pixelate of Clone 4 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(4).effects.mosaic, 0, "Expected effect mosaic of Clone 4 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(4).effects.brightness, 0, "Expected effect brightness of Clone 4 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(4).effects.ghost, 0, "Expected effect ghost of Clone 4 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(5).effects.color, 0, "Expected effect color of Clone 5 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(5).effects.fisheye, 0, "Expected effect fisheye of Clone 5 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(5).effects.whirl, 0, "Expected effect whirl of Clone 5 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(5).effects.pixelate, 0, "Expected effect pixelate of Clone 5 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(5).effects.mosaic, 0, "Expected effect mosaic of Clone 5 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(5).effects.brightness, 0, "Expected effect brightness of Clone 5 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(5).effects.ghost, 0, "Expected effect ghost of Clone 5 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Gärtnerin").layerOrder, 7, "Expected Sprite Gärtnerin to be at layer 7");
  t.assert.equal(t.getSprite("Blume").layerOrder, 8, "Expected Sprite Blume to be at layer 8");
  t.assert.equal(t.getSprite("Kaktus").layerOrder, 6, "Expected Sprite Kaktus to be at layer 6");
  t.assert.equal(t.getSprite("Kaktus").getClone(4).getLayerOrder(), 4, "Expected Clone 4 of Kaktus to be at layer 4");
  t.assert.equal(t.getSprite("Kaktus").getClone(5).getLayerOrder(), 5, "Expected Clone 5 of Kaktus to be at layer 5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(4).x, 163, 5, "Expected Clone 4 of Kaktus to have x-position 163 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(4).y, 107, 5, "Expected Clone 4 of Kaktus to have y-position 107 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(5).x, -126, 5, "Expected Clone 5 of Kaktus to have x-position -126 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(5).y, -153, 5, "Expected Clone 5 of Kaktus to have y-position -153 +-5");
  t.assert.not(t.getSprite("Kaktus").getClone(4).sayText, "Expected Clone 4 of Kaktus not to say anything");
  t.assert.not(t.getSprite("Kaktus").getClone(5).sayText, "Expected Clone 5 of Kaktus not to say anything");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(4).size, 20, 1, "Expected Clone 4 of Kaktus to have size 20 +-1");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(5).size, 20, 1, "Expected Clone 5 of Kaktus to have size 20 +-1");
  t.assert.ok(t.getSprite("Kaktus").getClone(4).visible, "Expected Clone 4 of Kaktus to be visible");
  t.assert.ok(t.getSprite("Kaktus").getClone(5).visible, "Expected Clone 5 of Kaktus to be visible");
  t.assert.equal(t.getSprite("Kaktus").getClone(4).volume, 100, "Expected Clone 4 of Kaktus to have volume 100");
  t.assert.equal(t.getSprite("Kaktus").getClone(5).volume, 100, "Expected Clone 5 of Kaktus to have volume 100");
  t.dragSprite('Blume', -99.37247741889998, 39.328798604772636, null);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Blume").x, -99.37247741889998, 5, "Expected Sprite Blume to have x-position -99.37247741889998 +-5");
  t.assert.withinRange(t.getSprite("Blume").y, 39.328798604772636, 5, "Expected Sprite Blume to have y-position 39.328798604772636 +-5");
  t.dragSprite('Gärtnerin', -16, -151, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Gärtnerin").effects.color, 25, "Expected effect color of Sprite Gärtnerin to be 25");
  t.assert.withinRange(t.getSprite("Gärtnerin").x, -16, 5, "Expected Sprite Gärtnerin to have x-position -16 +-5");
  t.assert.withinRange(t.getSprite("Gärtnerin").y, -151, 5, "Expected Sprite Gärtnerin to have y-position -151 +-5");
  t.assert.equal(t.getSprite("Gärtnerin").sayText, "Autsch!", "Expected Sprite Gärtnerin to say Autsch!");
  t.assert.equal(t.getSprite("Blume").sayText, "Ohje!", "Expected Sprite Blume to say Ohje!");
  await t.runForSteps(28);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Gärtnerin").effects.color, 50, "Expected effect color of Sprite Gärtnerin to be 50");
  t.assert.withinRange(t.getSprite("Kaktus").x, 46.516666666666666, 5, "Expected Sprite Kaktus to have x-position 46.516666666666666 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").y, -41.983333333333334, 5, "Expected Sprite Kaktus to have y-position -41.983333333333334 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(2).x, 56.33333333333333, 5, "Expected Clone 2 of Kaktus to have x-position 56.33333333333333 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(2).y, -151, 5, "Expected Clone 2 of Kaktus to have y-position -151 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(3).x, 71.31666666666666, 5, "Expected Clone 3 of Kaktus to have x-position 71.31666666666666 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(3).y, -5.300000000000011, 5, "Expected Clone 3 of Kaktus to have y-position -5.300000000000011 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(4).x, 76.48333333333333, 5, "Expected Clone 4 of Kaktus to have x-position 76.48333333333333 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(4).y, -17.700000000000003, 5, "Expected Clone 4 of Kaktus to have y-position -17.700000000000003 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(5).x, -72.83333333333334, 5, "Expected Clone 5 of Kaktus to have x-position -72.83333333333334 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(5).y, -152.03333333333333, 5, "Expected Clone 5 of Kaktus to have y-position -152.03333333333333 +-5");
  await t.runForSteps(75);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Gärtnerin").effects.color, 175, "Expected effect color of Sprite Gärtnerin to be 175");
  t.assert.withinRange(t.getSprite("Kaktus").x, -16, 5, "Expected Sprite Kaktus to have x-position -16 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").y, -151, 5, "Expected Sprite Kaktus to have y-position -151 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(2).x, -16, 5, "Expected Clone 2 of Kaktus to have x-position -16 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(2).y, -151, 5, "Expected Clone 2 of Kaktus to have y-position -151 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(3).x, -16, 5, "Expected Clone 3 of Kaktus to have x-position -16 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(3).y, -151, 5, "Expected Clone 3 of Kaktus to have y-position -151 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(4).x, -16, 5, "Expected Clone 4 of Kaktus to have x-position -16 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(4).y, -151, 5, "Expected Clone 4 of Kaktus to have y-position -151 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(5).x, -16, 5, "Expected Clone 5 of Kaktus to have x-position -16 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(5).y, -151, 5, "Expected Clone 5 of Kaktus to have y-position -151 +-5");
  await t.runForSteps(53);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Gärtnerin").effects.color, 250, "Expected effect color of Sprite Gärtnerin to be 250");
  await t.runForSteps(46);
  await t.runForSteps(1);
  t.end();
}
const test1 = async function (t) {
  t.keyPress('left arrow', 2);
  await t.runForSteps(2);
  await t.runForSteps(1);
  t.keyPress('down arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.keyPress('left arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.keyPress('down arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.keyPress('up arrow', 4);
  await t.runForSteps(4);
  await t.runForSteps(1);
  t.keyPress('down arrow', 2);
  await t.runForSteps(2);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Blume").direction, 90, 1, "Expected Sprite Blume to face in direction 90 +-1");
  await t.runForSteps(300);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Kaktus").getClone(1).currentCostume, 0, "Expected Clone 1 of Kaktus to have costume 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(2).currentCostume, 0, "Expected Clone 2 of Kaktus to have costume 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(3).currentCostume, 0, "Expected Clone 3 of Kaktus to have costume 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(4).currentCostume, 0, "Expected Clone 4 of Kaktus to have costume 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(5).currentCostume, 0, "Expected Clone 5 of Kaktus to have costume 0");
  t.assert.equal(t.getSprite("Kaktus").getCloneCount(), 5, "Expected Sprite Kaktus to have 5 clones");
  t.assert.equal(t.getSprite("Blume").direction, 95, 1, "Expected Sprite Blume to face in direction 95 +-1");
  t.assert.equal(t.getSprite("Kaktus").getClone(1).direction, 90, 1, "Expected Clone 1 of Kaktus to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kaktus").getClone(2).direction, 90, 1, "Expected Clone 2 of Kaktus to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kaktus").getClone(3).direction, 90, 1, "Expected Clone 3 of Kaktus to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kaktus").getClone(4).direction, 90, 1, "Expected Clone 4 of Kaktus to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kaktus").getClone(5).direction, 90, 1, "Expected Clone 5 of Kaktus to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kaktus").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(4).effects.color, 0, "Expected effect color of Clone 4 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(4).effects.fisheye, 0, "Expected effect fisheye of Clone 4 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(4).effects.whirl, 0, "Expected effect whirl of Clone 4 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(4).effects.pixelate, 0, "Expected effect pixelate of Clone 4 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(4).effects.mosaic, 0, "Expected effect mosaic of Clone 4 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(4).effects.brightness, 0, "Expected effect brightness of Clone 4 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(4).effects.ghost, 0, "Expected effect ghost of Clone 4 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(5).effects.color, 0, "Expected effect color of Clone 5 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(5).effects.fisheye, 0, "Expected effect fisheye of Clone 5 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(5).effects.whirl, 0, "Expected effect whirl of Clone 5 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(5).effects.pixelate, 0, "Expected effect pixelate of Clone 5 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(5).effects.mosaic, 0, "Expected effect mosaic of Clone 5 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(5).effects.brightness, 0, "Expected effect brightness of Clone 5 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(5).effects.ghost, 0, "Expected effect ghost of Clone 5 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Gärtnerin").layerOrder, 7, "Expected Sprite Gärtnerin to be at layer 7");
  t.assert.equal(t.getSprite("Blume").layerOrder, 8, "Expected Sprite Blume to be at layer 8");
  t.assert.equal(t.getSprite("Kaktus").layerOrder, 6, "Expected Sprite Kaktus to be at layer 6");
  t.assert.equal(t.getSprite("Kaktus").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Kaktus to be at layer 1");
  t.assert.equal(t.getSprite("Kaktus").getClone(2).getLayerOrder(), 2, "Expected Clone 2 of Kaktus to be at layer 2");
  t.assert.equal(t.getSprite("Kaktus").getClone(3).getLayerOrder(), 3, "Expected Clone 3 of Kaktus to be at layer 3");
  t.assert.equal(t.getSprite("Kaktus").getClone(4).getLayerOrder(), 4, "Expected Clone 4 of Kaktus to be at layer 4");
  t.assert.equal(t.getSprite("Kaktus").getClone(5).getLayerOrder(), 5, "Expected Clone 5 of Kaktus to be at layer 5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(1).x, -16, 5, "Expected Clone 1 of Kaktus to have x-position -16 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(1).y, -151, 5, "Expected Clone 1 of Kaktus to have y-position -151 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(2).x, 124, 5, "Expected Clone 2 of Kaktus to have x-position 124 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(2).y, -151, 5, "Expected Clone 2 of Kaktus to have y-position -151 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(3).x, 153, 5, "Expected Clone 3 of Kaktus to have x-position 153 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(3).y, 131, 5, "Expected Clone 3 of Kaktus to have y-position 131 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(4).x, 163, 5, "Expected Clone 4 of Kaktus to have x-position 163 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(4).y, 107, 5, "Expected Clone 4 of Kaktus to have y-position 107 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(5).x, -126, 5, "Expected Clone 5 of Kaktus to have x-position -126 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(5).y, -153, 5, "Expected Clone 5 of Kaktus to have y-position -153 +-5");
  t.assert.not(t.getSprite("Gärtnerin").sayText, "Expected Sprite Gärtnerin not to say anything");
  t.assert.not(t.getSprite("Kaktus").getClone(1).sayText, "Expected Clone 1 of Kaktus not to say anything");
  t.assert.not(t.getSprite("Kaktus").getClone(2).sayText, "Expected Clone 2 of Kaktus not to say anything");
  t.assert.not(t.getSprite("Kaktus").getClone(3).sayText, "Expected Clone 3 of Kaktus not to say anything");
  t.assert.not(t.getSprite("Kaktus").getClone(4).sayText, "Expected Clone 4 of Kaktus not to say anything");
  t.assert.not(t.getSprite("Kaktus").getClone(5).sayText, "Expected Clone 5 of Kaktus not to say anything");
  t.assert.withinRange(t.getSprite("Gärtnerin").size, 20, 1, "Expected Sprite Gärtnerin to have size 20 +-1");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(1).size, 20, 1, "Expected Clone 1 of Kaktus to have size 20 +-1");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(2).size, 20, 1, "Expected Clone 2 of Kaktus to have size 20 +-1");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(3).size, 20, 1, "Expected Clone 3 of Kaktus to have size 20 +-1");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(4).size, 20, 1, "Expected Clone 4 of Kaktus to have size 20 +-1");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(5).size, 20, 1, "Expected Clone 5 of Kaktus to have size 20 +-1");
  t.assert.ok(t.getSprite("Kaktus").getClone(1).visible, "Expected Clone 1 of Kaktus to be visible");
  t.assert.ok(t.getSprite("Kaktus").getClone(2).visible, "Expected Clone 2 of Kaktus to be visible");
  t.assert.ok(t.getSprite("Kaktus").getClone(3).visible, "Expected Clone 3 of Kaktus to be visible");
  t.assert.ok(t.getSprite("Kaktus").getClone(4).visible, "Expected Clone 4 of Kaktus to be visible");
  t.assert.ok(t.getSprite("Kaktus").getClone(5).visible, "Expected Clone 5 of Kaktus to be visible");
  t.assert.equal(t.getSprite("Kaktus").getClone(1).volume, 100, "Expected Clone 1 of Kaktus to have volume 100");
  t.assert.equal(t.getSprite("Kaktus").getClone(2).volume, 100, "Expected Clone 2 of Kaktus to have volume 100");
  t.assert.equal(t.getSprite("Kaktus").getClone(3).volume, 100, "Expected Clone 3 of Kaktus to have volume 100");
  t.assert.equal(t.getSprite("Kaktus").getClone(4).volume, 100, "Expected Clone 4 of Kaktus to have volume 100");
  t.assert.equal(t.getSprite("Kaktus").getClone(5).volume, 100, "Expected Clone 5 of Kaktus to have volume 100");
  t.keyPress('up arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Gärtnerin").x, -170, 5, "Expected Sprite Gärtnerin to have x-position -170 +-5");
  t.assert.withinRange(t.getSprite("Gärtnerin").y, 65, 5, "Expected Sprite Gärtnerin to have y-position 65 +-5");
  t.dragSprite('Gärtnerin', -16, -151, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Gärtnerin").effects.color, 25, "Expected effect color of Sprite Gärtnerin to be 25");
  t.assert.withinRange(t.getSprite("Gärtnerin").x, -16, 5, "Expected Sprite Gärtnerin to have x-position -16 +-5");
  t.assert.withinRange(t.getSprite("Gärtnerin").y, -151, 5, "Expected Sprite Gärtnerin to have y-position -151 +-5");
  t.assert.equal(t.getSprite("Gärtnerin").sayText, "Autsch!", "Expected Sprite Gärtnerin to say Autsch!");
  t.assert.equal(t.getSprite("Blume").sayText, "Ohje!", "Expected Sprite Blume to say Ohje!");
  await t.runForSteps(67);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Gärtnerin").effects.color, 125, "Expected effect color of Sprite Gärtnerin to be 125");
  t.assert.withinRange(t.getSprite("Kaktus").x, -16, 5, "Expected Sprite Kaktus to have x-position -16 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").y, -151, 5, "Expected Sprite Kaktus to have y-position -151 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(2).x, -16, 5, "Expected Clone 2 of Kaktus to have x-position -16 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(2).y, -151, 5, "Expected Clone 2 of Kaktus to have y-position -151 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(3).x, -16, 5, "Expected Clone 3 of Kaktus to have x-position -16 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(3).y, -151, 5, "Expected Clone 3 of Kaktus to have y-position -151 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(4).x, -16, 5, "Expected Clone 4 of Kaktus to have x-position -16 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(4).y, -151, 5, "Expected Clone 4 of Kaktus to have y-position -151 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(5).x, -16, 5, "Expected Clone 5 of Kaktus to have x-position -16 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(5).y, -151, 5, "Expected Clone 5 of Kaktus to have y-position -151 +-5");
  await t.runForSteps(34);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Gärtnerin").effects.color, 175, "Expected effect color of Sprite Gärtnerin to be 175");
  await t.runForSteps(47);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Gärtnerin").effects.color, 250, "Expected effect color of Sprite Gärtnerin to be 250");
  await t.runForSteps(44);
  await t.runForSteps(1);
  t.end();
}

module.exports = [
  {
      test: test0,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687849445549',
      type: 'standard',
  },
  {
      test: test1,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687849445549',
      type: 'standard',
  }
]
