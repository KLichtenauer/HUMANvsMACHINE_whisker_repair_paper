const test0 = async function (t) {
  await t.runForSteps(56);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kreatur").currentCostume, 2, "Expected Sprite Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Gobo").currentCostume, 0, "Expected Sprite Gobo to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).currentCostume, 2, "Expected Clone 1 of Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).currentCostume, 0, "Expected Clone 2 of Kreatur to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).currentCostume, 1, "Expected Clone 3 of Kreatur to have costume 1");
  t.assert.equal(t.getSprite("Kreatur").getCloneCount(), 3, "Expected Sprite Kreatur to have 3 clones");
  t.assert.equal(t.getSprite("Gobo").getCloneCount(), 0, "Expected Sprite Gobo to have 0 clones");
  t.assert.equal(t.getSprite("Kreatur").direction, 90, 1, "Expected Sprite Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Gobo").direction, 90, 1, "Expected Sprite Gobo to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).direction, 90, 1, "Expected Clone 1 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).direction, 90, 1, "Expected Clone 2 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).direction, 90, 1, "Expected Clone 3 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").effects.color, 0, "Expected effect color of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.fisheye, 0, "Expected effect fisheye of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.whirl, 0, "Expected effect whirl of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.pixelate, 0, "Expected effect pixelate of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.mosaic, 0, "Expected effect mosaic of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.brightness, 0, "Expected effect brightness of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.ghost, 0, "Expected effect ghost of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.color, 0, "Expected effect color of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.fisheye, 0, "Expected effect fisheye of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.whirl, 0, "Expected effect whirl of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.pixelate, 0, "Expected effect pixelate of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.mosaic, 0, "Expected effect mosaic of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.brightness, 0, "Expected effect brightness of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.ghost, 0, "Expected effect ghost of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").layerOrder, 4, "Expected Sprite Kreatur to be at layer 4");
  t.assert.equal(t.getSprite("Gobo").layerOrder, 5, "Expected Sprite Gobo to be at layer 5");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Kreatur to be at layer 1");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).getLayerOrder(), 2, "Expected Clone 2 of Kreatur to be at layer 2");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).getLayerOrder(), 3, "Expected Clone 3 of Kreatur to be at layer 3");
  t.assert.withinRange(t.getSprite("Kreatur").x, 46, 5, "Expected Sprite Kreatur to have x-position 46 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").y, -81, 5, "Expected Sprite Kreatur to have y-position -81 +-5");
  t.assert.withinRange(t.getSprite("Gobo").x, -110, 5, "Expected Sprite Gobo to have x-position -110 +-5");
  t.assert.withinRange(t.getSprite("Gobo").y, 110, 5, "Expected Sprite Gobo to have y-position 110 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).x, -184, 5, "Expected Clone 1 of Kreatur to have x-position -184 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).y, -99, 5, "Expected Clone 1 of Kreatur to have y-position -99 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).x, -227, 5, "Expected Clone 2 of Kreatur to have x-position -227 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).y, -127, 5, "Expected Clone 2 of Kreatur to have y-position -127 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).x, 198, 5, "Expected Clone 3 of Kreatur to have x-position 198 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).y, 93, 5, "Expected Clone 3 of Kreatur to have y-position 93 +-5");
  t.assert.not(t.getSprite("Kreatur").sayText, "Expected Sprite Kreatur not to say anything");
  t.assert.not(t.getSprite("Gobo").sayText, "Expected Sprite Gobo not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(1).sayText, "Expected Clone 1 of Kreatur not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(2).sayText, "Expected Clone 2 of Kreatur not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(3).sayText, "Expected Clone 3 of Kreatur not to say anything");
  t.assert.withinRange(t.getSprite("Kreatur").size, 499, 1, "Expected Sprite Kreatur to have size 499 +-1");
  t.assert.withinRange(t.getSprite("Gobo").size, 60, 1, "Expected Sprite Gobo to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).size, 84, 1, "Expected Clone 1 of Kreatur to have size 84 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).size, 97, 1, "Expected Clone 2 of Kreatur to have size 97 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).size, 100, 1, "Expected Clone 3 of Kreatur to have size 100 +-1");
  t.assert.not(t.getSprite("Kreatur").visible, "Expected Sprite Kreatur not to be visible");
  t.assert.not(t.getSprite("Gobo").visible, "Expected Sprite Gobo not to be visible");
  t.assert.ok(t.getSprite("Kreatur").getClone(1).visible, "Expected Clone 1 of Kreatur to be visible");
  t.assert.ok(t.getSprite("Kreatur").getClone(2).visible, "Expected Clone 2 of Kreatur to be visible");
  t.assert.ok(t.getSprite("Kreatur").getClone(3).visible, "Expected Clone 3 of Kreatur to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").volume, 100, "Expected Sprite Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Gobo").volume, 100, "Expected Sprite Gobo to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).volume, 100, "Expected Clone 1 of Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).volume, 100, "Expected Clone 2 of Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).volume, 100, "Expected Clone 3 of Kreatur to have volume 100");
  await t.runForSteps(40);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kreatur").currentCostume, 2, "Expected Sprite Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Gobo").currentCostume, 0, "Expected Sprite Gobo to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).currentCostume, 2, "Expected Clone 1 of Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).currentCostume, 0, "Expected Clone 2 of Kreatur to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).currentCostume, 1, "Expected Clone 3 of Kreatur to have costume 1");
  t.assert.equal(t.getSprite("Kreatur").getCloneCount(), 3, "Expected Sprite Kreatur to have 3 clones");
  t.assert.equal(t.getSprite("Gobo").getCloneCount(), 0, "Expected Sprite Gobo to have 0 clones");
  t.assert.equal(t.getSprite("Kreatur").direction, 90, 1, "Expected Sprite Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Gobo").direction, 90, 1, "Expected Sprite Gobo to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).direction, 90, 1, "Expected Clone 1 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).direction, 90, 1, "Expected Clone 2 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).direction, 90, 1, "Expected Clone 3 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").effects.color, 0, "Expected effect color of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.fisheye, 0, "Expected effect fisheye of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.whirl, 0, "Expected effect whirl of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.pixelate, 0, "Expected effect pixelate of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.mosaic, 0, "Expected effect mosaic of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.brightness, 0, "Expected effect brightness of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.ghost, 0, "Expected effect ghost of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.color, 0, "Expected effect color of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.fisheye, 0, "Expected effect fisheye of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.whirl, 0, "Expected effect whirl of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.pixelate, 0, "Expected effect pixelate of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.mosaic, 0, "Expected effect mosaic of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.brightness, 0, "Expected effect brightness of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.ghost, 0, "Expected effect ghost of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").layerOrder, 4, "Expected Sprite Kreatur to be at layer 4");
  t.assert.equal(t.getSprite("Gobo").layerOrder, 5, "Expected Sprite Gobo to be at layer 5");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Kreatur to be at layer 1");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).getLayerOrder(), 2, "Expected Clone 2 of Kreatur to be at layer 2");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).getLayerOrder(), 3, "Expected Clone 3 of Kreatur to be at layer 3");
  t.assert.withinRange(t.getSprite("Kreatur").x, 46, 5, "Expected Sprite Kreatur to have x-position 46 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").y, -81, 5, "Expected Sprite Kreatur to have y-position -81 +-5");
  t.assert.withinRange(t.getSprite("Gobo").x, -110, 5, "Expected Sprite Gobo to have x-position -110 +-5");
  t.assert.withinRange(t.getSprite("Gobo").y, 110, 5, "Expected Sprite Gobo to have y-position 110 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).x, -184, 5, "Expected Clone 1 of Kreatur to have x-position -184 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).y, -99, 5, "Expected Clone 1 of Kreatur to have y-position -99 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).x, -227, 5, "Expected Clone 2 of Kreatur to have x-position -227 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).y, -127, 5, "Expected Clone 2 of Kreatur to have y-position -127 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).x, 223, 5, "Expected Clone 3 of Kreatur to have x-position 223 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).y, -1, 5, "Expected Clone 3 of Kreatur to have y-position -1 +-5");
  t.assert.not(t.getSprite("Kreatur").sayText, "Expected Sprite Kreatur not to say anything");
  t.assert.not(t.getSprite("Gobo").sayText, "Expected Sprite Gobo not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(1).sayText, "Expected Clone 1 of Kreatur not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(2).sayText, "Expected Clone 2 of Kreatur not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(3).sayText, "Expected Clone 3 of Kreatur not to say anything");
  t.assert.withinRange(t.getSprite("Kreatur").size, 499, 1, "Expected Sprite Kreatur to have size 499 +-1");
  t.assert.withinRange(t.getSprite("Gobo").size, 60, 1, "Expected Sprite Gobo to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).size, 100, 1, "Expected Clone 1 of Kreatur to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).size, 97, 1, "Expected Clone 2 of Kreatur to have size 97 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).size, 96, 1, "Expected Clone 3 of Kreatur to have size 96 +-1");
  t.assert.not(t.getSprite("Kreatur").visible, "Expected Sprite Kreatur not to be visible");
  t.assert.not(t.getSprite("Gobo").visible, "Expected Sprite Gobo not to be visible");
  t.assert.not(t.getSprite("Kreatur").getClone(1).visible, "Expected Clone 1 of Kreatur not to be visible");
  t.assert.ok(t.getSprite("Kreatur").getClone(2).visible, "Expected Clone 2 of Kreatur to be visible");
  t.assert.ok(t.getSprite("Kreatur").getClone(3).visible, "Expected Clone 3 of Kreatur to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").volume, 100, "Expected Sprite Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Gobo").volume, 100, "Expected Sprite Gobo to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).volume, 100, "Expected Clone 1 of Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).volume, 100, "Expected Clone 2 of Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).volume, 100, "Expected Clone 3 of Kreatur to have volume 100");
  t.clickCloneByCoords(223, -1, 1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kreatur").currentCostume, 2, "Expected Sprite Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Gobo").currentCostume, 0, "Expected Sprite Gobo to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).currentCostume, 2, "Expected Clone 1 of Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).currentCostume, 0, "Expected Clone 2 of Kreatur to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).currentCostume, 1, "Expected Clone 3 of Kreatur to have costume 1");
  t.assert.equal(t.getSprite("Kreatur").getCloneCount(), 3, "Expected Sprite Kreatur to have 3 clones");
  t.assert.equal(t.getSprite("Gobo").getCloneCount(), 0, "Expected Sprite Gobo to have 0 clones");
  t.assert.equal(t.getSprite("Kreatur").direction, 90, 1, "Expected Sprite Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Gobo").direction, 90, 1, "Expected Sprite Gobo to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).direction, 90, 1, "Expected Clone 1 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).direction, 90, 1, "Expected Clone 2 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).direction, 90, 1, "Expected Clone 3 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").effects.color, 0, "Expected effect color of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.fisheye, 0, "Expected effect fisheye of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.whirl, 0, "Expected effect whirl of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.pixelate, 0, "Expected effect pixelate of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.mosaic, 0, "Expected effect mosaic of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.brightness, 0, "Expected effect brightness of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.ghost, 0, "Expected effect ghost of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.color, 0, "Expected effect color of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.fisheye, 0, "Expected effect fisheye of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.whirl, 0, "Expected effect whirl of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.pixelate, 0, "Expected effect pixelate of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.mosaic, 0, "Expected effect mosaic of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.brightness, 0, "Expected effect brightness of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.ghost, 0, "Expected effect ghost of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").layerOrder, 4, "Expected Sprite Kreatur to be at layer 4");
  t.assert.equal(t.getSprite("Gobo").layerOrder, 5, "Expected Sprite Gobo to be at layer 5");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Kreatur to be at layer 1");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).getLayerOrder(), 2, "Expected Clone 2 of Kreatur to be at layer 2");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).getLayerOrder(), 3, "Expected Clone 3 of Kreatur to be at layer 3");
  t.assert.withinRange(t.getSprite("Kreatur").x, 46, 5, "Expected Sprite Kreatur to have x-position 46 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").y, -81, 5, "Expected Sprite Kreatur to have y-position -81 +-5");
  t.assert.withinRange(t.getSprite("Gobo").x, -110, 5, "Expected Sprite Gobo to have x-position -110 +-5");
  t.assert.withinRange(t.getSprite("Gobo").y, 110, 5, "Expected Sprite Gobo to have y-position 110 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).x, -184, 5, "Expected Clone 1 of Kreatur to have x-position -184 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).y, -99, 5, "Expected Clone 1 of Kreatur to have y-position -99 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).x, -227, 5, "Expected Clone 2 of Kreatur to have x-position -227 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).y, -127, 5, "Expected Clone 2 of Kreatur to have y-position -127 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).x, 223, 5, "Expected Clone 3 of Kreatur to have x-position 223 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).y, -1, 5, "Expected Clone 3 of Kreatur to have y-position -1 +-5");
  t.assert.not(t.getSprite("Kreatur").sayText, "Expected Sprite Kreatur not to say anything");
  t.assert.not(t.getSprite("Gobo").sayText, "Expected Sprite Gobo not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(1).sayText, "Expected Clone 1 of Kreatur not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(2).sayText, "Expected Clone 2 of Kreatur not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(3).sayText, "Expected Clone 3 of Kreatur not to say anything");
  t.assert.withinRange(t.getSprite("Kreatur").size, 499, 1, "Expected Sprite Kreatur to have size 499 +-1");
  t.assert.withinRange(t.getSprite("Gobo").size, 60, 1, "Expected Sprite Gobo to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).size, 100, 1, "Expected Clone 1 of Kreatur to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).size, 97, 1, "Expected Clone 2 of Kreatur to have size 97 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).size, 96, 1, "Expected Clone 3 of Kreatur to have size 96 +-1");
  t.assert.not(t.getSprite("Kreatur").visible, "Expected Sprite Kreatur not to be visible");
  t.assert.not(t.getSprite("Gobo").visible, "Expected Sprite Gobo not to be visible");
  t.assert.not(t.getSprite("Kreatur").getClone(1).visible, "Expected Clone 1 of Kreatur not to be visible");
  t.assert.ok(t.getSprite("Kreatur").getClone(2).visible, "Expected Clone 2 of Kreatur to be visible");
  t.assert.not(t.getSprite("Kreatur").getClone(3).visible, "Expected Clone 3 of Kreatur not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").volume, 100, "Expected Sprite Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Gobo").volume, 100, "Expected Sprite Gobo to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).volume, 100, "Expected Clone 1 of Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).volume, 100, "Expected Clone 2 of Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).volume, 100, "Expected Clone 3 of Kreatur to have volume 100");
  await t.runForSteps(52);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kreatur").currentCostume, 2, "Expected Sprite Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Gobo").currentCostume, 0, "Expected Sprite Gobo to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).currentCostume, 2, "Expected Clone 1 of Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).currentCostume, 0, "Expected Clone 2 of Kreatur to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).currentCostume, 1, "Expected Clone 3 of Kreatur to have costume 1");
  t.assert.equal(t.getSprite("Kreatur").getCloneCount(), 3, "Expected Sprite Kreatur to have 3 clones");
  t.assert.equal(t.getSprite("Gobo").getCloneCount(), 0, "Expected Sprite Gobo to have 0 clones");
  t.assert.equal(t.getSprite("Kreatur").direction, 90, 1, "Expected Sprite Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Gobo").direction, 90, 1, "Expected Sprite Gobo to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).direction, 90, 1, "Expected Clone 1 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).direction, 90, 1, "Expected Clone 2 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).direction, 90, 1, "Expected Clone 3 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").effects.color, 0, "Expected effect color of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.fisheye, 0, "Expected effect fisheye of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.whirl, 0, "Expected effect whirl of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.pixelate, 0, "Expected effect pixelate of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.mosaic, 0, "Expected effect mosaic of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.brightness, 0, "Expected effect brightness of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.ghost, 0, "Expected effect ghost of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.color, 0, "Expected effect color of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.fisheye, 0, "Expected effect fisheye of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.whirl, 0, "Expected effect whirl of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.pixelate, 0, "Expected effect pixelate of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.mosaic, 0, "Expected effect mosaic of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.brightness, 0, "Expected effect brightness of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.ghost, 0, "Expected effect ghost of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").layerOrder, 4, "Expected Sprite Kreatur to be at layer 4");
  t.assert.equal(t.getSprite("Gobo").layerOrder, 5, "Expected Sprite Gobo to be at layer 5");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Kreatur to be at layer 1");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).getLayerOrder(), 2, "Expected Clone 2 of Kreatur to be at layer 2");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).getLayerOrder(), 3, "Expected Clone 3 of Kreatur to be at layer 3");
  t.assert.withinRange(t.getSprite("Kreatur").x, 46, 5, "Expected Sprite Kreatur to have x-position 46 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").y, -81, 5, "Expected Sprite Kreatur to have y-position -81 +-5");
  t.assert.withinRange(t.getSprite("Gobo").x, -110, 5, "Expected Sprite Gobo to have x-position -110 +-5");
  t.assert.withinRange(t.getSprite("Gobo").y, 110, 5, "Expected Sprite Gobo to have y-position 110 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).x, -70, 5, "Expected Clone 1 of Kreatur to have x-position -70 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).y, -163, 5, "Expected Clone 1 of Kreatur to have y-position -163 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).x, -227, 5, "Expected Clone 2 of Kreatur to have x-position -227 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).y, -127, 5, "Expected Clone 2 of Kreatur to have y-position -127 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).x, 223, 5, "Expected Clone 3 of Kreatur to have x-position 223 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).y, -1, 5, "Expected Clone 3 of Kreatur to have y-position -1 +-5");
  t.assert.not(t.getSprite("Kreatur").sayText, "Expected Sprite Kreatur not to say anything");
  t.assert.not(t.getSprite("Gobo").sayText, "Expected Sprite Gobo not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(1).sayText, "Expected Clone 1 of Kreatur not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(2).sayText, "Expected Clone 2 of Kreatur not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(3).sayText, "Expected Clone 3 of Kreatur not to say anything");
  t.assert.withinRange(t.getSprite("Kreatur").size, 499, 1, "Expected Sprite Kreatur to have size 499 +-1");
  t.assert.withinRange(t.getSprite("Gobo").size, 60, 1, "Expected Sprite Gobo to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).size, 100, 1, "Expected Clone 1 of Kreatur to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).size, 85, 1, "Expected Clone 2 of Kreatur to have size 85 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).size, 96, 1, "Expected Clone 3 of Kreatur to have size 96 +-1");
  t.assert.not(t.getSprite("Kreatur").visible, "Expected Sprite Kreatur not to be visible");
  t.assert.not(t.getSprite("Gobo").visible, "Expected Sprite Gobo not to be visible");
  t.assert.ok(t.getSprite("Kreatur").getClone(1).visible, "Expected Clone 1 of Kreatur to be visible");
  t.assert.not(t.getSprite("Kreatur").getClone(2).visible, "Expected Clone 2 of Kreatur not to be visible");
  t.assert.not(t.getSprite("Kreatur").getClone(3).visible, "Expected Clone 3 of Kreatur not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").volume, 100, "Expected Sprite Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Gobo").volume, 100, "Expected Sprite Gobo to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).volume, 100, "Expected Clone 1 of Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).volume, 100, "Expected Clone 2 of Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).volume, 100, "Expected Clone 3 of Kreatur to have volume 100");
  await t.runForSteps(21);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kreatur").currentCostume, 2, "Expected Sprite Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Gobo").currentCostume, 0, "Expected Sprite Gobo to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).currentCostume, 2, "Expected Clone 1 of Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).currentCostume, 0, "Expected Clone 2 of Kreatur to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).currentCostume, 1, "Expected Clone 3 of Kreatur to have costume 1");
  t.assert.equal(t.getSprite("Kreatur").getCloneCount(), 3, "Expected Sprite Kreatur to have 3 clones");
  t.assert.equal(t.getSprite("Gobo").getCloneCount(), 0, "Expected Sprite Gobo to have 0 clones");
  t.assert.equal(t.getSprite("Kreatur").direction, 90, 1, "Expected Sprite Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Gobo").direction, 90, 1, "Expected Sprite Gobo to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).direction, 90, 1, "Expected Clone 1 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).direction, 90, 1, "Expected Clone 2 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).direction, 90, 1, "Expected Clone 3 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").effects.color, 0, "Expected effect color of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.fisheye, 0, "Expected effect fisheye of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.whirl, 0, "Expected effect whirl of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.pixelate, 0, "Expected effect pixelate of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.mosaic, 0, "Expected effect mosaic of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.brightness, 0, "Expected effect brightness of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.ghost, 0, "Expected effect ghost of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.color, 0, "Expected effect color of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.fisheye, 0, "Expected effect fisheye of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.whirl, 0, "Expected effect whirl of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.pixelate, 0, "Expected effect pixelate of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.mosaic, 0, "Expected effect mosaic of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.brightness, 0, "Expected effect brightness of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.ghost, 0, "Expected effect ghost of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").layerOrder, 4, "Expected Sprite Kreatur to be at layer 4");
  t.assert.equal(t.getSprite("Gobo").layerOrder, 5, "Expected Sprite Gobo to be at layer 5");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Kreatur to be at layer 1");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).getLayerOrder(), 2, "Expected Clone 2 of Kreatur to be at layer 2");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).getLayerOrder(), 3, "Expected Clone 3 of Kreatur to be at layer 3");
  t.assert.withinRange(t.getSprite("Kreatur").x, 46, 5, "Expected Sprite Kreatur to have x-position 46 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").y, -81, 5, "Expected Sprite Kreatur to have y-position -81 +-5");
  t.assert.withinRange(t.getSprite("Gobo").x, -110, 5, "Expected Sprite Gobo to have x-position -110 +-5");
  t.assert.withinRange(t.getSprite("Gobo").y, 110, 5, "Expected Sprite Gobo to have y-position 110 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).x, -70, 5, "Expected Clone 1 of Kreatur to have x-position -70 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).y, -163, 5, "Expected Clone 1 of Kreatur to have y-position -163 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).x, 209, 5, "Expected Clone 2 of Kreatur to have x-position 209 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).y, 174, 5, "Expected Clone 2 of Kreatur to have y-position 174 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).x, 223, 5, "Expected Clone 3 of Kreatur to have x-position 223 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).y, -1, 5, "Expected Clone 3 of Kreatur to have y-position -1 +-5");
  t.assert.not(t.getSprite("Kreatur").sayText, "Expected Sprite Kreatur not to say anything");
  t.assert.not(t.getSprite("Gobo").sayText, "Expected Sprite Gobo not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(1).sayText, "Expected Clone 1 of Kreatur not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(2).sayText, "Expected Clone 2 of Kreatur not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(3).sayText, "Expected Clone 3 of Kreatur not to say anything");
  t.assert.withinRange(t.getSprite("Kreatur").size, 499, 1, "Expected Sprite Kreatur to have size 499 +-1");
  t.assert.withinRange(t.getSprite("Gobo").size, 60, 1, "Expected Sprite Gobo to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).size, 100, 1, "Expected Clone 1 of Kreatur to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).size, 85, 1, "Expected Clone 2 of Kreatur to have size 85 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).size, 96, 1, "Expected Clone 3 of Kreatur to have size 96 +-1");
  t.assert.not(t.getSprite("Kreatur").visible, "Expected Sprite Kreatur not to be visible");
  t.assert.not(t.getSprite("Gobo").visible, "Expected Sprite Gobo not to be visible");
  t.assert.ok(t.getSprite("Kreatur").getClone(1).visible, "Expected Clone 1 of Kreatur to be visible");
  t.assert.ok(t.getSprite("Kreatur").getClone(2).visible, "Expected Clone 2 of Kreatur to be visible");
  t.assert.not(t.getSprite("Kreatur").getClone(3).visible, "Expected Clone 3 of Kreatur not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").volume, 100, "Expected Sprite Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Gobo").volume, 100, "Expected Sprite Gobo to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).volume, 100, "Expected Clone 1 of Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).volume, 100, "Expected Clone 2 of Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).volume, 100, "Expected Clone 3 of Kreatur to have volume 100");
  await t.runForSteps(46);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kreatur").currentCostume, 2, "Expected Sprite Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Gobo").currentCostume, 0, "Expected Sprite Gobo to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).currentCostume, 2, "Expected Clone 1 of Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).currentCostume, 0, "Expected Clone 2 of Kreatur to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).currentCostume, 1, "Expected Clone 3 of Kreatur to have costume 1");
  t.assert.equal(t.getSprite("Kreatur").getCloneCount(), 3, "Expected Sprite Kreatur to have 3 clones");
  t.assert.equal(t.getSprite("Gobo").getCloneCount(), 0, "Expected Sprite Gobo to have 0 clones");
  t.assert.equal(t.getSprite("Kreatur").direction, 90, 1, "Expected Sprite Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Gobo").direction, 90, 1, "Expected Sprite Gobo to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).direction, 90, 1, "Expected Clone 1 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).direction, 90, 1, "Expected Clone 2 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).direction, 90, 1, "Expected Clone 3 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").effects.color, 0, "Expected effect color of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.fisheye, 0, "Expected effect fisheye of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.whirl, 0, "Expected effect whirl of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.pixelate, 0, "Expected effect pixelate of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.mosaic, 0, "Expected effect mosaic of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.brightness, 0, "Expected effect brightness of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.ghost, 0, "Expected effect ghost of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.color, 0, "Expected effect color of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.fisheye, 0, "Expected effect fisheye of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.whirl, 0, "Expected effect whirl of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.pixelate, 0, "Expected effect pixelate of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.mosaic, 0, "Expected effect mosaic of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.brightness, 0, "Expected effect brightness of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.ghost, 0, "Expected effect ghost of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").layerOrder, 4, "Expected Sprite Kreatur to be at layer 4");
  t.assert.equal(t.getSprite("Gobo").layerOrder, 5, "Expected Sprite Gobo to be at layer 5");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Kreatur to be at layer 1");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).getLayerOrder(), 2, "Expected Clone 2 of Kreatur to be at layer 2");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).getLayerOrder(), 3, "Expected Clone 3 of Kreatur to be at layer 3");
  t.assert.withinRange(t.getSprite("Kreatur").x, 46, 5, "Expected Sprite Kreatur to have x-position 46 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").y, -81, 5, "Expected Sprite Kreatur to have y-position -81 +-5");
  t.assert.withinRange(t.getSprite("Gobo").x, -110, 5, "Expected Sprite Gobo to have x-position -110 +-5");
  t.assert.withinRange(t.getSprite("Gobo").y, 110, 5, "Expected Sprite Gobo to have y-position 110 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).x, 200, 5, "Expected Clone 1 of Kreatur to have x-position 200 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).y, -28, 5, "Expected Clone 1 of Kreatur to have y-position -28 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).x, 209, 5, "Expected Clone 2 of Kreatur to have x-position 209 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).y, 174, 5, "Expected Clone 2 of Kreatur to have y-position 174 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).x, 90, 5, "Expected Clone 3 of Kreatur to have x-position 90 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).y, -173, 5, "Expected Clone 3 of Kreatur to have y-position -173 +-5");
  t.assert.not(t.getSprite("Kreatur").sayText, "Expected Sprite Kreatur not to say anything");
  t.assert.not(t.getSprite("Gobo").sayText, "Expected Sprite Gobo not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(1).sayText, "Expected Clone 1 of Kreatur not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(2).sayText, "Expected Clone 2 of Kreatur not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(3).sayText, "Expected Clone 3 of Kreatur not to say anything");
  t.assert.withinRange(t.getSprite("Kreatur").size, 499, 1, "Expected Sprite Kreatur to have size 499 +-1");
  t.assert.withinRange(t.getSprite("Gobo").size, 60, 1, "Expected Sprite Gobo to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).size, 81, 1, "Expected Clone 1 of Kreatur to have size 81 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).size, 85, 1, "Expected Clone 2 of Kreatur to have size 85 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).size, 74, 1, "Expected Clone 3 of Kreatur to have size 74 +-1");
  t.assert.not(t.getSprite("Kreatur").visible, "Expected Sprite Kreatur not to be visible");
  t.assert.not(t.getSprite("Gobo").visible, "Expected Sprite Gobo not to be visible");
  t.assert.ok(t.getSprite("Kreatur").getClone(1).visible, "Expected Clone 1 of Kreatur to be visible");
  t.assert.ok(t.getSprite("Kreatur").getClone(2).visible, "Expected Clone 2 of Kreatur to be visible");
  t.assert.ok(t.getSprite("Kreatur").getClone(3).visible, "Expected Clone 3 of Kreatur to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").volume, 100, "Expected Sprite Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Gobo").volume, 100, "Expected Sprite Gobo to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).volume, 100, "Expected Clone 1 of Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).volume, 100, "Expected Clone 2 of Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).volume, 100, "Expected Clone 3 of Kreatur to have volume 100");
  t.clickCloneByCoords(200, -28, 1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kreatur").currentCostume, 2, "Expected Sprite Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Gobo").currentCostume, 0, "Expected Sprite Gobo to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).currentCostume, 2, "Expected Clone 1 of Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).currentCostume, 0, "Expected Clone 2 of Kreatur to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).currentCostume, 1, "Expected Clone 3 of Kreatur to have costume 1");
  t.assert.equal(t.getSprite("Kreatur").getCloneCount(), 3, "Expected Sprite Kreatur to have 3 clones");
  t.assert.equal(t.getSprite("Gobo").getCloneCount(), 0, "Expected Sprite Gobo to have 0 clones");
  t.assert.equal(t.getSprite("Kreatur").direction, 90, 1, "Expected Sprite Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Gobo").direction, 90, 1, "Expected Sprite Gobo to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).direction, 90, 1, "Expected Clone 1 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).direction, 90, 1, "Expected Clone 2 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).direction, 90, 1, "Expected Clone 3 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").effects.color, 0, "Expected effect color of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.fisheye, 0, "Expected effect fisheye of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.whirl, 0, "Expected effect whirl of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.pixelate, 0, "Expected effect pixelate of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.mosaic, 0, "Expected effect mosaic of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.brightness, 0, "Expected effect brightness of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.ghost, 0, "Expected effect ghost of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.color, 0, "Expected effect color of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.fisheye, 0, "Expected effect fisheye of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.whirl, 0, "Expected effect whirl of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.pixelate, 0, "Expected effect pixelate of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.mosaic, 0, "Expected effect mosaic of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.brightness, 0, "Expected effect brightness of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.ghost, 0, "Expected effect ghost of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").layerOrder, 4, "Expected Sprite Kreatur to be at layer 4");
  t.assert.equal(t.getSprite("Gobo").layerOrder, 5, "Expected Sprite Gobo to be at layer 5");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Kreatur to be at layer 1");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).getLayerOrder(), 2, "Expected Clone 2 of Kreatur to be at layer 2");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).getLayerOrder(), 3, "Expected Clone 3 of Kreatur to be at layer 3");
  t.assert.withinRange(t.getSprite("Kreatur").x, 46, 5, "Expected Sprite Kreatur to have x-position 46 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").y, -81, 5, "Expected Sprite Kreatur to have y-position -81 +-5");
  t.assert.withinRange(t.getSprite("Gobo").x, -110, 5, "Expected Sprite Gobo to have x-position -110 +-5");
  t.assert.withinRange(t.getSprite("Gobo").y, 110, 5, "Expected Sprite Gobo to have y-position 110 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).x, 200, 5, "Expected Clone 1 of Kreatur to have x-position 200 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).y, -28, 5, "Expected Clone 1 of Kreatur to have y-position -28 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).x, 209, 5, "Expected Clone 2 of Kreatur to have x-position 209 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).y, 174, 5, "Expected Clone 2 of Kreatur to have y-position 174 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).x, 90, 5, "Expected Clone 3 of Kreatur to have x-position 90 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).y, -173, 5, "Expected Clone 3 of Kreatur to have y-position -173 +-5");
  t.assert.not(t.getSprite("Kreatur").sayText, "Expected Sprite Kreatur not to say anything");
  t.assert.not(t.getSprite("Gobo").sayText, "Expected Sprite Gobo not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(1).sayText, "Expected Clone 1 of Kreatur not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(2).sayText, "Expected Clone 2 of Kreatur not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(3).sayText, "Expected Clone 3 of Kreatur not to say anything");
  t.assert.withinRange(t.getSprite("Kreatur").size, 499, 1, "Expected Sprite Kreatur to have size 499 +-1");
  t.assert.withinRange(t.getSprite("Gobo").size, 60, 1, "Expected Sprite Gobo to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).size, 81, 1, "Expected Clone 1 of Kreatur to have size 81 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).size, 85, 1, "Expected Clone 2 of Kreatur to have size 85 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).size, 74, 1, "Expected Clone 3 of Kreatur to have size 74 +-1");
  t.assert.not(t.getSprite("Kreatur").visible, "Expected Sprite Kreatur not to be visible");
  t.assert.not(t.getSprite("Gobo").visible, "Expected Sprite Gobo not to be visible");
  t.assert.not(t.getSprite("Kreatur").getClone(1).visible, "Expected Clone 1 of Kreatur not to be visible");
  t.assert.ok(t.getSprite("Kreatur").getClone(2).visible, "Expected Clone 2 of Kreatur to be visible");
  t.assert.ok(t.getSprite("Kreatur").getClone(3).visible, "Expected Clone 3 of Kreatur to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").volume, 100, "Expected Sprite Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Gobo").volume, 100, "Expected Sprite Gobo to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).volume, 100, "Expected Clone 1 of Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).volume, 100, "Expected Clone 2 of Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).volume, 100, "Expected Clone 3 of Kreatur to have volume 100");
  await t.runForSteps(11);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kreatur").currentCostume, 2, "Expected Sprite Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Gobo").currentCostume, 0, "Expected Sprite Gobo to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).currentCostume, 2, "Expected Clone 1 of Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).currentCostume, 0, "Expected Clone 2 of Kreatur to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).currentCostume, 1, "Expected Clone 3 of Kreatur to have costume 1");
  t.assert.equal(t.getSprite("Kreatur").getCloneCount(), 3, "Expected Sprite Kreatur to have 3 clones");
  t.assert.equal(t.getSprite("Gobo").getCloneCount(), 0, "Expected Sprite Gobo to have 0 clones");
  t.assert.equal(t.getSprite("Kreatur").direction, 90, 1, "Expected Sprite Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Gobo").direction, 90, 1, "Expected Sprite Gobo to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).direction, 90, 1, "Expected Clone 1 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).direction, 90, 1, "Expected Clone 2 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).direction, 90, 1, "Expected Clone 3 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").effects.color, 0, "Expected effect color of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.fisheye, 0, "Expected effect fisheye of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.whirl, 0, "Expected effect whirl of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.pixelate, 0, "Expected effect pixelate of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.mosaic, 0, "Expected effect mosaic of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.brightness, 0, "Expected effect brightness of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.ghost, 0, "Expected effect ghost of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.color, 0, "Expected effect color of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.fisheye, 0, "Expected effect fisheye of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.whirl, 0, "Expected effect whirl of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.pixelate, 0, "Expected effect pixelate of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.mosaic, 0, "Expected effect mosaic of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.brightness, 0, "Expected effect brightness of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.ghost, 0, "Expected effect ghost of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").layerOrder, 4, "Expected Sprite Kreatur to be at layer 4");
  t.assert.equal(t.getSprite("Gobo").layerOrder, 5, "Expected Sprite Gobo to be at layer 5");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Kreatur to be at layer 1");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).getLayerOrder(), 2, "Expected Clone 2 of Kreatur to be at layer 2");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).getLayerOrder(), 3, "Expected Clone 3 of Kreatur to be at layer 3");
  t.assert.withinRange(t.getSprite("Kreatur").x, 46, 5, "Expected Sprite Kreatur to have x-position 46 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").y, -81, 5, "Expected Sprite Kreatur to have y-position -81 +-5");
  t.assert.withinRange(t.getSprite("Gobo").x, -110, 5, "Expected Sprite Gobo to have x-position -110 +-5");
  t.assert.withinRange(t.getSprite("Gobo").y, 110, 5, "Expected Sprite Gobo to have y-position 110 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).x, 200, 5, "Expected Clone 1 of Kreatur to have x-position 200 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).y, -28, 5, "Expected Clone 1 of Kreatur to have y-position -28 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).x, 209, 5, "Expected Clone 2 of Kreatur to have x-position 209 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).y, 174, 5, "Expected Clone 2 of Kreatur to have y-position 174 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).x, 90, 5, "Expected Clone 3 of Kreatur to have x-position 90 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).y, -173, 5, "Expected Clone 3 of Kreatur to have y-position -173 +-5");
  t.assert.not(t.getSprite("Kreatur").sayText, "Expected Sprite Kreatur not to say anything");
  t.assert.not(t.getSprite("Gobo").sayText, "Expected Sprite Gobo not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(1).sayText, "Expected Clone 1 of Kreatur not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(2).sayText, "Expected Clone 2 of Kreatur not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(3).sayText, "Expected Clone 3 of Kreatur not to say anything");
  t.assert.withinRange(t.getSprite("Kreatur").size, 499, 1, "Expected Sprite Kreatur to have size 499 +-1");
  t.assert.withinRange(t.getSprite("Gobo").size, 60, 1, "Expected Sprite Gobo to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).size, 81, 1, "Expected Clone 1 of Kreatur to have size 81 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).size, 85, 1, "Expected Clone 2 of Kreatur to have size 85 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).size, 74, 1, "Expected Clone 3 of Kreatur to have size 74 +-1");
  t.assert.not(t.getSprite("Kreatur").visible, "Expected Sprite Kreatur not to be visible");
  t.assert.not(t.getSprite("Gobo").visible, "Expected Sprite Gobo not to be visible");
  t.assert.not(t.getSprite("Kreatur").getClone(1).visible, "Expected Clone 1 of Kreatur not to be visible");
  t.assert.ok(t.getSprite("Kreatur").getClone(2).visible, "Expected Clone 2 of Kreatur to be visible");
  t.assert.ok(t.getSprite("Kreatur").getClone(3).visible, "Expected Clone 3 of Kreatur to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").volume, 100, "Expected Sprite Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Gobo").volume, 100, "Expected Sprite Gobo to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).volume, 100, "Expected Clone 1 of Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).volume, 100, "Expected Clone 2 of Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).volume, 100, "Expected Clone 3 of Kreatur to have volume 100");
  t.clickCloneByCoords(209, 174, 1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kreatur").currentCostume, 2, "Expected Sprite Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Gobo").currentCostume, 0, "Expected Sprite Gobo to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).currentCostume, 2, "Expected Clone 1 of Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).currentCostume, 0, "Expected Clone 2 of Kreatur to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).currentCostume, 1, "Expected Clone 3 of Kreatur to have costume 1");
  t.assert.equal(t.getSprite("Kreatur").getCloneCount(), 3, "Expected Sprite Kreatur to have 3 clones");
  t.assert.equal(t.getSprite("Gobo").getCloneCount(), 0, "Expected Sprite Gobo to have 0 clones");
  t.assert.equal(t.getSprite("Kreatur").direction, 90, 1, "Expected Sprite Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Gobo").direction, 90, 1, "Expected Sprite Gobo to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).direction, 90, 1, "Expected Clone 1 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).direction, 90, 1, "Expected Clone 2 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).direction, 90, 1, "Expected Clone 3 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").effects.color, 0, "Expected effect color of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.fisheye, 0, "Expected effect fisheye of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.whirl, 0, "Expected effect whirl of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.pixelate, 0, "Expected effect pixelate of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.mosaic, 0, "Expected effect mosaic of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.brightness, 0, "Expected effect brightness of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.ghost, 0, "Expected effect ghost of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.color, 0, "Expected effect color of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.fisheye, 0, "Expected effect fisheye of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.whirl, 0, "Expected effect whirl of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.pixelate, 0, "Expected effect pixelate of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.mosaic, 0, "Expected effect mosaic of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.brightness, 0, "Expected effect brightness of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.ghost, 0, "Expected effect ghost of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").layerOrder, 4, "Expected Sprite Kreatur to be at layer 4");
  t.assert.equal(t.getSprite("Gobo").layerOrder, 5, "Expected Sprite Gobo to be at layer 5");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Kreatur to be at layer 1");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).getLayerOrder(), 2, "Expected Clone 2 of Kreatur to be at layer 2");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).getLayerOrder(), 3, "Expected Clone 3 of Kreatur to be at layer 3");
  t.assert.withinRange(t.getSprite("Kreatur").x, 46, 5, "Expected Sprite Kreatur to have x-position 46 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").y, -81, 5, "Expected Sprite Kreatur to have y-position -81 +-5");
  t.assert.withinRange(t.getSprite("Gobo").x, -110, 5, "Expected Sprite Gobo to have x-position -110 +-5");
  t.assert.withinRange(t.getSprite("Gobo").y, 110, 5, "Expected Sprite Gobo to have y-position 110 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).x, 200, 5, "Expected Clone 1 of Kreatur to have x-position 200 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).y, -28, 5, "Expected Clone 1 of Kreatur to have y-position -28 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).x, 209, 5, "Expected Clone 2 of Kreatur to have x-position 209 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).y, 174, 5, "Expected Clone 2 of Kreatur to have y-position 174 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).x, 90, 5, "Expected Clone 3 of Kreatur to have x-position 90 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).y, -173, 5, "Expected Clone 3 of Kreatur to have y-position -173 +-5");
  t.assert.not(t.getSprite("Kreatur").sayText, "Expected Sprite Kreatur not to say anything");
  t.assert.not(t.getSprite("Gobo").sayText, "Expected Sprite Gobo not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(1).sayText, "Expected Clone 1 of Kreatur not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(2).sayText, "Expected Clone 2 of Kreatur not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(3).sayText, "Expected Clone 3 of Kreatur not to say anything");
  t.assert.withinRange(t.getSprite("Kreatur").size, 499, 1, "Expected Sprite Kreatur to have size 499 +-1");
  t.assert.withinRange(t.getSprite("Gobo").size, 60, 1, "Expected Sprite Gobo to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).size, 81, 1, "Expected Clone 1 of Kreatur to have size 81 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).size, 85, 1, "Expected Clone 2 of Kreatur to have size 85 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).size, 74, 1, "Expected Clone 3 of Kreatur to have size 74 +-1");
  t.assert.not(t.getSprite("Kreatur").visible, "Expected Sprite Kreatur not to be visible");
  t.assert.not(t.getSprite("Gobo").visible, "Expected Sprite Gobo not to be visible");
  t.assert.not(t.getSprite("Kreatur").getClone(1).visible, "Expected Clone 1 of Kreatur not to be visible");
  t.assert.not(t.getSprite("Kreatur").getClone(2).visible, "Expected Clone 2 of Kreatur not to be visible");
  t.assert.ok(t.getSprite("Kreatur").getClone(3).visible, "Expected Clone 3 of Kreatur to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").volume, 100, "Expected Sprite Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Gobo").volume, 100, "Expected Sprite Gobo to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).volume, 100, "Expected Clone 1 of Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).volume, 100, "Expected Clone 2 of Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).volume, 100, "Expected Clone 3 of Kreatur to have volume 100");
  t.clickCloneByCoords(90, -173, 1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kreatur").currentCostume, 2, "Expected Sprite Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Gobo").currentCostume, 0, "Expected Sprite Gobo to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).currentCostume, 2, "Expected Clone 1 of Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).currentCostume, 0, "Expected Clone 2 of Kreatur to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).currentCostume, 1, "Expected Clone 3 of Kreatur to have costume 1");
  t.assert.equal(t.getSprite("Kreatur").getCloneCount(), 3, "Expected Sprite Kreatur to have 3 clones");
  t.assert.equal(t.getSprite("Gobo").getCloneCount(), 0, "Expected Sprite Gobo to have 0 clones");
  t.assert.equal(t.getSprite("Kreatur").direction, 90, 1, "Expected Sprite Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Gobo").direction, 90, 1, "Expected Sprite Gobo to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).direction, 90, 1, "Expected Clone 1 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).direction, 90, 1, "Expected Clone 2 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).direction, 90, 1, "Expected Clone 3 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").effects.color, 0, "Expected effect color of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.fisheye, 0, "Expected effect fisheye of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.whirl, 0, "Expected effect whirl of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.pixelate, 0, "Expected effect pixelate of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.mosaic, 0, "Expected effect mosaic of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.brightness, 0, "Expected effect brightness of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.ghost, 0, "Expected effect ghost of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.color, 0, "Expected effect color of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.fisheye, 0, "Expected effect fisheye of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.whirl, 0, "Expected effect whirl of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.pixelate, 0, "Expected effect pixelate of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.mosaic, 0, "Expected effect mosaic of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.brightness, 0, "Expected effect brightness of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.ghost, 0, "Expected effect ghost of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").layerOrder, 4, "Expected Sprite Kreatur to be at layer 4");
  t.assert.equal(t.getSprite("Gobo").layerOrder, 5, "Expected Sprite Gobo to be at layer 5");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Kreatur to be at layer 1");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).getLayerOrder(), 2, "Expected Clone 2 of Kreatur to be at layer 2");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).getLayerOrder(), 3, "Expected Clone 3 of Kreatur to be at layer 3");
  t.assert.withinRange(t.getSprite("Kreatur").x, 46, 5, "Expected Sprite Kreatur to have x-position 46 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").y, -81, 5, "Expected Sprite Kreatur to have y-position -81 +-5");
  t.assert.withinRange(t.getSprite("Gobo").x, -110, 5, "Expected Sprite Gobo to have x-position -110 +-5");
  t.assert.withinRange(t.getSprite("Gobo").y, 110, 5, "Expected Sprite Gobo to have y-position 110 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).x, 200, 5, "Expected Clone 1 of Kreatur to have x-position 200 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).y, -28, 5, "Expected Clone 1 of Kreatur to have y-position -28 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).x, 209, 5, "Expected Clone 2 of Kreatur to have x-position 209 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).y, 174, 5, "Expected Clone 2 of Kreatur to have y-position 174 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).x, 90, 5, "Expected Clone 3 of Kreatur to have x-position 90 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).y, -173, 5, "Expected Clone 3 of Kreatur to have y-position -173 +-5");
  t.assert.not(t.getSprite("Kreatur").sayText, "Expected Sprite Kreatur not to say anything");
  t.assert.equal(t.getSprite("Gobo").sayText, "Schon drei Punkte!", "Expected Sprite Gobo to say Schon drei Punkte!");
  t.assert.not(t.getSprite("Kreatur").getClone(1).sayText, "Expected Clone 1 of Kreatur not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(2).sayText, "Expected Clone 2 of Kreatur not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(3).sayText, "Expected Clone 3 of Kreatur not to say anything");
  t.assert.withinRange(t.getSprite("Kreatur").size, 499, 1, "Expected Sprite Kreatur to have size 499 +-1");
  t.assert.withinRange(t.getSprite("Gobo").size, 60, 1, "Expected Sprite Gobo to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).size, 81, 1, "Expected Clone 1 of Kreatur to have size 81 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).size, 85, 1, "Expected Clone 2 of Kreatur to have size 85 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).size, 74, 1, "Expected Clone 3 of Kreatur to have size 74 +-1");
  t.assert.not(t.getSprite("Kreatur").visible, "Expected Sprite Kreatur not to be visible");
  t.assert.ok(t.getSprite("Gobo").visible, "Expected Sprite Gobo to be visible");
  t.assert.not(t.getSprite("Kreatur").getClone(1).visible, "Expected Clone 1 of Kreatur not to be visible");
  t.assert.not(t.getSprite("Kreatur").getClone(2).visible, "Expected Clone 2 of Kreatur not to be visible");
  t.assert.ok(t.getSprite("Kreatur").getClone(3).visible, "Expected Clone 3 of Kreatur to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").volume, 100, "Expected Sprite Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Gobo").volume, 100, "Expected Sprite Gobo to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).volume, 100, "Expected Clone 1 of Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).volume, 100, "Expected Clone 2 of Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).volume, 100, "Expected Clone 3 of Kreatur to have volume 100");
  await t.runForSteps(10);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kreatur").currentCostume, 2, "Expected Sprite Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Gobo").currentCostume, 0, "Expected Sprite Gobo to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).currentCostume, 2, "Expected Clone 1 of Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).currentCostume, 0, "Expected Clone 2 of Kreatur to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).currentCostume, 1, "Expected Clone 3 of Kreatur to have costume 1");
  t.assert.equal(t.getSprite("Kreatur").getCloneCount(), 3, "Expected Sprite Kreatur to have 3 clones");
  t.assert.equal(t.getSprite("Gobo").getCloneCount(), 0, "Expected Sprite Gobo to have 0 clones");
  t.assert.equal(t.getSprite("Kreatur").direction, 90, 1, "Expected Sprite Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Gobo").direction, 90, 1, "Expected Sprite Gobo to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).direction, 90, 1, "Expected Clone 1 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).direction, 90, 1, "Expected Clone 2 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).direction, 90, 1, "Expected Clone 3 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").effects.color, 0, "Expected effect color of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.fisheye, 0, "Expected effect fisheye of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.whirl, 0, "Expected effect whirl of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.pixelate, 0, "Expected effect pixelate of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.mosaic, 0, "Expected effect mosaic of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.brightness, 0, "Expected effect brightness of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.ghost, 0, "Expected effect ghost of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.color, 0, "Expected effect color of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.fisheye, 0, "Expected effect fisheye of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.whirl, 0, "Expected effect whirl of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.pixelate, 0, "Expected effect pixelate of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.mosaic, 0, "Expected effect mosaic of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.brightness, 0, "Expected effect brightness of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.ghost, 0, "Expected effect ghost of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").layerOrder, 4, "Expected Sprite Kreatur to be at layer 4");
  t.assert.equal(t.getSprite("Gobo").layerOrder, 5, "Expected Sprite Gobo to be at layer 5");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Kreatur to be at layer 1");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).getLayerOrder(), 2, "Expected Clone 2 of Kreatur to be at layer 2");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).getLayerOrder(), 3, "Expected Clone 3 of Kreatur to be at layer 3");
  t.assert.withinRange(t.getSprite("Kreatur").x, 46, 5, "Expected Sprite Kreatur to have x-position 46 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").y, -81, 5, "Expected Sprite Kreatur to have y-position -81 +-5");
  t.assert.withinRange(t.getSprite("Gobo").x, -110, 5, "Expected Sprite Gobo to have x-position -110 +-5");
  t.assert.withinRange(t.getSprite("Gobo").y, 110, 5, "Expected Sprite Gobo to have y-position 110 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).x, 200, 5, "Expected Clone 1 of Kreatur to have x-position 200 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).y, -28, 5, "Expected Clone 1 of Kreatur to have y-position -28 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).x, 209, 5, "Expected Clone 2 of Kreatur to have x-position 209 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).y, 174, 5, "Expected Clone 2 of Kreatur to have y-position 174 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).x, 90, 5, "Expected Clone 3 of Kreatur to have x-position 90 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).y, -173, 5, "Expected Clone 3 of Kreatur to have y-position -173 +-5");
  t.assert.not(t.getSprite("Kreatur").sayText, "Expected Sprite Kreatur not to say anything");
  t.assert.equal(t.getSprite("Gobo").sayText, "Schon drei Punkte!", "Expected Sprite Gobo to say Schon drei Punkte!");
  t.assert.not(t.getSprite("Kreatur").getClone(1).sayText, "Expected Clone 1 of Kreatur not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(2).sayText, "Expected Clone 2 of Kreatur not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(3).sayText, "Expected Clone 3 of Kreatur not to say anything");
  t.assert.withinRange(t.getSprite("Kreatur").size, 499, 1, "Expected Sprite Kreatur to have size 499 +-1");
  t.assert.withinRange(t.getSprite("Gobo").size, 60, 1, "Expected Sprite Gobo to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).size, 81, 1, "Expected Clone 1 of Kreatur to have size 81 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).size, 78, 1, "Expected Clone 2 of Kreatur to have size 78 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).size, 98, 1, "Expected Clone 3 of Kreatur to have size 98 +-1");
  t.assert.not(t.getSprite("Kreatur").visible, "Expected Sprite Kreatur not to be visible");
  t.assert.ok(t.getSprite("Gobo").visible, "Expected Sprite Gobo to be visible");
  t.assert.not(t.getSprite("Kreatur").getClone(1).visible, "Expected Clone 1 of Kreatur not to be visible");
  t.assert.not(t.getSprite("Kreatur").getClone(2).visible, "Expected Clone 2 of Kreatur not to be visible");
  t.assert.not(t.getSprite("Kreatur").getClone(3).visible, "Expected Clone 3 of Kreatur not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").volume, 100, "Expected Sprite Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Gobo").volume, 100, "Expected Sprite Gobo to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).volume, 100, "Expected Clone 1 of Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).volume, 100, "Expected Clone 2 of Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).volume, 100, "Expected Clone 3 of Kreatur to have volume 100");
  await t.runForSteps(27);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kreatur").currentCostume, 2, "Expected Sprite Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Gobo").currentCostume, 0, "Expected Sprite Gobo to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).currentCostume, 2, "Expected Clone 1 of Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).currentCostume, 0, "Expected Clone 2 of Kreatur to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).currentCostume, 1, "Expected Clone 3 of Kreatur to have costume 1");
  t.assert.equal(t.getSprite("Kreatur").getCloneCount(), 3, "Expected Sprite Kreatur to have 3 clones");
  t.assert.equal(t.getSprite("Gobo").getCloneCount(), 0, "Expected Sprite Gobo to have 0 clones");
  t.assert.equal(t.getSprite("Kreatur").direction, 90, 1, "Expected Sprite Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Gobo").direction, 90, 1, "Expected Sprite Gobo to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).direction, 90, 1, "Expected Clone 1 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).direction, 90, 1, "Expected Clone 2 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).direction, 90, 1, "Expected Clone 3 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").effects.color, 0, "Expected effect color of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.fisheye, 0, "Expected effect fisheye of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.whirl, 0, "Expected effect whirl of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.pixelate, 0, "Expected effect pixelate of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.mosaic, 0, "Expected effect mosaic of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.brightness, 0, "Expected effect brightness of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.ghost, 0, "Expected effect ghost of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.color, 0, "Expected effect color of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.fisheye, 0, "Expected effect fisheye of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.whirl, 0, "Expected effect whirl of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.pixelate, 0, "Expected effect pixelate of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.mosaic, 0, "Expected effect mosaic of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.brightness, 0, "Expected effect brightness of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.ghost, 0, "Expected effect ghost of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").layerOrder, 4, "Expected Sprite Kreatur to be at layer 4");
  t.assert.equal(t.getSprite("Gobo").layerOrder, 5, "Expected Sprite Gobo to be at layer 5");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Kreatur to be at layer 1");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).getLayerOrder(), 2, "Expected Clone 2 of Kreatur to be at layer 2");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).getLayerOrder(), 3, "Expected Clone 3 of Kreatur to be at layer 3");
  t.assert.withinRange(t.getSprite("Kreatur").x, 46, 5, "Expected Sprite Kreatur to have x-position 46 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").y, -81, 5, "Expected Sprite Kreatur to have y-position -81 +-5");
  t.assert.withinRange(t.getSprite("Gobo").x, -110, 5, "Expected Sprite Gobo to have x-position -110 +-5");
  t.assert.withinRange(t.getSprite("Gobo").y, 110, 5, "Expected Sprite Gobo to have y-position 110 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).x, 200, 5, "Expected Clone 1 of Kreatur to have x-position 200 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).y, -28, 5, "Expected Clone 1 of Kreatur to have y-position -28 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).x, -162, 5, "Expected Clone 2 of Kreatur to have x-position -162 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).y, -63, 5, "Expected Clone 2 of Kreatur to have y-position -63 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).x, 90, 5, "Expected Clone 3 of Kreatur to have x-position 90 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).y, -173, 5, "Expected Clone 3 of Kreatur to have y-position -173 +-5");
  t.assert.not(t.getSprite("Kreatur").sayText, "Expected Sprite Kreatur not to say anything");
  t.assert.equal(t.getSprite("Gobo").sayText, "Schon drei Punkte!", "Expected Sprite Gobo to say Schon drei Punkte!");
  t.assert.not(t.getSprite("Kreatur").getClone(1).sayText, "Expected Clone 1 of Kreatur not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(2).sayText, "Expected Clone 2 of Kreatur not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(3).sayText, "Expected Clone 3 of Kreatur not to say anything");
  t.assert.withinRange(t.getSprite("Kreatur").size, 499, 1, "Expected Sprite Kreatur to have size 499 +-1");
  t.assert.withinRange(t.getSprite("Gobo").size, 60, 1, "Expected Sprite Gobo to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).size, 56, 1, "Expected Clone 1 of Kreatur to have size 56 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).size, 78, 1, "Expected Clone 2 of Kreatur to have size 78 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).size, 98, 1, "Expected Clone 3 of Kreatur to have size 98 +-1");
  t.assert.not(t.getSprite("Kreatur").visible, "Expected Sprite Kreatur not to be visible");
  t.assert.ok(t.getSprite("Gobo").visible, "Expected Sprite Gobo to be visible");
  t.assert.not(t.getSprite("Kreatur").getClone(1).visible, "Expected Clone 1 of Kreatur not to be visible");
  t.assert.ok(t.getSprite("Kreatur").getClone(2).visible, "Expected Clone 2 of Kreatur to be visible");
  t.assert.not(t.getSprite("Kreatur").getClone(3).visible, "Expected Clone 3 of Kreatur not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").volume, 100, "Expected Sprite Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Gobo").volume, 100, "Expected Sprite Gobo to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).volume, 100, "Expected Clone 1 of Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).volume, 100, "Expected Clone 2 of Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).volume, 100, "Expected Clone 3 of Kreatur to have volume 100");
  await t.runForSteps(12);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kreatur").currentCostume, 2, "Expected Sprite Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Gobo").currentCostume, 0, "Expected Sprite Gobo to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).currentCostume, 2, "Expected Clone 1 of Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).currentCostume, 0, "Expected Clone 2 of Kreatur to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).currentCostume, 1, "Expected Clone 3 of Kreatur to have costume 1");
  t.assert.equal(t.getSprite("Kreatur").getCloneCount(), 3, "Expected Sprite Kreatur to have 3 clones");
  t.assert.equal(t.getSprite("Gobo").getCloneCount(), 0, "Expected Sprite Gobo to have 0 clones");
  t.assert.equal(t.getSprite("Kreatur").direction, 90, 1, "Expected Sprite Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Gobo").direction, 90, 1, "Expected Sprite Gobo to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).direction, 90, 1, "Expected Clone 1 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).direction, 90, 1, "Expected Clone 2 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).direction, 90, 1, "Expected Clone 3 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").effects.color, 0, "Expected effect color of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.fisheye, 0, "Expected effect fisheye of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.whirl, 0, "Expected effect whirl of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.pixelate, 0, "Expected effect pixelate of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.mosaic, 0, "Expected effect mosaic of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.brightness, 0, "Expected effect brightness of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.ghost, 0, "Expected effect ghost of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.color, 0, "Expected effect color of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.fisheye, 0, "Expected effect fisheye of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.whirl, 0, "Expected effect whirl of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.pixelate, 0, "Expected effect pixelate of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.mosaic, 0, "Expected effect mosaic of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.brightness, 0, "Expected effect brightness of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.ghost, 0, "Expected effect ghost of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").layerOrder, 4, "Expected Sprite Kreatur to be at layer 4");
  t.assert.equal(t.getSprite("Gobo").layerOrder, 5, "Expected Sprite Gobo to be at layer 5");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Kreatur to be at layer 1");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).getLayerOrder(), 2, "Expected Clone 2 of Kreatur to be at layer 2");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).getLayerOrder(), 3, "Expected Clone 3 of Kreatur to be at layer 3");
  t.assert.withinRange(t.getSprite("Kreatur").x, 46, 5, "Expected Sprite Kreatur to have x-position 46 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").y, -81, 5, "Expected Sprite Kreatur to have y-position -81 +-5");
  t.assert.withinRange(t.getSprite("Gobo").x, -110, 5, "Expected Sprite Gobo to have x-position -110 +-5");
  t.assert.withinRange(t.getSprite("Gobo").y, 110, 5, "Expected Sprite Gobo to have y-position 110 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).x, 200, 5, "Expected Clone 1 of Kreatur to have x-position 200 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).y, -28, 5, "Expected Clone 1 of Kreatur to have y-position -28 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).x, -162, 5, "Expected Clone 2 of Kreatur to have x-position -162 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).y, -63, 5, "Expected Clone 2 of Kreatur to have y-position -63 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).x, -203, 5, "Expected Clone 3 of Kreatur to have x-position -203 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).y, 18, 5, "Expected Clone 3 of Kreatur to have y-position 18 +-5");
  t.assert.not(t.getSprite("Kreatur").sayText, "Expected Sprite Kreatur not to say anything");
  t.assert.equal(t.getSprite("Gobo").sayText, "Schon drei Punkte!", "Expected Sprite Gobo to say Schon drei Punkte!");
  t.assert.not(t.getSprite("Kreatur").getClone(1).sayText, "Expected Clone 1 of Kreatur not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(2).sayText, "Expected Clone 2 of Kreatur not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(3).sayText, "Expected Clone 3 of Kreatur not to say anything");
  t.assert.withinRange(t.getSprite("Kreatur").size, 499, 1, "Expected Sprite Kreatur to have size 499 +-1");
  t.assert.withinRange(t.getSprite("Gobo").size, 60, 1, "Expected Sprite Gobo to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).size, 56, 1, "Expected Clone 1 of Kreatur to have size 56 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).size, 78, 1, "Expected Clone 2 of Kreatur to have size 78 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).size, 98, 1, "Expected Clone 3 of Kreatur to have size 98 +-1");
  t.assert.not(t.getSprite("Kreatur").visible, "Expected Sprite Kreatur not to be visible");
  t.assert.ok(t.getSprite("Gobo").visible, "Expected Sprite Gobo to be visible");
  t.assert.not(t.getSprite("Kreatur").getClone(1).visible, "Expected Clone 1 of Kreatur not to be visible");
  t.assert.ok(t.getSprite("Kreatur").getClone(2).visible, "Expected Clone 2 of Kreatur to be visible");
  t.assert.ok(t.getSprite("Kreatur").getClone(3).visible, "Expected Clone 3 of Kreatur to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").volume, 100, "Expected Sprite Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Gobo").volume, 100, "Expected Sprite Gobo to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).volume, 100, "Expected Clone 1 of Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).volume, 100, "Expected Clone 2 of Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).volume, 100, "Expected Clone 3 of Kreatur to have volume 100");
  t.clickCloneByCoords(-162, -63, 1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kreatur").currentCostume, 2, "Expected Sprite Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Gobo").currentCostume, 0, "Expected Sprite Gobo to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).currentCostume, 2, "Expected Clone 1 of Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).currentCostume, 0, "Expected Clone 2 of Kreatur to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).currentCostume, 1, "Expected Clone 3 of Kreatur to have costume 1");
  t.assert.equal(t.getSprite("Kreatur").getCloneCount(), 3, "Expected Sprite Kreatur to have 3 clones");
  t.assert.equal(t.getSprite("Gobo").getCloneCount(), 0, "Expected Sprite Gobo to have 0 clones");
  t.assert.equal(t.getSprite("Kreatur").direction, 90, 1, "Expected Sprite Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Gobo").direction, 90, 1, "Expected Sprite Gobo to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).direction, 90, 1, "Expected Clone 1 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).direction, 90, 1, "Expected Clone 2 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).direction, 90, 1, "Expected Clone 3 of Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").effects.color, 0, "Expected effect color of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.fisheye, 0, "Expected effect fisheye of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.whirl, 0, "Expected effect whirl of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.pixelate, 0, "Expected effect pixelate of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.mosaic, 0, "Expected effect mosaic of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.brightness, 0, "Expected effect brightness of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.ghost, 0, "Expected effect ghost of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.color, 0, "Expected effect color of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.fisheye, 0, "Expected effect fisheye of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.whirl, 0, "Expected effect whirl of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.pixelate, 0, "Expected effect pixelate of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.mosaic, 0, "Expected effect mosaic of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.brightness, 0, "Expected effect brightness of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.ghost, 0, "Expected effect ghost of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").layerOrder, 4, "Expected Sprite Kreatur to be at layer 4");
  t.assert.equal(t.getSprite("Gobo").layerOrder, 5, "Expected Sprite Gobo to be at layer 5");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Kreatur to be at layer 1");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).getLayerOrder(), 2, "Expected Clone 2 of Kreatur to be at layer 2");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).getLayerOrder(), 3, "Expected Clone 3 of Kreatur to be at layer 3");
  t.assert.withinRange(t.getSprite("Kreatur").x, 46, 5, "Expected Sprite Kreatur to have x-position 46 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").y, -81, 5, "Expected Sprite Kreatur to have y-position -81 +-5");
  t.assert.withinRange(t.getSprite("Gobo").x, -110, 5, "Expected Sprite Gobo to have x-position -110 +-5");
  t.assert.withinRange(t.getSprite("Gobo").y, 110, 5, "Expected Sprite Gobo to have y-position 110 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).x, 200, 5, "Expected Clone 1 of Kreatur to have x-position 200 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).y, -28, 5, "Expected Clone 1 of Kreatur to have y-position -28 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).x, -162, 5, "Expected Clone 2 of Kreatur to have x-position -162 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).y, -63, 5, "Expected Clone 2 of Kreatur to have y-position -63 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).x, -203, 5, "Expected Clone 3 of Kreatur to have x-position -203 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).y, 18, 5, "Expected Clone 3 of Kreatur to have y-position 18 +-5");
  t.assert.not(t.getSprite("Kreatur").sayText, "Expected Sprite Kreatur not to say anything");
  t.assert.equal(t.getSprite("Gobo").sayText, "Schon drei Punkte!", "Expected Sprite Gobo to say Schon drei Punkte!");
  t.assert.not(t.getSprite("Kreatur").getClone(1).sayText, "Expected Clone 1 of Kreatur not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(2).sayText, "Expected Clone 2 of Kreatur not to say anything");
  t.assert.not(t.getSprite("Kreatur").getClone(3).sayText, "Expected Clone 3 of Kreatur not to say anything");
  t.assert.withinRange(t.getSprite("Kreatur").size, 499, 1, "Expected Sprite Kreatur to have size 499 +-1");
  t.assert.withinRange(t.getSprite("Gobo").size, 60, 1, "Expected Sprite Gobo to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(1).size, 56, 1, "Expected Clone 1 of Kreatur to have size 56 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(2).size, 78, 1, "Expected Clone 2 of Kreatur to have size 78 +-1");
  t.assert.withinRange(t.getSprite("Kreatur").getClone(3).size, 98, 1, "Expected Clone 3 of Kreatur to have size 98 +-1");
  t.assert.not(t.getSprite("Kreatur").visible, "Expected Sprite Kreatur not to be visible");
  t.assert.ok(t.getSprite("Gobo").visible, "Expected Sprite Gobo to be visible");
  t.assert.not(t.getSprite("Kreatur").getClone(1).visible, "Expected Clone 1 of Kreatur not to be visible");
  t.assert.not(t.getSprite("Kreatur").getClone(2).visible, "Expected Clone 2 of Kreatur not to be visible");
  t.assert.ok(t.getSprite("Kreatur").getClone(3).visible, "Expected Clone 3 of Kreatur to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").volume, 100, "Expected Sprite Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Gobo").volume, 100, "Expected Sprite Gobo to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(1).volume, 100, "Expected Clone 1 of Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(2).volume, 100, "Expected Clone 2 of Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").getClone(3).volume, 100, "Expected Clone 3 of Kreatur to have volume 100");
  await t.runForSteps(51);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Kreatur").currentCostume, 2, "Expected Sprite Kreatur to have costume 2");
  t.assert.equal(t.getSprite("Gobo").currentCostume, 0, "Expected Sprite Gobo to have costume 0");
  t.assert.equal(t.getSprite("Kreatur").getCloneCount(), 0, "Expected Sprite Kreatur to have 0 clones");
  t.assert.equal(t.getSprite("Gobo").getCloneCount(), 0, "Expected Sprite Gobo to have 0 clones");
  t.assert.equal(t.getSprite("Kreatur").direction, 90, 1, "Expected Sprite Kreatur to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Gobo").direction, 90, 1, "Expected Sprite Gobo to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kreatur").effects.color, 0, "Expected effect color of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.fisheye, 0, "Expected effect fisheye of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.whirl, 0, "Expected effect whirl of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.pixelate, 0, "Expected effect pixelate of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.mosaic, 0, "Expected effect mosaic of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.brightness, 0, "Expected effect brightness of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Kreatur").effects.ghost, 0, "Expected effect ghost of Sprite Kreatur to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.color, 0, "Expected effect color of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.fisheye, 0, "Expected effect fisheye of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.whirl, 0, "Expected effect whirl of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.pixelate, 0, "Expected effect pixelate of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.mosaic, 0, "Expected effect mosaic of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.brightness, 0, "Expected effect brightness of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Gobo").effects.ghost, 0, "Expected effect ghost of Sprite Gobo to be 0");
  t.assert.equal(t.getSprite("Kreatur").layerOrder, 1, "Expected Sprite Kreatur to be at layer 1");
  t.assert.equal(t.getSprite("Gobo").layerOrder, 2, "Expected Sprite Gobo to be at layer 2");
  t.assert.withinRange(t.getSprite("Kreatur").x, 46, 5, "Expected Sprite Kreatur to have x-position 46 +-5");
  t.assert.withinRange(t.getSprite("Kreatur").y, -81, 5, "Expected Sprite Kreatur to have y-position -81 +-5");
  t.assert.withinRange(t.getSprite("Gobo").x, -110, 5, "Expected Sprite Gobo to have x-position -110 +-5");
  t.assert.withinRange(t.getSprite("Gobo").y, 110, 5, "Expected Sprite Gobo to have y-position 110 +-5");
  t.assert.not(t.getSprite("Kreatur").sayText, "Expected Sprite Kreatur not to say anything");
  t.assert.not(t.getSprite("Gobo").sayText, "Expected Sprite Gobo not to say anything");
  t.assert.withinRange(t.getSprite("Kreatur").size, 499, 1, "Expected Sprite Kreatur to have size 499 +-1");
  t.assert.withinRange(t.getSprite("Gobo").size, 60, 1, "Expected Sprite Gobo to have size 60 +-1");
  t.assert.not(t.getSprite("Kreatur").visible, "Expected Sprite Kreatur not to be visible");
  t.assert.not(t.getSprite("Gobo").visible, "Expected Sprite Gobo not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Kreatur").volume, 100, "Expected Sprite Kreatur to have volume 100");
  t.assert.equal(t.getSprite("Gobo").volume, 100, "Expected Sprite Gobo to have volume 100");
  t.end();
}

module.exports = [
  {
      test: test0,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687849343917',
      type: 'standard',
  }
]
