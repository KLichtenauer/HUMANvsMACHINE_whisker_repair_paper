const test0 = async function (t) {
  t.keyPress('right arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").currentCostume, 0, "Expected Sprite Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Mond").currentCostume, 0, "Expected Sprite Mond to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).currentCostume, 0, "Expected Clone 1 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).currentCostume, 0, "Expected Clone 2 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 2, "Expected Sprite Stern to have 2 clones");
  t.assert.equal(t.getSprite("Mond").getCloneCount(), 0, "Expected Sprite Mond to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 0, 1, "Expected Sprite Raumschiff to face in direction 0 +-1");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 110, 1, "Expected Sprite Schwarzes Loch to face in direction 110 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Mond").direction, 90, 1, "Expected Sprite Mond to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(1).direction, 90, 1, "Expected Clone 1 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(2).direction, 90, 1, "Expected Clone 2 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Mond").effects.color, 0, "Expected effect color of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.fisheye, 0, "Expected effect fisheye of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.whirl, 0, "Expected effect whirl of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.pixelate, 0, "Expected effect pixelate of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.mosaic, 0, "Expected effect mosaic of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.brightness, 0, "Expected effect brightness of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.ghost, 0, "Expected effect ghost of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 6, "Expected Sprite Raumschiff to be at layer 6");
  t.assert.equal(t.getSprite("Schwarzes Loch").layerOrder, 1, "Expected Sprite Schwarzes Loch to be at layer 1");
  t.assert.equal(t.getSprite("Stern").layerOrder, 5, "Expected Sprite Stern to be at layer 5");
  t.assert.equal(t.getSprite("Mond").layerOrder, 2, "Expected Sprite Mond to be at layer 2");
  t.assert.equal(t.getSprite("Stern").getClone(1).getLayerOrder(), 3, "Expected Clone 1 of Stern to be at layer 3");
  t.assert.equal(t.getSprite("Stern").getClone(2).getLayerOrder(), 4, "Expected Clone 2 of Stern to be at layer 4");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -200.2588190451025, 5, "Expected Sprite Raumschiff to have x-position -200.2588190451025 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -168.03407417371093, 5, "Expected Sprite Raumschiff to have y-position -168.03407417371093 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, -0.07596123493896023, 5, "Expected Sprite Schwarzes Loch to have x-position -0.07596123493896023 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -70.86824088833465, 5, "Expected Sprite Schwarzes Loch to have y-position -70.86824088833465 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 144, 5, "Expected Sprite Stern to have x-position 144 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 20, 5, "Expected Sprite Stern to have y-position 20 +-5");
  t.assert.withinRange(t.getSprite("Mond").x, 309, 5, "Expected Sprite Mond to have x-position 309 +-5");
  t.assert.withinRange(t.getSprite("Mond").y, -217, 5, "Expected Sprite Mond to have y-position -217 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 139.8, 5, "Expected Clone 1 of Stern to have x-position 139.8 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 19.733333333333334, 5, "Expected Clone 1 of Stern to have y-position 19.733333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 140, 5, "Expected Clone 2 of Stern to have x-position 140 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 20, 5, "Expected Clone 2 of Stern to have y-position 20 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Schwarzes Loch").sayText, "Expected Sprite Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Mond").sayText, "Expected Sprite Mond not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(1).sayText, "Expected Clone 1 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(2).sayText, "Expected Clone 2 of Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").size, 80, 1, "Expected Sprite Schwarzes Loch to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Mond").size, 100, 1, "Expected Sprite Mond to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).size, 50, 1, "Expected Clone 1 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).size, 50, 1, "Expected Clone 2 of Stern to have size 50 +-1");
  t.assert.equal(t.getSprite("Stern").getVariable("xPosition").value, "140", "Expected xPosition to have value 140 in Sprite Stern");
  t.assert.equal(t.getSprite("Stern").getVariable("yPosition").value, "20", "Expected yPosition to have value 20 in Sprite Stern");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Schwarzes Loch").visible, "Expected Sprite Schwarzes Loch to be visible");
  t.assert.not(t.getSprite("Stern").visible, "Expected Sprite Stern not to be visible");
  t.assert.ok(t.getSprite("Mond").visible, "Expected Sprite Mond to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(1).visible, "Expected Clone 1 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(2).visible, "Expected Clone 2 of Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Schwarzes Loch").volume, 100, "Expected Sprite Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Mond").volume, 100, "Expected Sprite Mond to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(1).volume, 100, "Expected Clone 1 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(2).volume, 100, "Expected Clone 2 of Stern to have volume 100");
  t.dragSprite('Raumschiff', 69.50022629577194, 17.372975047044687, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").currentCostume, 0, "Expected Sprite Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Mond").currentCostume, 0, "Expected Sprite Mond to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).currentCostume, 0, "Expected Clone 1 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).currentCostume, 0, "Expected Clone 2 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).currentCostume, 0, "Expected Clone 3 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 3, "Expected Sprite Stern to have 3 clones");
  t.assert.equal(t.getSprite("Mond").getCloneCount(), 0, "Expected Sprite Mond to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 0, 1, "Expected Sprite Raumschiff to face in direction 0 +-1");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 120, 1, "Expected Sprite Schwarzes Loch to face in direction 120 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Mond").direction, 90, 1, "Expected Sprite Mond to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(1).direction, 90, 1, "Expected Clone 1 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(2).direction, 90, 1, "Expected Clone 2 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(3).direction, 90, 1, "Expected Clone 3 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Mond").effects.color, 0, "Expected effect color of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.fisheye, 0, "Expected effect fisheye of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.whirl, 0, "Expected effect whirl of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.pixelate, 0, "Expected effect pixelate of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.mosaic, 0, "Expected effect mosaic of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.brightness, 0, "Expected effect brightness of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.ghost, 0, "Expected effect ghost of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 7, "Expected Sprite Raumschiff to be at layer 7");
  t.assert.equal(t.getSprite("Schwarzes Loch").layerOrder, 1, "Expected Sprite Schwarzes Loch to be at layer 1");
  t.assert.equal(t.getSprite("Stern").layerOrder, 6, "Expected Sprite Stern to be at layer 6");
  t.assert.equal(t.getSprite("Mond").layerOrder, 2, "Expected Sprite Mond to be at layer 2");
  t.assert.equal(t.getSprite("Stern").getClone(1).getLayerOrder(), 3, "Expected Clone 1 of Stern to be at layer 3");
  t.assert.equal(t.getSprite("Stern").getClone(2).getLayerOrder(), 4, "Expected Clone 2 of Stern to be at layer 4");
  t.assert.equal(t.getSprite("Stern").getClone(3).getLayerOrder(), 5, "Expected Clone 3 of Stern to be at layer 5");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 69.50022629577194, 5, "Expected Sprite Raumschiff to have x-position 69.50022629577194 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 18.372975047044687, 5, "Expected Sprite Raumschiff to have y-position 18.372975047044687 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, 4.622501868990582, 5, "Expected Sprite Schwarzes Loch to have x-position 4.622501868990582 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -72.578341604963, 5, "Expected Sprite Schwarzes Loch to have y-position -72.578341604963 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 144, 5, "Expected Sprite Stern to have x-position 144 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 20, 5, "Expected Sprite Stern to have y-position 20 +-5");
  t.assert.withinRange(t.getSprite("Mond").x, 309, 5, "Expected Sprite Mond to have x-position 309 +-5");
  t.assert.withinRange(t.getSprite("Mond").y, -217, 5, "Expected Sprite Mond to have y-position -217 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 139.6, 5, "Expected Clone 1 of Stern to have x-position 139.6 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 19.466666666666665, 5, "Expected Clone 1 of Stern to have y-position 19.466666666666665 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 140.03333333333333, 5, "Expected Clone 2 of Stern to have x-position 140.03333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 19.733333333333334, 5, "Expected Clone 2 of Stern to have y-position 19.733333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 140, 5, "Expected Clone 3 of Stern to have x-position 140 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 20, 5, "Expected Clone 3 of Stern to have y-position 20 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Schwarzes Loch").sayText, "Expected Sprite Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Mond").sayText, "Expected Sprite Mond not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(1).sayText, "Expected Clone 1 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(2).sayText, "Expected Clone 2 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(3).sayText, "Expected Clone 3 of Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").size, 80, 1, "Expected Sprite Schwarzes Loch to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Mond").size, 100, 1, "Expected Sprite Mond to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).size, 50, 1, "Expected Clone 1 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).size, 50, 1, "Expected Clone 2 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).size, 50, 1, "Expected Clone 3 of Stern to have size 50 +-1");
  t.assert.equal(t.getSprite("Stern").getVariable("xPosition").value, "140", "Expected xPosition to have value 140 in Sprite Stern");
  t.assert.equal(t.getSprite("Stern").getVariable("yPosition").value, "20", "Expected yPosition to have value 20 in Sprite Stern");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Schwarzes Loch").visible, "Expected Sprite Schwarzes Loch to be visible");
  t.assert.not(t.getSprite("Stern").visible, "Expected Sprite Stern not to be visible");
  t.assert.ok(t.getSprite("Mond").visible, "Expected Sprite Mond to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(1).visible, "Expected Clone 1 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(2).visible, "Expected Clone 2 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(3).visible, "Expected Clone 3 of Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Schwarzes Loch").volume, 100, "Expected Sprite Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Mond").volume, 100, "Expected Sprite Mond to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(1).volume, 100, "Expected Clone 1 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(2).volume, 100, "Expected Clone 2 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(3).volume, 100, "Expected Clone 3 of Stern to have volume 100");
  t.dragSprite('Raumschiff', 309, -217, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").currentCostume, 0, "Expected Sprite Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Mond").currentCostume, 0, "Expected Sprite Mond to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).currentCostume, 0, "Expected Clone 1 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).currentCostume, 0, "Expected Clone 2 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).currentCostume, 0, "Expected Clone 3 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 3, "Expected Sprite Stern to have 3 clones");
  t.assert.equal(t.getSprite("Mond").getCloneCount(), 0, "Expected Sprite Mond to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 0, 1, "Expected Sprite Raumschiff to face in direction 0 +-1");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 130, 1, "Expected Sprite Schwarzes Loch to face in direction 130 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Mond").direction, 90, 1, "Expected Sprite Mond to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(1).direction, 90, 1, "Expected Clone 1 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(2).direction, 90, 1, "Expected Clone 2 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(3).direction, 90, 1, "Expected Clone 3 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Mond").effects.color, 0, "Expected effect color of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.fisheye, 0, "Expected effect fisheye of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.whirl, 0, "Expected effect whirl of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.pixelate, 0, "Expected effect pixelate of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.mosaic, 0, "Expected effect mosaic of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.brightness, 0, "Expected effect brightness of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.ghost, 0, "Expected effect ghost of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 7, "Expected Sprite Raumschiff to be at layer 7");
  t.assert.equal(t.getSprite("Schwarzes Loch").layerOrder, 1, "Expected Sprite Schwarzes Loch to be at layer 1");
  t.assert.equal(t.getSprite("Stern").layerOrder, 6, "Expected Sprite Stern to be at layer 6");
  t.assert.equal(t.getSprite("Mond").layerOrder, 2, "Expected Sprite Mond to be at layer 2");
  t.assert.equal(t.getSprite("Stern").getClone(1).getLayerOrder(), 3, "Expected Clone 1 of Stern to be at layer 3");
  t.assert.equal(t.getSprite("Stern").getClone(2).getLayerOrder(), 4, "Expected Clone 2 of Stern to be at layer 4");
  t.assert.equal(t.getSprite("Stern").getClone(3).getLayerOrder(), 5, "Expected Clone 3 of Stern to be at layer 5");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 239, 5, "Expected Sprite Raumschiff to have x-position 239 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -194, 5, "Expected Sprite Raumschiff to have y-position -194 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, 8.952628887912777, 5, "Expected Sprite Schwarzes Loch to have x-position 8.952628887912777 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -75.078341604963, 5, "Expected Sprite Schwarzes Loch to have y-position -75.078341604963 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 144, 5, "Expected Sprite Stern to have x-position 144 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 20, 5, "Expected Sprite Stern to have y-position 20 +-5");
  t.assert.withinRange(t.getSprite("Mond").x, 309, 5, "Expected Sprite Mond to have x-position 309 +-5");
  t.assert.withinRange(t.getSprite("Mond").y, -217, 5, "Expected Sprite Mond to have y-position -217 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 139.4, 5, "Expected Clone 1 of Stern to have x-position 139.4 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 19.2, 5, "Expected Clone 1 of Stern to have y-position 19.2 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 140.06666666666666, 5, "Expected Clone 2 of Stern to have x-position 140.06666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 19.466666666666665, 5, "Expected Clone 2 of Stern to have y-position 19.466666666666665 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 139.93333333333334, 5, "Expected Clone 3 of Stern to have x-position 139.93333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 20.166666666666668, 5, "Expected Clone 3 of Stern to have y-position 20.166666666666668 +-5");
  t.assert.equal(t.getSprite("Raumschiff").sayText, "Überstanden!", "Expected Sprite Raumschiff to say Überstanden!");
  t.assert.not(t.getSprite("Schwarzes Loch").sayText, "Expected Sprite Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Mond").sayText, "Expected Sprite Mond not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(1).sayText, "Expected Clone 1 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(2).sayText, "Expected Clone 2 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(3).sayText, "Expected Clone 3 of Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").size, 80, 1, "Expected Sprite Schwarzes Loch to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Mond").size, 100, 1, "Expected Sprite Mond to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).size, 50, 1, "Expected Clone 1 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).size, 50, 1, "Expected Clone 2 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).size, 50, 1, "Expected Clone 3 of Stern to have size 50 +-1");
  t.assert.equal(t.getSprite("Stern").getVariable("xPosition").value, "-210", "Expected xPosition to have value -210 in Sprite Stern");
  t.assert.equal(t.getSprite("Stern").getVariable("yPosition").value, "150", "Expected yPosition to have value 150 in Sprite Stern");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Schwarzes Loch").visible, "Expected Sprite Schwarzes Loch to be visible");
  t.assert.not(t.getSprite("Stern").visible, "Expected Sprite Stern not to be visible");
  t.assert.ok(t.getSprite("Mond").visible, "Expected Sprite Mond to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(1).visible, "Expected Clone 1 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(2).visible, "Expected Clone 2 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(3).visible, "Expected Clone 3 of Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Schwarzes Loch").volume, 100, "Expected Sprite Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Mond").volume, 100, "Expected Sprite Mond to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(1).volume, 100, "Expected Clone 1 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(2).volume, 100, "Expected Clone 2 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(3).volume, 100, "Expected Clone 3 of Stern to have volume 100");
  t.keyPress('right arrow', 2);
  await t.runForSteps(2);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").currentCostume, 0, "Expected Sprite Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Mond").currentCostume, 0, "Expected Sprite Mond to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).currentCostume, 0, "Expected Clone 1 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).currentCostume, 0, "Expected Clone 2 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).currentCostume, 0, "Expected Clone 3 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).currentCostume, 0, "Expected Clone 4 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).currentCostume, 0, "Expected Clone 5 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).currentCostume, 0, "Expected Clone 6 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 6, "Expected Sprite Stern to have 6 clones");
  t.assert.equal(t.getSprite("Mond").getCloneCount(), 0, "Expected Sprite Mond to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 30, 1, "Expected Sprite Raumschiff to face in direction 30 +-1");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 160, 1, "Expected Sprite Schwarzes Loch to face in direction 160 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Mond").direction, 90, 1, "Expected Sprite Mond to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(1).direction, 90, 1, "Expected Clone 1 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(2).direction, 90, 1, "Expected Clone 2 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(3).direction, 90, 1, "Expected Clone 3 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(4).direction, 90, 1, "Expected Clone 4 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(5).direction, 90, 1, "Expected Clone 5 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(6).direction, 90, 1, "Expected Clone 6 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Mond").effects.color, 0, "Expected effect color of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.fisheye, 0, "Expected effect fisheye of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.whirl, 0, "Expected effect whirl of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.pixelate, 0, "Expected effect pixelate of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.mosaic, 0, "Expected effect mosaic of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.brightness, 0, "Expected effect brightness of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.ghost, 0, "Expected effect ghost of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.color, 0, "Expected effect color of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.fisheye, 0, "Expected effect fisheye of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.whirl, 0, "Expected effect whirl of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.pixelate, 0, "Expected effect pixelate of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.mosaic, 0, "Expected effect mosaic of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.brightness, 0, "Expected effect brightness of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.ghost, 0, "Expected effect ghost of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.color, 0, "Expected effect color of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.fisheye, 0, "Expected effect fisheye of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.whirl, 0, "Expected effect whirl of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.pixelate, 0, "Expected effect pixelate of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.mosaic, 0, "Expected effect mosaic of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.brightness, 0, "Expected effect brightness of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.ghost, 0, "Expected effect ghost of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.color, 0, "Expected effect color of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.fisheye, 0, "Expected effect fisheye of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.whirl, 0, "Expected effect whirl of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.pixelate, 0, "Expected effect pixelate of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.mosaic, 0, "Expected effect mosaic of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.brightness, 0, "Expected effect brightness of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.ghost, 0, "Expected effect ghost of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 10, "Expected Sprite Raumschiff to be at layer 10");
  t.assert.equal(t.getSprite("Schwarzes Loch").layerOrder, 1, "Expected Sprite Schwarzes Loch to be at layer 1");
  t.assert.equal(t.getSprite("Stern").layerOrder, 9, "Expected Sprite Stern to be at layer 9");
  t.assert.equal(t.getSprite("Mond").layerOrder, 2, "Expected Sprite Mond to be at layer 2");
  t.assert.equal(t.getSprite("Stern").getClone(1).getLayerOrder(), 3, "Expected Clone 1 of Stern to be at layer 3");
  t.assert.equal(t.getSprite("Stern").getClone(2).getLayerOrder(), 4, "Expected Clone 2 of Stern to be at layer 4");
  t.assert.equal(t.getSprite("Stern").getClone(3).getLayerOrder(), 5, "Expected Clone 3 of Stern to be at layer 5");
  t.assert.equal(t.getSprite("Stern").getClone(4).getLayerOrder(), 6, "Expected Clone 4 of Stern to be at layer 6");
  t.assert.equal(t.getSprite("Stern").getClone(5).getLayerOrder(), 7, "Expected Clone 5 of Stern to be at layer 7");
  t.assert.equal(t.getSprite("Stern").getClone(6).getLayerOrder(), 8, "Expected Clone 6 of Stern to be at layer 8");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 246, 5, "Expected Sprite Raumschiff to have x-position 246 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -196.3, 5, "Expected Sprite Raumschiff to have y-position -196.3 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, 18.496789151940366, 5, "Expected Sprite Schwarzes Loch to have x-position 18.496789151940366 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -86.45262888791278, 5, "Expected Sprite Schwarzes Loch to have y-position -86.45262888791278 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 144, 5, "Expected Sprite Stern to have x-position 144 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 20, 5, "Expected Sprite Stern to have y-position 20 +-5");
  t.assert.withinRange(t.getSprite("Mond").x, 309, 5, "Expected Sprite Mond to have x-position 309 +-5");
  t.assert.withinRange(t.getSprite("Mond").y, -217, 5, "Expected Sprite Mond to have y-position -217 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 138.8, 5, "Expected Clone 1 of Stern to have x-position 138.8 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 18.4, 5, "Expected Clone 1 of Stern to have y-position 18.4 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 140.16666666666666, 5, "Expected Clone 2 of Stern to have x-position 140.16666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 18.666666666666668, 5, "Expected Clone 2 of Stern to have y-position 18.666666666666668 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 139.73333333333332, 5, "Expected Clone 3 of Stern to have x-position 139.73333333333332 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 20.666666666666668, 5, "Expected Clone 3 of Stern to have y-position 20.666666666666668 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -210.13333333333333, 5, "Expected Clone 4 of Stern to have x-position -210.13333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 150.16666666666666, 5, "Expected Clone 4 of Stern to have y-position 150.16666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -210.08333333333334, 5, "Expected Clone 5 of Stern to have x-position -210.08333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 150.01666666666668, 5, "Expected Clone 5 of Stern to have y-position 150.01666666666668 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).x, -210, 5, "Expected Clone 6 of Stern to have x-position -210 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).y, 150, 5, "Expected Clone 6 of Stern to have y-position 150 +-5");
  t.assert.equal(t.getSprite("Raumschiff").sayText, "Überstanden!", "Expected Sprite Raumschiff to say Überstanden!");
  t.assert.not(t.getSprite("Schwarzes Loch").sayText, "Expected Sprite Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Mond").sayText, "Expected Sprite Mond not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(1).sayText, "Expected Clone 1 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(2).sayText, "Expected Clone 2 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(3).sayText, "Expected Clone 3 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(4).sayText, "Expected Clone 4 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(5).sayText, "Expected Clone 5 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(6).sayText, "Expected Clone 6 of Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").size, 80, 1, "Expected Sprite Schwarzes Loch to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Mond").size, 100, 1, "Expected Sprite Mond to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).size, 50, 1, "Expected Clone 1 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).size, 50, 1, "Expected Clone 2 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).size, 50, 1, "Expected Clone 3 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).size, 50, 1, "Expected Clone 4 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).size, 50, 1, "Expected Clone 5 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).size, 50, 1, "Expected Clone 6 of Stern to have size 50 +-1");
  t.assert.equal(t.getSprite("Stern").getVariable("xPosition").value, "-210", "Expected xPosition to have value -210 in Sprite Stern");
  t.assert.equal(t.getSprite("Stern").getVariable("yPosition").value, "150", "Expected yPosition to have value 150 in Sprite Stern");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Schwarzes Loch").visible, "Expected Sprite Schwarzes Loch to be visible");
  t.assert.not(t.getSprite("Stern").visible, "Expected Sprite Stern not to be visible");
  t.assert.ok(t.getSprite("Mond").visible, "Expected Sprite Mond to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(1).visible, "Expected Clone 1 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(2).visible, "Expected Clone 2 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(3).visible, "Expected Clone 3 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(4).visible, "Expected Clone 4 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(5).visible, "Expected Clone 5 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(6).visible, "Expected Clone 6 of Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Schwarzes Loch").volume, 100, "Expected Sprite Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Mond").volume, 100, "Expected Sprite Mond to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(1).volume, 100, "Expected Clone 1 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(2).volume, 100, "Expected Clone 2 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(3).volume, 100, "Expected Clone 3 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(4).volume, 100, "Expected Clone 4 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(5).volume, 100, "Expected Clone 5 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(6).volume, 100, "Expected Clone 6 of Stern to have volume 100");
  await t.runForSteps(22);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").currentCostume, 0, "Expected Sprite Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Mond").currentCostume, 0, "Expected Sprite Mond to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).currentCostume, 0, "Expected Clone 1 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).currentCostume, 0, "Expected Clone 2 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).currentCostume, 0, "Expected Clone 3 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).currentCostume, 0, "Expected Clone 4 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).currentCostume, 0, "Expected Clone 5 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).currentCostume, 0, "Expected Clone 6 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 6, "Expected Sprite Stern to have 6 clones");
  t.assert.equal(t.getSprite("Mond").getCloneCount(), 0, "Expected Sprite Mond to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 30, 1, "Expected Sprite Raumschiff to face in direction 30 +-1");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 30, 1, "Expected Sprite Schwarzes Loch to face in direction 30 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Mond").direction, 90, 1, "Expected Sprite Mond to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(1).direction, 90, 1, "Expected Clone 1 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(2).direction, 90, 1, "Expected Clone 2 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(3).direction, 90, 1, "Expected Clone 3 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(4).direction, 90, 1, "Expected Clone 4 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(5).direction, 90, 1, "Expected Clone 5 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(6).direction, 90, 1, "Expected Clone 6 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Mond").effects.color, 0, "Expected effect color of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.fisheye, 0, "Expected effect fisheye of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.whirl, 0, "Expected effect whirl of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.pixelate, 0, "Expected effect pixelate of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.mosaic, 0, "Expected effect mosaic of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.brightness, 0, "Expected effect brightness of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.ghost, 0, "Expected effect ghost of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.color, 0, "Expected effect color of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.fisheye, 0, "Expected effect fisheye of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.whirl, 0, "Expected effect whirl of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.pixelate, 0, "Expected effect pixelate of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.mosaic, 0, "Expected effect mosaic of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.brightness, 0, "Expected effect brightness of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.ghost, 0, "Expected effect ghost of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.color, 0, "Expected effect color of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.fisheye, 0, "Expected effect fisheye of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.whirl, 0, "Expected effect whirl of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.pixelate, 0, "Expected effect pixelate of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.mosaic, 0, "Expected effect mosaic of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.brightness, 0, "Expected effect brightness of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.ghost, 0, "Expected effect ghost of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.color, 0, "Expected effect color of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.fisheye, 0, "Expected effect fisheye of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.whirl, 0, "Expected effect whirl of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.pixelate, 0, "Expected effect pixelate of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.mosaic, 0, "Expected effect mosaic of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.brightness, 0, "Expected effect brightness of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.ghost, 0, "Expected effect ghost of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 10, "Expected Sprite Raumschiff to be at layer 10");
  t.assert.equal(t.getSprite("Schwarzes Loch").layerOrder, 1, "Expected Sprite Schwarzes Loch to be at layer 1");
  t.assert.equal(t.getSprite("Stern").layerOrder, 9, "Expected Sprite Stern to be at layer 9");
  t.assert.equal(t.getSprite("Mond").layerOrder, 2, "Expected Sprite Mond to be at layer 2");
  t.assert.equal(t.getSprite("Stern").getClone(1).getLayerOrder(), 3, "Expected Clone 1 of Stern to be at layer 3");
  t.assert.equal(t.getSprite("Stern").getClone(2).getLayerOrder(), 4, "Expected Clone 2 of Stern to be at layer 4");
  t.assert.equal(t.getSprite("Stern").getClone(3).getLayerOrder(), 5, "Expected Clone 3 of Stern to be at layer 5");
  t.assert.equal(t.getSprite("Stern").getClone(4).getLayerOrder(), 6, "Expected Clone 4 of Stern to be at layer 6");
  t.assert.equal(t.getSprite("Stern").getClone(5).getLayerOrder(), 7, "Expected Clone 5 of Stern to be at layer 7");
  t.assert.equal(t.getSprite("Stern").getClone(6).getLayerOrder(), 8, "Expected Clone 6 of Stern to be at layer 8");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 251, 5, "Expected Sprite Raumschiff to have x-position 251 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -198, 5, "Expected Sprite Raumschiff to have y-position -198 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, -33.49678915194036, 5, "Expected Sprite Schwarzes Loch to have x-position -33.49678915194036 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -86.45262888791278, 5, "Expected Sprite Schwarzes Loch to have y-position -86.45262888791278 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 144, 5, "Expected Sprite Stern to have x-position 144 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 20, 5, "Expected Sprite Stern to have y-position 20 +-5");
  t.assert.withinRange(t.getSprite("Mond").x, 309, 5, "Expected Sprite Mond to have x-position 309 +-5");
  t.assert.withinRange(t.getSprite("Mond").y, -217, 5, "Expected Sprite Mond to have y-position -217 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 134.2, 5, "Expected Clone 1 of Stern to have x-position 134.2 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 12.266666666666666, 5, "Expected Clone 1 of Stern to have y-position 12.266666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 140.93333333333334, 5, "Expected Clone 2 of Stern to have x-position 140.93333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 12.533333333333333, 5, "Expected Clone 2 of Stern to have y-position 12.533333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 138.2, 5, "Expected Clone 3 of Stern to have x-position 138.2 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 24.5, 5, "Expected Clone 3 of Stern to have y-position 24.5 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -211.66666666666666, 5, "Expected Clone 4 of Stern to have x-position -211.66666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 152.08333333333334, 5, "Expected Clone 4 of Stern to have y-position 152.08333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -212, 5, "Expected Clone 5 of Stern to have x-position -212 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 150.4, 5, "Expected Clone 5 of Stern to have y-position 150.4 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).x, -212.3, 5, "Expected Clone 6 of Stern to have x-position -212.3 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).y, 145.01666666666668, 5, "Expected Clone 6 of Stern to have y-position 145.01666666666668 +-5");
  t.assert.equal(t.getSprite("Raumschiff").sayText, "Überstanden!", "Expected Sprite Raumschiff to say Überstanden!");
  t.assert.not(t.getSprite("Schwarzes Loch").sayText, "Expected Sprite Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Mond").sayText, "Expected Sprite Mond not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(1).sayText, "Expected Clone 1 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(2).sayText, "Expected Clone 2 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(3).sayText, "Expected Clone 3 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(4).sayText, "Expected Clone 4 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(5).sayText, "Expected Clone 5 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(6).sayText, "Expected Clone 6 of Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").size, 80, 1, "Expected Sprite Schwarzes Loch to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Mond").size, 100, 1, "Expected Sprite Mond to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).size, 50, 1, "Expected Clone 1 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).size, 50, 1, "Expected Clone 2 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).size, 50, 1, "Expected Clone 3 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).size, 50, 1, "Expected Clone 4 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).size, 50, 1, "Expected Clone 5 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).size, 50, 1, "Expected Clone 6 of Stern to have size 50 +-1");
  t.assert.equal(t.getSprite("Stern").getVariable("xPosition").value, "-210", "Expected xPosition to have value -210 in Sprite Stern");
  t.assert.equal(t.getSprite("Stern").getVariable("yPosition").value, "150", "Expected yPosition to have value 150 in Sprite Stern");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Schwarzes Loch").visible, "Expected Sprite Schwarzes Loch to be visible");
  t.assert.not(t.getSprite("Stern").visible, "Expected Sprite Stern not to be visible");
  t.assert.ok(t.getSprite("Mond").visible, "Expected Sprite Mond to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(1).visible, "Expected Clone 1 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(2).visible, "Expected Clone 2 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(3).visible, "Expected Clone 3 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(4).visible, "Expected Clone 4 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(5).visible, "Expected Clone 5 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(6).visible, "Expected Clone 6 of Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Schwarzes Loch").volume, 100, "Expected Sprite Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Mond").volume, 100, "Expected Sprite Mond to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(1).volume, 100, "Expected Clone 1 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(2).volume, 100, "Expected Clone 2 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(3).volume, 100, "Expected Clone 3 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(4).volume, 100, "Expected Clone 4 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(5).volume, 100, "Expected Clone 5 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(6).volume, 100, "Expected Clone 6 of Stern to have volume 100");
  t.dragSprite('Raumschiff', 104.9155192721417, -10.390777869552082, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").currentCostume, 0, "Expected Sprite Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Mond").currentCostume, 0, "Expected Sprite Mond to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).currentCostume, 0, "Expected Clone 1 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).currentCostume, 0, "Expected Clone 2 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).currentCostume, 0, "Expected Clone 3 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).currentCostume, 0, "Expected Clone 4 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).currentCostume, 0, "Expected Clone 5 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).currentCostume, 0, "Expected Clone 6 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 6, "Expected Sprite Stern to have 6 clones");
  t.assert.equal(t.getSprite("Mond").getCloneCount(), 0, "Expected Sprite Mond to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 30, 1, "Expected Sprite Raumschiff to face in direction 30 +-1");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 40, 1, "Expected Sprite Schwarzes Loch to face in direction 40 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Mond").direction, 90, 1, "Expected Sprite Mond to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(1).direction, 90, 1, "Expected Clone 1 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(2).direction, 90, 1, "Expected Clone 2 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(3).direction, 90, 1, "Expected Clone 3 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(4).direction, 90, 1, "Expected Clone 4 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(5).direction, 90, 1, "Expected Clone 5 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(6).direction, 90, 1, "Expected Clone 6 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Mond").effects.color, 0, "Expected effect color of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.fisheye, 0, "Expected effect fisheye of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.whirl, 0, "Expected effect whirl of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.pixelate, 0, "Expected effect pixelate of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.mosaic, 0, "Expected effect mosaic of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.brightness, 0, "Expected effect brightness of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.ghost, 0, "Expected effect ghost of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.color, 0, "Expected effect color of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.fisheye, 0, "Expected effect fisheye of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.whirl, 0, "Expected effect whirl of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.pixelate, 0, "Expected effect pixelate of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.mosaic, 0, "Expected effect mosaic of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.brightness, 0, "Expected effect brightness of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.ghost, 0, "Expected effect ghost of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.color, 0, "Expected effect color of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.fisheye, 0, "Expected effect fisheye of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.whirl, 0, "Expected effect whirl of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.pixelate, 0, "Expected effect pixelate of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.mosaic, 0, "Expected effect mosaic of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.brightness, 0, "Expected effect brightness of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.ghost, 0, "Expected effect ghost of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.color, 0, "Expected effect color of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.fisheye, 0, "Expected effect fisheye of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.whirl, 0, "Expected effect whirl of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.pixelate, 0, "Expected effect pixelate of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.mosaic, 0, "Expected effect mosaic of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.brightness, 0, "Expected effect brightness of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.ghost, 0, "Expected effect ghost of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 10, "Expected Sprite Raumschiff to be at layer 10");
  t.assert.equal(t.getSprite("Schwarzes Loch").layerOrder, 1, "Expected Sprite Schwarzes Loch to be at layer 1");
  t.assert.equal(t.getSprite("Stern").layerOrder, 9, "Expected Sprite Stern to be at layer 9");
  t.assert.equal(t.getSprite("Mond").layerOrder, 2, "Expected Sprite Mond to be at layer 2");
  t.assert.equal(t.getSprite("Stern").getClone(1).getLayerOrder(), 3, "Expected Clone 1 of Stern to be at layer 3");
  t.assert.equal(t.getSprite("Stern").getClone(2).getLayerOrder(), 4, "Expected Clone 2 of Stern to be at layer 4");
  t.assert.equal(t.getSprite("Stern").getClone(3).getLayerOrder(), 5, "Expected Clone 3 of Stern to be at layer 5");
  t.assert.equal(t.getSprite("Stern").getClone(4).getLayerOrder(), 6, "Expected Clone 4 of Stern to be at layer 6");
  t.assert.equal(t.getSprite("Stern").getClone(5).getLayerOrder(), 7, "Expected Clone 5 of Stern to be at layer 7");
  t.assert.equal(t.getSprite("Stern").getClone(6).getLayerOrder(), 8, "Expected Clone 6 of Stern to be at layer 8");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 251, 5, "Expected Sprite Raumschiff to have x-position 251 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -196.33907778695522, 5, "Expected Sprite Raumschiff to have y-position -196.33907778695522 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, -30.996789151940362, 5, "Expected Sprite Schwarzes Loch to have x-position -30.996789151940362 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -82.12250186899058, 5, "Expected Sprite Schwarzes Loch to have y-position -82.12250186899058 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 144, 5, "Expected Sprite Stern to have x-position 144 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 20, 5, "Expected Sprite Stern to have y-position 20 +-5");
  t.assert.withinRange(t.getSprite("Mond").x, 309, 5, "Expected Sprite Mond to have x-position 309 +-5");
  t.assert.withinRange(t.getSprite("Mond").y, -217, 5, "Expected Sprite Mond to have y-position -217 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 134, 5, "Expected Clone 1 of Stern to have x-position 134 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 12, 5, "Expected Clone 1 of Stern to have y-position 12 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 140.96666666666667, 5, "Expected Clone 2 of Stern to have x-position 140.96666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 12.266666666666666, 5, "Expected Clone 2 of Stern to have y-position 12.266666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 138.13333333333333, 5, "Expected Clone 3 of Stern to have x-position 138.13333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 24.666666666666668, 5, "Expected Clone 3 of Stern to have y-position 24.666666666666668 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -211.73333333333332, 5, "Expected Clone 4 of Stern to have x-position -211.73333333333332 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 152.16666666666666, 5, "Expected Clone 4 of Stern to have y-position 152.16666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -212.08333333333334, 5, "Expected Clone 5 of Stern to have x-position -212.08333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 150.41666666666666, 5, "Expected Clone 5 of Stern to have y-position 150.41666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).x, -212.4, 5, "Expected Clone 6 of Stern to have x-position -212.4 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).y, 144.8, 5, "Expected Clone 6 of Stern to have y-position 144.8 +-5");
  t.assert.equal(t.getSprite("Raumschiff").sayText, "Überstanden!", "Expected Sprite Raumschiff to say Überstanden!");
  t.assert.not(t.getSprite("Schwarzes Loch").sayText, "Expected Sprite Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Mond").sayText, "Expected Sprite Mond not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(1).sayText, "Expected Clone 1 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(2).sayText, "Expected Clone 2 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(3).sayText, "Expected Clone 3 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(4).sayText, "Expected Clone 4 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(5).sayText, "Expected Clone 5 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(6).sayText, "Expected Clone 6 of Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").size, 80, 1, "Expected Sprite Schwarzes Loch to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Mond").size, 100, 1, "Expected Sprite Mond to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).size, 50, 1, "Expected Clone 1 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).size, 50, 1, "Expected Clone 2 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).size, 50, 1, "Expected Clone 3 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).size, 50, 1, "Expected Clone 4 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).size, 50, 1, "Expected Clone 5 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).size, 50, 1, "Expected Clone 6 of Stern to have size 50 +-1");
  t.assert.equal(t.getSprite("Stern").getVariable("xPosition").value, "-210", "Expected xPosition to have value -210 in Sprite Stern");
  t.assert.equal(t.getSprite("Stern").getVariable("yPosition").value, "150", "Expected yPosition to have value 150 in Sprite Stern");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Schwarzes Loch").visible, "Expected Sprite Schwarzes Loch to be visible");
  t.assert.not(t.getSprite("Stern").visible, "Expected Sprite Stern not to be visible");
  t.assert.ok(t.getSprite("Mond").visible, "Expected Sprite Mond to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(1).visible, "Expected Clone 1 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(2).visible, "Expected Clone 2 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(3).visible, "Expected Clone 3 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(4).visible, "Expected Clone 4 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(5).visible, "Expected Clone 5 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(6).visible, "Expected Clone 6 of Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Schwarzes Loch").volume, 100, "Expected Sprite Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Mond").volume, 100, "Expected Sprite Mond to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(1).volume, 100, "Expected Clone 1 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(2).volume, 100, "Expected Clone 2 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(3).volume, 100, "Expected Clone 3 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(4).volume, 100, "Expected Clone 4 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(5).volume, 100, "Expected Clone 5 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(6).volume, 100, "Expected Clone 6 of Stern to have volume 100");
  t.keyPress('right arrow', 3);
  await t.runForSteps(3);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").currentCostume, 0, "Expected Sprite Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Mond").currentCostume, 0, "Expected Sprite Mond to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).currentCostume, 0, "Expected Clone 1 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).currentCostume, 0, "Expected Clone 2 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).currentCostume, 0, "Expected Clone 3 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).currentCostume, 0, "Expected Clone 4 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).currentCostume, 0, "Expected Clone 5 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).currentCostume, 0, "Expected Clone 6 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 6, "Expected Sprite Stern to have 6 clones");
  t.assert.equal(t.getSprite("Mond").getCloneCount(), 0, "Expected Sprite Mond to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 75, 1, "Expected Sprite Raumschiff to face in direction 75 +-1");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 80, 1, "Expected Sprite Schwarzes Loch to face in direction 80 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Mond").direction, 90, 1, "Expected Sprite Mond to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(1).direction, 90, 1, "Expected Clone 1 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(2).direction, 90, 1, "Expected Clone 2 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(3).direction, 90, 1, "Expected Clone 3 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(4).direction, 90, 1, "Expected Clone 4 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(5).direction, 90, 1, "Expected Clone 5 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(6).direction, 90, 1, "Expected Clone 6 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Mond").effects.color, 0, "Expected effect color of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.fisheye, 0, "Expected effect fisheye of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.whirl, 0, "Expected effect whirl of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.pixelate, 0, "Expected effect pixelate of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.mosaic, 0, "Expected effect mosaic of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.brightness, 0, "Expected effect brightness of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.ghost, 0, "Expected effect ghost of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.color, 0, "Expected effect color of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.fisheye, 0, "Expected effect fisheye of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.whirl, 0, "Expected effect whirl of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.pixelate, 0, "Expected effect pixelate of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.mosaic, 0, "Expected effect mosaic of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.brightness, 0, "Expected effect brightness of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.ghost, 0, "Expected effect ghost of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.color, 0, "Expected effect color of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.fisheye, 0, "Expected effect fisheye of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.whirl, 0, "Expected effect whirl of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.pixelate, 0, "Expected effect pixelate of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.mosaic, 0, "Expected effect mosaic of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.brightness, 0, "Expected effect brightness of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.ghost, 0, "Expected effect ghost of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.color, 0, "Expected effect color of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.fisheye, 0, "Expected effect fisheye of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.whirl, 0, "Expected effect whirl of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.pixelate, 0, "Expected effect pixelate of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.mosaic, 0, "Expected effect mosaic of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.brightness, 0, "Expected effect brightness of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.ghost, 0, "Expected effect ghost of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 10, "Expected Sprite Raumschiff to be at layer 10");
  t.assert.equal(t.getSprite("Schwarzes Loch").layerOrder, 1, "Expected Sprite Schwarzes Loch to be at layer 1");
  t.assert.equal(t.getSprite("Stern").layerOrder, 9, "Expected Sprite Stern to be at layer 9");
  t.assert.equal(t.getSprite("Mond").layerOrder, 2, "Expected Sprite Mond to be at layer 2");
  t.assert.equal(t.getSprite("Stern").getClone(1).getLayerOrder(), 3, "Expected Clone 1 of Stern to be at layer 3");
  t.assert.equal(t.getSprite("Stern").getClone(2).getLayerOrder(), 4, "Expected Clone 2 of Stern to be at layer 4");
  t.assert.equal(t.getSprite("Stern").getClone(3).getLayerOrder(), 5, "Expected Clone 3 of Stern to be at layer 5");
  t.assert.equal(t.getSprite("Stern").getClone(4).getLayerOrder(), 6, "Expected Clone 4 of Stern to be at layer 6");
  t.assert.equal(t.getSprite("Stern").getClone(5).getLayerOrder(), 7, "Expected Clone 5 of Stern to be at layer 7");
  t.assert.equal(t.getSprite("Stern").getClone(6).getLayerOrder(), 8, "Expected Clone 6 of Stern to be at layer 8");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 256, 5, "Expected Sprite Raumschiff to have x-position 256 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -186, 5, "Expected Sprite Raumschiff to have y-position -186 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, -14.92403876506104, 5, "Expected Sprite Schwarzes Loch to have x-position -14.92403876506104 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -70.86824088833465, 5, "Expected Sprite Schwarzes Loch to have y-position -70.86824088833465 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 144, 5, "Expected Sprite Stern to have x-position 144 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 20, 5, "Expected Sprite Stern to have y-position 20 +-5");
  t.assert.withinRange(t.getSprite("Mond").x, 309, 5, "Expected Sprite Mond to have x-position 309 +-5");
  t.assert.withinRange(t.getSprite("Mond").y, -217, 5, "Expected Sprite Mond to have y-position -217 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 133.2, 5, "Expected Clone 1 of Stern to have x-position 133.2 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 10.933333333333334, 5, "Expected Clone 1 of Stern to have y-position 10.933333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 141.1, 5, "Expected Clone 2 of Stern to have x-position 141.1 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 11.2, 5, "Expected Clone 2 of Stern to have y-position 11.2 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 137.86666666666667, 5, "Expected Clone 3 of Stern to have x-position 137.86666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 25.333333333333332, 5, "Expected Clone 3 of Stern to have y-position 25.333333333333332 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -212, 5, "Expected Clone 4 of Stern to have x-position -212 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 152.5, 5, "Expected Clone 4 of Stern to have y-position 152.5 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -212.41666666666666, 5, "Expected Clone 5 of Stern to have x-position -212.41666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 150.48333333333332, 5, "Expected Clone 5 of Stern to have y-position 150.48333333333332 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).x, -212.8, 5, "Expected Clone 6 of Stern to have x-position -212.8 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).y, 143.93333333333334, 5, "Expected Clone 6 of Stern to have y-position 143.93333333333334 +-5");
  t.assert.equal(t.getSprite("Raumschiff").sayText, "Überstanden!", "Expected Sprite Raumschiff to say Überstanden!");
  t.assert.not(t.getSprite("Schwarzes Loch").sayText, "Expected Sprite Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Mond").sayText, "Expected Sprite Mond not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(1).sayText, "Expected Clone 1 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(2).sayText, "Expected Clone 2 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(3).sayText, "Expected Clone 3 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(4).sayText, "Expected Clone 4 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(5).sayText, "Expected Clone 5 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(6).sayText, "Expected Clone 6 of Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").size, 80, 1, "Expected Sprite Schwarzes Loch to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Mond").size, 100, 1, "Expected Sprite Mond to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).size, 50, 1, "Expected Clone 1 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).size, 50, 1, "Expected Clone 2 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).size, 50, 1, "Expected Clone 3 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).size, 50, 1, "Expected Clone 4 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).size, 50, 1, "Expected Clone 5 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).size, 50, 1, "Expected Clone 6 of Stern to have size 50 +-1");
  t.assert.equal(t.getSprite("Stern").getVariable("xPosition").value, "-210", "Expected xPosition to have value -210 in Sprite Stern");
  t.assert.equal(t.getSprite("Stern").getVariable("yPosition").value, "150", "Expected yPosition to have value 150 in Sprite Stern");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Schwarzes Loch").visible, "Expected Sprite Schwarzes Loch to be visible");
  t.assert.not(t.getSprite("Stern").visible, "Expected Sprite Stern not to be visible");
  t.assert.ok(t.getSprite("Mond").visible, "Expected Sprite Mond to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(1).visible, "Expected Clone 1 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(2).visible, "Expected Clone 2 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(3).visible, "Expected Clone 3 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(4).visible, "Expected Clone 4 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(5).visible, "Expected Clone 5 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(6).visible, "Expected Clone 6 of Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Schwarzes Loch").volume, 100, "Expected Sprite Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Mond").volume, 100, "Expected Sprite Mond to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(1).volume, 100, "Expected Clone 1 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(2).volume, 100, "Expected Clone 2 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(3).volume, 100, "Expected Clone 3 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(4).volume, 100, "Expected Clone 4 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(5).volume, 100, "Expected Clone 5 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(6).volume, 100, "Expected Clone 6 of Stern to have volume 100");
  await t.runForSteps(39);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").currentCostume, 0, "Expected Sprite Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Mond").currentCostume, 0, "Expected Sprite Mond to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Mond").getCloneCount(), 0, "Expected Sprite Mond to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 75, 1, "Expected Sprite Raumschiff to face in direction 75 +-1");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, -10, 1, "Expected Sprite Schwarzes Loch to face in direction -10 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Mond").direction, 90, 1, "Expected Sprite Mond to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Mond").effects.color, 0, "Expected effect color of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.fisheye, 0, "Expected effect fisheye of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.whirl, 0, "Expected effect whirl of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.pixelate, 0, "Expected effect pixelate of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.mosaic, 0, "Expected effect mosaic of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.brightness, 0, "Expected effect brightness of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.ghost, 0, "Expected effect ghost of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 4, "Expected Sprite Raumschiff to be at layer 4");
  t.assert.equal(t.getSprite("Schwarzes Loch").layerOrder, 1, "Expected Sprite Schwarzes Loch to be at layer 1");
  t.assert.equal(t.getSprite("Stern").layerOrder, 3, "Expected Sprite Stern to be at layer 3");
  t.assert.equal(t.getSprite("Mond").layerOrder, 2, "Expected Sprite Mond to be at layer 2");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 256, 5, "Expected Sprite Raumschiff to have x-position 256 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -179.01188578223216, 5, "Expected Sprite Raumschiff to have y-position -179.01188578223216 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, -35.20688986856871, 5, "Expected Sprite Schwarzes Loch to have x-position -35.20688986856871 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -105.9991695219644, 5, "Expected Sprite Schwarzes Loch to have y-position -105.9991695219644 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 144, 5, "Expected Sprite Stern to have x-position 144 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 20, 5, "Expected Sprite Stern to have y-position 20 +-5");
  t.assert.withinRange(t.getSprite("Mond").x, 309, 5, "Expected Sprite Mond to have x-position 309 +-5");
  t.assert.withinRange(t.getSprite("Mond").y, -217, 5, "Expected Sprite Mond to have y-position -217 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Schwarzes Loch").sayText, "Expected Sprite Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Mond").sayText, "Expected Sprite Mond not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 5, 1, "Expected Sprite Raumschiff to have size 5 +-1");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").size, 80, 1, "Expected Sprite Schwarzes Loch to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Mond").size, 100, 1, "Expected Sprite Mond to have size 100 +-1");
  t.assert.equal(t.getSprite("Stern").getVariable("xPosition").value, "-210", "Expected xPosition to have value -210 in Sprite Stern");
  t.assert.equal(t.getSprite("Stern").getVariable("yPosition").value, "150", "Expected yPosition to have value 150 in Sprite Stern");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Schwarzes Loch").visible, "Expected Sprite Schwarzes Loch to be visible");
  t.assert.not(t.getSprite("Stern").visible, "Expected Sprite Stern not to be visible");
  t.assert.ok(t.getSprite("Mond").visible, "Expected Sprite Mond to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Schwarzes Loch").volume, 100, "Expected Sprite Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Mond").volume, 100, "Expected Sprite Mond to have volume 100");
  t.end();
}
const test1 = async function (t) {
  await t.runForSteps(74);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").currentCostume, 0, "Expected Sprite Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Mond").currentCostume, 0, "Expected Sprite Mond to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).currentCostume, 0, "Expected Clone 1 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).currentCostume, 0, "Expected Clone 2 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).currentCostume, 0, "Expected Clone 3 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).currentCostume, 0, "Expected Clone 4 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).currentCostume, 0, "Expected Clone 5 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).currentCostume, 0, "Expected Clone 6 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 6, "Expected Sprite Stern to have 6 clones");
  t.assert.equal(t.getSprite("Mond").getCloneCount(), 0, "Expected Sprite Mond to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, -15, 1, "Expected Sprite Raumschiff to face in direction -15 +-1");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 120, 1, "Expected Sprite Schwarzes Loch to face in direction 120 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Mond").direction, 90, 1, "Expected Sprite Mond to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(1).direction, 90, 1, "Expected Clone 1 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(2).direction, 90, 1, "Expected Clone 2 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(3).direction, 90, 1, "Expected Clone 3 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(4).direction, 90, 1, "Expected Clone 4 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(5).direction, 90, 1, "Expected Clone 5 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(6).direction, 90, 1, "Expected Clone 6 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Mond").effects.color, 0, "Expected effect color of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.fisheye, 0, "Expected effect fisheye of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.whirl, 0, "Expected effect whirl of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.pixelate, 0, "Expected effect pixelate of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.mosaic, 0, "Expected effect mosaic of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.brightness, 0, "Expected effect brightness of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.ghost, 0, "Expected effect ghost of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.color, 0, "Expected effect color of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.fisheye, 0, "Expected effect fisheye of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.whirl, 0, "Expected effect whirl of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.pixelate, 0, "Expected effect pixelate of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.mosaic, 0, "Expected effect mosaic of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.brightness, 0, "Expected effect brightness of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.ghost, 0, "Expected effect ghost of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.color, 0, "Expected effect color of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.fisheye, 0, "Expected effect fisheye of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.whirl, 0, "Expected effect whirl of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.pixelate, 0, "Expected effect pixelate of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.mosaic, 0, "Expected effect mosaic of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.brightness, 0, "Expected effect brightness of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.ghost, 0, "Expected effect ghost of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.color, 0, "Expected effect color of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.fisheye, 0, "Expected effect fisheye of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.whirl, 0, "Expected effect whirl of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.pixelate, 0, "Expected effect pixelate of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.mosaic, 0, "Expected effect mosaic of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.brightness, 0, "Expected effect brightness of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.ghost, 0, "Expected effect ghost of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 10, "Expected Sprite Raumschiff to be at layer 10");
  t.assert.equal(t.getSprite("Schwarzes Loch").layerOrder, 1, "Expected Sprite Schwarzes Loch to be at layer 1");
  t.assert.equal(t.getSprite("Stern").layerOrder, 9, "Expected Sprite Stern to be at layer 9");
  t.assert.equal(t.getSprite("Mond").layerOrder, 2, "Expected Sprite Mond to be at layer 2");
  t.assert.equal(t.getSprite("Stern").getClone(1).getLayerOrder(), 3, "Expected Clone 1 of Stern to be at layer 3");
  t.assert.equal(t.getSprite("Stern").getClone(2).getLayerOrder(), 4, "Expected Clone 2 of Stern to be at layer 4");
  t.assert.equal(t.getSprite("Stern").getClone(3).getLayerOrder(), 5, "Expected Clone 3 of Stern to be at layer 5");
  t.assert.equal(t.getSprite("Stern").getClone(4).getLayerOrder(), 6, "Expected Clone 4 of Stern to be at layer 6");
  t.assert.equal(t.getSprite("Stern").getClone(5).getLayerOrder(), 7, "Expected Clone 5 of Stern to be at layer 7");
  t.assert.equal(t.getSprite("Stern").getClone(6).getLayerOrder(), 8, "Expected Clone 6 of Stern to be at layer 8");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -219.41142838268846, 5, "Expected Sprite Raumschiff to have x-position -219.41142838268846 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -97.55556302832005, 5, "Expected Sprite Raumschiff to have y-position -97.55556302832005 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, 4.622501868990582, 5, "Expected Sprite Schwarzes Loch to have x-position 4.622501868990582 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -72.578341604963, 5, "Expected Sprite Schwarzes Loch to have y-position -72.578341604963 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 144, 5, "Expected Sprite Stern to have x-position 144 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 20, 5, "Expected Sprite Stern to have y-position 20 +-5");
  t.assert.withinRange(t.getSprite("Mond").x, 309, 5, "Expected Sprite Mond to have x-position 309 +-5");
  t.assert.withinRange(t.getSprite("Mond").y, -217, 5, "Expected Sprite Mond to have y-position -217 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 129.51666666666668, 5, "Expected Clone 1 of Stern to have x-position 129.51666666666668 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 4.866666666666667, 5, "Expected Clone 1 of Stern to have y-position 4.866666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 140, 5, "Expected Clone 2 of Stern to have x-position 140 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 8.2, 5, "Expected Clone 2 of Stern to have y-position 8.2 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 135.63333333333333, 5, "Expected Clone 3 of Stern to have x-position 135.63333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 26.333333333333332, 5, "Expected Clone 3 of Stern to have y-position 26.333333333333332 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -203.6, 5, "Expected Clone 4 of Stern to have x-position -203.6 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 140.6, 5, "Expected Clone 4 of Stern to have y-position 140.6 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -211.86666666666667, 5, "Expected Clone 5 of Stern to have x-position -211.86666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 151.8, 5, "Expected Clone 5 of Stern to have y-position 151.8 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).x, -197.96666666666667, 5, "Expected Clone 6 of Stern to have x-position -197.96666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).y, 158.65, 5, "Expected Clone 6 of Stern to have y-position 158.65 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Schwarzes Loch").sayText, "Expected Sprite Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Mond").sayText, "Expected Sprite Mond not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(1).sayText, "Expected Clone 1 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(2).sayText, "Expected Clone 2 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(3).sayText, "Expected Clone 3 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(4).sayText, "Expected Clone 4 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(5).sayText, "Expected Clone 5 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(6).sayText, "Expected Clone 6 of Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").size, 80, 1, "Expected Sprite Schwarzes Loch to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Mond").size, 100, 1, "Expected Sprite Mond to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).size, 50, 1, "Expected Clone 1 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).size, 50, 1, "Expected Clone 2 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).size, 50, 1, "Expected Clone 3 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).size, 50, 1, "Expected Clone 4 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).size, 50, 1, "Expected Clone 5 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).size, 50, 1, "Expected Clone 6 of Stern to have size 50 +-1");
  t.assert.equal(t.getSprite("Stern").getVariable("xPosition").value, "-210", "Expected xPosition to have value -210 in Sprite Stern");
  t.assert.equal(t.getSprite("Stern").getVariable("yPosition").value, "150", "Expected yPosition to have value 150 in Sprite Stern");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Schwarzes Loch").visible, "Expected Sprite Schwarzes Loch to be visible");
  t.assert.not(t.getSprite("Stern").visible, "Expected Sprite Stern not to be visible");
  t.assert.ok(t.getSprite("Mond").visible, "Expected Sprite Mond to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(1).visible, "Expected Clone 1 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(2).visible, "Expected Clone 2 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(3).visible, "Expected Clone 3 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(4).visible, "Expected Clone 4 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(5).visible, "Expected Clone 5 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(6).visible, "Expected Clone 6 of Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Schwarzes Loch").volume, 100, "Expected Sprite Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Mond").volume, 100, "Expected Sprite Mond to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(1).volume, 100, "Expected Clone 1 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(2).volume, 100, "Expected Clone 2 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(3).volume, 100, "Expected Clone 3 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(4).volume, 100, "Expected Clone 4 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(5).volume, 100, "Expected Clone 5 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(6).volume, 100, "Expected Clone 6 of Stern to have volume 100");
  await t.runForSteps(85);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").currentCostume, 0, "Expected Sprite Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Mond").currentCostume, 0, "Expected Sprite Mond to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).currentCostume, 0, "Expected Clone 1 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).currentCostume, 0, "Expected Clone 2 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).currentCostume, 0, "Expected Clone 3 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).currentCostume, 0, "Expected Clone 4 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).currentCostume, 0, "Expected Clone 5 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).currentCostume, 0, "Expected Clone 6 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 6, "Expected Sprite Stern to have 6 clones");
  t.assert.equal(t.getSprite("Mond").getCloneCount(), 0, "Expected Sprite Mond to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, -15, 1, "Expected Sprite Raumschiff to face in direction -15 +-1");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, -100, 1, "Expected Sprite Schwarzes Loch to face in direction -100 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Mond").direction, 90, 1, "Expected Sprite Mond to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(1).direction, 90, 1, "Expected Clone 1 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(2).direction, 90, 1, "Expected Clone 2 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(3).direction, 90, 1, "Expected Clone 3 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(4).direction, 90, 1, "Expected Clone 4 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(5).direction, 90, 1, "Expected Clone 5 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(6).direction, 90, 1, "Expected Clone 6 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Mond").effects.color, 0, "Expected effect color of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.fisheye, 0, "Expected effect fisheye of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.whirl, 0, "Expected effect whirl of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.pixelate, 0, "Expected effect pixelate of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.mosaic, 0, "Expected effect mosaic of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.brightness, 0, "Expected effect brightness of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.ghost, 0, "Expected effect ghost of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.color, 0, "Expected effect color of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.fisheye, 0, "Expected effect fisheye of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.whirl, 0, "Expected effect whirl of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.pixelate, 0, "Expected effect pixelate of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.mosaic, 0, "Expected effect mosaic of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.brightness, 0, "Expected effect brightness of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.ghost, 0, "Expected effect ghost of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.color, 0, "Expected effect color of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.fisheye, 0, "Expected effect fisheye of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.whirl, 0, "Expected effect whirl of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.pixelate, 0, "Expected effect pixelate of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.mosaic, 0, "Expected effect mosaic of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.brightness, 0, "Expected effect brightness of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.ghost, 0, "Expected effect ghost of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.color, 0, "Expected effect color of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.fisheye, 0, "Expected effect fisheye of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.whirl, 0, "Expected effect whirl of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.pixelate, 0, "Expected effect pixelate of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.mosaic, 0, "Expected effect mosaic of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.brightness, 0, "Expected effect brightness of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.ghost, 0, "Expected effect ghost of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 10, "Expected Sprite Raumschiff to be at layer 10");
  t.assert.equal(t.getSprite("Schwarzes Loch").layerOrder, 1, "Expected Sprite Schwarzes Loch to be at layer 1");
  t.assert.equal(t.getSprite("Stern").layerOrder, 9, "Expected Sprite Stern to be at layer 9");
  t.assert.equal(t.getSprite("Mond").layerOrder, 2, "Expected Sprite Mond to be at layer 2");
  t.assert.equal(t.getSprite("Stern").getClone(1).getLayerOrder(), 3, "Expected Clone 1 of Stern to be at layer 3");
  t.assert.equal(t.getSprite("Stern").getClone(2).getLayerOrder(), 4, "Expected Clone 2 of Stern to be at layer 4");
  t.assert.equal(t.getSprite("Stern").getClone(3).getLayerOrder(), 5, "Expected Clone 3 of Stern to be at layer 5");
  t.assert.equal(t.getSprite("Stern").getClone(4).getLayerOrder(), 6, "Expected Clone 4 of Stern to be at layer 6");
  t.assert.equal(t.getSprite("Stern").getClone(5).getLayerOrder(), 7, "Expected Clone 5 of Stern to be at layer 7");
  t.assert.equal(t.getSprite("Stern").getClone(6).getLayerOrder(), 8, "Expected Clone 6 of Stern to be at layer 8");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -241.66986626150455, 5, "Expected Sprite Raumschiff to have x-position -241.66986626150455 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -14.485941967460313, 5, "Expected Sprite Raumschiff to have y-position -14.485941967460313 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, -0.07596123493896201, 5, "Expected Sprite Schwarzes Loch to have x-position -0.07596123493896201 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -126.28202062547207, 5, "Expected Sprite Schwarzes Loch to have y-position -126.28202062547207 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 144, 5, "Expected Sprite Stern to have x-position 144 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 20, 5, "Expected Sprite Stern to have y-position 20 +-5");
  t.assert.withinRange(t.getSprite("Mond").x, 309, 5, "Expected Sprite Mond to have x-position 309 +-5");
  t.assert.withinRange(t.getSprite("Mond").y, -217, 5, "Expected Sprite Mond to have y-position -217 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 135, 5, "Expected Clone 1 of Stern to have x-position 135 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 24.466666666666665, 5, "Expected Clone 1 of Stern to have y-position 24.466666666666665 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 128.3, 5, "Expected Clone 2 of Stern to have x-position 128.3 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 20.683333333333334, 5, "Expected Clone 2 of Stern to have y-position 20.683333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 148.4, 5, "Expected Clone 3 of Stern to have x-position 148.4 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 7, 5, "Expected Clone 3 of Stern to have y-position 7 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -224.56666666666666, 5, "Expected Clone 4 of Stern to have x-position -224.56666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 161, 5, "Expected Clone 4 of Stern to have y-position 161 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -196.9, 5, "Expected Clone 5 of Stern to have x-position -196.9 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 158.1, 5, "Expected Clone 5 of Stern to have y-position 158.1 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).x, -213.6, 5, "Expected Clone 6 of Stern to have x-position -213.6 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).y, 153.86666666666667, 5, "Expected Clone 6 of Stern to have y-position 153.86666666666667 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Schwarzes Loch").sayText, "Expected Sprite Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Mond").sayText, "Expected Sprite Mond not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(1).sayText, "Expected Clone 1 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(2).sayText, "Expected Clone 2 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(3).sayText, "Expected Clone 3 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(4).sayText, "Expected Clone 4 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(5).sayText, "Expected Clone 5 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(6).sayText, "Expected Clone 6 of Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").size, 80, 1, "Expected Sprite Schwarzes Loch to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Mond").size, 100, 1, "Expected Sprite Mond to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).size, 50, 1, "Expected Clone 1 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).size, 50, 1, "Expected Clone 2 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).size, 50, 1, "Expected Clone 3 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).size, 50, 1, "Expected Clone 4 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).size, 50, 1, "Expected Clone 5 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).size, 50, 1, "Expected Clone 6 of Stern to have size 50 +-1");
  t.assert.equal(t.getSprite("Stern").getVariable("xPosition").value, "-210", "Expected xPosition to have value -210 in Sprite Stern");
  t.assert.equal(t.getSprite("Stern").getVariable("yPosition").value, "150", "Expected yPosition to have value 150 in Sprite Stern");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Schwarzes Loch").visible, "Expected Sprite Schwarzes Loch to be visible");
  t.assert.not(t.getSprite("Stern").visible, "Expected Sprite Stern not to be visible");
  t.assert.ok(t.getSprite("Mond").visible, "Expected Sprite Mond to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(1).visible, "Expected Clone 1 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(2).visible, "Expected Clone 2 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(3).visible, "Expected Clone 3 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(4).visible, "Expected Clone 4 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(5).visible, "Expected Clone 5 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(6).visible, "Expected Clone 6 of Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Schwarzes Loch").volume, 100, "Expected Sprite Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Mond").volume, 100, "Expected Sprite Mond to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(1).volume, 100, "Expected Clone 1 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(2).volume, 100, "Expected Clone 2 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(3).volume, 100, "Expected Clone 3 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(4).volume, 100, "Expected Clone 4 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(5).volume, 100, "Expected Clone 5 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(6).volume, 100, "Expected Clone 6 of Stern to have volume 100");
  t.dragSprite('Raumschiff', 240, -180, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").currentCostume, 0, "Expected Sprite Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Mond").currentCostume, 0, "Expected Sprite Mond to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).currentCostume, 0, "Expected Clone 1 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).currentCostume, 0, "Expected Clone 2 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).currentCostume, 0, "Expected Clone 3 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).currentCostume, 0, "Expected Clone 4 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).currentCostume, 0, "Expected Clone 5 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).currentCostume, 0, "Expected Clone 6 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 6, "Expected Sprite Stern to have 6 clones");
  t.assert.equal(t.getSprite("Mond").getCloneCount(), 0, "Expected Sprite Mond to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, -15, 1, "Expected Sprite Raumschiff to face in direction -15 +-1");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, -90, 1, "Expected Sprite Schwarzes Loch to face in direction -90 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Mond").direction, 90, 1, "Expected Sprite Mond to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(1).direction, 90, 1, "Expected Clone 1 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(2).direction, 90, 1, "Expected Clone 2 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(3).direction, 90, 1, "Expected Clone 3 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(4).direction, 90, 1, "Expected Clone 4 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(5).direction, 90, 1, "Expected Clone 5 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(6).direction, 90, 1, "Expected Clone 6 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Mond").effects.color, 0, "Expected effect color of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.fisheye, 0, "Expected effect fisheye of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.whirl, 0, "Expected effect whirl of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.pixelate, 0, "Expected effect pixelate of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.mosaic, 0, "Expected effect mosaic of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.brightness, 0, "Expected effect brightness of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.ghost, 0, "Expected effect ghost of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.color, 0, "Expected effect color of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.fisheye, 0, "Expected effect fisheye of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.whirl, 0, "Expected effect whirl of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.pixelate, 0, "Expected effect pixelate of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.mosaic, 0, "Expected effect mosaic of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.brightness, 0, "Expected effect brightness of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.ghost, 0, "Expected effect ghost of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.color, 0, "Expected effect color of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.fisheye, 0, "Expected effect fisheye of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.whirl, 0, "Expected effect whirl of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.pixelate, 0, "Expected effect pixelate of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.mosaic, 0, "Expected effect mosaic of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.brightness, 0, "Expected effect brightness of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.ghost, 0, "Expected effect ghost of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.color, 0, "Expected effect color of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.fisheye, 0, "Expected effect fisheye of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.whirl, 0, "Expected effect whirl of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.pixelate, 0, "Expected effect pixelate of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.mosaic, 0, "Expected effect mosaic of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.brightness, 0, "Expected effect brightness of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.ghost, 0, "Expected effect ghost of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 10, "Expected Sprite Raumschiff to be at layer 10");
  t.assert.equal(t.getSprite("Schwarzes Loch").layerOrder, 1, "Expected Sprite Schwarzes Loch to be at layer 1");
  t.assert.equal(t.getSprite("Stern").layerOrder, 9, "Expected Sprite Stern to be at layer 9");
  t.assert.equal(t.getSprite("Mond").layerOrder, 2, "Expected Sprite Mond to be at layer 2");
  t.assert.equal(t.getSprite("Stern").getClone(1).getLayerOrder(), 3, "Expected Clone 1 of Stern to be at layer 3");
  t.assert.equal(t.getSprite("Stern").getClone(2).getLayerOrder(), 4, "Expected Clone 2 of Stern to be at layer 4");
  t.assert.equal(t.getSprite("Stern").getClone(3).getLayerOrder(), 5, "Expected Clone 3 of Stern to be at layer 5");
  t.assert.equal(t.getSprite("Stern").getClone(4).getLayerOrder(), 6, "Expected Clone 4 of Stern to be at layer 6");
  t.assert.equal(t.getSprite("Stern").getClone(5).getLayerOrder(), 7, "Expected Clone 5 of Stern to be at layer 7");
  t.assert.equal(t.getSprite("Stern").getClone(6).getLayerOrder(), 8, "Expected Clone 6 of Stern to be at layer 8");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 239.7411809548975, 5, "Expected Sprite Raumschiff to have x-position 239.7411809548975 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -179.03407417371093, 5, "Expected Sprite Raumschiff to have y-position -179.03407417371093 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, -5.000000000000002, 5, "Expected Sprite Schwarzes Loch to have x-position -5.000000000000002 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -127.15026151380673, 5, "Expected Sprite Schwarzes Loch to have y-position -127.15026151380673 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 144, 5, "Expected Sprite Stern to have x-position 144 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 20, 5, "Expected Sprite Stern to have y-position 20 +-5");
  t.assert.withinRange(t.getSprite("Mond").x, 309, 5, "Expected Sprite Mond to have x-position 309 +-5");
  t.assert.withinRange(t.getSprite("Mond").y, -217, 5, "Expected Sprite Mond to have y-position -217 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 135, 5, "Expected Clone 1 of Stern to have x-position 135 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 24.900000000000002, 5, "Expected Clone 1 of Stern to have y-position 24.900000000000002 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 128.2, 5, "Expected Clone 2 of Stern to have x-position 128.2 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 20.566666666666666, 5, "Expected Clone 2 of Stern to have y-position 20.566666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 148.8, 5, "Expected Clone 3 of Stern to have x-position 148.8 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 6.916666666666666, 5, "Expected Clone 3 of Stern to have y-position 6.916666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -224.58333333333334, 5, "Expected Clone 4 of Stern to have x-position -224.58333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 161, 5, "Expected Clone 4 of Stern to have y-position 161 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -196.86666666666667, 5, "Expected Clone 5 of Stern to have x-position -196.86666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 158.13333333333333, 5, "Expected Clone 5 of Stern to have y-position 158.13333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).x, -213.15, 5, "Expected Clone 6 of Stern to have x-position -213.15 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).y, 153.8, 5, "Expected Clone 6 of Stern to have y-position 153.8 +-5");
  t.assert.equal(t.getSprite("Raumschiff").sayText, "Überstanden!", "Expected Sprite Raumschiff to say Überstanden!");
  t.assert.not(t.getSprite("Schwarzes Loch").sayText, "Expected Sprite Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Mond").sayText, "Expected Sprite Mond not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(1).sayText, "Expected Clone 1 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(2).sayText, "Expected Clone 2 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(3).sayText, "Expected Clone 3 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(4).sayText, "Expected Clone 4 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(5).sayText, "Expected Clone 5 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(6).sayText, "Expected Clone 6 of Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").size, 80, 1, "Expected Sprite Schwarzes Loch to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Mond").size, 100, 1, "Expected Sprite Mond to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).size, 50, 1, "Expected Clone 1 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).size, 50, 1, "Expected Clone 2 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).size, 50, 1, "Expected Clone 3 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).size, 50, 1, "Expected Clone 4 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).size, 50, 1, "Expected Clone 5 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).size, 50, 1, "Expected Clone 6 of Stern to have size 50 +-1");
  t.assert.equal(t.getSprite("Stern").getVariable("xPosition").value, "-210", "Expected xPosition to have value -210 in Sprite Stern");
  t.assert.equal(t.getSprite("Stern").getVariable("yPosition").value, "150", "Expected yPosition to have value 150 in Sprite Stern");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Schwarzes Loch").visible, "Expected Sprite Schwarzes Loch to be visible");
  t.assert.not(t.getSprite("Stern").visible, "Expected Sprite Stern not to be visible");
  t.assert.ok(t.getSprite("Mond").visible, "Expected Sprite Mond to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(1).visible, "Expected Clone 1 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(2).visible, "Expected Clone 2 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(3).visible, "Expected Clone 3 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(4).visible, "Expected Clone 4 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(5).visible, "Expected Clone 5 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(6).visible, "Expected Clone 6 of Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Schwarzes Loch").volume, 100, "Expected Sprite Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Mond").volume, 100, "Expected Sprite Mond to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(1).volume, 100, "Expected Clone 1 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(2).volume, 100, "Expected Clone 2 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(3).volume, 100, "Expected Clone 3 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(4).volume, 100, "Expected Clone 4 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(5).volume, 100, "Expected Clone 5 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(6).volume, 100, "Expected Clone 6 of Stern to have volume 100");
  await t.runForSteps(200);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").currentCostume, 0, "Expected Sprite Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Mond").currentCostume, 0, "Expected Sprite Mond to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Mond").getCloneCount(), 0, "Expected Sprite Mond to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, -15, 1, "Expected Sprite Raumschiff to face in direction -15 +-1");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, -110, 1, "Expected Sprite Schwarzes Loch to face in direction -110 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Mond").direction, 90, 1, "Expected Sprite Mond to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Mond").effects.color, 0, "Expected effect color of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.fisheye, 0, "Expected effect fisheye of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.whirl, 0, "Expected effect whirl of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.pixelate, 0, "Expected effect pixelate of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.mosaic, 0, "Expected effect mosaic of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.brightness, 0, "Expected effect brightness of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.ghost, 0, "Expected effect ghost of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 4, "Expected Sprite Raumschiff to be at layer 4");
  t.assert.equal(t.getSprite("Schwarzes Loch").layerOrder, 1, "Expected Sprite Schwarzes Loch to be at layer 1");
  t.assert.equal(t.getSprite("Stern").layerOrder, 3, "Expected Sprite Stern to be at layer 3");
  t.assert.equal(t.getSprite("Mond").layerOrder, 2, "Expected Sprite Mond to be at layer 2");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 217.01226694851857, 5, "Expected Sprite Raumschiff to have x-position 217.01226694851857 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -91.81630745562461, 5, "Expected Sprite Raumschiff to have y-position -91.81630745562461 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, 4.622501868990581, 5, "Expected Sprite Schwarzes Loch to have x-position 4.622501868990581 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -124.57191990884373, 5, "Expected Sprite Schwarzes Loch to have y-position -124.57191990884373 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 144, 5, "Expected Sprite Stern to have x-position 144 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 20, 5, "Expected Sprite Stern to have y-position 20 +-5");
  t.assert.withinRange(t.getSprite("Mond").x, 309, 5, "Expected Sprite Mond to have x-position 309 +-5");
  t.assert.withinRange(t.getSprite("Mond").y, -217, 5, "Expected Sprite Mond to have y-position -217 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Schwarzes Loch").sayText, "Expected Sprite Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Mond").sayText, "Expected Sprite Mond not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").size, 80, 1, "Expected Sprite Schwarzes Loch to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Mond").size, 100, 1, "Expected Sprite Mond to have size 100 +-1");
  t.assert.equal(t.getSprite("Stern").getVariable("xPosition").value, "-210", "Expected xPosition to have value -210 in Sprite Stern");
  t.assert.equal(t.getSprite("Stern").getVariable("yPosition").value, "150", "Expected yPosition to have value 150 in Sprite Stern");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Schwarzes Loch").visible, "Expected Sprite Schwarzes Loch to be visible");
  t.assert.not(t.getSprite("Stern").visible, "Expected Sprite Stern not to be visible");
  t.assert.ok(t.getSprite("Mond").visible, "Expected Sprite Mond to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Schwarzes Loch").volume, 100, "Expected Sprite Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Mond").volume, 100, "Expected Sprite Mond to have volume 100");
  t.end();
}

module.exports = [
  {
      test: test0,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687849336351',
      type: 'standard',
  },
  {
      test: test1,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687849336351',
      type: 'standard',
  }
]
