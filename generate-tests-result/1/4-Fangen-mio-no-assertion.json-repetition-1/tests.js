const test0 = async function (t) {
  t.keyPress('left arrow', 3);
  await t.runForSteps(3);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 84, 1, "Expected Sprite Scheibe to face in direction 84 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 120.78789526876503, 1, "Expected Sprite Rot to face in direction 120.78789526876503 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 196, 5, "Expected Sprite Rot to have x-position 196 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -143, 5, "Expected Sprite Rot to have y-position -143 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  await t.runForSteps(94);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).currentCostume, 0, "Expected Clone 1 of Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 1, "Expected Sprite Rot to have 1 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 84, 1, "Expected Sprite Scheibe to face in direction 84 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 50.48615642500431, 1, "Expected Sprite Rot to face in direction 50.48615642500431 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).direction, 50.48615642500431, 1, "Expected Clone 1 of Rot to face in direction 50.48615642500431 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 3, "Expected Sprite Scheibe to be at layer 3");
  t.assert.equal(t.getSprite("Rot").layerOrder, 2, "Expected Sprite Rot to be at layer 2");
  t.assert.equal(t.getSprite("Rot").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, -194, 5, "Expected Sprite Rot to have x-position -194 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -160, 5, "Expected Sprite Rot to have y-position -160 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, -148.73333333333335, 5, "Expected Clone 1 of Rot to have x-position -148.73333333333335 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, -122.66666666666666, 5, "Expected Clone 1 of Rot to have y-position -122.66666666666666 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.not(t.getSprite("Rot").getClone(1).sayText, "Expected Clone 1 of Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).size, 80, 1, "Expected Clone 1 of Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.ok(t.getSprite("Rot").getClone(1).visible, "Expected Clone 1 of Rot to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.assert.equal(t.getSprite("Rot").getClone(1).volume, 100, "Expected Clone 1 of Rot to have volume 100");
  t.dragSprite('Rot', 13.345899519307919, -11.952592541056335, 2);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 84, 1, "Expected Sprite Scheibe to face in direction 84 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 50.48615642500431, 1, "Expected Sprite Rot to face in direction 50.48615642500431 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, -194, 5, "Expected Sprite Rot to have x-position -194 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -160, 5, "Expected Sprite Rot to have y-position -160 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.end();
}
const test1 = async function (t) {
  t.keyPress('left arrow', 3);
  await t.runForSteps(3);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 84, 1, "Expected Sprite Scheibe to face in direction 84 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 120.78789526876503, 1, "Expected Sprite Rot to face in direction 120.78789526876503 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 196, 5, "Expected Sprite Rot to have x-position 196 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -143, 5, "Expected Sprite Rot to have y-position -143 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.keyPress('right arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 87, 1, "Expected Sprite Scheibe to face in direction 87 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 120.78789526876503, 1, "Expected Sprite Rot to face in direction 120.78789526876503 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 122, 5, "Expected Sprite Rot to have x-position 122 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 14, 5, "Expected Sprite Rot to have y-position 14 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.end();
}
const test2 = async function (t) {
  t.keyPress('left arrow', 3);
  await t.runForSteps(3);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 84, 1, "Expected Sprite Scheibe to face in direction 84 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 120.78789526876503, 1, "Expected Sprite Rot to face in direction 120.78789526876503 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 196, 5, "Expected Sprite Rot to have x-position 196 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -143, 5, "Expected Sprite Rot to have y-position -143 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  await t.runForSteps(60);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).currentCostume, 0, "Expected Clone 1 of Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 1, "Expected Sprite Rot to have 1 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 84, 1, "Expected Sprite Scheibe to face in direction 84 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 112.70492394064934, 1, "Expected Sprite Rot to face in direction 112.70492394064934 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).direction, 112.70492394064934, 1, "Expected Clone 1 of Rot to face in direction 112.70492394064934 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 3, "Expected Sprite Scheibe to be at layer 3");
  t.assert.equal(t.getSprite("Rot").layerOrder, 2, "Expected Sprite Rot to be at layer 2");
  t.assert.equal(t.getSprite("Rot").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, -239, 5, "Expected Sprite Rot to have x-position -239 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 100, 5, "Expected Sprite Rot to have y-position 100 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, -100.91111111111113, 5, "Expected Clone 1 of Rot to have x-position -100.91111111111113 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, 42.22222222222223, 5, "Expected Clone 1 of Rot to have y-position 42.22222222222223 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.not(t.getSprite("Rot").getClone(1).sayText, "Expected Clone 1 of Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).size, 80, 1, "Expected Clone 1 of Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.ok(t.getSprite("Rot").getClone(1).visible, "Expected Clone 1 of Rot to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.assert.equal(t.getSprite("Rot").getClone(1).volume, 100, "Expected Clone 1 of Rot to have volume 100");
  t.dragSprite('Rot', -11.472443558575216, -13.672331671221597, 1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 84, 1, "Expected Sprite Scheibe to face in direction 84 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 112.70492394064934, 1, "Expected Sprite Rot to face in direction 112.70492394064934 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, -239, 5, "Expected Sprite Rot to have x-position -239 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 100, 5, "Expected Sprite Rot to have y-position 100 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.dragSprite('Rot', 2.9159127997060157, -1.8989835081697493, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 84, 1, "Expected Sprite Scheibe to face in direction 84 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 112.70492394064934, 1, "Expected Sprite Rot to face in direction 112.70492394064934 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 2.9159127997060157, 5, "Expected Sprite Rot to have x-position 2.9159127997060157 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -1.8989835081697493, 5, "Expected Sprite Rot to have y-position -1.8989835081697493 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.keyPress('right arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 87, 1, "Expected Sprite Scheibe to face in direction 87 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 112.70492394064934, 1, "Expected Sprite Rot to face in direction 112.70492394064934 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 2.9159127997060157, 5, "Expected Sprite Rot to have x-position 2.9159127997060157 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -1.8989835081697493, 5, "Expected Sprite Rot to have y-position -1.8989835081697493 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.keyPress('left arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 84, 1, "Expected Sprite Scheibe to face in direction 84 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 112.70492394064934, 1, "Expected Sprite Rot to face in direction 112.70492394064934 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 2.9159127997060157, 5, "Expected Sprite Rot to have x-position 2.9159127997060157 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -1.8989835081697493, 5, "Expected Sprite Rot to have y-position -1.8989835081697493 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  await t.runForSteps(94);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).currentCostume, 0, "Expected Clone 1 of Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 1, "Expected Sprite Rot to have 1 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 84, 1, "Expected Sprite Scheibe to face in direction 84 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 119.63506680847964, 1, "Expected Sprite Rot to face in direction 119.63506680847964 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).direction, 119.63506680847964, 1, "Expected Clone 1 of Rot to face in direction 119.63506680847964 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 3, "Expected Sprite Scheibe to be at layer 3");
  t.assert.equal(t.getSprite("Rot").layerOrder, 2, "Expected Sprite Rot to be at layer 2");
  t.assert.equal(t.getSprite("Rot").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, -225, 5, "Expected Sprite Rot to have x-position -225 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 128, 5, "Expected Sprite Rot to have y-position 128 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, -167.5, 5, "Expected Clone 1 of Rot to have x-position -167.5 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, 95.28888888888889, 5, "Expected Clone 1 of Rot to have y-position 95.28888888888889 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.not(t.getSprite("Rot").getClone(1).sayText, "Expected Clone 1 of Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).size, 80, 1, "Expected Clone 1 of Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.ok(t.getSprite("Rot").getClone(1).visible, "Expected Clone 1 of Rot to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.assert.equal(t.getSprite("Rot").getClone(1).volume, 100, "Expected Clone 1 of Rot to have volume 100");
  t.dragSprite('Rot', 13.345899519307919, -11.952592541056335, 2);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 84, 1, "Expected Sprite Scheibe to face in direction 84 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 119.63506680847964, 1, "Expected Sprite Rot to face in direction 119.63506680847964 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, -225, 5, "Expected Sprite Rot to have x-position -225 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 128, 5, "Expected Sprite Rot to have y-position 128 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.keyPress('right arrow', 3);
  await t.runForSteps(3);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 93, 1, "Expected Sprite Scheibe to face in direction 93 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 119.63506680847964, 1, "Expected Sprite Rot to face in direction 119.63506680847964 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, -225, 5, "Expected Sprite Rot to have x-position -225 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 128, 5, "Expected Sprite Rot to have y-position 128 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.keyPress('right arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 96, 1, "Expected Sprite Scheibe to face in direction 96 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 119.63506680847964, 1, "Expected Sprite Rot to face in direction 119.63506680847964 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, -225, 5, "Expected Sprite Rot to have x-position -225 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 128, 5, "Expected Sprite Rot to have y-position 128 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  await t.runForSteps(6);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 96, 1, "Expected Sprite Scheibe to face in direction 96 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 119.63506680847964, 1, "Expected Sprite Rot to face in direction 119.63506680847964 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, -225, 5, "Expected Sprite Rot to have x-position -225 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 128, 5, "Expected Sprite Rot to have y-position 128 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.keyPress('left arrow', 4);
  await t.runForSteps(4);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 84, 1, "Expected Sprite Scheibe to face in direction 84 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 119.63506680847964, 1, "Expected Sprite Rot to face in direction 119.63506680847964 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, -225, 5, "Expected Sprite Rot to have x-position -225 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 128, 5, "Expected Sprite Rot to have y-position 128 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.keyPress('left arrow', 3);
  await t.runForSteps(3);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 75, 1, "Expected Sprite Scheibe to face in direction 75 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 119.63506680847964, 1, "Expected Sprite Rot to face in direction 119.63506680847964 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, -225, 5, "Expected Sprite Rot to have x-position -225 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 128, 5, "Expected Sprite Rot to have y-position 128 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.keyPress('right arrow', 2);
  await t.runForSteps(2);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 81, 1, "Expected Sprite Scheibe to face in direction 81 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 119.63506680847964, 1, "Expected Sprite Rot to face in direction 119.63506680847964 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, -225, 5, "Expected Sprite Rot to have x-position -225 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 128, 5, "Expected Sprite Rot to have y-position 128 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  await t.runForSteps(12);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).currentCostume, 0, "Expected Clone 1 of Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 1, "Expected Sprite Rot to have 1 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 81, 1, "Expected Sprite Scheibe to face in direction 81 +-1");
  t.assert.equal(t.getSprite("Rot").direction, -59.145795494103, 1, "Expected Sprite Rot to face in direction -59.145795494103 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).direction, -59.145795494103, 1, "Expected Clone 1 of Rot to face in direction -59.145795494103 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 3, "Expected Sprite Scheibe to be at layer 3");
  t.assert.equal(t.getSprite("Rot").layerOrder, 2, "Expected Sprite Rot to be at layer 2");
  t.assert.equal(t.getSprite("Rot").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 231, 5, "Expected Sprite Rot to have x-position 231 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -138, 5, "Expected Sprite Rot to have y-position -138 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, 231, 5, "Expected Clone 1 of Rot to have x-position 231 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, -138, 5, "Expected Clone 1 of Rot to have y-position -138 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.not(t.getSprite("Rot").getClone(1).sayText, "Expected Clone 1 of Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).size, 80, 1, "Expected Clone 1 of Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.ok(t.getSprite("Rot").getClone(1).visible, "Expected Clone 1 of Rot to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.assert.equal(t.getSprite("Rot").getClone(1).volume, 100, "Expected Clone 1 of Rot to have volume 100");
  t.dragSprite('Rot', -11.745539838594592, -13.500161848866888, 1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 81, 1, "Expected Sprite Scheibe to face in direction 81 +-1");
  t.assert.equal(t.getSprite("Rot").direction, -59.145795494103, 1, "Expected Sprite Rot to face in direction -59.145795494103 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 231, 5, "Expected Sprite Rot to have x-position 231 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -138, 5, "Expected Sprite Rot to have y-position -138 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.keyPress('right arrow', 2);
  await t.runForSteps(2);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 84, 1, "Expected Sprite Scheibe to face in direction 84 +-1");
  t.assert.equal(t.getSprite("Rot").direction, -59.145795494103, 1, "Expected Sprite Rot to face in direction -59.145795494103 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 231, 5, "Expected Sprite Rot to have x-position 231 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -138, 5, "Expected Sprite Rot to have y-position -138 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.end();
}

module.exports = [
  {
      test: test0,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687849682174',
      type: 'standard',
  },
  {
      test: test1,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687849682174',
      type: 'standard',
  },
  {
      test: test2,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687849682174',
      type: 'standard',
  }
]
