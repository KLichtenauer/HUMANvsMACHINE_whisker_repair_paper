const test0 = async function (t) {
  t.dragSprite('Raumschiff', 96.69719608119506, 45.27157698658551, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").currentCostume, 0, "Expected Sprite Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Mond").currentCostume, 0, "Expected Sprite Mond to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).currentCostume, 0, "Expected Clone 1 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 1, "Expected Sprite Stern to have 1 clones");
  t.assert.equal(t.getSprite("Mond").getCloneCount(), 0, "Expected Sprite Mond to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, -15, 1, "Expected Sprite Raumschiff to face in direction -15 +-1");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 100, 1, "Expected Sprite Schwarzes Loch to face in direction 100 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Mond").direction, 90, 1, "Expected Sprite Mond to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(1).direction, 90, 1, "Expected Clone 1 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Mond").effects.color, 0, "Expected effect color of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.fisheye, 0, "Expected effect fisheye of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.whirl, 0, "Expected effect whirl of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.pixelate, 0, "Expected effect pixelate of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.mosaic, 0, "Expected effect mosaic of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.brightness, 0, "Expected effect brightness of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.ghost, 0, "Expected effect ghost of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 5, "Expected Sprite Raumschiff to be at layer 5");
  t.assert.equal(t.getSprite("Schwarzes Loch").layerOrder, 1, "Expected Sprite Schwarzes Loch to be at layer 1");
  t.assert.equal(t.getSprite("Stern").layerOrder, 4, "Expected Sprite Stern to be at layer 4");
  t.assert.equal(t.getSprite("Mond").layerOrder, 2, "Expected Sprite Mond to be at layer 2");
  t.assert.equal(t.getSprite("Stern").getClone(1).getLayerOrder(), 3, "Expected Clone 1 of Stern to be at layer 3");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -200.2588190451025, 5, "Expected Sprite Raumschiff to have x-position -200.2588190451025 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -169.03407417371093, 5, "Expected Sprite Raumschiff to have y-position -169.03407417371093 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, -5, 5, "Expected Sprite Schwarzes Loch to have x-position -5 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -70, 5, "Expected Sprite Schwarzes Loch to have y-position -70 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 144, 5, "Expected Sprite Stern to have x-position 144 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 20, 5, "Expected Sprite Stern to have y-position 20 +-5");
  t.assert.withinRange(t.getSprite("Mond").x, 309, 5, "Expected Sprite Mond to have x-position 309 +-5");
  t.assert.withinRange(t.getSprite("Mond").y, -217, 5, "Expected Sprite Mond to have y-position -217 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 140, 5, "Expected Clone 1 of Stern to have x-position 140 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 20, 5, "Expected Clone 1 of Stern to have y-position 20 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Schwarzes Loch").sayText, "Expected Sprite Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Mond").sayText, "Expected Sprite Mond not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(1).sayText, "Expected Clone 1 of Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").size, 80, 1, "Expected Sprite Schwarzes Loch to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Mond").size, 100, 1, "Expected Sprite Mond to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).size, 50, 1, "Expected Clone 1 of Stern to have size 50 +-1");
  t.assert.equal(t.getSprite("Stern").getVariable("xPosition").value, "140", "Expected xPosition to have value 140 in Sprite Stern");
  t.assert.equal(t.getSprite("Stern").getVariable("yPosition").value, "20", "Expected yPosition to have value 20 in Sprite Stern");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Schwarzes Loch").visible, "Expected Sprite Schwarzes Loch to be visible");
  t.assert.not(t.getSprite("Stern").visible, "Expected Sprite Stern not to be visible");
  t.assert.ok(t.getSprite("Mond").visible, "Expected Sprite Mond to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(1).visible, "Expected Clone 1 of Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Schwarzes Loch").volume, 100, "Expected Sprite Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Mond").volume, 100, "Expected Sprite Mond to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(1).volume, 100, "Expected Clone 1 of Stern to have volume 100");
  t.end();
}
const test1 = async function (t) {
  t.dragSprite('Raumschiff', 96.69719608119506, 45.27157698658551, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").currentCostume, 0, "Expected Sprite Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Mond").currentCostume, 0, "Expected Sprite Mond to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).currentCostume, 0, "Expected Clone 1 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 1, "Expected Sprite Stern to have 1 clones");
  t.assert.equal(t.getSprite("Mond").getCloneCount(), 0, "Expected Sprite Mond to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, -15, 1, "Expected Sprite Raumschiff to face in direction -15 +-1");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 100, 1, "Expected Sprite Schwarzes Loch to face in direction 100 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Mond").direction, 90, 1, "Expected Sprite Mond to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(1).direction, 90, 1, "Expected Clone 1 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Mond").effects.color, 0, "Expected effect color of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.fisheye, 0, "Expected effect fisheye of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.whirl, 0, "Expected effect whirl of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.pixelate, 0, "Expected effect pixelate of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.mosaic, 0, "Expected effect mosaic of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.brightness, 0, "Expected effect brightness of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.ghost, 0, "Expected effect ghost of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 5, "Expected Sprite Raumschiff to be at layer 5");
  t.assert.equal(t.getSprite("Schwarzes Loch").layerOrder, 1, "Expected Sprite Schwarzes Loch to be at layer 1");
  t.assert.equal(t.getSprite("Stern").layerOrder, 4, "Expected Sprite Stern to be at layer 4");
  t.assert.equal(t.getSprite("Mond").layerOrder, 2, "Expected Sprite Mond to be at layer 2");
  t.assert.equal(t.getSprite("Stern").getClone(1).getLayerOrder(), 3, "Expected Clone 1 of Stern to be at layer 3");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -200.2588190451025, 5, "Expected Sprite Raumschiff to have x-position -200.2588190451025 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -169.03407417371093, 5, "Expected Sprite Raumschiff to have y-position -169.03407417371093 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, -5, 5, "Expected Sprite Schwarzes Loch to have x-position -5 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -70, 5, "Expected Sprite Schwarzes Loch to have y-position -70 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 144, 5, "Expected Sprite Stern to have x-position 144 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 20, 5, "Expected Sprite Stern to have y-position 20 +-5");
  t.assert.withinRange(t.getSprite("Mond").x, 309, 5, "Expected Sprite Mond to have x-position 309 +-5");
  t.assert.withinRange(t.getSprite("Mond").y, -217, 5, "Expected Sprite Mond to have y-position -217 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 140, 5, "Expected Clone 1 of Stern to have x-position 140 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 20, 5, "Expected Clone 1 of Stern to have y-position 20 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Schwarzes Loch").sayText, "Expected Sprite Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Mond").sayText, "Expected Sprite Mond not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(1).sayText, "Expected Clone 1 of Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").size, 80, 1, "Expected Sprite Schwarzes Loch to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Mond").size, 100, 1, "Expected Sprite Mond to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).size, 50, 1, "Expected Clone 1 of Stern to have size 50 +-1");
  t.assert.equal(t.getSprite("Stern").getVariable("xPosition").value, "140", "Expected xPosition to have value 140 in Sprite Stern");
  t.assert.equal(t.getSprite("Stern").getVariable("yPosition").value, "20", "Expected yPosition to have value 20 in Sprite Stern");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Schwarzes Loch").visible, "Expected Sprite Schwarzes Loch to be visible");
  t.assert.not(t.getSprite("Stern").visible, "Expected Sprite Stern not to be visible");
  t.assert.ok(t.getSprite("Mond").visible, "Expected Sprite Mond to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(1).visible, "Expected Clone 1 of Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Schwarzes Loch").volume, 100, "Expected Sprite Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Mond").volume, 100, "Expected Sprite Mond to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(1).volume, 100, "Expected Clone 1 of Stern to have volume 100");
  t.keyPress('right arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").currentCostume, 0, "Expected Sprite Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Mond").currentCostume, 0, "Expected Sprite Mond to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).currentCostume, 0, "Expected Clone 1 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).currentCostume, 0, "Expected Clone 2 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).currentCostume, 0, "Expected Clone 3 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 3, "Expected Sprite Stern to have 3 clones");
  t.assert.equal(t.getSprite("Mond").getCloneCount(), 0, "Expected Sprite Mond to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 0, 1, "Expected Sprite Raumschiff to face in direction 0 +-1");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 120, 1, "Expected Sprite Schwarzes Loch to face in direction 120 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Mond").direction, 90, 1, "Expected Sprite Mond to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(1).direction, 90, 1, "Expected Clone 1 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(2).direction, 90, 1, "Expected Clone 2 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(3).direction, 90, 1, "Expected Clone 3 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Mond").effects.color, 0, "Expected effect color of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.fisheye, 0, "Expected effect fisheye of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.whirl, 0, "Expected effect whirl of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.pixelate, 0, "Expected effect pixelate of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.mosaic, 0, "Expected effect mosaic of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.brightness, 0, "Expected effect brightness of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.ghost, 0, "Expected effect ghost of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 7, "Expected Sprite Raumschiff to be at layer 7");
  t.assert.equal(t.getSprite("Schwarzes Loch").layerOrder, 1, "Expected Sprite Schwarzes Loch to be at layer 1");
  t.assert.equal(t.getSprite("Stern").layerOrder, 6, "Expected Sprite Stern to be at layer 6");
  t.assert.equal(t.getSprite("Mond").layerOrder, 2, "Expected Sprite Mond to be at layer 2");
  t.assert.equal(t.getSprite("Stern").getClone(1).getLayerOrder(), 3, "Expected Clone 1 of Stern to be at layer 3");
  t.assert.equal(t.getSprite("Stern").getClone(2).getLayerOrder(), 4, "Expected Clone 2 of Stern to be at layer 4");
  t.assert.equal(t.getSprite("Stern").getClone(3).getLayerOrder(), 5, "Expected Clone 3 of Stern to be at layer 5");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -200.51763809020503, 5, "Expected Sprite Raumschiff to have x-position -200.51763809020503 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -167.06814834742187, 5, "Expected Sprite Raumschiff to have y-position -167.06814834742187 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, 4.622501868990582, 5, "Expected Sprite Schwarzes Loch to have x-position 4.622501868990582 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -72.578341604963, 5, "Expected Sprite Schwarzes Loch to have y-position -72.578341604963 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 144, 5, "Expected Sprite Stern to have x-position 144 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 20, 5, "Expected Sprite Stern to have y-position 20 +-5");
  t.assert.withinRange(t.getSprite("Mond").x, 309, 5, "Expected Sprite Mond to have x-position 309 +-5");
  t.assert.withinRange(t.getSprite("Mond").y, -217, 5, "Expected Sprite Mond to have y-position -217 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 140.16666666666666, 5, "Expected Clone 1 of Stern to have x-position 140.16666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 19.733333333333334, 5, "Expected Clone 1 of Stern to have y-position 19.733333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 140.15, 5, "Expected Clone 2 of Stern to have x-position 140.15 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 20.016666666666666, 5, "Expected Clone 2 of Stern to have y-position 20.016666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 140, 5, "Expected Clone 3 of Stern to have x-position 140 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 20, 5, "Expected Clone 3 of Stern to have y-position 20 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Schwarzes Loch").sayText, "Expected Sprite Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Mond").sayText, "Expected Sprite Mond not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(1).sayText, "Expected Clone 1 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(2).sayText, "Expected Clone 2 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(3).sayText, "Expected Clone 3 of Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").size, 80, 1, "Expected Sprite Schwarzes Loch to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Mond").size, 100, 1, "Expected Sprite Mond to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).size, 50, 1, "Expected Clone 1 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).size, 50, 1, "Expected Clone 2 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).size, 50, 1, "Expected Clone 3 of Stern to have size 50 +-1");
  t.assert.equal(t.getSprite("Stern").getVariable("xPosition").value, "140", "Expected xPosition to have value 140 in Sprite Stern");
  t.assert.equal(t.getSprite("Stern").getVariable("yPosition").value, "20", "Expected yPosition to have value 20 in Sprite Stern");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Schwarzes Loch").visible, "Expected Sprite Schwarzes Loch to be visible");
  t.assert.not(t.getSprite("Stern").visible, "Expected Sprite Stern not to be visible");
  t.assert.ok(t.getSprite("Mond").visible, "Expected Sprite Mond to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(1).visible, "Expected Clone 1 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(2).visible, "Expected Clone 2 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(3).visible, "Expected Clone 3 of Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Schwarzes Loch").volume, 100, "Expected Sprite Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Mond").volume, 100, "Expected Sprite Mond to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(1).volume, 100, "Expected Clone 1 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(2).volume, 100, "Expected Clone 2 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(3).volume, 100, "Expected Clone 3 of Stern to have volume 100");
  t.dragSprite('Raumschiff', 240, -177.75477931250765, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").currentCostume, 0, "Expected Sprite Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Mond").currentCostume, 0, "Expected Sprite Mond to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).currentCostume, 0, "Expected Clone 1 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).currentCostume, 0, "Expected Clone 2 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).currentCostume, 0, "Expected Clone 3 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 3, "Expected Sprite Stern to have 3 clones");
  t.assert.equal(t.getSprite("Mond").getCloneCount(), 0, "Expected Sprite Mond to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 0, 1, "Expected Sprite Raumschiff to face in direction 0 +-1");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 130, 1, "Expected Sprite Schwarzes Loch to face in direction 130 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Mond").direction, 90, 1, "Expected Sprite Mond to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(1).direction, 90, 1, "Expected Clone 1 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(2).direction, 90, 1, "Expected Clone 2 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(3).direction, 90, 1, "Expected Clone 3 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Mond").effects.color, 0, "Expected effect color of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.fisheye, 0, "Expected effect fisheye of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.whirl, 0, "Expected effect whirl of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.pixelate, 0, "Expected effect pixelate of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.mosaic, 0, "Expected effect mosaic of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.brightness, 0, "Expected effect brightness of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.ghost, 0, "Expected effect ghost of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 7, "Expected Sprite Raumschiff to be at layer 7");
  t.assert.equal(t.getSprite("Schwarzes Loch").layerOrder, 1, "Expected Sprite Schwarzes Loch to be at layer 1");
  t.assert.equal(t.getSprite("Stern").layerOrder, 6, "Expected Sprite Stern to be at layer 6");
  t.assert.equal(t.getSprite("Mond").layerOrder, 2, "Expected Sprite Mond to be at layer 2");
  t.assert.equal(t.getSprite("Stern").getClone(1).getLayerOrder(), 3, "Expected Clone 1 of Stern to be at layer 3");
  t.assert.equal(t.getSprite("Stern").getClone(2).getLayerOrder(), 4, "Expected Clone 2 of Stern to be at layer 4");
  t.assert.equal(t.getSprite("Stern").getClone(3).getLayerOrder(), 5, "Expected Clone 3 of Stern to be at layer 5");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 239, 5, "Expected Sprite Raumschiff to have x-position 239 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -176.75477931250765, 5, "Expected Sprite Raumschiff to have y-position -176.75477931250765 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, 8.952628887912777, 5, "Expected Sprite Schwarzes Loch to have x-position 8.952628887912777 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -75.078341604963, 5, "Expected Sprite Schwarzes Loch to have y-position -75.078341604963 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 144, 5, "Expected Sprite Stern to have x-position 144 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 20, 5, "Expected Sprite Stern to have y-position 20 +-5");
  t.assert.withinRange(t.getSprite("Mond").x, 309, 5, "Expected Sprite Mond to have x-position 309 +-5");
  t.assert.withinRange(t.getSprite("Mond").y, -217, 5, "Expected Sprite Mond to have y-position -217 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 140.25, 5, "Expected Clone 1 of Stern to have x-position 140.25 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 19.6, 5, "Expected Clone 1 of Stern to have y-position 19.6 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 140.3, 5, "Expected Clone 2 of Stern to have x-position 140.3 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 20.033333333333335, 5, "Expected Clone 2 of Stern to have y-position 20.033333333333335 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 139.73333333333332, 5, "Expected Clone 3 of Stern to have x-position 139.73333333333332 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 20.2, 5, "Expected Clone 3 of Stern to have y-position 20.2 +-5");
  t.assert.equal(t.getSprite("Raumschiff").sayText, "Überstanden!", "Expected Sprite Raumschiff to say Überstanden!");
  t.assert.not(t.getSprite("Schwarzes Loch").sayText, "Expected Sprite Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Mond").sayText, "Expected Sprite Mond not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(1).sayText, "Expected Clone 1 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(2).sayText, "Expected Clone 2 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(3).sayText, "Expected Clone 3 of Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").size, 80, 1, "Expected Sprite Schwarzes Loch to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Mond").size, 100, 1, "Expected Sprite Mond to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).size, 50, 1, "Expected Clone 1 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).size, 50, 1, "Expected Clone 2 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).size, 50, 1, "Expected Clone 3 of Stern to have size 50 +-1");
  t.assert.equal(t.getSprite("Stern").getVariable("xPosition").value, "-210", "Expected xPosition to have value -210 in Sprite Stern");
  t.assert.equal(t.getSprite("Stern").getVariable("yPosition").value, "150", "Expected yPosition to have value 150 in Sprite Stern");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Schwarzes Loch").visible, "Expected Sprite Schwarzes Loch to be visible");
  t.assert.not(t.getSprite("Stern").visible, "Expected Sprite Stern not to be visible");
  t.assert.ok(t.getSprite("Mond").visible, "Expected Sprite Mond to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(1).visible, "Expected Clone 1 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(2).visible, "Expected Clone 2 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(3).visible, "Expected Clone 3 of Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Schwarzes Loch").volume, 100, "Expected Sprite Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Mond").volume, 100, "Expected Sprite Mond to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(1).volume, 100, "Expected Clone 1 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(2).volume, 100, "Expected Clone 2 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(3).volume, 100, "Expected Clone 3 of Stern to have volume 100");
  await t.runForSteps(10);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").currentCostume, 0, "Expected Sprite Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Mond").currentCostume, 0, "Expected Sprite Mond to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).currentCostume, 0, "Expected Clone 1 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).currentCostume, 0, "Expected Clone 2 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).currentCostume, 0, "Expected Clone 3 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).currentCostume, 0, "Expected Clone 4 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).currentCostume, 0, "Expected Clone 5 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).currentCostume, 0, "Expected Clone 6 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 6, "Expected Sprite Stern to have 6 clones");
  t.assert.equal(t.getSprite("Mond").getCloneCount(), 0, "Expected Sprite Mond to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 0, 1, "Expected Sprite Raumschiff to face in direction 0 +-1");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, -120, 1, "Expected Sprite Schwarzes Loch to face in direction -120 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Mond").direction, 90, 1, "Expected Sprite Mond to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(1).direction, 90, 1, "Expected Clone 1 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(2).direction, 90, 1, "Expected Clone 2 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(3).direction, 90, 1, "Expected Clone 3 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(4).direction, 90, 1, "Expected Clone 4 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(5).direction, 90, 1, "Expected Clone 5 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(6).direction, 90, 1, "Expected Clone 6 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Mond").effects.color, 0, "Expected effect color of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.fisheye, 0, "Expected effect fisheye of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.whirl, 0, "Expected effect whirl of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.pixelate, 0, "Expected effect pixelate of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.mosaic, 0, "Expected effect mosaic of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.brightness, 0, "Expected effect brightness of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.ghost, 0, "Expected effect ghost of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.color, 0, "Expected effect color of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.fisheye, 0, "Expected effect fisheye of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.whirl, 0, "Expected effect whirl of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.pixelate, 0, "Expected effect pixelate of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.mosaic, 0, "Expected effect mosaic of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.brightness, 0, "Expected effect brightness of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.ghost, 0, "Expected effect ghost of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.color, 0, "Expected effect color of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.fisheye, 0, "Expected effect fisheye of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.whirl, 0, "Expected effect whirl of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.pixelate, 0, "Expected effect pixelate of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.mosaic, 0, "Expected effect mosaic of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.brightness, 0, "Expected effect brightness of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.ghost, 0, "Expected effect ghost of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.color, 0, "Expected effect color of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.fisheye, 0, "Expected effect fisheye of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.whirl, 0, "Expected effect whirl of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.pixelate, 0, "Expected effect pixelate of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.mosaic, 0, "Expected effect mosaic of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.brightness, 0, "Expected effect brightness of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.ghost, 0, "Expected effect ghost of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 10, "Expected Sprite Raumschiff to be at layer 10");
  t.assert.equal(t.getSprite("Schwarzes Loch").layerOrder, 1, "Expected Sprite Schwarzes Loch to be at layer 1");
  t.assert.equal(t.getSprite("Stern").layerOrder, 9, "Expected Sprite Stern to be at layer 9");
  t.assert.equal(t.getSprite("Mond").layerOrder, 2, "Expected Sprite Mond to be at layer 2");
  t.assert.equal(t.getSprite("Stern").getClone(1).getLayerOrder(), 3, "Expected Clone 1 of Stern to be at layer 3");
  t.assert.equal(t.getSprite("Stern").getClone(2).getLayerOrder(), 4, "Expected Clone 2 of Stern to be at layer 4");
  t.assert.equal(t.getSprite("Stern").getClone(3).getLayerOrder(), 5, "Expected Clone 3 of Stern to be at layer 5");
  t.assert.equal(t.getSprite("Stern").getClone(4).getLayerOrder(), 6, "Expected Clone 4 of Stern to be at layer 6");
  t.assert.equal(t.getSprite("Stern").getClone(5).getLayerOrder(), 7, "Expected Clone 5 of Stern to be at layer 7");
  t.assert.equal(t.getSprite("Stern").getClone(6).getLayerOrder(), 8, "Expected Clone 6 of Stern to be at layer 8");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 239, 5, "Expected Sprite Raumschiff to have x-position 239 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -191.51136023125486, 5, "Expected Sprite Raumschiff to have y-position -191.51136023125486 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, 8.952628887912773, 5, "Expected Sprite Schwarzes Loch to have x-position 8.952628887912773 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -122.07191990884373, 5, "Expected Sprite Schwarzes Loch to have y-position -122.07191990884373 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 144, 5, "Expected Sprite Stern to have x-position 144 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 20, 5, "Expected Sprite Stern to have y-position 20 +-5");
  t.assert.withinRange(t.getSprite("Mond").x, 309, 5, "Expected Sprite Mond to have x-position 309 +-5");
  t.assert.withinRange(t.getSprite("Mond").y, -217, 5, "Expected Sprite Mond to have y-position -217 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 141.16666666666666, 5, "Expected Clone 1 of Stern to have x-position 141.16666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 18.133333333333333, 5, "Expected Clone 1 of Stern to have y-position 18.133333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 141.95, 5, "Expected Clone 2 of Stern to have x-position 141.95 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 20.216666666666665, 5, "Expected Clone 2 of Stern to have y-position 20.216666666666665 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 136.8, 5, "Expected Clone 3 of Stern to have x-position 136.8 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 22.4, 5, "Expected Clone 3 of Stern to have y-position 22.4 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -212.5, 5, "Expected Clone 4 of Stern to have x-position -212.5 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 150.5, 5, "Expected Clone 4 of Stern to have y-position 150.5 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -207.45, 5, "Expected Clone 5 of Stern to have x-position -207.45 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 149.4, 5, "Expected Clone 5 of Stern to have y-position 149.4 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).x, -210.93333333333334, 5, "Expected Clone 6 of Stern to have x-position -210.93333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).y, 150.13333333333333, 5, "Expected Clone 6 of Stern to have y-position 150.13333333333333 +-5");
  t.assert.equal(t.getSprite("Raumschiff").sayText, "Überstanden!", "Expected Sprite Raumschiff to say Überstanden!");
  t.assert.not(t.getSprite("Schwarzes Loch").sayText, "Expected Sprite Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Mond").sayText, "Expected Sprite Mond not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(1).sayText, "Expected Clone 1 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(2).sayText, "Expected Clone 2 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(3).sayText, "Expected Clone 3 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(4).sayText, "Expected Clone 4 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(5).sayText, "Expected Clone 5 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(6).sayText, "Expected Clone 6 of Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").size, 80, 1, "Expected Sprite Schwarzes Loch to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Mond").size, 100, 1, "Expected Sprite Mond to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).size, 50, 1, "Expected Clone 1 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).size, 50, 1, "Expected Clone 2 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).size, 50, 1, "Expected Clone 3 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).size, 50, 1, "Expected Clone 4 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).size, 50, 1, "Expected Clone 5 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).size, 50, 1, "Expected Clone 6 of Stern to have size 50 +-1");
  t.assert.equal(t.getSprite("Stern").getVariable("xPosition").value, "-210", "Expected xPosition to have value -210 in Sprite Stern");
  t.assert.equal(t.getSprite("Stern").getVariable("yPosition").value, "150", "Expected yPosition to have value 150 in Sprite Stern");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Schwarzes Loch").visible, "Expected Sprite Schwarzes Loch to be visible");
  t.assert.not(t.getSprite("Stern").visible, "Expected Sprite Stern not to be visible");
  t.assert.ok(t.getSprite("Mond").visible, "Expected Sprite Mond to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(1).visible, "Expected Clone 1 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(2).visible, "Expected Clone 2 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(3).visible, "Expected Clone 3 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(4).visible, "Expected Clone 4 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(5).visible, "Expected Clone 5 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(6).visible, "Expected Clone 6 of Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Schwarzes Loch").volume, 100, "Expected Sprite Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Mond").volume, 100, "Expected Sprite Mond to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(1).volume, 100, "Expected Clone 1 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(2).volume, 100, "Expected Clone 2 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(3).volume, 100, "Expected Clone 3 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(4).volume, 100, "Expected Clone 4 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(5).volume, 100, "Expected Clone 5 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(6).volume, 100, "Expected Clone 6 of Stern to have volume 100");
  t.keyPress('right arrow', 2);
  await t.runForSteps(2);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").currentCostume, 0, "Expected Sprite Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Mond").currentCostume, 0, "Expected Sprite Mond to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).currentCostume, 0, "Expected Clone 1 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).currentCostume, 0, "Expected Clone 2 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).currentCostume, 0, "Expected Clone 3 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).currentCostume, 0, "Expected Clone 4 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).currentCostume, 0, "Expected Clone 5 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).currentCostume, 0, "Expected Clone 6 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 6, "Expected Sprite Stern to have 6 clones");
  t.assert.equal(t.getSprite("Mond").getCloneCount(), 0, "Expected Sprite Mond to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 30, 1, "Expected Sprite Raumschiff to face in direction 30 +-1");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, -90, 1, "Expected Sprite Schwarzes Loch to face in direction -90 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Mond").direction, 90, 1, "Expected Sprite Mond to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(1).direction, 90, 1, "Expected Clone 1 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(2).direction, 90, 1, "Expected Clone 2 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(3).direction, 90, 1, "Expected Clone 3 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(4).direction, 90, 1, "Expected Clone 4 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(5).direction, 90, 1, "Expected Clone 5 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(6).direction, 90, 1, "Expected Clone 6 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Mond").effects.color, 0, "Expected effect color of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.fisheye, 0, "Expected effect fisheye of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.whirl, 0, "Expected effect whirl of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.pixelate, 0, "Expected effect pixelate of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.mosaic, 0, "Expected effect mosaic of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.brightness, 0, "Expected effect brightness of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.ghost, 0, "Expected effect ghost of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.color, 0, "Expected effect color of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.fisheye, 0, "Expected effect fisheye of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.whirl, 0, "Expected effect whirl of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.pixelate, 0, "Expected effect pixelate of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.mosaic, 0, "Expected effect mosaic of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.brightness, 0, "Expected effect brightness of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.ghost, 0, "Expected effect ghost of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.color, 0, "Expected effect color of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.fisheye, 0, "Expected effect fisheye of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.whirl, 0, "Expected effect whirl of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.pixelate, 0, "Expected effect pixelate of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.mosaic, 0, "Expected effect mosaic of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.brightness, 0, "Expected effect brightness of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.ghost, 0, "Expected effect ghost of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.color, 0, "Expected effect color of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.fisheye, 0, "Expected effect fisheye of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.whirl, 0, "Expected effect whirl of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.pixelate, 0, "Expected effect pixelate of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.mosaic, 0, "Expected effect mosaic of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.brightness, 0, "Expected effect brightness of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.ghost, 0, "Expected effect ghost of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 10, "Expected Sprite Raumschiff to be at layer 10");
  t.assert.equal(t.getSprite("Schwarzes Loch").layerOrder, 1, "Expected Sprite Schwarzes Loch to be at layer 1");
  t.assert.equal(t.getSprite("Stern").layerOrder, 9, "Expected Sprite Stern to be at layer 9");
  t.assert.equal(t.getSprite("Mond").layerOrder, 2, "Expected Sprite Mond to be at layer 2");
  t.assert.equal(t.getSprite("Stern").getClone(1).getLayerOrder(), 3, "Expected Clone 1 of Stern to be at layer 3");
  t.assert.equal(t.getSprite("Stern").getClone(2).getLayerOrder(), 4, "Expected Clone 2 of Stern to be at layer 4");
  t.assert.equal(t.getSprite("Stern").getClone(3).getLayerOrder(), 5, "Expected Clone 3 of Stern to be at layer 5");
  t.assert.equal(t.getSprite("Stern").getClone(4).getLayerOrder(), 6, "Expected Clone 4 of Stern to be at layer 6");
  t.assert.equal(t.getSprite("Stern").getClone(5).getLayerOrder(), 7, "Expected Clone 5 of Stern to be at layer 7");
  t.assert.equal(t.getSprite("Stern").getClone(6).getLayerOrder(), 8, "Expected Clone 6 of Stern to be at layer 8");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 251, 5, "Expected Sprite Raumschiff to have x-position 251 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -195.5358823000041, 5, "Expected Sprite Raumschiff to have y-position -195.5358823000041 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, -5.000000000000002, 5, "Expected Sprite Schwarzes Loch to have x-position -5.000000000000002 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -127.15026151380673, 5, "Expected Sprite Schwarzes Loch to have y-position -127.15026151380673 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 144, 5, "Expected Sprite Stern to have x-position 144 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 20, 5, "Expected Sprite Stern to have y-position 20 +-5");
  t.assert.withinRange(t.getSprite("Mond").x, 309, 5, "Expected Sprite Mond to have x-position 309 +-5");
  t.assert.withinRange(t.getSprite("Mond").y, -217, 5, "Expected Sprite Mond to have y-position -217 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 141.41666666666666, 5, "Expected Clone 1 of Stern to have x-position 141.41666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 17.733333333333334, 5, "Expected Clone 1 of Stern to have y-position 17.733333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 142.4, 5, "Expected Clone 2 of Stern to have x-position 142.4 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 20.266666666666666, 5, "Expected Clone 2 of Stern to have y-position 20.266666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 136, 5, "Expected Clone 3 of Stern to have x-position 136 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 23, 5, "Expected Clone 3 of Stern to have y-position 23 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -213.25, 5, "Expected Clone 4 of Stern to have x-position -213.25 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 150.65, 5, "Expected Clone 4 of Stern to have y-position 150.65 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -206.6, 5, "Expected Clone 5 of Stern to have x-position -206.6 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 149.2, 5, "Expected Clone 5 of Stern to have y-position 149.2 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).x, -211.28333333333333, 5, "Expected Clone 6 of Stern to have x-position -211.28333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).y, 150.18333333333334, 5, "Expected Clone 6 of Stern to have y-position 150.18333333333334 +-5");
  t.assert.equal(t.getSprite("Raumschiff").sayText, "Überstanden!", "Expected Sprite Raumschiff to say Überstanden!");
  t.assert.not(t.getSprite("Schwarzes Loch").sayText, "Expected Sprite Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Mond").sayText, "Expected Sprite Mond not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(1).sayText, "Expected Clone 1 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(2).sayText, "Expected Clone 2 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(3).sayText, "Expected Clone 3 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(4).sayText, "Expected Clone 4 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(5).sayText, "Expected Clone 5 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(6).sayText, "Expected Clone 6 of Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").size, 80, 1, "Expected Sprite Schwarzes Loch to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Mond").size, 100, 1, "Expected Sprite Mond to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).size, 50, 1, "Expected Clone 1 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).size, 50, 1, "Expected Clone 2 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).size, 50, 1, "Expected Clone 3 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).size, 50, 1, "Expected Clone 4 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).size, 50, 1, "Expected Clone 5 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).size, 50, 1, "Expected Clone 6 of Stern to have size 50 +-1");
  t.assert.equal(t.getSprite("Stern").getVariable("xPosition").value, "-210", "Expected xPosition to have value -210 in Sprite Stern");
  t.assert.equal(t.getSprite("Stern").getVariable("yPosition").value, "150", "Expected yPosition to have value 150 in Sprite Stern");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Schwarzes Loch").visible, "Expected Sprite Schwarzes Loch to be visible");
  t.assert.not(t.getSprite("Stern").visible, "Expected Sprite Stern not to be visible");
  t.assert.ok(t.getSprite("Mond").visible, "Expected Sprite Mond to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(1).visible, "Expected Clone 1 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(2).visible, "Expected Clone 2 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(3).visible, "Expected Clone 3 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(4).visible, "Expected Clone 4 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(5).visible, "Expected Clone 5 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(6).visible, "Expected Clone 6 of Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Schwarzes Loch").volume, 100, "Expected Sprite Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Mond").volume, 100, "Expected Sprite Mond to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(1).volume, 100, "Expected Clone 1 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(2).volume, 100, "Expected Clone 2 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(3).volume, 100, "Expected Clone 3 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(4).volume, 100, "Expected Clone 4 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(5).volume, 100, "Expected Clone 5 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(6).volume, 100, "Expected Clone 6 of Stern to have volume 100");
  t.keyPress('right arrow', 4);
  await t.runForSteps(4);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").currentCostume, 0, "Expected Sprite Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Mond").currentCostume, 0, "Expected Sprite Mond to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).currentCostume, 0, "Expected Clone 1 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).currentCostume, 0, "Expected Clone 2 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).currentCostume, 0, "Expected Clone 3 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).currentCostume, 0, "Expected Clone 4 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).currentCostume, 0, "Expected Clone 5 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).currentCostume, 0, "Expected Clone 6 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 6, "Expected Sprite Stern to have 6 clones");
  t.assert.equal(t.getSprite("Mond").getCloneCount(), 0, "Expected Sprite Mond to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 90, 1, "Expected Sprite Raumschiff to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, -40, 1, "Expected Sprite Schwarzes Loch to face in direction -40 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Mond").direction, 90, 1, "Expected Sprite Mond to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(1).direction, 90, 1, "Expected Clone 1 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(2).direction, 90, 1, "Expected Clone 2 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(3).direction, 90, 1, "Expected Clone 3 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(4).direction, 90, 1, "Expected Clone 4 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(5).direction, 90, 1, "Expected Clone 5 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(6).direction, 90, 1, "Expected Clone 6 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Mond").effects.color, 0, "Expected effect color of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.fisheye, 0, "Expected effect fisheye of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.whirl, 0, "Expected effect whirl of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.pixelate, 0, "Expected effect pixelate of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.mosaic, 0, "Expected effect mosaic of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.brightness, 0, "Expected effect brightness of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.ghost, 0, "Expected effect ghost of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.color, 0, "Expected effect color of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.fisheye, 0, "Expected effect fisheye of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.whirl, 0, "Expected effect whirl of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.pixelate, 0, "Expected effect pixelate of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.mosaic, 0, "Expected effect mosaic of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.brightness, 0, "Expected effect brightness of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.ghost, 0, "Expected effect ghost of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.color, 0, "Expected effect color of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.fisheye, 0, "Expected effect fisheye of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.whirl, 0, "Expected effect whirl of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.pixelate, 0, "Expected effect pixelate of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.mosaic, 0, "Expected effect mosaic of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.brightness, 0, "Expected effect brightness of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.ghost, 0, "Expected effect ghost of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.color, 0, "Expected effect color of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.fisheye, 0, "Expected effect fisheye of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.whirl, 0, "Expected effect whirl of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.pixelate, 0, "Expected effect pixelate of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.mosaic, 0, "Expected effect mosaic of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.brightness, 0, "Expected effect brightness of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.ghost, 0, "Expected effect ghost of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 10, "Expected Sprite Raumschiff to be at layer 10");
  t.assert.equal(t.getSprite("Schwarzes Loch").layerOrder, 1, "Expected Sprite Schwarzes Loch to be at layer 1");
  t.assert.equal(t.getSprite("Stern").layerOrder, 9, "Expected Sprite Stern to be at layer 9");
  t.assert.equal(t.getSprite("Mond").layerOrder, 2, "Expected Sprite Mond to be at layer 2");
  t.assert.equal(t.getSprite("Stern").getClone(1).getLayerOrder(), 3, "Expected Clone 1 of Stern to be at layer 3");
  t.assert.equal(t.getSprite("Stern").getClone(2).getLayerOrder(), 4, "Expected Clone 2 of Stern to be at layer 4");
  t.assert.equal(t.getSprite("Stern").getClone(3).getLayerOrder(), 5, "Expected Clone 3 of Stern to be at layer 5");
  t.assert.equal(t.getSprite("Stern").getClone(4).getLayerOrder(), 6, "Expected Clone 4 of Stern to be at layer 6");
  t.assert.equal(t.getSprite("Stern").getClone(5).getLayerOrder(), 7, "Expected Clone 5 of Stern to be at layer 7");
  t.assert.equal(t.getSprite("Stern").getClone(6).getLayerOrder(), 8, "Expected Clone 6 of Stern to be at layer 8");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 253, 5, "Expected Sprite Raumschiff to have x-position 253 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -179, 5, "Expected Sprite Raumschiff to have y-position -179 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, -27.782851103507667, 5, "Expected Sprite Schwarzes Loch to have x-position -27.782851103507667 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -118.85798186041103, 5, "Expected Sprite Schwarzes Loch to have y-position -118.85798186041103 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 144, 5, "Expected Sprite Stern to have x-position 144 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 20, 5, "Expected Sprite Stern to have y-position 20 +-5");
  t.assert.withinRange(t.getSprite("Mond").x, 309, 5, "Expected Sprite Mond to have x-position 309 +-5");
  t.assert.withinRange(t.getSprite("Mond").y, -217, 5, "Expected Sprite Mond to have y-position -217 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 141.83333333333334, 5, "Expected Clone 1 of Stern to have x-position 141.83333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 17.066666666666666, 5, "Expected Clone 1 of Stern to have y-position 17.066666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 143.15, 5, "Expected Clone 2 of Stern to have x-position 143.15 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 20.35, 5, "Expected Clone 2 of Stern to have y-position 20.35 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 134.66666666666666, 5, "Expected Clone 3 of Stern to have x-position 134.66666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 24, 5, "Expected Clone 3 of Stern to have y-position 24 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -214.5, 5, "Expected Clone 4 of Stern to have x-position -214.5 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 150.9, 5, "Expected Clone 4 of Stern to have y-position 150.9 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -205.18333333333334, 5, "Expected Clone 5 of Stern to have x-position -205.18333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 148.86666666666667, 5, "Expected Clone 5 of Stern to have y-position 148.86666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).x, -211.86666666666667, 5, "Expected Clone 6 of Stern to have x-position -211.86666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).y, 150.26666666666668, 5, "Expected Clone 6 of Stern to have y-position 150.26666666666668 +-5");
  t.assert.equal(t.getSprite("Raumschiff").sayText, "Überstanden!", "Expected Sprite Raumschiff to say Überstanden!");
  t.assert.not(t.getSprite("Schwarzes Loch").sayText, "Expected Sprite Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Mond").sayText, "Expected Sprite Mond not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(1).sayText, "Expected Clone 1 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(2).sayText, "Expected Clone 2 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(3).sayText, "Expected Clone 3 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(4).sayText, "Expected Clone 4 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(5).sayText, "Expected Clone 5 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(6).sayText, "Expected Clone 6 of Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").size, 80, 1, "Expected Sprite Schwarzes Loch to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Mond").size, 100, 1, "Expected Sprite Mond to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).size, 50, 1, "Expected Clone 1 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).size, 50, 1, "Expected Clone 2 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).size, 50, 1, "Expected Clone 3 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).size, 50, 1, "Expected Clone 4 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).size, 50, 1, "Expected Clone 5 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).size, 50, 1, "Expected Clone 6 of Stern to have size 50 +-1");
  t.assert.equal(t.getSprite("Stern").getVariable("xPosition").value, "-210", "Expected xPosition to have value -210 in Sprite Stern");
  t.assert.equal(t.getSprite("Stern").getVariable("yPosition").value, "150", "Expected yPosition to have value 150 in Sprite Stern");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Schwarzes Loch").visible, "Expected Sprite Schwarzes Loch to be visible");
  t.assert.not(t.getSprite("Stern").visible, "Expected Sprite Stern not to be visible");
  t.assert.ok(t.getSprite("Mond").visible, "Expected Sprite Mond to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(1).visible, "Expected Clone 1 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(2).visible, "Expected Clone 2 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(3).visible, "Expected Clone 3 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(4).visible, "Expected Clone 4 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(5).visible, "Expected Clone 5 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(6).visible, "Expected Clone 6 of Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Schwarzes Loch").volume, 100, "Expected Sprite Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Mond").volume, 100, "Expected Sprite Mond to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(1).volume, 100, "Expected Clone 1 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(2).volume, 100, "Expected Clone 2 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(3).volume, 100, "Expected Clone 3 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(4).volume, 100, "Expected Clone 4 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(5).volume, 100, "Expected Clone 5 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(6).volume, 100, "Expected Clone 6 of Stern to have volume 100");
  await t.runForSteps(13);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").currentCostume, 0, "Expected Sprite Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Mond").currentCostume, 0, "Expected Sprite Mond to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).currentCostume, 0, "Expected Clone 1 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).currentCostume, 0, "Expected Clone 2 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).currentCostume, 0, "Expected Clone 3 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).currentCostume, 0, "Expected Clone 4 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).currentCostume, 0, "Expected Clone 5 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).currentCostume, 0, "Expected Clone 6 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 6, "Expected Sprite Stern to have 6 clones");
  t.assert.equal(t.getSprite("Mond").getCloneCount(), 0, "Expected Sprite Mond to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 90, 1, "Expected Sprite Raumschiff to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 100, 1, "Expected Sprite Schwarzes Loch to face in direction 100 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Mond").direction, 90, 1, "Expected Sprite Mond to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(1).direction, 90, 1, "Expected Clone 1 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(2).direction, 90, 1, "Expected Clone 2 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(3).direction, 90, 1, "Expected Clone 3 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(4).direction, 90, 1, "Expected Clone 4 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(5).direction, 90, 1, "Expected Clone 5 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(6).direction, 90, 1, "Expected Clone 6 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Mond").effects.color, 0, "Expected effect color of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.fisheye, 0, "Expected effect fisheye of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.whirl, 0, "Expected effect whirl of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.pixelate, 0, "Expected effect pixelate of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.mosaic, 0, "Expected effect mosaic of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.brightness, 0, "Expected effect brightness of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.ghost, 0, "Expected effect ghost of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.color, 0, "Expected effect color of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.fisheye, 0, "Expected effect fisheye of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.whirl, 0, "Expected effect whirl of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.pixelate, 0, "Expected effect pixelate of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.mosaic, 0, "Expected effect mosaic of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.brightness, 0, "Expected effect brightness of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.ghost, 0, "Expected effect ghost of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.color, 0, "Expected effect color of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.fisheye, 0, "Expected effect fisheye of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.whirl, 0, "Expected effect whirl of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.pixelate, 0, "Expected effect pixelate of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.mosaic, 0, "Expected effect mosaic of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.brightness, 0, "Expected effect brightness of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.ghost, 0, "Expected effect ghost of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.color, 0, "Expected effect color of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.fisheye, 0, "Expected effect fisheye of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.whirl, 0, "Expected effect whirl of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.pixelate, 0, "Expected effect pixelate of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.mosaic, 0, "Expected effect mosaic of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.brightness, 0, "Expected effect brightness of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.ghost, 0, "Expected effect ghost of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 10, "Expected Sprite Raumschiff to be at layer 10");
  t.assert.equal(t.getSprite("Schwarzes Loch").layerOrder, 1, "Expected Sprite Schwarzes Loch to be at layer 1");
  t.assert.equal(t.getSprite("Stern").layerOrder, 9, "Expected Sprite Stern to be at layer 9");
  t.assert.equal(t.getSprite("Mond").layerOrder, 2, "Expected Sprite Mond to be at layer 2");
  t.assert.equal(t.getSprite("Stern").getClone(1).getLayerOrder(), 3, "Expected Clone 1 of Stern to be at layer 3");
  t.assert.equal(t.getSprite("Stern").getClone(2).getLayerOrder(), 4, "Expected Clone 2 of Stern to be at layer 4");
  t.assert.equal(t.getSprite("Stern").getClone(3).getLayerOrder(), 5, "Expected Clone 3 of Stern to be at layer 5");
  t.assert.equal(t.getSprite("Stern").getClone(4).getLayerOrder(), 6, "Expected Clone 4 of Stern to be at layer 6");
  t.assert.equal(t.getSprite("Stern").getClone(5).getLayerOrder(), 7, "Expected Clone 5 of Stern to be at layer 7");
  t.assert.equal(t.getSprite("Stern").getClone(6).getLayerOrder(), 8, "Expected Clone 6 of Stern to be at layer 8");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 253, 5, "Expected Sprite Raumschiff to have x-position 253 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -179, 5, "Expected Sprite Raumschiff to have y-position -179 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, -5, 5, "Expected Sprite Schwarzes Loch to have x-position -5 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -70, 5, "Expected Sprite Schwarzes Loch to have y-position -70 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 144, 5, "Expected Sprite Stern to have x-position 144 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 20, 5, "Expected Sprite Stern to have y-position 20 +-5");
  t.assert.withinRange(t.getSprite("Mond").x, 309, 5, "Expected Sprite Mond to have x-position 309 +-5");
  t.assert.withinRange(t.getSprite("Mond").y, -217, 5, "Expected Sprite Mond to have y-position -217 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 143, 5, "Expected Clone 1 of Stern to have x-position 143 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 15.2, 5, "Expected Clone 1 of Stern to have y-position 15.2 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 145.25, 5, "Expected Clone 2 of Stern to have x-position 145.25 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 20.583333333333332, 5, "Expected Clone 2 of Stern to have y-position 20.583333333333332 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 130.93333333333334, 5, "Expected Clone 3 of Stern to have x-position 130.93333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 26.8, 5, "Expected Clone 3 of Stern to have y-position 26.8 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -218, 5, "Expected Clone 4 of Stern to have x-position -218 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 151.6, 5, "Expected Clone 4 of Stern to have y-position 151.6 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -201.21666666666667, 5, "Expected Clone 5 of Stern to have x-position -201.21666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 147.93333333333334, 5, "Expected Clone 5 of Stern to have y-position 147.93333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).x, -213.5, 5, "Expected Clone 6 of Stern to have x-position -213.5 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).y, 150.5, 5, "Expected Clone 6 of Stern to have y-position 150.5 +-5");
  t.assert.equal(t.getSprite("Raumschiff").sayText, "Überstanden!", "Expected Sprite Raumschiff to say Überstanden!");
  t.assert.not(t.getSprite("Schwarzes Loch").sayText, "Expected Sprite Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Mond").sayText, "Expected Sprite Mond not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(1).sayText, "Expected Clone 1 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(2).sayText, "Expected Clone 2 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(3).sayText, "Expected Clone 3 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(4).sayText, "Expected Clone 4 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(5).sayText, "Expected Clone 5 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(6).sayText, "Expected Clone 6 of Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").size, 80, 1, "Expected Sprite Schwarzes Loch to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Mond").size, 100, 1, "Expected Sprite Mond to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).size, 50, 1, "Expected Clone 1 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).size, 50, 1, "Expected Clone 2 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).size, 50, 1, "Expected Clone 3 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).size, 50, 1, "Expected Clone 4 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).size, 50, 1, "Expected Clone 5 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).size, 50, 1, "Expected Clone 6 of Stern to have size 50 +-1");
  t.assert.equal(t.getSprite("Stern").getVariable("xPosition").value, "-210", "Expected xPosition to have value -210 in Sprite Stern");
  t.assert.equal(t.getSprite("Stern").getVariable("yPosition").value, "150", "Expected yPosition to have value 150 in Sprite Stern");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Schwarzes Loch").visible, "Expected Sprite Schwarzes Loch to be visible");
  t.assert.not(t.getSprite("Stern").visible, "Expected Sprite Stern not to be visible");
  t.assert.ok(t.getSprite("Mond").visible, "Expected Sprite Mond to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(1).visible, "Expected Clone 1 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(2).visible, "Expected Clone 2 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(3).visible, "Expected Clone 3 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(4).visible, "Expected Clone 4 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(5).visible, "Expected Clone 5 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(6).visible, "Expected Clone 6 of Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Schwarzes Loch").volume, 100, "Expected Sprite Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Mond").volume, 100, "Expected Sprite Mond to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(1).volume, 100, "Expected Clone 1 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(2).volume, 100, "Expected Clone 2 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(3).volume, 100, "Expected Clone 3 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(4).volume, 100, "Expected Clone 4 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(5).volume, 100, "Expected Clone 5 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(6).volume, 100, "Expected Clone 6 of Stern to have volume 100");
  await t.runForSteps(52);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").currentCostume, 0, "Expected Sprite Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Mond").currentCostume, 0, "Expected Sprite Mond to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).currentCostume, 0, "Expected Clone 1 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).currentCostume, 0, "Expected Clone 2 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).currentCostume, 0, "Expected Clone 3 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).currentCostume, 0, "Expected Clone 4 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).currentCostume, 0, "Expected Clone 5 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).currentCostume, 0, "Expected Clone 6 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 6, "Expected Sprite Stern to have 6 clones");
  t.assert.equal(t.getSprite("Mond").getCloneCount(), 0, "Expected Sprite Mond to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 90, 1, "Expected Sprite Raumschiff to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, -90, 1, "Expected Sprite Schwarzes Loch to face in direction -90 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Mond").direction, 90, 1, "Expected Sprite Mond to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(1).direction, 90, 1, "Expected Clone 1 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(2).direction, 90, 1, "Expected Clone 2 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(3).direction, 90, 1, "Expected Clone 3 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(4).direction, 90, 1, "Expected Clone 4 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(5).direction, 90, 1, "Expected Clone 5 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(6).direction, 90, 1, "Expected Clone 6 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Mond").effects.color, 0, "Expected effect color of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.fisheye, 0, "Expected effect fisheye of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.whirl, 0, "Expected effect whirl of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.pixelate, 0, "Expected effect pixelate of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.mosaic, 0, "Expected effect mosaic of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.brightness, 0, "Expected effect brightness of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.ghost, 0, "Expected effect ghost of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.color, 0, "Expected effect color of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.fisheye, 0, "Expected effect fisheye of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.whirl, 0, "Expected effect whirl of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.pixelate, 0, "Expected effect pixelate of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.mosaic, 0, "Expected effect mosaic of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.brightness, 0, "Expected effect brightness of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.ghost, 0, "Expected effect ghost of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.color, 0, "Expected effect color of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.fisheye, 0, "Expected effect fisheye of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.whirl, 0, "Expected effect whirl of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.pixelate, 0, "Expected effect pixelate of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.mosaic, 0, "Expected effect mosaic of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.brightness, 0, "Expected effect brightness of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.ghost, 0, "Expected effect ghost of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.color, 0, "Expected effect color of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.fisheye, 0, "Expected effect fisheye of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.whirl, 0, "Expected effect whirl of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.pixelate, 0, "Expected effect pixelate of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.mosaic, 0, "Expected effect mosaic of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.brightness, 0, "Expected effect brightness of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.ghost, 0, "Expected effect ghost of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 10, "Expected Sprite Raumschiff to be at layer 10");
  t.assert.equal(t.getSprite("Schwarzes Loch").layerOrder, 1, "Expected Sprite Schwarzes Loch to be at layer 1");
  t.assert.equal(t.getSprite("Stern").layerOrder, 9, "Expected Sprite Stern to be at layer 9");
  t.assert.equal(t.getSprite("Mond").layerOrder, 2, "Expected Sprite Mond to be at layer 2");
  t.assert.equal(t.getSprite("Stern").getClone(1).getLayerOrder(), 3, "Expected Clone 1 of Stern to be at layer 3");
  t.assert.equal(t.getSprite("Stern").getClone(2).getLayerOrder(), 4, "Expected Clone 2 of Stern to be at layer 4");
  t.assert.equal(t.getSprite("Stern").getClone(3).getLayerOrder(), 5, "Expected Clone 3 of Stern to be at layer 5");
  t.assert.equal(t.getSprite("Stern").getClone(4).getLayerOrder(), 6, "Expected Clone 4 of Stern to be at layer 6");
  t.assert.equal(t.getSprite("Stern").getClone(5).getLayerOrder(), 7, "Expected Clone 5 of Stern to be at layer 7");
  t.assert.equal(t.getSprite("Stern").getClone(6).getLayerOrder(), 8, "Expected Clone 6 of Stern to be at layer 8");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 253, 5, "Expected Sprite Raumschiff to have x-position 253 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -179, 5, "Expected Sprite Raumschiff to have y-position -179 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, -5.000000000000002, 5, "Expected Sprite Schwarzes Loch to have x-position -5.000000000000002 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -127.15026151380673, 5, "Expected Sprite Schwarzes Loch to have y-position -127.15026151380673 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 144, 5, "Expected Sprite Stern to have x-position 144 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 20, 5, "Expected Sprite Stern to have y-position 20 +-5");
  t.assert.withinRange(t.getSprite("Mond").x, 309, 5, "Expected Sprite Mond to have x-position 309 +-5");
  t.assert.withinRange(t.getSprite("Mond").y, -217, 5, "Expected Sprite Mond to have y-position -217 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 138.46666666666667, 5, "Expected Clone 1 of Stern to have x-position 138.46666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 11.066666666666666, 5, "Expected Clone 1 of Stern to have y-position 11.066666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 140.45, 5, "Expected Clone 2 of Stern to have x-position 140.45 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 23.7, 5, "Expected Clone 2 of Stern to have y-position 23.7 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 130.5, 5, "Expected Clone 3 of Stern to have x-position 130.5 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 35.46666666666667, 5, "Expected Clone 3 of Stern to have y-position 35.46666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -212.6, 5, "Expected Clone 4 of Stern to have x-position -212.6 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 147.8, 5, "Expected Clone 4 of Stern to have y-position 147.8 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -193.38333333333333, 5, "Expected Clone 5 of Stern to have x-position -193.38333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 144.85, 5, "Expected Clone 5 of Stern to have y-position 144.85 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).x, -217.73333333333332, 5, "Expected Clone 6 of Stern to have x-position -217.73333333333332 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).y, 152.46666666666667, 5, "Expected Clone 6 of Stern to have y-position 152.46666666666667 +-5");
  t.assert.equal(t.getSprite("Raumschiff").sayText, "Überstanden!", "Expected Sprite Raumschiff to say Überstanden!");
  t.assert.not(t.getSprite("Schwarzes Loch").sayText, "Expected Sprite Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Mond").sayText, "Expected Sprite Mond not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(1).sayText, "Expected Clone 1 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(2).sayText, "Expected Clone 2 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(3).sayText, "Expected Clone 3 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(4).sayText, "Expected Clone 4 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(5).sayText, "Expected Clone 5 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(6).sayText, "Expected Clone 6 of Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").size, 80, 1, "Expected Sprite Schwarzes Loch to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Mond").size, 100, 1, "Expected Sprite Mond to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).size, 50, 1, "Expected Clone 1 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).size, 50, 1, "Expected Clone 2 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).size, 50, 1, "Expected Clone 3 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).size, 50, 1, "Expected Clone 4 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).size, 50, 1, "Expected Clone 5 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).size, 50, 1, "Expected Clone 6 of Stern to have size 50 +-1");
  t.assert.equal(t.getSprite("Stern").getVariable("xPosition").value, "-210", "Expected xPosition to have value -210 in Sprite Stern");
  t.assert.equal(t.getSprite("Stern").getVariable("yPosition").value, "150", "Expected yPosition to have value 150 in Sprite Stern");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Schwarzes Loch").visible, "Expected Sprite Schwarzes Loch to be visible");
  t.assert.not(t.getSprite("Stern").visible, "Expected Sprite Stern not to be visible");
  t.assert.ok(t.getSprite("Mond").visible, "Expected Sprite Mond to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(1).visible, "Expected Clone 1 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(2).visible, "Expected Clone 2 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(3).visible, "Expected Clone 3 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(4).visible, "Expected Clone 4 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(5).visible, "Expected Clone 5 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(6).visible, "Expected Clone 6 of Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Schwarzes Loch").volume, 100, "Expected Sprite Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Mond").volume, 100, "Expected Sprite Mond to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(1).volume, 100, "Expected Clone 1 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(2).volume, 100, "Expected Clone 2 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(3).volume, 100, "Expected Clone 3 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(4).volume, 100, "Expected Clone 4 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(5).volume, 100, "Expected Clone 5 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(6).volume, 100, "Expected Clone 6 of Stern to have volume 100");
  t.keyPress('right arrow', 3);
  await t.runForSteps(3);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").currentCostume, 0, "Expected Sprite Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Mond").currentCostume, 0, "Expected Sprite Mond to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).currentCostume, 0, "Expected Clone 1 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).currentCostume, 0, "Expected Clone 2 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).currentCostume, 0, "Expected Clone 3 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).currentCostume, 0, "Expected Clone 4 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).currentCostume, 0, "Expected Clone 5 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).currentCostume, 0, "Expected Clone 6 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 6, "Expected Sprite Stern to have 6 clones");
  t.assert.equal(t.getSprite("Mond").getCloneCount(), 0, "Expected Sprite Mond to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 135, 1, "Expected Sprite Raumschiff to face in direction 135 +-1");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, -50, 1, "Expected Sprite Schwarzes Loch to face in direction -50 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Mond").direction, 90, 1, "Expected Sprite Mond to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(1).direction, 90, 1, "Expected Clone 1 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(2).direction, 90, 1, "Expected Clone 2 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(3).direction, 90, 1, "Expected Clone 3 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(4).direction, 90, 1, "Expected Clone 4 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(5).direction, 90, 1, "Expected Clone 5 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(6).direction, 90, 1, "Expected Clone 6 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Mond").effects.color, 0, "Expected effect color of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.fisheye, 0, "Expected effect fisheye of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.whirl, 0, "Expected effect whirl of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.pixelate, 0, "Expected effect pixelate of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.mosaic, 0, "Expected effect mosaic of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.brightness, 0, "Expected effect brightness of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.ghost, 0, "Expected effect ghost of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.color, 0, "Expected effect color of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.fisheye, 0, "Expected effect fisheye of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.whirl, 0, "Expected effect whirl of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.pixelate, 0, "Expected effect pixelate of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.mosaic, 0, "Expected effect mosaic of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.brightness, 0, "Expected effect brightness of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.ghost, 0, "Expected effect ghost of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.color, 0, "Expected effect color of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.fisheye, 0, "Expected effect fisheye of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.whirl, 0, "Expected effect whirl of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.pixelate, 0, "Expected effect pixelate of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.mosaic, 0, "Expected effect mosaic of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.brightness, 0, "Expected effect brightness of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.ghost, 0, "Expected effect ghost of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.color, 0, "Expected effect color of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.fisheye, 0, "Expected effect fisheye of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.whirl, 0, "Expected effect whirl of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.pixelate, 0, "Expected effect pixelate of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.mosaic, 0, "Expected effect mosaic of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.brightness, 0, "Expected effect brightness of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.ghost, 0, "Expected effect ghost of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 10, "Expected Sprite Raumschiff to be at layer 10");
  t.assert.equal(t.getSprite("Schwarzes Loch").layerOrder, 1, "Expected Sprite Schwarzes Loch to be at layer 1");
  t.assert.equal(t.getSprite("Stern").layerOrder, 9, "Expected Sprite Stern to be at layer 9");
  t.assert.equal(t.getSprite("Mond").layerOrder, 2, "Expected Sprite Mond to be at layer 2");
  t.assert.equal(t.getSprite("Stern").getClone(1).getLayerOrder(), 3, "Expected Clone 1 of Stern to be at layer 3");
  t.assert.equal(t.getSprite("Stern").getClone(2).getLayerOrder(), 4, "Expected Clone 2 of Stern to be at layer 4");
  t.assert.equal(t.getSprite("Stern").getClone(3).getLayerOrder(), 5, "Expected Clone 3 of Stern to be at layer 5");
  t.assert.equal(t.getSprite("Stern").getClone(4).getLayerOrder(), 6, "Expected Clone 4 of Stern to be at layer 6");
  t.assert.equal(t.getSprite("Stern").getClone(5).getLayerOrder(), 7, "Expected Clone 5 of Stern to be at layer 7");
  t.assert.equal(t.getSprite("Stern").getClone(6).getLayerOrder(), 8, "Expected Clone 6 of Stern to be at layer 8");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 255.53905801126007, 5, "Expected Sprite Raumschiff to have x-position 255.53905801126007 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -180.46592582628907, 5, "Expected Sprite Raumschiff to have y-position -180.46592582628907 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, -23.952628887912777, 5, "Expected Sprite Schwarzes Loch to have x-position -23.952628887912777 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -122.07191990884373, 5, "Expected Sprite Schwarzes Loch to have y-position -122.07191990884373 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 144, 5, "Expected Sprite Stern to have x-position 144 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 20, 5, "Expected Sprite Stern to have y-position 20 +-5");
  t.assert.withinRange(t.getSprite("Mond").x, 309, 5, "Expected Sprite Mond to have x-position 309 +-5");
  t.assert.withinRange(t.getSprite("Mond").y, -217, 5, "Expected Sprite Mond to have y-position -217 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 137.53333333333333, 5, "Expected Clone 1 of Stern to have x-position 137.53333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 10.933333333333334, 5, "Expected Clone 1 of Stern to have y-position 10.933333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 139.18333333333334, 5, "Expected Clone 2 of Stern to have x-position 139.18333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 24.1, 5, "Expected Clone 2 of Stern to have y-position 24.1 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 131.5, 5, "Expected Clone 3 of Stern to have x-position 131.5 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 36, 5, "Expected Clone 3 of Stern to have y-position 36 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -210.53333333333333, 5, "Expected Clone 4 of Stern to have x-position -210.53333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 146.93333333333334, 5, "Expected Clone 4 of Stern to have y-position 146.93333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -193.45, 5, "Expected Clone 5 of Stern to have x-position -193.45 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 144.65, 5, "Expected Clone 5 of Stern to have y-position 144.65 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).x, -217.86666666666667, 5, "Expected Clone 6 of Stern to have x-position -217.86666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).y, 152.73333333333332, 5, "Expected Clone 6 of Stern to have y-position 152.73333333333332 +-5");
  t.assert.equal(t.getSprite("Raumschiff").sayText, "Überstanden!", "Expected Sprite Raumschiff to say Überstanden!");
  t.assert.not(t.getSprite("Schwarzes Loch").sayText, "Expected Sprite Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Mond").sayText, "Expected Sprite Mond not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(1).sayText, "Expected Clone 1 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(2).sayText, "Expected Clone 2 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(3).sayText, "Expected Clone 3 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(4).sayText, "Expected Clone 4 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(5).sayText, "Expected Clone 5 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(6).sayText, "Expected Clone 6 of Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").size, 80, 1, "Expected Sprite Schwarzes Loch to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Mond").size, 100, 1, "Expected Sprite Mond to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).size, 50, 1, "Expected Clone 1 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).size, 50, 1, "Expected Clone 2 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).size, 50, 1, "Expected Clone 3 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).size, 50, 1, "Expected Clone 4 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).size, 50, 1, "Expected Clone 5 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).size, 50, 1, "Expected Clone 6 of Stern to have size 50 +-1");
  t.assert.equal(t.getSprite("Stern").getVariable("xPosition").value, "-210", "Expected xPosition to have value -210 in Sprite Stern");
  t.assert.equal(t.getSprite("Stern").getVariable("yPosition").value, "150", "Expected yPosition to have value 150 in Sprite Stern");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Schwarzes Loch").visible, "Expected Sprite Schwarzes Loch to be visible");
  t.assert.not(t.getSprite("Stern").visible, "Expected Sprite Stern not to be visible");
  t.assert.ok(t.getSprite("Mond").visible, "Expected Sprite Mond to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(1).visible, "Expected Clone 1 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(2).visible, "Expected Clone 2 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(3).visible, "Expected Clone 3 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(4).visible, "Expected Clone 4 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(5).visible, "Expected Clone 5 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(6).visible, "Expected Clone 6 of Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Schwarzes Loch").volume, 100, "Expected Sprite Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Mond").volume, 100, "Expected Sprite Mond to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(1).volume, 100, "Expected Clone 1 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(2).volume, 100, "Expected Clone 2 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(3).volume, 100, "Expected Clone 3 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(4).volume, 100, "Expected Clone 4 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(5).volume, 100, "Expected Clone 5 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(6).volume, 100, "Expected Clone 6 of Stern to have volume 100");
  await t.runForSteps(47);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").currentCostume, 0, "Expected Sprite Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Mond").currentCostume, 0, "Expected Sprite Mond to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).currentCostume, 0, "Expected Clone 1 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).currentCostume, 0, "Expected Clone 2 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).currentCostume, 0, "Expected Clone 3 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).currentCostume, 0, "Expected Clone 4 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).currentCostume, 0, "Expected Clone 5 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).currentCostume, 0, "Expected Clone 6 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 6, "Expected Sprite Stern to have 6 clones");
  t.assert.equal(t.getSprite("Mond").getCloneCount(), 0, "Expected Sprite Mond to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 135, 1, "Expected Sprite Raumschiff to face in direction 135 +-1");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 70, 1, "Expected Sprite Schwarzes Loch to face in direction 70 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Mond").direction, 90, 1, "Expected Sprite Mond to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(1).direction, 90, 1, "Expected Clone 1 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(2).direction, 90, 1, "Expected Clone 2 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(3).direction, 90, 1, "Expected Clone 3 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(4).direction, 90, 1, "Expected Clone 4 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(5).direction, 90, 1, "Expected Clone 5 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(6).direction, 90, 1, "Expected Clone 6 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Mond").effects.color, 0, "Expected effect color of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.fisheye, 0, "Expected effect fisheye of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.whirl, 0, "Expected effect whirl of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.pixelate, 0, "Expected effect pixelate of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.mosaic, 0, "Expected effect mosaic of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.brightness, 0, "Expected effect brightness of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.ghost, 0, "Expected effect ghost of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.color, 0, "Expected effect color of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.fisheye, 0, "Expected effect fisheye of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.whirl, 0, "Expected effect whirl of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.pixelate, 0, "Expected effect pixelate of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.mosaic, 0, "Expected effect mosaic of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.brightness, 0, "Expected effect brightness of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.ghost, 0, "Expected effect ghost of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.color, 0, "Expected effect color of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.fisheye, 0, "Expected effect fisheye of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.whirl, 0, "Expected effect whirl of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.pixelate, 0, "Expected effect pixelate of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.mosaic, 0, "Expected effect mosaic of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.brightness, 0, "Expected effect brightness of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.ghost, 0, "Expected effect ghost of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.color, 0, "Expected effect color of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.fisheye, 0, "Expected effect fisheye of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.whirl, 0, "Expected effect whirl of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.pixelate, 0, "Expected effect pixelate of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.mosaic, 0, "Expected effect mosaic of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.brightness, 0, "Expected effect brightness of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.ghost, 0, "Expected effect ghost of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 10, "Expected Sprite Raumschiff to be at layer 10");
  t.assert.equal(t.getSprite("Schwarzes Loch").layerOrder, 1, "Expected Sprite Schwarzes Loch to be at layer 1");
  t.assert.equal(t.getSprite("Stern").layerOrder, 9, "Expected Sprite Stern to be at layer 9");
  t.assert.equal(t.getSprite("Mond").layerOrder, 2, "Expected Sprite Mond to be at layer 2");
  t.assert.equal(t.getSprite("Stern").getClone(1).getLayerOrder(), 3, "Expected Clone 1 of Stern to be at layer 3");
  t.assert.equal(t.getSprite("Stern").getClone(2).getLayerOrder(), 4, "Expected Clone 2 of Stern to be at layer 4");
  t.assert.equal(t.getSprite("Stern").getClone(3).getLayerOrder(), 5, "Expected Clone 3 of Stern to be at layer 5");
  t.assert.equal(t.getSprite("Stern").getClone(4).getLayerOrder(), 6, "Expected Clone 4 of Stern to be at layer 6");
  t.assert.equal(t.getSprite("Stern").getClone(5).getLayerOrder(), 7, "Expected Clone 5 of Stern to be at layer 7");
  t.assert.equal(t.getSprite("Stern").getClone(6).getLayerOrder(), 8, "Expected Clone 6 of Stern to be at layer 8");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 262, 5, "Expected Sprite Raumschiff to have x-position 262 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -195, 5, "Expected Sprite Raumschiff to have y-position -195 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, -19.622501868990582, 5, "Expected Sprite Schwarzes Loch to have x-position -19.622501868990582 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -72.578341604963, 5, "Expected Sprite Schwarzes Loch to have y-position -72.578341604963 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 144, 5, "Expected Sprite Stern to have x-position 144 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 20, 5, "Expected Sprite Stern to have y-position 20 +-5");
  t.assert.withinRange(t.getSprite("Mond").x, 309, 5, "Expected Sprite Mond to have x-position 309 +-5");
  t.assert.withinRange(t.getSprite("Mond").y, -217, 5, "Expected Sprite Mond to have y-position -217 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 129.73333333333332, 5, "Expected Clone 1 of Stern to have x-position 129.73333333333332 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 9.366666666666667, 5, "Expected Clone 1 of Stern to have y-position 9.366666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 136, 5, "Expected Clone 2 of Stern to have x-position 136 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 29.1, 5, "Expected Clone 2 of Stern to have y-position 29.1 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 141.83333333333334, 5, "Expected Clone 3 of Stern to have x-position 141.83333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 29.516666666666666, 5, "Expected Clone 3 of Stern to have y-position 29.516666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -201, 5, "Expected Clone 4 of Stern to have x-position -201 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 146.25, 5, "Expected Clone 4 of Stern to have y-position 146.25 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -194.46666666666667, 5, "Expected Clone 5 of Stern to have x-position -194.46666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 148.36666666666667, 5, "Expected Clone 5 of Stern to have y-position 148.36666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).x, -219, 5, "Expected Clone 6 of Stern to have x-position -219 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).y, 155, 5, "Expected Clone 6 of Stern to have y-position 155 +-5");
  t.assert.equal(t.getSprite("Raumschiff").sayText, "Überstanden!", "Expected Sprite Raumschiff to say Überstanden!");
  t.assert.not(t.getSprite("Schwarzes Loch").sayText, "Expected Sprite Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Mond").sayText, "Expected Sprite Mond not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(1).sayText, "Expected Clone 1 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(2).sayText, "Expected Clone 2 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(3).sayText, "Expected Clone 3 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(4).sayText, "Expected Clone 4 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(5).sayText, "Expected Clone 5 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(6).sayText, "Expected Clone 6 of Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").size, 80, 1, "Expected Sprite Schwarzes Loch to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Mond").size, 100, 1, "Expected Sprite Mond to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).size, 50, 1, "Expected Clone 1 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).size, 50, 1, "Expected Clone 2 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).size, 50, 1, "Expected Clone 3 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).size, 50, 1, "Expected Clone 4 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).size, 50, 1, "Expected Clone 5 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).size, 50, 1, "Expected Clone 6 of Stern to have size 50 +-1");
  t.assert.equal(t.getSprite("Stern").getVariable("xPosition").value, "-210", "Expected xPosition to have value -210 in Sprite Stern");
  t.assert.equal(t.getSprite("Stern").getVariable("yPosition").value, "150", "Expected yPosition to have value 150 in Sprite Stern");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Schwarzes Loch").visible, "Expected Sprite Schwarzes Loch to be visible");
  t.assert.not(t.getSprite("Stern").visible, "Expected Sprite Stern not to be visible");
  t.assert.ok(t.getSprite("Mond").visible, "Expected Sprite Mond to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(1).visible, "Expected Clone 1 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(2).visible, "Expected Clone 2 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(3).visible, "Expected Clone 3 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(4).visible, "Expected Clone 4 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(5).visible, "Expected Clone 5 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(6).visible, "Expected Clone 6 of Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Schwarzes Loch").volume, 100, "Expected Sprite Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Mond").volume, 100, "Expected Sprite Mond to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(1).volume, 100, "Expected Clone 1 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(2).volume, 100, "Expected Clone 2 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(3).volume, 100, "Expected Clone 3 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(4).volume, 100, "Expected Clone 4 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(5).volume, 100, "Expected Clone 5 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(6).volume, 100, "Expected Clone 6 of Stern to have volume 100");
  t.keyPress('right arrow', 3);
  await t.runForSteps(3);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").currentCostume, 0, "Expected Sprite Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Mond").currentCostume, 0, "Expected Sprite Mond to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Mond").getCloneCount(), 0, "Expected Sprite Mond to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 180, 1, "Expected Sprite Raumschiff to face in direction 180 +-1");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 110, 1, "Expected Sprite Schwarzes Loch to face in direction 110 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Mond").direction, 90, 1, "Expected Sprite Mond to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Mond").effects.color, 0, "Expected effect color of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.fisheye, 0, "Expected effect fisheye of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.whirl, 0, "Expected effect whirl of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.pixelate, 0, "Expected effect pixelate of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.mosaic, 0, "Expected effect mosaic of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.brightness, 0, "Expected effect brightness of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.ghost, 0, "Expected effect ghost of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 4, "Expected Sprite Raumschiff to be at layer 4");
  t.assert.equal(t.getSprite("Schwarzes Loch").layerOrder, 1, "Expected Sprite Schwarzes Loch to be at layer 1");
  t.assert.equal(t.getSprite("Stern").layerOrder, 3, "Expected Sprite Stern to be at layer 3");
  t.assert.equal(t.getSprite("Mond").layerOrder, 2, "Expected Sprite Mond to be at layer 2");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 249, 5, "Expected Sprite Raumschiff to have x-position 249 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -193, 5, "Expected Sprite Raumschiff to have y-position -193 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, -0.07596123493896023, 5, "Expected Sprite Schwarzes Loch to have x-position -0.07596123493896023 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -70.86824088833465, 5, "Expected Sprite Schwarzes Loch to have y-position -70.86824088833465 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 144, 5, "Expected Sprite Stern to have x-position 144 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 20, 5, "Expected Sprite Stern to have y-position 20 +-5");
  t.assert.withinRange(t.getSprite("Mond").x, 309, 5, "Expected Sprite Mond to have x-position 309 +-5");
  t.assert.withinRange(t.getSprite("Mond").y, -217, 5, "Expected Sprite Mond to have y-position -217 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Schwarzes Loch").sayText, "Expected Sprite Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Mond").sayText, "Expected Sprite Mond not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").size, 80, 1, "Expected Sprite Schwarzes Loch to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Mond").size, 100, 1, "Expected Sprite Mond to have size 100 +-1");
  t.assert.equal(t.getSprite("Stern").getVariable("xPosition").value, "-210", "Expected xPosition to have value -210 in Sprite Stern");
  t.assert.equal(t.getSprite("Stern").getVariable("yPosition").value, "150", "Expected yPosition to have value 150 in Sprite Stern");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Schwarzes Loch").visible, "Expected Sprite Schwarzes Loch to be visible");
  t.assert.not(t.getSprite("Stern").visible, "Expected Sprite Stern not to be visible");
  t.assert.ok(t.getSprite("Mond").visible, "Expected Sprite Mond to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Schwarzes Loch").volume, 100, "Expected Sprite Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Mond").volume, 100, "Expected Sprite Mond to have volume 100");
  t.end();
}
const test2 = async function (t) {
  t.dragSprite('Raumschiff', -131.48254685110132, -71.79763091963844, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").currentCostume, 0, "Expected Sprite Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Mond").currentCostume, 0, "Expected Sprite Mond to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).currentCostume, 0, "Expected Clone 1 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 1, "Expected Sprite Stern to have 1 clones");
  t.assert.equal(t.getSprite("Mond").getCloneCount(), 0, "Expected Sprite Mond to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, -15, 1, "Expected Sprite Raumschiff to face in direction -15 +-1");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 100, 1, "Expected Sprite Schwarzes Loch to face in direction 100 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Mond").direction, 90, 1, "Expected Sprite Mond to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(1).direction, 90, 1, "Expected Clone 1 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Mond").effects.color, 0, "Expected effect color of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.fisheye, 0, "Expected effect fisheye of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.whirl, 0, "Expected effect whirl of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.pixelate, 0, "Expected effect pixelate of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.mosaic, 0, "Expected effect mosaic of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.brightness, 0, "Expected effect brightness of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.ghost, 0, "Expected effect ghost of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 5, "Expected Sprite Raumschiff to be at layer 5");
  t.assert.equal(t.getSprite("Schwarzes Loch").layerOrder, 1, "Expected Sprite Schwarzes Loch to be at layer 1");
  t.assert.equal(t.getSprite("Stern").layerOrder, 4, "Expected Sprite Stern to be at layer 4");
  t.assert.equal(t.getSprite("Mond").layerOrder, 2, "Expected Sprite Mond to be at layer 2");
  t.assert.equal(t.getSprite("Stern").getClone(1).getLayerOrder(), 3, "Expected Clone 1 of Stern to be at layer 3");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -200.2588190451025, 5, "Expected Sprite Raumschiff to have x-position -200.2588190451025 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -169.03407417371093, 5, "Expected Sprite Raumschiff to have y-position -169.03407417371093 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, -5, 5, "Expected Sprite Schwarzes Loch to have x-position -5 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -70, 5, "Expected Sprite Schwarzes Loch to have y-position -70 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 144, 5, "Expected Sprite Stern to have x-position 144 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 20, 5, "Expected Sprite Stern to have y-position 20 +-5");
  t.assert.withinRange(t.getSprite("Mond").x, 309, 5, "Expected Sprite Mond to have x-position 309 +-5");
  t.assert.withinRange(t.getSprite("Mond").y, -217, 5, "Expected Sprite Mond to have y-position -217 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 140, 5, "Expected Clone 1 of Stern to have x-position 140 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 20, 5, "Expected Clone 1 of Stern to have y-position 20 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Schwarzes Loch").sayText, "Expected Sprite Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Mond").sayText, "Expected Sprite Mond not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(1).sayText, "Expected Clone 1 of Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").size, 80, 1, "Expected Sprite Schwarzes Loch to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Mond").size, 100, 1, "Expected Sprite Mond to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).size, 50, 1, "Expected Clone 1 of Stern to have size 50 +-1");
  t.assert.equal(t.getSprite("Stern").getVariable("xPosition").value, "140", "Expected xPosition to have value 140 in Sprite Stern");
  t.assert.equal(t.getSprite("Stern").getVariable("yPosition").value, "20", "Expected yPosition to have value 20 in Sprite Stern");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Schwarzes Loch").visible, "Expected Sprite Schwarzes Loch to be visible");
  t.assert.not(t.getSprite("Stern").visible, "Expected Sprite Stern not to be visible");
  t.assert.ok(t.getSprite("Mond").visible, "Expected Sprite Mond to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(1).visible, "Expected Clone 1 of Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Schwarzes Loch").volume, 100, "Expected Sprite Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Mond").volume, 100, "Expected Sprite Mond to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(1).volume, 100, "Expected Clone 1 of Stern to have volume 100");
  t.keyPress('right arrow', 2);
  await t.runForSteps(2);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").currentCostume, 0, "Expected Sprite Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Mond").currentCostume, 0, "Expected Sprite Mond to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).currentCostume, 0, "Expected Clone 1 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).currentCostume, 0, "Expected Clone 2 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).currentCostume, 0, "Expected Clone 3 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 3, "Expected Sprite Stern to have 3 clones");
  t.assert.equal(t.getSprite("Mond").getCloneCount(), 0, "Expected Sprite Mond to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 15, 1, "Expected Sprite Raumschiff to face in direction 15 +-1");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 130, 1, "Expected Sprite Schwarzes Loch to face in direction 130 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Mond").direction, 90, 1, "Expected Sprite Mond to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(1).direction, 90, 1, "Expected Clone 1 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(2).direction, 90, 1, "Expected Clone 2 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(3).direction, 90, 1, "Expected Clone 3 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Mond").effects.color, 0, "Expected effect color of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.fisheye, 0, "Expected effect fisheye of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.whirl, 0, "Expected effect whirl of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.pixelate, 0, "Expected effect pixelate of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.mosaic, 0, "Expected effect mosaic of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.brightness, 0, "Expected effect brightness of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.ghost, 0, "Expected effect ghost of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 7, "Expected Sprite Raumschiff to be at layer 7");
  t.assert.equal(t.getSprite("Schwarzes Loch").layerOrder, 1, "Expected Sprite Schwarzes Loch to be at layer 1");
  t.assert.equal(t.getSprite("Stern").layerOrder, 6, "Expected Sprite Stern to be at layer 6");
  t.assert.equal(t.getSprite("Mond").layerOrder, 2, "Expected Sprite Mond to be at layer 2");
  t.assert.equal(t.getSprite("Stern").getClone(1).getLayerOrder(), 3, "Expected Clone 1 of Stern to be at layer 3");
  t.assert.equal(t.getSprite("Stern").getClone(2).getLayerOrder(), 4, "Expected Clone 2 of Stern to be at layer 4");
  t.assert.equal(t.getSprite("Stern").getClone(3).getLayerOrder(), 5, "Expected Clone 3 of Stern to be at layer 5");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -200.2588190451025, 5, "Expected Sprite Raumschiff to have x-position -200.2588190451025 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -166.1022225211328, 5, "Expected Sprite Raumschiff to have y-position -166.1022225211328 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, 8.952628887912777, 5, "Expected Sprite Schwarzes Loch to have x-position 8.952628887912777 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -75.078341604963, 5, "Expected Sprite Schwarzes Loch to have y-position -75.078341604963 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 144, 5, "Expected Sprite Stern to have x-position 144 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 20, 5, "Expected Sprite Stern to have y-position 20 +-5");
  t.assert.withinRange(t.getSprite("Mond").x, 309, 5, "Expected Sprite Mond to have x-position 309 +-5");
  t.assert.withinRange(t.getSprite("Mond").y, -217, 5, "Expected Sprite Mond to have y-position -217 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 140.25, 5, "Expected Clone 1 of Stern to have x-position 140.25 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 19.6, 5, "Expected Clone 1 of Stern to have y-position 19.6 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 140.3, 5, "Expected Clone 2 of Stern to have x-position 140.3 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 20.033333333333335, 5, "Expected Clone 2 of Stern to have y-position 20.033333333333335 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 139.73333333333332, 5, "Expected Clone 3 of Stern to have x-position 139.73333333333332 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 20.2, 5, "Expected Clone 3 of Stern to have y-position 20.2 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Schwarzes Loch").sayText, "Expected Sprite Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Mond").sayText, "Expected Sprite Mond not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(1).sayText, "Expected Clone 1 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(2).sayText, "Expected Clone 2 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(3).sayText, "Expected Clone 3 of Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").size, 80, 1, "Expected Sprite Schwarzes Loch to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Mond").size, 100, 1, "Expected Sprite Mond to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).size, 50, 1, "Expected Clone 1 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).size, 50, 1, "Expected Clone 2 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).size, 50, 1, "Expected Clone 3 of Stern to have size 50 +-1");
  t.assert.equal(t.getSprite("Stern").getVariable("xPosition").value, "-210", "Expected xPosition to have value -210 in Sprite Stern");
  t.assert.equal(t.getSprite("Stern").getVariable("yPosition").value, "150", "Expected yPosition to have value 150 in Sprite Stern");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Schwarzes Loch").visible, "Expected Sprite Schwarzes Loch to be visible");
  t.assert.not(t.getSprite("Stern").visible, "Expected Sprite Stern not to be visible");
  t.assert.ok(t.getSprite("Mond").visible, "Expected Sprite Mond to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(1).visible, "Expected Clone 1 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(2).visible, "Expected Clone 2 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(3).visible, "Expected Clone 3 of Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Schwarzes Loch").volume, 100, "Expected Sprite Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Mond").volume, 100, "Expected Sprite Mond to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(1).volume, 100, "Expected Clone 1 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(2).volume, 100, "Expected Clone 2 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(3).volume, 100, "Expected Clone 3 of Stern to have volume 100");
  t.dragSprite('Raumschiff', -188.25843485744215, -70.7411907501594, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").currentCostume, 0, "Expected Sprite Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Mond").currentCostume, 0, "Expected Sprite Mond to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).currentCostume, 0, "Expected Clone 1 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).currentCostume, 0, "Expected Clone 2 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).currentCostume, 0, "Expected Clone 3 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).currentCostume, 0, "Expected Clone 4 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 4, "Expected Sprite Stern to have 4 clones");
  t.assert.equal(t.getSprite("Mond").getCloneCount(), 0, "Expected Sprite Mond to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 15, 1, "Expected Sprite Raumschiff to face in direction 15 +-1");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 140, 1, "Expected Sprite Schwarzes Loch to face in direction 140 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Mond").direction, 90, 1, "Expected Sprite Mond to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(1).direction, 90, 1, "Expected Clone 1 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(2).direction, 90, 1, "Expected Clone 2 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(3).direction, 90, 1, "Expected Clone 3 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(4).direction, 90, 1, "Expected Clone 4 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Mond").effects.color, 0, "Expected effect color of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.fisheye, 0, "Expected effect fisheye of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.whirl, 0, "Expected effect whirl of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.pixelate, 0, "Expected effect pixelate of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.mosaic, 0, "Expected effect mosaic of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.brightness, 0, "Expected effect brightness of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.ghost, 0, "Expected effect ghost of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.color, 0, "Expected effect color of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.fisheye, 0, "Expected effect fisheye of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.whirl, 0, "Expected effect whirl of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.pixelate, 0, "Expected effect pixelate of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.mosaic, 0, "Expected effect mosaic of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.brightness, 0, "Expected effect brightness of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.ghost, 0, "Expected effect ghost of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 8, "Expected Sprite Raumschiff to be at layer 8");
  t.assert.equal(t.getSprite("Schwarzes Loch").layerOrder, 1, "Expected Sprite Schwarzes Loch to be at layer 1");
  t.assert.equal(t.getSprite("Stern").layerOrder, 7, "Expected Sprite Stern to be at layer 7");
  t.assert.equal(t.getSprite("Mond").layerOrder, 2, "Expected Sprite Mond to be at layer 2");
  t.assert.equal(t.getSprite("Stern").getClone(1).getLayerOrder(), 3, "Expected Clone 1 of Stern to be at layer 3");
  t.assert.equal(t.getSprite("Stern").getClone(2).getLayerOrder(), 4, "Expected Clone 2 of Stern to be at layer 4");
  t.assert.equal(t.getSprite("Stern").getClone(3).getLayerOrder(), 5, "Expected Clone 3 of Stern to be at layer 5");
  t.assert.equal(t.getSprite("Stern").getClone(4).getLayerOrder(), 6, "Expected Clone 4 of Stern to be at layer 6");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -187.99961581233964, 5, "Expected Sprite Raumschiff to have x-position -187.99961581233964 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -69.77526492387034, 5, "Expected Sprite Raumschiff to have y-position -69.77526492387034 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, 12.782851103507667, 5, "Expected Sprite Schwarzes Loch to have x-position 12.782851103507667 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -78.2922796533957, 5, "Expected Sprite Schwarzes Loch to have y-position -78.2922796533957 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 144, 5, "Expected Sprite Stern to have x-position 144 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 20, 5, "Expected Sprite Stern to have y-position 20 +-5");
  t.assert.withinRange(t.getSprite("Mond").x, 309, 5, "Expected Sprite Mond to have x-position 309 +-5");
  t.assert.withinRange(t.getSprite("Mond").y, -217, 5, "Expected Sprite Mond to have y-position -217 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 140.33333333333334, 5, "Expected Clone 1 of Stern to have x-position 140.33333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 19.466666666666665, 5, "Expected Clone 1 of Stern to have y-position 19.466666666666665 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 140.45, 5, "Expected Clone 2 of Stern to have x-position 140.45 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 20.05, 5, "Expected Clone 2 of Stern to have y-position 20.05 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 139.46666666666667, 5, "Expected Clone 3 of Stern to have x-position 139.46666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 20.4, 5, "Expected Clone 3 of Stern to have y-position 20.4 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -210, 5, "Expected Clone 4 of Stern to have x-position -210 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 150, 5, "Expected Clone 4 of Stern to have y-position 150 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Schwarzes Loch").sayText, "Expected Sprite Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Mond").sayText, "Expected Sprite Mond not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(1).sayText, "Expected Clone 1 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(2).sayText, "Expected Clone 2 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(3).sayText, "Expected Clone 3 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(4).sayText, "Expected Clone 4 of Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").size, 80, 1, "Expected Sprite Schwarzes Loch to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Mond").size, 100, 1, "Expected Sprite Mond to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).size, 50, 1, "Expected Clone 1 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).size, 50, 1, "Expected Clone 2 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).size, 50, 1, "Expected Clone 3 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).size, 50, 1, "Expected Clone 4 of Stern to have size 50 +-1");
  t.assert.equal(t.getSprite("Stern").getVariable("xPosition").value, "-210", "Expected xPosition to have value -210 in Sprite Stern");
  t.assert.equal(t.getSprite("Stern").getVariable("yPosition").value, "150", "Expected yPosition to have value 150 in Sprite Stern");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Schwarzes Loch").visible, "Expected Sprite Schwarzes Loch to be visible");
  t.assert.not(t.getSprite("Stern").visible, "Expected Sprite Stern not to be visible");
  t.assert.ok(t.getSprite("Mond").visible, "Expected Sprite Mond to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(1).visible, "Expected Clone 1 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(2).visible, "Expected Clone 2 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(3).visible, "Expected Clone 3 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(4).visible, "Expected Clone 4 of Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Schwarzes Loch").volume, 100, "Expected Sprite Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Mond").volume, 100, "Expected Sprite Mond to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(1).volume, 100, "Expected Clone 1 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(2).volume, 100, "Expected Clone 2 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(3).volume, 100, "Expected Clone 3 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(4).volume, 100, "Expected Clone 4 of Stern to have volume 100");
  await t.runForSteps(70);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").currentCostume, 0, "Expected Sprite Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Mond").currentCostume, 0, "Expected Sprite Mond to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Mond").getCloneCount(), 0, "Expected Sprite Mond to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 15, 1, "Expected Sprite Raumschiff to face in direction 15 +-1");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, -170, 1, "Expected Sprite Schwarzes Loch to face in direction -170 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Mond").direction, 90, 1, "Expected Sprite Mond to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Mond").effects.color, 0, "Expected effect color of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.fisheye, 0, "Expected effect fisheye of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.whirl, 0, "Expected effect whirl of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.pixelate, 0, "Expected effect pixelate of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.mosaic, 0, "Expected effect mosaic of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.brightness, 0, "Expected effect brightness of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Mond").effects.ghost, 0, "Expected effect ghost of Sprite Mond to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 4, "Expected Sprite Raumschiff to be at layer 4");
  t.assert.equal(t.getSprite("Schwarzes Loch").layerOrder, 1, "Expected Sprite Schwarzes Loch to be at layer 1");
  t.assert.equal(t.getSprite("Stern").layerOrder, 3, "Expected Sprite Stern to be at layer 3");
  t.assert.equal(t.getSprite("Mond").layerOrder, 2, "Expected Sprite Mond to be at layer 2");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -177.38803496313662, 5, "Expected Sprite Raumschiff to have x-position -177.38803496313662 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -30.172306046018626, 5, "Expected Sprite Raumschiff to have y-position -30.172306046018626 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, 21.07513075690336, 5, "Expected Sprite Schwarzes Loch to have x-position 21.07513075690336 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -101.07513075690336, 5, "Expected Sprite Schwarzes Loch to have y-position -101.07513075690336 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 144, 5, "Expected Sprite Stern to have x-position 144 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 20, 5, "Expected Sprite Stern to have y-position 20 +-5");
  t.assert.withinRange(t.getSprite("Mond").x, 309, 5, "Expected Sprite Mond to have x-position 309 +-5");
  t.assert.withinRange(t.getSprite("Mond").y, -217, 5, "Expected Sprite Mond to have y-position -217 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Schwarzes Loch").sayText, "Expected Sprite Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Mond").sayText, "Expected Sprite Mond not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 5, 1, "Expected Sprite Raumschiff to have size 5 +-1");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").size, 80, 1, "Expected Sprite Schwarzes Loch to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Mond").size, 100, 1, "Expected Sprite Mond to have size 100 +-1");
  t.assert.equal(t.getSprite("Stern").getVariable("xPosition").value, "-210", "Expected xPosition to have value -210 in Sprite Stern");
  t.assert.equal(t.getSprite("Stern").getVariable("yPosition").value, "150", "Expected yPosition to have value 150 in Sprite Stern");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Schwarzes Loch").visible, "Expected Sprite Schwarzes Loch to be visible");
  t.assert.not(t.getSprite("Stern").visible, "Expected Sprite Stern not to be visible");
  t.assert.ok(t.getSprite("Mond").visible, "Expected Sprite Mond to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Schwarzes Loch").volume, 100, "Expected Sprite Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Mond").volume, 100, "Expected Sprite Mond to have volume 100");
  t.end();
}

module.exports = [
  {
      test: test0,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687849599653',
      type: 'standard',
  },
  {
      test: test1,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687849599653',
      type: 'standard',
  },
  {
      test: test2,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687849599653',
      type: 'standard',
  }
]
