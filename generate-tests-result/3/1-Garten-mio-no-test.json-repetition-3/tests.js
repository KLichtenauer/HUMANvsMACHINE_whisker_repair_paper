const test0 = async function (t) {
  t.keyPress('left arrow', 2);
  await t.runForSteps(2);
  await t.runForSteps(1);
  t.keyPress('left arrow', 2);
  await t.runForSteps(2);
  await t.runForSteps(1);
  await t.runForSteps(71);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Kaktus").getClone(1).currentCostume, 0, "Expected Clone 1 of Kaktus to have costume 0");
  t.assert.equal(t.getSprite("Kaktus").getCloneCount(), 1, "Expected Sprite Kaktus to have 1 clones");
  t.assert.equal(t.getSprite("Blume").direction, 90, 1, "Expected Sprite Blume to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kaktus").getClone(1).direction, 90, 1, "Expected Clone 1 of Kaktus to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kaktus").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Gärtnerin").layerOrder, 3, "Expected Sprite Gärtnerin to be at layer 3");
  t.assert.equal(t.getSprite("Blume").layerOrder, 4, "Expected Sprite Blume to be at layer 4");
  t.assert.equal(t.getSprite("Kaktus").layerOrder, 2, "Expected Sprite Kaktus to be at layer 2");
  t.assert.equal(t.getSprite("Kaktus").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Kaktus to be at layer 1");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(1).x, 71, 5, "Expected Clone 1 of Kaktus to have x-position 71 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(1).y, -88, 5, "Expected Clone 1 of Kaktus to have y-position -88 +-5");
  t.assert.not(t.getSprite("Gärtnerin").sayText, "Expected Sprite Gärtnerin not to say anything");
  t.assert.not(t.getSprite("Kaktus").getClone(1).sayText, "Expected Clone 1 of Kaktus not to say anything");
  t.assert.withinRange(t.getSprite("Gärtnerin").size, 20, 1, "Expected Sprite Gärtnerin to have size 20 +-1");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(1).size, 20, 1, "Expected Clone 1 of Kaktus to have size 20 +-1");
  t.assert.ok(t.getSprite("Kaktus").getClone(1).visible, "Expected Clone 1 of Kaktus to be visible");
  t.assert.equal(t.getSprite("Kaktus").getClone(1).volume, 100, "Expected Clone 1 of Kaktus to have volume 100");
  t.dragSprite('Blume', -124.49064508072145, 122.2794141022412, null);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Blume").x, -124.49064508072145, 5, "Expected Sprite Blume to have x-position -124.49064508072145 +-5");
  t.assert.withinRange(t.getSprite("Blume").y, 122.2794141022412, 5, "Expected Sprite Blume to have y-position 122.2794141022412 +-5");
  t.keyPress('down arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Gärtnerin").x, -170, 5, "Expected Sprite Gärtnerin to have x-position -170 +-5");
  t.assert.withinRange(t.getSprite("Gärtnerin").y, 55, 5, "Expected Sprite Gärtnerin to have y-position 55 +-5");
  t.dragSprite('Blume', -199.92137099664862, -18.682825851911517, null);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Blume").x, -199.92137099664862, 5, "Expected Sprite Blume to have x-position -199.92137099664862 +-5");
  t.assert.withinRange(t.getSprite("Blume").y, -18.682825851911517, 5, "Expected Sprite Blume to have y-position -18.682825851911517 +-5");
  t.dragSprite('Blume', -158.92444178475205, 135.29906322070428, null);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Blume").x, -158.92444178475205, 5, "Expected Sprite Blume to have x-position -158.92444178475205 +-5");
  t.assert.withinRange(t.getSprite("Blume").y, 135.29906322070428, 5, "Expected Sprite Blume to have y-position 135.29906322070428 +-5");
  t.keyPress('left arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Gärtnerin").x, -175, 5, "Expected Sprite Gärtnerin to have x-position -175 +-5");
  t.assert.withinRange(t.getSprite("Gärtnerin").y, 55, 5, "Expected Sprite Gärtnerin to have y-position 55 +-5");
  await t.runForSteps(48);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Kaktus").getClone(2).currentCostume, 0, "Expected Clone 2 of Kaktus to have costume 0");
  t.assert.equal(t.getSprite("Kaktus").getCloneCount(), 2, "Expected Sprite Kaktus to have 2 clones");
  t.assert.equal(t.getSprite("Blume").direction, 95, 1, "Expected Sprite Blume to face in direction 95 +-1");
  t.assert.equal(t.getSprite("Kaktus").getClone(2).direction, 90, 1, "Expected Clone 2 of Kaktus to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kaktus").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Gärtnerin").layerOrder, 4, "Expected Sprite Gärtnerin to be at layer 4");
  t.assert.equal(t.getSprite("Blume").layerOrder, 5, "Expected Sprite Blume to be at layer 5");
  t.assert.equal(t.getSprite("Kaktus").layerOrder, 3, "Expected Sprite Kaktus to be at layer 3");
  t.assert.equal(t.getSprite("Kaktus").getClone(2).getLayerOrder(), 2, "Expected Clone 2 of Kaktus to be at layer 2");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(2).x, -19, 5, "Expected Clone 2 of Kaktus to have x-position -19 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(2).y, -94, 5, "Expected Clone 2 of Kaktus to have y-position -94 +-5");
  t.assert.not(t.getSprite("Kaktus").getClone(2).sayText, "Expected Clone 2 of Kaktus not to say anything");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(2).size, 20, 1, "Expected Clone 2 of Kaktus to have size 20 +-1");
  t.assert.ok(t.getSprite("Kaktus").getClone(2).visible, "Expected Clone 2 of Kaktus to be visible");
  t.assert.equal(t.getSprite("Kaktus").getClone(2).volume, 100, "Expected Clone 2 of Kaktus to have volume 100");
  t.dragSprite('Blume', -175, 55, null);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Blume").x, -192, 5, "Expected Sprite Blume to have x-position -192 +-5");
  t.assert.withinRange(t.getSprite("Blume").y, 106, 5, "Expected Sprite Blume to have y-position 106 +-5");
  t.keyPress('up arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Gärtnerin").x, -175, 5, "Expected Sprite Gärtnerin to have x-position -175 +-5");
  t.assert.withinRange(t.getSprite("Gärtnerin").y, 60, 5, "Expected Sprite Gärtnerin to have y-position 60 +-5");
  t.keyPress('up arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Gärtnerin").x, -175, 5, "Expected Sprite Gärtnerin to have x-position -175 +-5");
  t.assert.withinRange(t.getSprite("Gärtnerin").y, 65, 5, "Expected Sprite Gärtnerin to have y-position 65 +-5");
  t.dragSprite('Gärtnerin', 34.1834512909245, -42.13777203587305, null);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Blume").direction, 90, 1, "Expected Sprite Blume to face in direction 90 +-1");
  t.assert.withinRange(t.getSprite("Gärtnerin").x, 34.1834512909245, 5, "Expected Sprite Gärtnerin to have x-position 34.1834512909245 +-5");
  t.assert.withinRange(t.getSprite("Gärtnerin").y, -42.13777203587305, 5, "Expected Sprite Gärtnerin to have y-position -42.13777203587305 +-5");
  t.dragSprite('Blume', 34, -42, null);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Blume").x, 128, 5, "Expected Sprite Blume to have x-position 128 +-5");
  t.assert.withinRange(t.getSprite("Blume").y, -95, 5, "Expected Sprite Blume to have y-position -95 +-5");
  t.dragSprite('Gärtnerin', 61.64521873697538, -145.4834640600494, null);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Gärtnerin").x, 61.64521873697538, 5, "Expected Sprite Gärtnerin to have x-position 61.64521873697538 +-5");
  t.assert.withinRange(t.getSprite("Gärtnerin").y, -145.4834640600494, 5, "Expected Sprite Gärtnerin to have y-position -145.4834640600494 +-5");
  t.keyPress('right arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Gärtnerin").x, 66.64521873697538, 5, "Expected Sprite Gärtnerin to have x-position 66.64521873697538 +-5");
  t.assert.withinRange(t.getSprite("Gärtnerin").y, -145.4834640600494, 5, "Expected Sprite Gärtnerin to have y-position -145.4834640600494 +-5");
  await t.runForSteps(62);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Kaktus").getClone(3).currentCostume, 0, "Expected Clone 3 of Kaktus to have costume 0");
  t.assert.equal(t.getSprite("Kaktus").getCloneCount(), 3, "Expected Sprite Kaktus to have 3 clones");
  t.assert.equal(t.getSprite("Kaktus").getClone(3).direction, 90, 1, "Expected Clone 3 of Kaktus to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kaktus").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Kaktus").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Kaktus to be 0");
  t.assert.equal(t.getSprite("Gärtnerin").layerOrder, 5, "Expected Sprite Gärtnerin to be at layer 5");
  t.assert.equal(t.getSprite("Blume").layerOrder, 6, "Expected Sprite Blume to be at layer 6");
  t.assert.equal(t.getSprite("Kaktus").layerOrder, 4, "Expected Sprite Kaktus to be at layer 4");
  t.assert.equal(t.getSprite("Kaktus").getClone(3).getLayerOrder(), 3, "Expected Clone 3 of Kaktus to be at layer 3");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(3).x, 184, 5, "Expected Clone 3 of Kaktus to have x-position 184 +-5");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(3).y, -4, 5, "Expected Clone 3 of Kaktus to have y-position -4 +-5");
  t.assert.not(t.getSprite("Kaktus").getClone(3).sayText, "Expected Clone 3 of Kaktus not to say anything");
  t.assert.withinRange(t.getSprite("Kaktus").getClone(3).size, 20, 1, "Expected Clone 3 of Kaktus to have size 20 +-1");
  t.assert.ok(t.getSprite("Kaktus").getClone(3).visible, "Expected Clone 3 of Kaktus to be visible");
  t.assert.equal(t.getSprite("Kaktus").getClone(3).volume, 100, "Expected Clone 3 of Kaktus to have volume 100");
  t.dragSprite('Gärtnerin', 109.43870102088715, -132.5837900961977, null);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Gärtnerin").x, 109.43870102088715, 5, "Expected Sprite Gärtnerin to have x-position 109.43870102088715 +-5");
  t.assert.withinRange(t.getSprite("Gärtnerin").y, -132.5837900961977, 5, "Expected Sprite Gärtnerin to have y-position -132.5837900961977 +-5");
  t.assert.withinRange(t.getSprite("Blume").x, -103, 5, "Expected Sprite Blume to have x-position -103 +-5");
  t.assert.withinRange(t.getSprite("Blume").y, 84, 5, "Expected Sprite Blume to have y-position 84 +-5");
  t.dragSprite('Blume', 90.67561279152109, -53.47022737492706, null);
  await t.runForSteps(1);
  t.assert.withinRange(t.getSprite("Blume").x, 90.67561279152109, 5, "Expected Sprite Blume to have x-position 90.67561279152109 +-5");
  t.assert.withinRange(t.getSprite("Blume").y, -53.47022737492706, 5, "Expected Sprite Blume to have y-position -53.47022737492706 +-5");
  t.dragSprite('Gärtnerin', 11.936241753689174, -97.10448658144158, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Gärtnerin").effects.color, 25, "Expected effect color of Sprite Gärtnerin to be 25");
  t.assert.withinRange(t.getSprite("Gärtnerin").x, 11.936241753689174, 5, "Expected Sprite Gärtnerin to have x-position 11.936241753689174 +-5");
  t.assert.withinRange(t.getSprite("Gärtnerin").y, -97.10448658144158, 5, "Expected Sprite Gärtnerin to have y-position -97.10448658144158 +-5");
  t.assert.equal(t.getSprite("Gärtnerin").sayText, "Autsch!", "Expected Sprite Gärtnerin to say Autsch!");
  t.assert.equal(t.getSprite("Blume").sayText, "Ohje!", "Expected Sprite Blume to say Ohje!");
  t.end();
}

module.exports = [
  {
      test: test0,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687936767950',
      type: 'standard',
  }
]
