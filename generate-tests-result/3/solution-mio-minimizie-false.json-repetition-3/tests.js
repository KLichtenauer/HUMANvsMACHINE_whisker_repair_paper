const test0 = async function (t) {
  await t.runForSteps(60);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 130.36453657309733, 1, "Expected Sprite Raumschiff to face in direction 130.36453657309733 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -107.04340323334625, 5, "Expected Sprite Raumschiff to have x-position -107.04340323334625 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 90.98689274834426, 5, "Expected Sprite Raumschiff to have y-position 90.98689274834426 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, -53.33333333333333, 5, "Expected Sprite Großes Schwarzes Loch to have x-position -53.33333333333333 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, 3.333333333333343, 5, "Expected Sprite Großes Schwarzes Loch to have y-position 3.333333333333343 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 144.65, 5, "Expected Sprite Stern to have x-position 144.65 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 7.566666666666666, 5, "Expected Sprite Stern to have y-position 7.566666666666666 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.not(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff not to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  await t.runForSteps(19);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 130.36453657309733, 1, "Expected Sprite Raumschiff to face in direction 130.36453657309733 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -107.04340323334625, 5, "Expected Sprite Raumschiff to have x-position -107.04340323334625 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 90.98689274834426, 5, "Expected Sprite Raumschiff to have y-position 90.98689274834426 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, -53.33333333333333, 5, "Expected Sprite Großes Schwarzes Loch to have x-position -53.33333333333333 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, 3.333333333333343, 5, "Expected Sprite Großes Schwarzes Loch to have y-position 3.333333333333343 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 144.65, 5, "Expected Sprite Stern to have x-position 144.65 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 7.566666666666666, 5, "Expected Sprite Stern to have y-position 7.566666666666666 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.not(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff not to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  await t.runForSteps(38);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 130.36453657309733, 1, "Expected Sprite Raumschiff to face in direction 130.36453657309733 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -107.04340323334625, 5, "Expected Sprite Raumschiff to have x-position -107.04340323334625 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 90.98689274834426, 5, "Expected Sprite Raumschiff to have y-position 90.98689274834426 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, -53.33333333333333, 5, "Expected Sprite Großes Schwarzes Loch to have x-position -53.33333333333333 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, 3.333333333333343, 5, "Expected Sprite Großes Schwarzes Loch to have y-position 3.333333333333343 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 144.65, 5, "Expected Sprite Stern to have x-position 144.65 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 7.566666666666666, 5, "Expected Sprite Stern to have y-position 7.566666666666666 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.not(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff not to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  await t.runForSteps(35);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 130.36453657309733, 1, "Expected Sprite Raumschiff to face in direction 130.36453657309733 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -107.04340323334625, 5, "Expected Sprite Raumschiff to have x-position -107.04340323334625 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 90.98689274834426, 5, "Expected Sprite Raumschiff to have y-position 90.98689274834426 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, -53.33333333333333, 5, "Expected Sprite Großes Schwarzes Loch to have x-position -53.33333333333333 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, 3.333333333333343, 5, "Expected Sprite Großes Schwarzes Loch to have y-position 3.333333333333343 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 144.65, 5, "Expected Sprite Stern to have x-position 144.65 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 7.566666666666666, 5, "Expected Sprite Stern to have y-position 7.566666666666666 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.not(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff not to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  await t.runForSteps(91);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 130.36453657309733, 1, "Expected Sprite Raumschiff to face in direction 130.36453657309733 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -107.04340323334625, 5, "Expected Sprite Raumschiff to have x-position -107.04340323334625 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 90.98689274834426, 5, "Expected Sprite Raumschiff to have y-position 90.98689274834426 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, -53.33333333333333, 5, "Expected Sprite Großes Schwarzes Loch to have x-position -53.33333333333333 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, 3.333333333333343, 5, "Expected Sprite Großes Schwarzes Loch to have y-position 3.333333333333343 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 144.65, 5, "Expected Sprite Stern to have x-position 144.65 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 7.566666666666666, 5, "Expected Sprite Stern to have y-position 7.566666666666666 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.not(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff not to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  await t.runForSteps(46);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 130.36453657309733, 1, "Expected Sprite Raumschiff to face in direction 130.36453657309733 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -107.04340323334625, 5, "Expected Sprite Raumschiff to have x-position -107.04340323334625 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 90.98689274834426, 5, "Expected Sprite Raumschiff to have y-position 90.98689274834426 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, -53.33333333333333, 5, "Expected Sprite Großes Schwarzes Loch to have x-position -53.33333333333333 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, 3.333333333333343, 5, "Expected Sprite Großes Schwarzes Loch to have y-position 3.333333333333343 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 144.65, 5, "Expected Sprite Stern to have x-position 144.65 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 7.566666666666666, 5, "Expected Sprite Stern to have y-position 7.566666666666666 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.not(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff not to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  await t.runForSteps(80);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 130.36453657309733, 1, "Expected Sprite Raumschiff to face in direction 130.36453657309733 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -107.04340323334625, 5, "Expected Sprite Raumschiff to have x-position -107.04340323334625 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 90.98689274834426, 5, "Expected Sprite Raumschiff to have y-position 90.98689274834426 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, -53.33333333333333, 5, "Expected Sprite Großes Schwarzes Loch to have x-position -53.33333333333333 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, 3.333333333333343, 5, "Expected Sprite Großes Schwarzes Loch to have y-position 3.333333333333343 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 144.65, 5, "Expected Sprite Stern to have x-position 144.65 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 7.566666666666666, 5, "Expected Sprite Stern to have y-position 7.566666666666666 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.not(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff not to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  await t.runForSteps(13);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 130.36453657309733, 1, "Expected Sprite Raumschiff to face in direction 130.36453657309733 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -107.04340323334625, 5, "Expected Sprite Raumschiff to have x-position -107.04340323334625 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 90.98689274834426, 5, "Expected Sprite Raumschiff to have y-position 90.98689274834426 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, -53.33333333333333, 5, "Expected Sprite Großes Schwarzes Loch to have x-position -53.33333333333333 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, 3.333333333333343, 5, "Expected Sprite Großes Schwarzes Loch to have y-position 3.333333333333343 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 144.65, 5, "Expected Sprite Stern to have x-position 144.65 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 7.566666666666666, 5, "Expected Sprite Stern to have y-position 7.566666666666666 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.not(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff not to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  await t.runForSteps(45);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 130.36453657309733, 1, "Expected Sprite Raumschiff to face in direction 130.36453657309733 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -107.04340323334625, 5, "Expected Sprite Raumschiff to have x-position -107.04340323334625 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 90.98689274834426, 5, "Expected Sprite Raumschiff to have y-position 90.98689274834426 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, -53.33333333333333, 5, "Expected Sprite Großes Schwarzes Loch to have x-position -53.33333333333333 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, 3.333333333333343, 5, "Expected Sprite Großes Schwarzes Loch to have y-position 3.333333333333343 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 144.65, 5, "Expected Sprite Stern to have x-position 144.65 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 7.566666666666666, 5, "Expected Sprite Stern to have y-position 7.566666666666666 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.not(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff not to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  await t.runForSteps(15);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 130.36453657309733, 1, "Expected Sprite Raumschiff to face in direction 130.36453657309733 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -107.04340323334625, 5, "Expected Sprite Raumschiff to have x-position -107.04340323334625 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 90.98689274834426, 5, "Expected Sprite Raumschiff to have y-position 90.98689274834426 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, -53.33333333333333, 5, "Expected Sprite Großes Schwarzes Loch to have x-position -53.33333333333333 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, 3.333333333333343, 5, "Expected Sprite Großes Schwarzes Loch to have y-position 3.333333333333343 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 144.65, 5, "Expected Sprite Stern to have x-position 144.65 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 7.566666666666666, 5, "Expected Sprite Stern to have y-position 7.566666666666666 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.not(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff not to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  await t.runForSteps(85);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 130.36453657309733, 1, "Expected Sprite Raumschiff to face in direction 130.36453657309733 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -107.04340323334625, 5, "Expected Sprite Raumschiff to have x-position -107.04340323334625 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 90.98689274834426, 5, "Expected Sprite Raumschiff to have y-position 90.98689274834426 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, -53.33333333333333, 5, "Expected Sprite Großes Schwarzes Loch to have x-position -53.33333333333333 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, 3.333333333333343, 5, "Expected Sprite Großes Schwarzes Loch to have y-position 3.333333333333343 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 144.65, 5, "Expected Sprite Stern to have x-position 144.65 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 7.566666666666666, 5, "Expected Sprite Stern to have y-position 7.566666666666666 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.not(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff not to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  await t.runForSteps(13);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 130.36453657309733, 1, "Expected Sprite Raumschiff to face in direction 130.36453657309733 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -107.04340323334625, 5, "Expected Sprite Raumschiff to have x-position -107.04340323334625 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 90.98689274834426, 5, "Expected Sprite Raumschiff to have y-position 90.98689274834426 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, -53.33333333333333, 5, "Expected Sprite Großes Schwarzes Loch to have x-position -53.33333333333333 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, 3.333333333333343, 5, "Expected Sprite Großes Schwarzes Loch to have y-position 3.333333333333343 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 144.65, 5, "Expected Sprite Stern to have x-position 144.65 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 7.566666666666666, 5, "Expected Sprite Stern to have y-position 7.566666666666666 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.not(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff not to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  await t.runForSteps(60);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 130.36453657309733, 1, "Expected Sprite Raumschiff to face in direction 130.36453657309733 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -107.04340323334625, 5, "Expected Sprite Raumschiff to have x-position -107.04340323334625 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 90.98689274834426, 5, "Expected Sprite Raumschiff to have y-position 90.98689274834426 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, -53.33333333333333, 5, "Expected Sprite Großes Schwarzes Loch to have x-position -53.33333333333333 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, 3.333333333333343, 5, "Expected Sprite Großes Schwarzes Loch to have y-position 3.333333333333343 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 144.65, 5, "Expected Sprite Stern to have x-position 144.65 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 7.566666666666666, 5, "Expected Sprite Stern to have y-position 7.566666666666666 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.not(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff not to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  await t.runForSteps(67);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 130.36453657309733, 1, "Expected Sprite Raumschiff to face in direction 130.36453657309733 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -107.04340323334625, 5, "Expected Sprite Raumschiff to have x-position -107.04340323334625 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 90.98689274834426, 5, "Expected Sprite Raumschiff to have y-position 90.98689274834426 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, -53.33333333333333, 5, "Expected Sprite Großes Schwarzes Loch to have x-position -53.33333333333333 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, 3.333333333333343, 5, "Expected Sprite Großes Schwarzes Loch to have y-position 3.333333333333343 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 144.65, 5, "Expected Sprite Stern to have x-position 144.65 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 7.566666666666666, 5, "Expected Sprite Stern to have y-position 7.566666666666666 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.not(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff not to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  await t.runForSteps(12);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 130.36453657309733, 1, "Expected Sprite Raumschiff to face in direction 130.36453657309733 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -107.04340323334625, 5, "Expected Sprite Raumschiff to have x-position -107.04340323334625 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 90.98689274834426, 5, "Expected Sprite Raumschiff to have y-position 90.98689274834426 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, -53.33333333333333, 5, "Expected Sprite Großes Schwarzes Loch to have x-position -53.33333333333333 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, 3.333333333333343, 5, "Expected Sprite Großes Schwarzes Loch to have y-position 3.333333333333343 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 144.65, 5, "Expected Sprite Stern to have x-position 144.65 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 7.566666666666666, 5, "Expected Sprite Stern to have y-position 7.566666666666666 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.not(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff not to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  await t.runForSteps(36);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 130.36453657309733, 1, "Expected Sprite Raumschiff to face in direction 130.36453657309733 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -107.04340323334625, 5, "Expected Sprite Raumschiff to have x-position -107.04340323334625 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 90.98689274834426, 5, "Expected Sprite Raumschiff to have y-position 90.98689274834426 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, -53.33333333333333, 5, "Expected Sprite Großes Schwarzes Loch to have x-position -53.33333333333333 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, 3.333333333333343, 5, "Expected Sprite Großes Schwarzes Loch to have y-position 3.333333333333343 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 144.65, 5, "Expected Sprite Stern to have x-position 144.65 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 7.566666666666666, 5, "Expected Sprite Stern to have y-position 7.566666666666666 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.not(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff not to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  await t.runForSteps(38);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 130.36453657309733, 1, "Expected Sprite Raumschiff to face in direction 130.36453657309733 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -107.04340323334625, 5, "Expected Sprite Raumschiff to have x-position -107.04340323334625 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 90.98689274834426, 5, "Expected Sprite Raumschiff to have y-position 90.98689274834426 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, -53.33333333333333, 5, "Expected Sprite Großes Schwarzes Loch to have x-position -53.33333333333333 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, 3.333333333333343, 5, "Expected Sprite Großes Schwarzes Loch to have y-position 3.333333333333343 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 144.65, 5, "Expected Sprite Stern to have x-position 144.65 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 7.566666666666666, 5, "Expected Sprite Stern to have y-position 7.566666666666666 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.not(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff not to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  await t.runForSteps(20);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 130.36453657309733, 1, "Expected Sprite Raumschiff to face in direction 130.36453657309733 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -107.04340323334625, 5, "Expected Sprite Raumschiff to have x-position -107.04340323334625 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 90.98689274834426, 5, "Expected Sprite Raumschiff to have y-position 90.98689274834426 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, -53.33333333333333, 5, "Expected Sprite Großes Schwarzes Loch to have x-position -53.33333333333333 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, 3.333333333333343, 5, "Expected Sprite Großes Schwarzes Loch to have y-position 3.333333333333343 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 144.65, 5, "Expected Sprite Stern to have x-position 144.65 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 7.566666666666666, 5, "Expected Sprite Stern to have y-position 7.566666666666666 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.not(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff not to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 130.36453657309733, 1, "Expected Sprite Raumschiff to face in direction 130.36453657309733 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -107.04340323334625, 5, "Expected Sprite Raumschiff to have x-position -107.04340323334625 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 90.98689274834426, 5, "Expected Sprite Raumschiff to have y-position 90.98689274834426 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, -53.33333333333333, 5, "Expected Sprite Großes Schwarzes Loch to have x-position -53.33333333333333 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, 3.333333333333343, 5, "Expected Sprite Großes Schwarzes Loch to have y-position 3.333333333333343 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 144.65, 5, "Expected Sprite Stern to have x-position 144.65 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 7.566666666666666, 5, "Expected Sprite Stern to have y-position 7.566666666666666 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.not(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff not to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  await t.runForSteps(200);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 130.36453657309733, 1, "Expected Sprite Raumschiff to face in direction 130.36453657309733 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -107.04340323334625, 5, "Expected Sprite Raumschiff to have x-position -107.04340323334625 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 90.98689274834426, 5, "Expected Sprite Raumschiff to have y-position 90.98689274834426 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, -53.33333333333333, 5, "Expected Sprite Großes Schwarzes Loch to have x-position -53.33333333333333 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, 3.333333333333343, 5, "Expected Sprite Großes Schwarzes Loch to have y-position 3.333333333333343 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 144.65, 5, "Expected Sprite Stern to have x-position 144.65 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 7.566666666666666, 5, "Expected Sprite Stern to have y-position 7.566666666666666 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.not(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff not to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.end();
}
const test1 = async function (t) {
  t.dragSprite('Raumschiff', 178.61097634752664, 138.9982323149451, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 130.36453657309735, 1, "Expected Sprite Raumschiff to face in direction 130.36453657309735 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -198.4761213644811, 5, "Expected Sprite Raumschiff to have x-position -198.4761213644811 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 168.70470315980893, 5, "Expected Sprite Raumschiff to have y-position 168.70470315980893 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, 20, 5, "Expected Sprite Großes Schwarzes Loch to have x-position 20 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, 70, 5, "Expected Sprite Großes Schwarzes Loch to have y-position 70 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 140, 5, "Expected Sprite Stern to have x-position 140 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 10, 5, "Expected Sprite Stern to have y-position 10 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.dragSprite('Raumschiff', -142.94755222705686, 128.752301055974, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 132.0092396192471, 1, "Expected Sprite Raumschiff to face in direction 132.0092396192471 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -141.4614784058088, 5, "Expected Sprite Raumschiff to have x-position -141.4614784058088 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 127.41380017894731, 5, "Expected Sprite Raumschiff to have y-position 127.41380017894731 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, 18.77777777777778, 5, "Expected Sprite Großes Schwarzes Loch to have x-position 18.77777777777778 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, 68.88888888888889, 5, "Expected Sprite Großes Schwarzes Loch to have y-position 68.88888888888889 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 135.35, 5, "Expected Sprite Stern to have x-position 135.35 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 12.433333333333334, 5, "Expected Sprite Stern to have y-position 12.433333333333334 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.mouseMove(182, 22);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 108.05042153411478, 1, "Expected Sprite Raumschiff to face in direction 108.05042153411478 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -139.55990999305635, 5, "Expected Sprite Raumschiff to have x-position -139.55990999305635 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 126.79409252882336, 5, "Expected Sprite Raumschiff to have y-position 126.79409252882336 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, 17.555555555555557, 5, "Expected Sprite Großes Schwarzes Loch to have x-position 17.555555555555557 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, 67.77777777777777, 5, "Expected Sprite Großes Schwarzes Loch to have y-position 67.77777777777777 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 130.7, 5, "Expected Sprite Stern to have x-position 130.7 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 14.866666666666667, 5, "Expected Sprite Stern to have y-position 14.866666666666667 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.dragSprite('Raumschiff', -163.8023721285949, 125.82275673358183, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 106.71171497967984, 1, "Expected Sprite Raumschiff to face in direction 106.71171497967984 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -161.88684468926465, 5, "Expected Sprite Raumschiff to have x-position -161.88684468926465 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 125.24764402360849, 5, "Expected Sprite Raumschiff to have y-position 125.24764402360849 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, 16.333333333333332, 5, "Expected Sprite Großes Schwarzes Loch to have x-position 16.333333333333332 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, 66.66666666666667, 5, "Expected Sprite Großes Schwarzes Loch to have y-position 66.66666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 126.05, 5, "Expected Sprite Stern to have x-position 126.05 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 17.3, 5, "Expected Sprite Stern to have y-position 17.3 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.dragSprite('Raumschiff', -123.64315329730672, 52.25976846003454, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 95.65406255853533, 1, "Expected Sprite Raumschiff to face in direction 95.65406255853533 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -121.65288353591504, 5, "Expected Sprite Raumschiff to have x-position -121.65288353591504 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 52.06272461493935, 5, "Expected Sprite Raumschiff to have y-position 52.06272461493935 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, 15.11111111111111, 5, "Expected Sprite Großes Schwarzes Loch to have x-position 15.11111111111111 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, 65.55555555555556, 5, "Expected Sprite Großes Schwarzes Loch to have y-position 65.55555555555556 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 121.4, 5, "Expected Sprite Stern to have x-position 121.4 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 19.733333333333334, 5, "Expected Sprite Stern to have y-position 19.733333333333334 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.dragSprite('Raumschiff', -186.65551233615705, 58.312064177091386, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 95.62541027334863, 1, "Expected Sprite Raumschiff to face in direction 95.62541027334863 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -184.66514428659082, 5, "Expected Sprite Raumschiff to have x-position -184.66514428659082 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 58.11601564415645, 5, "Expected Sprite Raumschiff to have y-position 58.11601564415645 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, 13.88888888888889, 5, "Expected Sprite Großes Schwarzes Loch to have x-position 13.88888888888889 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, 64.44444444444444, 5, "Expected Sprite Großes Schwarzes Loch to have y-position 64.44444444444444 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 116.75, 5, "Expected Sprite Stern to have x-position 116.75 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 22.166666666666664, 5, "Expected Sprite Stern to have y-position 22.166666666666664 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.mouseMove(-130, 126);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 38.84355722690019, 1, "Expected Sprite Raumschiff to face in direction 38.84355722690019 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -183.41075209413475, 5, "Expected Sprite Raumschiff to have x-position -183.41075209413475 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 59.673738413940995, 5, "Expected Sprite Raumschiff to have y-position 59.673738413940995 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, 12.666666666666668, 5, "Expected Sprite Großes Schwarzes Loch to have x-position 12.666666666666668 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, 63.333333333333336, 5, "Expected Sprite Großes Schwarzes Loch to have y-position 63.333333333333336 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 112.1, 5, "Expected Sprite Stern to have x-position 112.1 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 24.6, 5, "Expected Sprite Stern to have y-position 24.6 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.dragSprite('Raumschiff', -176.25654199288962, 122.7641044171157, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 85.99836915405585, 1, "Expected Sprite Raumschiff to face in direction 85.99836915405585 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -174.2614178642233, 5, "Expected Sprite Raumschiff to have x-position -174.2614178642233 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 122.90367415313811, 5, "Expected Sprite Raumschiff to have y-position 122.90367415313811 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, 11.444444444444445, 5, "Expected Sprite Großes Schwarzes Loch to have x-position 11.444444444444445 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, 62.22222222222222, 5, "Expected Sprite Großes Schwarzes Loch to have y-position 62.22222222222222 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 107.45, 5, "Expected Sprite Stern to have x-position 107.45 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 27.033333333333335, 5, "Expected Sprite Stern to have y-position 27.033333333333335 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  await t.runForSteps(27);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, -94.00163084594533, 1, "Expected Sprite Raumschiff to face in direction -94.00163084594533 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -130.36868703356396, 5, "Expected Sprite Raumschiff to have x-position -130.36868703356396 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 125.9742083456312, 5, "Expected Sprite Raumschiff to have y-position 125.9742083456312 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, -22.77777777777778, 5, "Expected Sprite Großes Schwarzes Loch to have x-position -22.77777777777778 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, 31.111111111111107, 5, "Expected Sprite Großes Schwarzes Loch to have y-position 31.111111111111107 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -22.75, 5, "Expected Sprite Stern to have x-position -22.75 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 95.16666666666667, 5, "Expected Sprite Stern to have y-position 95.16666666666667 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  await t.runForSteps(64);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 85.99836915405488, 1, "Expected Sprite Raumschiff to face in direction 85.99836915405488 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -128.37356290489763, 5, "Expected Sprite Raumschiff to have x-position -128.37356290489763 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 126.11377808165365, 5, "Expected Sprite Raumschiff to have y-position 126.11377808165365 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, -68.88888888888889, 5, "Expected Sprite Großes Schwarzes Loch to have x-position -68.88888888888889 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, -25.555555555555557, 5, "Expected Sprite Großes Schwarzes Loch to have y-position -25.555555555555557 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -19.616666666666674, 5, "Expected Sprite Stern to have x-position -19.616666666666674 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 56.56666666666668, 5, "Expected Sprite Stern to have y-position 56.56666666666668 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.not(t.getSprite("Stern").visible, "Expected Sprite Stern not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.dragSprite('Raumschiff', -200.82130021328433, 70.82739427536058, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 52.07999304387513, 1, "Expected Sprite Raumschiff to face in direction 52.07999304387513 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -199.24356114094954, 5, "Expected Sprite Raumschiff to have x-position -199.24356114094954 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 72.05651567686172, 5, "Expected Sprite Raumschiff to have y-position 72.05651567686172 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, -66.77777777777777, 5, "Expected Sprite Großes Schwarzes Loch to have x-position -66.77777777777777 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, -25.11111111111111, 5, "Expected Sprite Großes Schwarzes Loch to have y-position -25.11111111111111 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -19.616666666666674, 5, "Expected Sprite Stern to have x-position -19.616666666666674 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 56.56666666666668, 5, "Expected Sprite Stern to have y-position 56.56666666666668 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.not(t.getSprite("Stern").visible, "Expected Sprite Stern not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.dragSprite('Raumschiff', -148, 88, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, 25.346175941946697, 1, "Expected Sprite Raumschiff to face in direction 25.346175941946697 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -147.1438273105219, 5, "Expected Sprite Raumschiff to have x-position -147.1438273105219 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 89.80747567778708, 5, "Expected Sprite Raumschiff to have y-position 89.80747567778708 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, -64.66666666666667, 5, "Expected Sprite Großes Schwarzes Loch to have x-position -64.66666666666667 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, -24.666666666666668, 5, "Expected Sprite Großes Schwarzes Loch to have y-position -24.666666666666668 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -19.616666666666674, 5, "Expected Sprite Stern to have x-position -19.616666666666674 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 56.56666666666668, 5, "Expected Sprite Stern to have y-position 56.56666666666668 +-5");
  t.assert.equal(t.getSprite("Raumschiff").sayText, "Hilfe!", "Expected Sprite Raumschiff to say Hilfe!");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.ok(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch to be visible");
  t.assert.not(t.getSprite("Stern").visible, "Expected Sprite Stern not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.dragSprite('Raumschiff', 149.8364621389528, 137.78310642559254, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 1, "Expected backdrop 1");
  t.assert.equal(t.getSprite("Raumschiff").currentCostume, 0, "Expected Sprite Raumschiff to have costume 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").currentCostume, 0, "Expected Sprite Großes Schwarzes Loch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Raumschiff").getCloneCount(), 0, "Expected Sprite Raumschiff to have 0 clones");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").getCloneCount(), 0, "Expected Sprite Großes Schwarzes Loch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Raumschiff").direction, -92.41113572965185, 1, "Expected Sprite Raumschiff to face in direction -92.41113572965185 +-1");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").direction, -114, 1, "Expected Sprite Großes Schwarzes Loch to face in direction -114 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").effects.color, 0, "Expected effect color of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.fisheye, 0, "Expected effect fisheye of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.whirl, 0, "Expected effect whirl of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.pixelate, 0, "Expected effect pixelate of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.mosaic, 0, "Expected effect mosaic of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.brightness, 0, "Expected effect brightness of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Raumschiff").effects.ghost, 0, "Expected effect ghost of Sprite Raumschiff to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.color, 0, "Expected effect color of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.fisheye, 0, "Expected effect fisheye of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.whirl, 0, "Expected effect whirl of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.pixelate, 0, "Expected effect pixelate of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.mosaic, 0, "Expected effect mosaic of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.brightness, 0, "Expected effect brightness of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").effects.ghost, 0, "Expected effect ghost of Sprite Großes Schwarzes Loch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 2, "Expected Sprite Raumschiff to be at layer 2");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").layerOrder, 3, "Expected Sprite Großes Schwarzes Loch to be at layer 3");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 147.83823279399346, 5, "Expected Sprite Raumschiff to have x-position 147.83823279399346 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 137.69896675038927, 5, "Expected Sprite Raumschiff to have y-position 137.69896675038927 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").x, -62.55555555555556, 5, "Expected Sprite Großes Schwarzes Loch to have x-position -62.55555555555556 +-5");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").y, -24.22222222222222, 5, "Expected Sprite Großes Schwarzes Loch to have y-position -24.22222222222222 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -19.616666666666674, 5, "Expected Sprite Stern to have x-position -19.616666666666674 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, 56.56666666666668, 5, "Expected Sprite Stern to have y-position 56.56666666666668 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").sayText, "Expected Sprite Großes Schwarzes Loch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 32, 1, "Expected Sprite Raumschiff to have size 32 +-1");
  t.assert.withinRange(t.getSprite("Großes Schwarzes Loch").size, 100, 1, "Expected Sprite Großes Schwarzes Loch to have size 100 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 50, 1, "Expected Sprite Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Raumschiff").visible, "Expected Sprite Raumschiff to be visible");
  t.assert.not(t.getSprite("Großes Schwarzes Loch").visible, "Expected Sprite Großes Schwarzes Loch not to be visible");
  t.assert.not(t.getSprite("Stern").visible, "Expected Sprite Stern not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Raumschiff").volume, 100, "Expected Sprite Raumschiff to have volume 100");
  t.assert.equal(t.getSprite("Großes Schwarzes Loch").volume, 100, "Expected Sprite Großes Schwarzes Loch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.end();
}

module.exports = [
  {
      test: test0,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687936708570',
      type: 'standard',
  },
  {
      test: test1,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687936708570',
      type: 'standard',
  }
]
