const test0 = async function (t) {
  t.dragSprite('Qualle', -189, -128, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, 148.25471257764477, 1, "Expected Sprite Fisch to face in direction 148.25471257764477 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 90, 1, "Expected Sprite Kugelfisch to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, -49.90429975096373, 1, "Expected Sprite Qualle to face in direction -49.90429975096373 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, -189, 5, "Expected Sprite Fisch to have x-position -189 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, -128, 5, "Expected Sprite Fisch to have y-position -128 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -15, 5, "Expected Sprite Stern to have x-position -15 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, -98, 5, "Expected Sprite Stern to have y-position -98 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, -143, 5, "Expected Sprite Kugelfisch to have x-position -143 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, 80, 5, "Expected Sprite Kugelfisch to have y-position 80 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, 50, 5, "Expected Sprite Qualle to have x-position 50 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, 72, 5, "Expected Sprite Qualle to have y-position 72 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 60, 1, "Expected Sprite Kugelfisch to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  t.end();
}
const test1 = async function (t) {
  await t.runForSteps(17);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, 148.25471257764477, 1, "Expected Sprite Fisch to face in direction 148.25471257764477 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 90, 1, "Expected Sprite Kugelfisch to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, -49.90429975096373, 1, "Expected Sprite Qualle to face in direction -49.90429975096373 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, -189, 5, "Expected Sprite Fisch to have x-position -189 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, -128, 5, "Expected Sprite Fisch to have y-position -128 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -15, 5, "Expected Sprite Stern to have x-position -15 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, -98, 5, "Expected Sprite Stern to have y-position -98 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, -109, 5, "Expected Sprite Kugelfisch to have x-position -109 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, 80, 5, "Expected Sprite Kugelfisch to have y-position 80 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, 50, 5, "Expected Sprite Qualle to have x-position 50 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, 72, 5, "Expected Sprite Qualle to have y-position 72 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 60, 1, "Expected Sprite Kugelfisch to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  t.mouseMove(213, -134);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, 148.25471257764477, 1, "Expected Sprite Fisch to face in direction 148.25471257764477 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 90, 1, "Expected Sprite Kugelfisch to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, -49.90429975096373, 1, "Expected Sprite Qualle to face in direction -49.90429975096373 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, -189, 5, "Expected Sprite Fisch to have x-position -189 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, -128, 5, "Expected Sprite Fisch to have y-position -128 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -15, 5, "Expected Sprite Stern to have x-position -15 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, -98, 5, "Expected Sprite Stern to have y-position -98 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, -107, 5, "Expected Sprite Kugelfisch to have x-position -107 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, 80, 5, "Expected Sprite Kugelfisch to have y-position 80 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, 50, 5, "Expected Sprite Qualle to have x-position 50 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, 72, 5, "Expected Sprite Qualle to have y-position 72 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 60, 1, "Expected Sprite Kugelfisch to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  await t.runForSteps(62);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, -81.02737338510363, 1, "Expected Sprite Fisch to face in direction -81.02737338510363 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 180, 1, "Expected Sprite Kugelfisch to face in direction 180 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, 141.64676552381442, 1, "Expected Sprite Qualle to face in direction 141.64676552381442 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, 213, 5, "Expected Sprite Fisch to have x-position 213 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, -134, 5, "Expected Sprite Fisch to have y-position -134 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -15, 5, "Expected Sprite Stern to have x-position -15 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, -98, 5, "Expected Sprite Stern to have y-position -98 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, -5, 5, "Expected Sprite Kugelfisch to have x-position -5 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, 58, 5, "Expected Sprite Kugelfisch to have y-position 58 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, 114.53282296785096, 5, "Expected Sprite Qualle to have x-position 114.53282296785096 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, -9.556819210903603, 5, "Expected Sprite Qualle to have y-position -9.556819210903603 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 70, 1, "Expected Sprite Kugelfisch to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  t.end();
}
const test2 = async function (t) {
  t.dragSprite('Qualle', -189, -128, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, 148.25471257764477, 1, "Expected Sprite Fisch to face in direction 148.25471257764477 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 90, 1, "Expected Sprite Kugelfisch to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, -49.90429975096373, 1, "Expected Sprite Qualle to face in direction -49.90429975096373 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, -189, 5, "Expected Sprite Fisch to have x-position -189 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, -128, 5, "Expected Sprite Fisch to have y-position -128 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -15, 5, "Expected Sprite Stern to have x-position -15 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, -98, 5, "Expected Sprite Stern to have y-position -98 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, -143, 5, "Expected Sprite Kugelfisch to have x-position -143 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, 80, 5, "Expected Sprite Kugelfisch to have y-position 80 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, 50, 5, "Expected Sprite Qualle to have x-position 50 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, 72, 5, "Expected Sprite Qualle to have y-position 72 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 60, 1, "Expected Sprite Kugelfisch to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  t.dragSprite('Stern', -182.91334827213888, -158.92125627860142, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, 148.25471257764477, 1, "Expected Sprite Fisch to face in direction 148.25471257764477 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 90, 1, "Expected Sprite Kugelfisch to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, -49.90429975096373, 1, "Expected Sprite Qualle to face in direction -49.90429975096373 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, -189, 5, "Expected Sprite Fisch to have x-position -189 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, -128, 5, "Expected Sprite Fisch to have y-position -128 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, 173, 5, "Expected Sprite Stern to have x-position 173 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, -27, 5, "Expected Sprite Stern to have y-position -27 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, -141, 5, "Expected Sprite Kugelfisch to have x-position -141 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, 80, 5, "Expected Sprite Kugelfisch to have y-position 80 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, 50, 5, "Expected Sprite Qualle to have x-position 50 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, 72, 5, "Expected Sprite Qualle to have y-position 72 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 60, 1, "Expected Sprite Kugelfisch to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  t.end();
}
const test3 = async function (t) {
  t.dragSprite('Kugelfisch', -189, -128, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, 148.25471257764477, 1, "Expected Sprite Fisch to face in direction 148.25471257764477 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 90, 1, "Expected Sprite Kugelfisch to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, -49.90429975096373, 1, "Expected Sprite Qualle to face in direction -49.90429975096373 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, -189, 5, "Expected Sprite Fisch to have x-position -189 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, -128, 5, "Expected Sprite Fisch to have y-position -128 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -15, 5, "Expected Sprite Stern to have x-position -15 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, -98, 5, "Expected Sprite Stern to have y-position -98 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, -143, 5, "Expected Sprite Kugelfisch to have x-position -143 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, 80, 5, "Expected Sprite Kugelfisch to have y-position 80 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, 50, 5, "Expected Sprite Qualle to have x-position 50 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, 72, 5, "Expected Sprite Qualle to have y-position 72 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 60, 1, "Expected Sprite Kugelfisch to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  t.dragSprite('Kugelfisch', -240, -81.02702837057134, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, 148.25471257764477, 1, "Expected Sprite Fisch to face in direction 148.25471257764477 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 90, 1, "Expected Sprite Kugelfisch to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, -49.90429975096373, 1, "Expected Sprite Qualle to face in direction -49.90429975096373 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, -189, 5, "Expected Sprite Fisch to have x-position -189 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, -128, 5, "Expected Sprite Fisch to have y-position -128 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -15, 5, "Expected Sprite Stern to have x-position -15 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, -98, 5, "Expected Sprite Stern to have y-position -98 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, -238, 5, "Expected Sprite Kugelfisch to have x-position -238 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, -81.02702837057134, 5, "Expected Sprite Kugelfisch to have y-position -81.02702837057134 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, 50, 5, "Expected Sprite Qualle to have x-position 50 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, 72, 5, "Expected Sprite Qualle to have y-position 72 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 60, 1, "Expected Sprite Kugelfisch to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  await t.runForSteps(51);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, 148.25471257764477, 1, "Expected Sprite Fisch to face in direction 148.25471257764477 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 90, 1, "Expected Sprite Kugelfisch to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, -49.90429975096373, 1, "Expected Sprite Qualle to face in direction -49.90429975096373 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, -189, 5, "Expected Sprite Fisch to have x-position -189 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, -128, 5, "Expected Sprite Fisch to have y-position -128 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -15, 5, "Expected Sprite Stern to have x-position -15 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, -98, 5, "Expected Sprite Stern to have y-position -98 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, -188, 5, "Expected Sprite Kugelfisch to have x-position -188 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, -81.02702837057134, 5, "Expected Sprite Kugelfisch to have y-position -81.02702837057134 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, 50, 5, "Expected Sprite Qualle to have x-position 50 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, 72, 5, "Expected Sprite Qualle to have y-position 72 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 60, 1, "Expected Sprite Kugelfisch to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  t.end();
}
const test4 = async function (t) {
  await t.runForSteps(17);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, 148.25471257764477, 1, "Expected Sprite Fisch to face in direction 148.25471257764477 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 90, 1, "Expected Sprite Kugelfisch to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, -49.90429975096373, 1, "Expected Sprite Qualle to face in direction -49.90429975096373 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, -189, 5, "Expected Sprite Fisch to have x-position -189 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, -128, 5, "Expected Sprite Fisch to have y-position -128 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -15, 5, "Expected Sprite Stern to have x-position -15 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, -98, 5, "Expected Sprite Stern to have y-position -98 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, -109, 5, "Expected Sprite Kugelfisch to have x-position -109 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, 80, 5, "Expected Sprite Kugelfisch to have y-position 80 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, 50, 5, "Expected Sprite Qualle to have x-position 50 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, 72, 5, "Expected Sprite Qualle to have y-position 72 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 60, 1, "Expected Sprite Kugelfisch to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  await t.runForSteps(62);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, -171.2977762100532, 1, "Expected Sprite Fisch to face in direction -171.2977762100532 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 90, 1, "Expected Sprite Kugelfisch to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, -145.22216863363613, 1, "Expected Sprite Qualle to face in direction -145.22216863363613 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, 0, 5, "Expected Sprite Fisch to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, 0, 5, "Expected Sprite Fisch to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -15, 5, "Expected Sprite Stern to have x-position -15 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, -98, 5, "Expected Sprite Stern to have y-position -98 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, -45, 5, "Expected Sprite Kugelfisch to have x-position -45 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, 80, 5, "Expected Sprite Kugelfisch to have y-position 80 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, 27.18416762018622, 5, "Expected Sprite Qualle to have x-position 27.18416762018622 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, 39.145201373068176, 5, "Expected Sprite Qualle to have y-position 39.145201373068176 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 60, 1, "Expected Sprite Kugelfisch to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  t.end();
}

module.exports = [
  {
      test: test0,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687937166592',
      type: 'standard',
  },
  {
      test: test1,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687937166592',
      type: 'standard',
  },
  {
      test: test2,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687937166592',
      type: 'standard',
  },
  {
      test: test3,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687937166592',
      type: 'standard',
  },
  {
      test: test4,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687937166592',
      type: 'standard',
  }
]
