const test0 = async function (t) {
  t.dragSprite('Qualle', -240, -146.86990785677406, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, 148.25471257764477, 1, "Expected Sprite Fisch to face in direction 148.25471257764477 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 90, 1, "Expected Sprite Kugelfisch to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, -49.90429975096373, 1, "Expected Sprite Qualle to face in direction -49.90429975096373 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, -189, 5, "Expected Sprite Fisch to have x-position -189 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, -128, 5, "Expected Sprite Fisch to have y-position -128 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -15, 5, "Expected Sprite Stern to have x-position -15 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, -98, 5, "Expected Sprite Stern to have y-position -98 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, -143, 5, "Expected Sprite Kugelfisch to have x-position -143 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, 80, 5, "Expected Sprite Kugelfisch to have y-position 80 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, 50, 5, "Expected Sprite Qualle to have x-position 50 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, 72, 5, "Expected Sprite Qualle to have y-position 72 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 60, 1, "Expected Sprite Kugelfisch to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  t.mouseMove(-178, -80);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, 148.25471257764477, 1, "Expected Sprite Fisch to face in direction 148.25471257764477 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 90, 1, "Expected Sprite Kugelfisch to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, -49.90429975096373, 1, "Expected Sprite Qualle to face in direction -49.90429975096373 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, -189, 5, "Expected Sprite Fisch to have x-position -189 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, -128, 5, "Expected Sprite Fisch to have y-position -128 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -15, 5, "Expected Sprite Stern to have x-position -15 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, -98, 5, "Expected Sprite Stern to have y-position -98 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, -141, 5, "Expected Sprite Kugelfisch to have x-position -141 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, 80, 5, "Expected Sprite Kugelfisch to have y-position 80 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, 50, 5, "Expected Sprite Qualle to have x-position 50 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, 72, 5, "Expected Sprite Qualle to have y-position 72 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 60, 1, "Expected Sprite Kugelfisch to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  t.mouseMove(210, -44);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, 148.25471257764477, 1, "Expected Sprite Fisch to face in direction 148.25471257764477 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 90, 1, "Expected Sprite Kugelfisch to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, -49.90429975096373, 1, "Expected Sprite Qualle to face in direction -49.90429975096373 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, -189, 5, "Expected Sprite Fisch to have x-position -189 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, -128, 5, "Expected Sprite Fisch to have y-position -128 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -15, 5, "Expected Sprite Stern to have x-position -15 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, -98, 5, "Expected Sprite Stern to have y-position -98 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, -139, 5, "Expected Sprite Kugelfisch to have x-position -139 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, 80, 5, "Expected Sprite Kugelfisch to have y-position 80 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, 50, 5, "Expected Sprite Qualle to have x-position 50 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, 72, 5, "Expected Sprite Qualle to have y-position 72 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 60, 1, "Expected Sprite Kugelfisch to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  t.dragSprite('Stern', -202.9836829641219, -99.68798754157623, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, 148.25471257764477, 1, "Expected Sprite Fisch to face in direction 148.25471257764477 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 90, 1, "Expected Sprite Kugelfisch to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, -49.90429975096373, 1, "Expected Sprite Qualle to face in direction -49.90429975096373 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, -189, 5, "Expected Sprite Fisch to have x-position -189 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, -128, 5, "Expected Sprite Fisch to have y-position -128 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -30, 5, "Expected Sprite Stern to have x-position -30 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, -95, 5, "Expected Sprite Stern to have y-position -95 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, -137, 5, "Expected Sprite Kugelfisch to have x-position -137 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, 80, 5, "Expected Sprite Kugelfisch to have y-position 80 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, 50, 5, "Expected Sprite Qualle to have x-position 50 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, 72, 5, "Expected Sprite Qualle to have y-position 72 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 60, 1, "Expected Sprite Kugelfisch to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  t.mouseMove(-19, -176);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, 148.25471257764477, 1, "Expected Sprite Fisch to face in direction 148.25471257764477 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 90, 1, "Expected Sprite Kugelfisch to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, -49.90429975096373, 1, "Expected Sprite Qualle to face in direction -49.90429975096373 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, -189, 5, "Expected Sprite Fisch to have x-position -189 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, -128, 5, "Expected Sprite Fisch to have y-position -128 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -30, 5, "Expected Sprite Stern to have x-position -30 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, -95, 5, "Expected Sprite Stern to have y-position -95 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, -135, 5, "Expected Sprite Kugelfisch to have x-position -135 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, 80, 5, "Expected Sprite Kugelfisch to have y-position 80 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, 50, 5, "Expected Sprite Qualle to have x-position 50 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, 72, 5, "Expected Sprite Qualle to have y-position 72 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 60, 1, "Expected Sprite Kugelfisch to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  t.dragSprite('Stern', -157.22220084957567, -125.25459410344877, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, 148.25471257764477, 1, "Expected Sprite Fisch to face in direction 148.25471257764477 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 90, 1, "Expected Sprite Kugelfisch to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, -49.90429975096373, 1, "Expected Sprite Qualle to face in direction -49.90429975096373 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, -189, 5, "Expected Sprite Fisch to have x-position -189 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, -128, 5, "Expected Sprite Fisch to have y-position -128 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -18, 5, "Expected Sprite Stern to have x-position -18 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, -81, 5, "Expected Sprite Stern to have y-position -81 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, -133, 5, "Expected Sprite Kugelfisch to have x-position -133 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, 80, 5, "Expected Sprite Kugelfisch to have y-position 80 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, 50, 5, "Expected Sprite Qualle to have x-position 50 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, 72, 5, "Expected Sprite Qualle to have y-position 72 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 60, 1, "Expected Sprite Kugelfisch to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  await t.runForSteps(48);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, 0.603091194380525, 1, "Expected Sprite Fisch to face in direction 0.603091194380525 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 90, 1, "Expected Sprite Kugelfisch to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, -164.45206044171124, 1, "Expected Sprite Qualle to face in direction -164.45206044171124 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, -19, 5, "Expected Sprite Fisch to have x-position -19 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, -176, 5, "Expected Sprite Fisch to have y-position -176 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -18, 5, "Expected Sprite Stern to have x-position -18 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, -81, 5, "Expected Sprite Stern to have y-position -81 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, -35, 5, "Expected Sprite Kugelfisch to have x-position -35 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, 80, 5, "Expected Sprite Kugelfisch to have y-position 80 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, 33.917326696314554, 5, "Expected Sprite Qualle to have x-position 33.917326696314554 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, 14.195608995449845, 5, "Expected Sprite Qualle to have y-position 14.195608995449845 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 60, 1, "Expected Sprite Kugelfisch to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  await t.runForSteps(69);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, 0.603091194380525, 1, "Expected Sprite Fisch to face in direction 0.603091194380525 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 180, 1, "Expected Sprite Kugelfisch to face in direction 180 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, -164.4520604417113, 1, "Expected Sprite Qualle to face in direction -164.4520604417113 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, -19, 5, "Expected Sprite Fisch to have x-position -19 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, -176, 5, "Expected Sprite Fisch to have y-position -176 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -18, 5, "Expected Sprite Stern to have x-position -18 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, -81, 5, "Expected Sprite Stern to have y-position -81 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, -5, 5, "Expected Sprite Kugelfisch to have x-position -5 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, -12, 5, "Expected Sprite Kugelfisch to have y-position -12 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, -5.967703096825007, 5, "Expected Sprite Qualle to have x-position -5.967703096825007 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, -129.1592806958346, 5, "Expected Sprite Qualle to have y-position -129.1592806958346 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 70, 1, "Expected Sprite Kugelfisch to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  t.end();
}
const test1 = async function (t) {
  t.mouseMove(-38, -141);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, 148.25471257764477, 1, "Expected Sprite Fisch to face in direction 148.25471257764477 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 90, 1, "Expected Sprite Kugelfisch to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, -49.90429975096373, 1, "Expected Sprite Qualle to face in direction -49.90429975096373 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, -189, 5, "Expected Sprite Fisch to have x-position -189 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, -128, 5, "Expected Sprite Fisch to have y-position -128 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -15, 5, "Expected Sprite Stern to have x-position -15 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, -98, 5, "Expected Sprite Stern to have y-position -98 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, -143, 5, "Expected Sprite Kugelfisch to have x-position -143 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, 80, 5, "Expected Sprite Kugelfisch to have y-position 80 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, 50, 5, "Expected Sprite Qualle to have x-position 50 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, 72, 5, "Expected Sprite Qualle to have y-position 72 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 60, 1, "Expected Sprite Kugelfisch to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  t.dragSprite('Kugelfisch', -240, -96.12986484008023, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, 148.25471257764477, 1, "Expected Sprite Fisch to face in direction 148.25471257764477 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 90, 1, "Expected Sprite Kugelfisch to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, -49.90429975096373, 1, "Expected Sprite Qualle to face in direction -49.90429975096373 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, -189, 5, "Expected Sprite Fisch to have x-position -189 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, -128, 5, "Expected Sprite Fisch to have y-position -128 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -15, 5, "Expected Sprite Stern to have x-position -15 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, -98, 5, "Expected Sprite Stern to have y-position -98 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, -238, 5, "Expected Sprite Kugelfisch to have x-position -238 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, -96.12986484008023, 5, "Expected Sprite Kugelfisch to have y-position -96.12986484008023 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, 50, 5, "Expected Sprite Qualle to have x-position 50 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, 72, 5, "Expected Sprite Qualle to have y-position 72 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 60, 1, "Expected Sprite Kugelfisch to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  await t.runForSteps(17);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, 148.25471257764477, 1, "Expected Sprite Fisch to face in direction 148.25471257764477 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 90, 1, "Expected Sprite Kugelfisch to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, -49.90429975096373, 1, "Expected Sprite Qualle to face in direction -49.90429975096373 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, -189, 5, "Expected Sprite Fisch to have x-position -189 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, -128, 5, "Expected Sprite Fisch to have y-position -128 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -15, 5, "Expected Sprite Stern to have x-position -15 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, -98, 5, "Expected Sprite Stern to have y-position -98 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, -234, 5, "Expected Sprite Kugelfisch to have x-position -234 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, -96.12986484008023, 5, "Expected Sprite Kugelfisch to have y-position -96.12986484008023 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, 50, 5, "Expected Sprite Qualle to have x-position 50 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, 72, 5, "Expected Sprite Qualle to have y-position 72 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 60, 1, "Expected Sprite Kugelfisch to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  t.end();
}

module.exports = [
  {
      test: test0,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687936748173',
      type: 'standard',
  },
  {
      test: test1,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687936748173',
      type: 'standard',
  }
]
