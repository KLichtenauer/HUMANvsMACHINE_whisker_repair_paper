const test0 = async function (t) {
  t.keyPress('left arrow', 2);
  await t.runForSteps(2);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 87, 1, "Expected Sprite Scheibe to face in direction 87 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 120.78789526876503, 1, "Expected Sprite Rot to face in direction 120.78789526876503 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, -229, 5, "Expected Sprite Rot to have x-position -229 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -38, 5, "Expected Sprite Rot to have y-position -38 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.keyPress('left arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 84, 1, "Expected Sprite Scheibe to face in direction 84 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 120.78789526876503, 1, "Expected Sprite Rot to face in direction 120.78789526876503 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, -148, 5, "Expected Sprite Rot to have x-position -148 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -119, 5, "Expected Sprite Rot to have y-position -119 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.dragSprite('Rot', 4, -12, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 84, 1, "Expected Sprite Scheibe to face in direction 84 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 120.78789526876503, 1, "Expected Sprite Rot to face in direction 120.78789526876503 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 112, 5, "Expected Sprite Rot to have x-position 112 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 159, 5, "Expected Sprite Rot to have y-position 159 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.keyPress('left arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 81, 1, "Expected Sprite Scheibe to face in direction 81 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 120.78789526876503, 1, "Expected Sprite Rot to face in direction 120.78789526876503 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 6, 5, "Expected Sprite Rot to have x-position 6 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -21, 5, "Expected Sprite Rot to have y-position -21 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.keyPress('right arrow', 2);
  await t.runForSteps(2);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 87, 1, "Expected Sprite Scheibe to face in direction 87 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 120.78789526876503, 1, "Expected Sprite Rot to face in direction 120.78789526876503 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, -10, 5, "Expected Sprite Rot to have x-position -10 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 177, 5, "Expected Sprite Rot to have y-position 177 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.keyPress('right arrow', 4);
  await t.runForSteps(4);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).currentCostume, 0, "Expected Clone 1 of Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 1, "Expected Sprite Rot to have 1 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 99, 1, "Expected Sprite Scheibe to face in direction 99 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 53.91492695714787, 1, "Expected Sprite Rot to face in direction 53.91492695714787 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).direction, 53.91492695714787, 1, "Expected Clone 1 of Rot to face in direction 53.91492695714787 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 3, "Expected Sprite Scheibe to be at layer 3");
  t.assert.equal(t.getSprite("Rot").layerOrder, 2, "Expected Sprite Rot to be at layer 2");
  t.assert.equal(t.getSprite("Rot").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, -236, 5, "Expected Sprite Rot to have x-position -236 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -172, 5, "Expected Sprite Rot to have y-position -172 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, -236, 5, "Expected Clone 1 of Rot to have x-position -236 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, -172, 5, "Expected Clone 1 of Rot to have y-position -172 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.not(t.getSprite("Rot").getClone(1).sayText, "Expected Clone 1 of Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).size, 80, 1, "Expected Clone 1 of Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.ok(t.getSprite("Rot").getClone(1).visible, "Expected Clone 1 of Rot to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.assert.equal(t.getSprite("Rot").getClone(1).volume, 100, "Expected Clone 1 of Rot to have volume 100");
  t.dragSprite('Rot', 0, 0, 1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 99, 1, "Expected Sprite Scheibe to face in direction 99 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 53.91492695714787, 1, "Expected Sprite Rot to face in direction 53.91492695714787 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, -236, 5, "Expected Sprite Rot to have x-position -236 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -172, 5, "Expected Sprite Rot to have y-position -172 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.end();
}
const test1 = async function (t) {
  t.keyPress('left arrow', 2);
  await t.runForSteps(2);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 87, 1, "Expected Sprite Scheibe to face in direction 87 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 120.78789526876503, 1, "Expected Sprite Rot to face in direction 120.78789526876503 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, -229, 5, "Expected Sprite Rot to have x-position -229 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -38, 5, "Expected Sprite Rot to have y-position -38 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  await t.runForSteps(22);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).currentCostume, 0, "Expected Clone 1 of Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 1, "Expected Sprite Rot to have 1 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 87, 1, "Expected Sprite Scheibe to face in direction 87 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 53.91492695714787, 1, "Expected Sprite Rot to face in direction 53.91492695714787 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).direction, 53.91492695714787, 1, "Expected Clone 1 of Rot to face in direction 53.91492695714787 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 3, "Expected Sprite Scheibe to be at layer 3");
  t.assert.equal(t.getSprite("Rot").layerOrder, 2, "Expected Sprite Rot to be at layer 2");
  t.assert.equal(t.getSprite("Rot").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, -236, 5, "Expected Sprite Rot to have x-position -236 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -172, 5, "Expected Sprite Rot to have y-position -172 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, -209.77777777777777, 5, "Expected Clone 1 of Rot to have x-position -209.77777777777777 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, -152.88888888888889, 5, "Expected Clone 1 of Rot to have y-position -152.88888888888889 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.not(t.getSprite("Rot").getClone(1).sayText, "Expected Clone 1 of Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).size, 80, 1, "Expected Clone 1 of Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.ok(t.getSprite("Rot").getClone(1).visible, "Expected Clone 1 of Rot to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.assert.equal(t.getSprite("Rot").getClone(1).volume, 100, "Expected Clone 1 of Rot to have volume 100");
  t.dragSprite('Rot', -17.894337908215274, -1.251295066160709, 1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 87, 1, "Expected Sprite Scheibe to face in direction 87 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 53.91492695714787, 1, "Expected Sprite Rot to face in direction 53.91492695714787 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, -236, 5, "Expected Sprite Rot to have x-position -236 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -172, 5, "Expected Sprite Rot to have y-position -172 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.end();
}
const test2 = async function (t) {
  t.keyPress('left arrow', 2);
  await t.runForSteps(2);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 87, 1, "Expected Sprite Scheibe to face in direction 87 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 120.78789526876503, 1, "Expected Sprite Rot to face in direction 120.78789526876503 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, -229, 5, "Expected Sprite Rot to have x-position -229 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -38, 5, "Expected Sprite Rot to have y-position -38 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.keyPress('left arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 84, 1, "Expected Sprite Scheibe to face in direction 84 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 120.78789526876503, 1, "Expected Sprite Rot to face in direction 120.78789526876503 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, -148, 5, "Expected Sprite Rot to have x-position -148 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -119, 5, "Expected Sprite Rot to have y-position -119 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  await t.runForSteps(22);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).currentCostume, 0, "Expected Clone 1 of Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 1, "Expected Sprite Rot to have 1 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 84, 1, "Expected Sprite Scheibe to face in direction 84 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 53.91492695714787, 1, "Expected Sprite Rot to face in direction 53.91492695714787 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).direction, 53.91492695714787, 1, "Expected Clone 1 of Rot to face in direction 53.91492695714787 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 3, "Expected Sprite Scheibe to be at layer 3");
  t.assert.equal(t.getSprite("Rot").layerOrder, 2, "Expected Sprite Rot to be at layer 2");
  t.assert.equal(t.getSprite("Rot").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, -236, 5, "Expected Sprite Rot to have x-position -236 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -172, 5, "Expected Sprite Rot to have y-position -172 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, -204.53333333333333, 5, "Expected Clone 1 of Rot to have x-position -204.53333333333333 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, -149.06666666666666, 5, "Expected Clone 1 of Rot to have y-position -149.06666666666666 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.not(t.getSprite("Rot").getClone(1).sayText, "Expected Clone 1 of Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).size, 80, 1, "Expected Clone 1 of Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.ok(t.getSprite("Rot").getClone(1).visible, "Expected Clone 1 of Rot to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.assert.equal(t.getSprite("Rot").getClone(1).volume, 100, "Expected Clone 1 of Rot to have volume 100");
  t.dragSprite('Rot', 4, -12, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).currentCostume, 0, "Expected Clone 1 of Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 1, "Expected Sprite Rot to have 1 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 84, 1, "Expected Sprite Scheibe to face in direction 84 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 53.91492695714787, 1, "Expected Sprite Rot to face in direction 53.91492695714787 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).direction, 53.91492695714787, 1, "Expected Clone 1 of Rot to face in direction 53.91492695714787 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 3, "Expected Sprite Scheibe to be at layer 3");
  t.assert.equal(t.getSprite("Rot").layerOrder, 2, "Expected Sprite Rot to be at layer 2");
  t.assert.equal(t.getSprite("Rot").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 4, 5, "Expected Sprite Rot to have x-position 4 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -12, 5, "Expected Sprite Rot to have y-position -12 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, -201.9111111111111, 5, "Expected Clone 1 of Rot to have x-position -201.9111111111111 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, -147.15555555555557, 5, "Expected Clone 1 of Rot to have y-position -147.15555555555557 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.not(t.getSprite("Rot").getClone(1).sayText, "Expected Clone 1 of Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).size, 80, 1, "Expected Clone 1 of Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.ok(t.getSprite("Rot").getClone(1).visible, "Expected Clone 1 of Rot to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.assert.equal(t.getSprite("Rot").getClone(1).volume, 100, "Expected Clone 1 of Rot to have volume 100");
  t.dragSprite('Rot', -17.894337908215274, -1.251295066160709, 1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 84, 1, "Expected Sprite Scheibe to face in direction 84 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 53.91492695714787, 1, "Expected Sprite Rot to face in direction 53.91492695714787 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 4, 5, "Expected Sprite Rot to have x-position 4 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -12, 5, "Expected Sprite Rot to have y-position -12 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.keyPress('left arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 81, 1, "Expected Sprite Scheibe to face in direction 81 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 53.91492695714787, 1, "Expected Sprite Rot to face in direction 53.91492695714787 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 4, 5, "Expected Sprite Rot to have x-position 4 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -12, 5, "Expected Sprite Rot to have y-position -12 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.keyPress('right arrow', 2);
  await t.runForSteps(2);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 87, 1, "Expected Sprite Scheibe to face in direction 87 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 53.91492695714787, 1, "Expected Sprite Rot to face in direction 53.91492695714787 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 4, 5, "Expected Sprite Rot to have x-position 4 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -12, 5, "Expected Sprite Rot to have y-position -12 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.keyPress('right arrow', 4);
  await t.runForSteps(4);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 99, 1, "Expected Sprite Scheibe to face in direction 99 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 53.91492695714787, 1, "Expected Sprite Rot to face in direction 53.91492695714787 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 4, 5, "Expected Sprite Rot to have x-position 4 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -12, 5, "Expected Sprite Rot to have y-position -12 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.keyPress('left arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 96, 1, "Expected Sprite Scheibe to face in direction 96 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 53.91492695714787, 1, "Expected Sprite Rot to face in direction 53.91492695714787 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 4, 5, "Expected Sprite Rot to have x-position 4 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -12, 5, "Expected Sprite Rot to have y-position -12 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.keyPress('right arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 99, 1, "Expected Sprite Scheibe to face in direction 99 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 53.91492695714787, 1, "Expected Sprite Rot to face in direction 53.91492695714787 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 4, 5, "Expected Sprite Rot to have x-position 4 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -12, 5, "Expected Sprite Rot to have y-position -12 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.keyPress('left arrow', 2);
  await t.runForSteps(2);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 93, 1, "Expected Sprite Scheibe to face in direction 93 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 53.91492695714787, 1, "Expected Sprite Rot to face in direction 53.91492695714787 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 4, 5, "Expected Sprite Rot to have x-position 4 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -12, 5, "Expected Sprite Rot to have y-position -12 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.keyPress('left arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 90, 1, "Expected Sprite Scheibe to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 53.91492695714787, 1, "Expected Sprite Rot to face in direction 53.91492695714787 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 4, 5, "Expected Sprite Rot to have x-position 4 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -12, 5, "Expected Sprite Rot to have y-position -12 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  await t.runForSteps(47);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 90, 1, "Expected Sprite Scheibe to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 53.91492695714787, 1, "Expected Sprite Rot to face in direction 53.91492695714787 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, -32, 5, "Expected Sprite Rot to have x-position -32 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 51, 5, "Expected Sprite Rot to have y-position 51 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.keyPress('right arrow', 2);
  await t.runForSteps(2);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).currentCostume, 0, "Expected Clone 1 of Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 1, "Expected Sprite Rot to have 1 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 96, 1, "Expected Sprite Scheibe to face in direction 96 +-1");
  t.assert.equal(t.getSprite("Rot").direction, -118.96766064606402, 1, "Expected Sprite Rot to face in direction -118.96766064606402 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).direction, -118.96766064606402, 1, "Expected Clone 1 of Rot to face in direction -118.96766064606402 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 3, "Expected Sprite Scheibe to be at layer 3");
  t.assert.equal(t.getSprite("Rot").layerOrder, 2, "Expected Sprite Rot to be at layer 2");
  t.assert.equal(t.getSprite("Rot").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 224, 5, "Expected Sprite Rot to have x-position 224 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 124, 5, "Expected Sprite Rot to have y-position 124 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, 224, 5, "Expected Clone 1 of Rot to have x-position 224 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, 124, 5, "Expected Clone 1 of Rot to have y-position 124 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.not(t.getSprite("Rot").getClone(1).sayText, "Expected Clone 1 of Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).size, 80, 1, "Expected Clone 1 of Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.ok(t.getSprite("Rot").getClone(1).visible, "Expected Clone 1 of Rot to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.assert.equal(t.getSprite("Rot").getClone(1).volume, 100, "Expected Clone 1 of Rot to have volume 100");
  t.keyPress('left arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).currentCostume, 0, "Expected Clone 1 of Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 1, "Expected Sprite Rot to have 1 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 93, 1, "Expected Sprite Scheibe to face in direction 93 +-1");
  t.assert.equal(t.getSprite("Rot").direction, -118.96766064606402, 1, "Expected Sprite Rot to face in direction -118.96766064606402 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).direction, -118.96766064606402, 1, "Expected Clone 1 of Rot to face in direction -118.96766064606402 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 3, "Expected Sprite Scheibe to be at layer 3");
  t.assert.equal(t.getSprite("Rot").layerOrder, 2, "Expected Sprite Rot to be at layer 2");
  t.assert.equal(t.getSprite("Rot").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 224, 5, "Expected Sprite Rot to have x-position 224 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 124, 5, "Expected Sprite Rot to have y-position 124 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, 219.0222222222222, 5, "Expected Clone 1 of Rot to have x-position 219.0222222222222 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, 121.24444444444444, 5, "Expected Clone 1 of Rot to have y-position 121.24444444444444 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.not(t.getSprite("Rot").getClone(1).sayText, "Expected Clone 1 of Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).size, 80, 1, "Expected Clone 1 of Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.ok(t.getSprite("Rot").getClone(1).visible, "Expected Clone 1 of Rot to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.assert.equal(t.getSprite("Rot").getClone(1).volume, 100, "Expected Clone 1 of Rot to have volume 100");
  t.dragSprite('Rot', 0, 0, 1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 93, 1, "Expected Sprite Scheibe to face in direction 93 +-1");
  t.assert.equal(t.getSprite("Rot").direction, -118.96766064606402, 1, "Expected Sprite Rot to face in direction -118.96766064606402 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 224, 5, "Expected Sprite Rot to have x-position 224 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 124, 5, "Expected Sprite Rot to have y-position 124 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  await t.runForSteps(60);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 93, 1, "Expected Sprite Scheibe to face in direction 93 +-1");
  t.assert.equal(t.getSprite("Rot").direction, -118.96766064606402, 1, "Expected Sprite Rot to face in direction -118.96766064606402 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 162, 5, "Expected Sprite Rot to have x-position 162 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -34, 5, "Expected Sprite Rot to have y-position -34 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  await t.runForSteps(69);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).currentCostume, 0, "Expected Clone 1 of Rot to have costume 0");
  t.assert.equal(t.getSprite("Rot").getClone(2).currentCostume, 0, "Expected Clone 2 of Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 2, "Expected Sprite Rot to have 2 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 93, 1, "Expected Sprite Scheibe to face in direction 93 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 118.92115143781724, 1, "Expected Sprite Rot to face in direction 118.92115143781724 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).direction, 50.648247373735266, 1, "Expected Clone 1 of Rot to face in direction 50.648247373735266 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(2).direction, 118.92115143781724, 1, "Expected Clone 2 of Rot to face in direction 118.92115143781724 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 4, "Expected Sprite Scheibe to be at layer 4");
  t.assert.equal(t.getSprite("Rot").layerOrder, 3, "Expected Sprite Rot to be at layer 3");
  t.assert.equal(t.getSprite("Rot").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Rot to be at layer 1");
  t.assert.equal(t.getSprite("Rot").getClone(2).getLayerOrder(), 2, "Expected Clone 2 of Rot to be at layer 2");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, -219, 5, "Expected Sprite Rot to have x-position -219 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 121, 5, "Expected Sprite Rot to have y-position 121 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, -48.888888888888886, 5, "Expected Clone 1 of Rot to have x-position -48.888888888888886 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, -40.08888888888889, 5, "Expected Clone 1 of Rot to have y-position -40.08888888888889 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(2).x, -206.83333333333334, 5, "Expected Clone 2 of Rot to have x-position -206.83333333333334 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(2).y, 114.27777777777777, 5, "Expected Clone 2 of Rot to have y-position 114.27777777777777 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.not(t.getSprite("Rot").getClone(1).sayText, "Expected Clone 1 of Rot not to say anything");
  t.assert.not(t.getSprite("Rot").getClone(2).sayText, "Expected Clone 2 of Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).size, 80, 1, "Expected Clone 1 of Rot to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Rot").getClone(2).size, 80, 1, "Expected Clone 2 of Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.ok(t.getSprite("Rot").getClone(1).visible, "Expected Clone 1 of Rot to be visible");
  t.assert.ok(t.getSprite("Rot").getClone(2).visible, "Expected Clone 2 of Rot to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.assert.equal(t.getSprite("Rot").getClone(1).volume, 100, "Expected Clone 1 of Rot to have volume 100");
  t.assert.equal(t.getSprite("Rot").getClone(2).volume, 100, "Expected Clone 2 of Rot to have volume 100");
  t.dragSprite('Rot', -17.692310235584788, 0.6178290875133484, 2);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).currentCostume, 0, "Expected Clone 1 of Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 1, "Expected Sprite Rot to have 1 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 93, 1, "Expected Sprite Scheibe to face in direction 93 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 118.92115143781724, 1, "Expected Sprite Rot to face in direction 118.92115143781724 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).direction, 50.648247373735266, 1, "Expected Clone 1 of Rot to face in direction 50.648247373735266 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 3, "Expected Sprite Scheibe to be at layer 3");
  t.assert.equal(t.getSprite("Rot").layerOrder, 2, "Expected Sprite Rot to be at layer 2");
  t.assert.equal(t.getSprite("Rot").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, -219, 5, "Expected Sprite Rot to have x-position -219 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 121, 5, "Expected Sprite Rot to have y-position 121 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, -46.66666666666666, 5, "Expected Clone 1 of Rot to have x-position -46.66666666666666 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, -38.26666666666665, 5, "Expected Clone 1 of Rot to have y-position -38.26666666666665 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.not(t.getSprite("Rot").getClone(1).sayText, "Expected Clone 1 of Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).size, 80, 1, "Expected Clone 1 of Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.ok(t.getSprite("Rot").getClone(1).visible, "Expected Clone 1 of Rot to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.assert.equal(t.getSprite("Rot").getClone(1).volume, 100, "Expected Clone 1 of Rot to have volume 100");
  t.dragSprite('Rot', 39, 22, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 93, 1, "Expected Sprite Scheibe to face in direction 93 +-1");
  t.assert.equal(t.getSprite("Rot").direction, 118.92115143781724, 1, "Expected Sprite Rot to face in direction 118.92115143781724 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 39, 5, "Expected Sprite Rot to have x-position 39 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 22, 5, "Expected Sprite Rot to have y-position 22 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.end();
}

module.exports = [
  {
      test: test0,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687936994731',
      type: 'standard',
  },
  {
      test: test1,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687936994731',
      type: 'standard',
  },
  {
      test: test2,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687936994731',
      type: 'standard',
  }
]
