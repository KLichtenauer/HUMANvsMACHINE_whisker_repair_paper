const test0 = async function (t) {
  await t.runForSteps(57);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).currentCostume, 0, "Expected Clone 1 of Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 1, "Expected Sprite Rot to have 1 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 90, 1, "Expected Sprite Scheibe to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Rot").direction, -47.462816675916855, 1, "Expected Sprite Rot to face in direction -47.462816675916855 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).direction, -47.462816675916855, 1, "Expected Clone 1 of Rot to face in direction -47.462816675916855 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 3, "Expected Sprite Scheibe to be at layer 3");
  t.assert.equal(t.getSprite("Rot").layerOrder, 2, "Expected Sprite Rot to be at layer 2");
  t.assert.equal(t.getSprite("Rot").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 194, 5, "Expected Sprite Rot to have x-position 194 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -178, 5, "Expected Sprite Rot to have y-position -178 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, 88.37777777777778, 5, "Expected Clone 1 of Rot to have x-position 88.37777777777778 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, -81.0888888888889, 5, "Expected Clone 1 of Rot to have y-position -81.0888888888889 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.not(t.getSprite("Rot").getClone(1).sayText, "Expected Clone 1 of Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).size, 80, 1, "Expected Clone 1 of Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.ok(t.getSprite("Rot").getClone(1).visible, "Expected Clone 1 of Rot to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.assert.equal(t.getSprite("Rot").getClone(1).volume, 100, "Expected Clone 1 of Rot to have volume 100");
  t.dragSprite('Rot', 16.032773658995033, -7.435111161712024, 1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 90, 1, "Expected Sprite Scheibe to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Rot").direction, -47.462816675916855, 1, "Expected Sprite Rot to face in direction -47.462816675916855 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 194, 5, "Expected Sprite Rot to have x-position 194 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -178, 5, "Expected Sprite Rot to have y-position -178 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.keyPress('right arrow', 2);
  await t.runForSteps(2);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 96, 1, "Expected Sprite Scheibe to face in direction 96 +-1");
  t.assert.equal(t.getSprite("Rot").direction, -47.462816675916855, 1, "Expected Sprite Rot to face in direction -47.462816675916855 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 194, 5, "Expected Sprite Rot to have x-position 194 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -178, 5, "Expected Sprite Rot to have y-position -178 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  await t.runForSteps(15);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 96, 1, "Expected Sprite Scheibe to face in direction 96 +-1");
  t.assert.equal(t.getSprite("Rot").direction, -47.462816675916855, 1, "Expected Sprite Rot to face in direction -47.462816675916855 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 213, 5, "Expected Sprite Rot to have x-position 213 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 121, 5, "Expected Sprite Rot to have y-position 121 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.dragSprite('Rot', 44, -28, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 96, 1, "Expected Sprite Scheibe to face in direction 96 +-1");
  t.assert.equal(t.getSprite("Rot").direction, -47.462816675916855, 1, "Expected Sprite Rot to face in direction -47.462816675916855 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 74, 5, "Expected Sprite Rot to have x-position 74 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -3, 5, "Expected Sprite Rot to have y-position -3 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.keyPress('right arrow', 3);
  await t.runForSteps(3);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 105, 1, "Expected Sprite Scheibe to face in direction 105 +-1");
  t.assert.equal(t.getSprite("Rot").direction, -47.462816675916855, 1, "Expected Sprite Rot to face in direction -47.462816675916855 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, -51, 5, "Expected Sprite Rot to have x-position -51 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 12, 5, "Expected Sprite Rot to have y-position 12 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.keyPress('right arrow', 3);
  await t.runForSteps(3);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 114, 1, "Expected Sprite Scheibe to face in direction 114 +-1");
  t.assert.equal(t.getSprite("Rot").direction, -47.462816675916855, 1, "Expected Sprite Rot to face in direction -47.462816675916855 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, -168, 5, "Expected Sprite Rot to have x-position -168 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 129, 5, "Expected Sprite Rot to have y-position 129 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.keyPress('right arrow', 2);
  await t.runForSteps(2);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 120, 1, "Expected Sprite Scheibe to face in direction 120 +-1");
  t.assert.equal(t.getSprite("Rot").direction, -47.462816675916855, 1, "Expected Sprite Rot to face in direction -47.462816675916855 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 170, 5, "Expected Sprite Rot to have x-position 170 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -91, 5, "Expected Sprite Rot to have y-position -91 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  await t.runForSteps(97);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).currentCostume, 0, "Expected Clone 1 of Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 1, "Expected Sprite Rot to have 1 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 120, 1, "Expected Sprite Scheibe to face in direction 120 +-1");
  t.assert.equal(t.getSprite("Rot").direction, -121.78725312166475, 1, "Expected Sprite Rot to face in direction -121.78725312166475 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).direction, -121.78725312166475, 1, "Expected Clone 1 of Rot to face in direction -121.78725312166475 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 3, "Expected Sprite Scheibe to be at layer 3");
  t.assert.equal(t.getSprite("Rot").layerOrder, 2, "Expected Sprite Rot to be at layer 2");
  t.assert.equal(t.getSprite("Rot").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 213, 5, "Expected Sprite Rot to have x-position 213 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 132, 5, "Expected Sprite Rot to have y-position 132 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, 149.1, 5, "Expected Clone 1 of Rot to have x-position 149.1 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, 92.4, 5, "Expected Clone 1 of Rot to have y-position 92.4 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.not(t.getSprite("Rot").getClone(1).sayText, "Expected Clone 1 of Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).size, 80, 1, "Expected Clone 1 of Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.ok(t.getSprite("Rot").getClone(1).visible, "Expected Clone 1 of Rot to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.assert.equal(t.getSprite("Rot").getClone(1).volume, 100, "Expected Clone 1 of Rot to have volume 100");
  t.dragSprite('Rot', 0, 0, 2);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 120, 1, "Expected Sprite Scheibe to face in direction 120 +-1");
  t.assert.equal(t.getSprite("Rot").direction, -121.78725312166475, 1, "Expected Sprite Rot to face in direction -121.78725312166475 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 213, 5, "Expected Sprite Rot to have x-position 213 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 132, 5, "Expected Sprite Rot to have y-position 132 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  await t.runForSteps(31);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 120, 1, "Expected Sprite Scheibe to face in direction 120 +-1");
  t.assert.equal(t.getSprite("Rot").direction, -121.78725312166475, 1, "Expected Sprite Rot to face in direction -121.78725312166475 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 213, 5, "Expected Sprite Rot to have x-position 213 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 132, 5, "Expected Sprite Rot to have y-position 132 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.dragSprite('Rot', 57.91988915075867, -46.47231681504444, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 120, 1, "Expected Sprite Scheibe to face in direction 120 +-1");
  t.assert.equal(t.getSprite("Rot").direction, -121.78725312166475, 1, "Expected Sprite Rot to face in direction -121.78725312166475 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, -36, 5, "Expected Sprite Rot to have x-position -36 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 22, 5, "Expected Sprite Rot to have y-position 22 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.keyPress('left arrow', 2);
  await t.runForSteps(2);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 114, 1, "Expected Sprite Scheibe to face in direction 114 +-1");
  t.assert.equal(t.getSprite("Rot").direction, -121.78725312166475, 1, "Expected Sprite Rot to face in direction -121.78725312166475 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 46, 5, "Expected Sprite Rot to have x-position 46 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 144, 5, "Expected Sprite Rot to have y-position 144 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.keyPress('left arrow', 4);
  await t.runForSteps(4);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 102, 1, "Expected Sprite Scheibe to face in direction 102 +-1");
  t.assert.equal(t.getSprite("Rot").direction, -121.78725312166475, 1, "Expected Sprite Rot to face in direction -121.78725312166475 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 52, 5, "Expected Sprite Rot to have x-position 52 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 50, 5, "Expected Sprite Rot to have y-position 50 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.keyPress('right arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 105, 1, "Expected Sprite Scheibe to face in direction 105 +-1");
  t.assert.equal(t.getSprite("Rot").direction, -121.78725312166475, 1, "Expected Sprite Rot to face in direction -121.78725312166475 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 102, 5, "Expected Sprite Rot to have x-position 102 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -141, 5, "Expected Sprite Rot to have y-position -141 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.keyPress('right arrow', 2);
  await t.runForSteps(2);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).currentCostume, 0, "Expected Clone 1 of Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 1, "Expected Sprite Rot to have 1 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 111, 1, "Expected Sprite Scheibe to face in direction 111 +-1");
  t.assert.equal(t.getSprite("Rot").direction, -126.83152137595451, 1, "Expected Sprite Rot to face in direction -126.83152137595451 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).direction, -126.83152137595451, 1, "Expected Clone 1 of Rot to face in direction -126.83152137595451 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 3, "Expected Sprite Scheibe to be at layer 3");
  t.assert.equal(t.getSprite("Rot").layerOrder, 2, "Expected Sprite Rot to be at layer 2");
  t.assert.equal(t.getSprite("Rot").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 239, 5, "Expected Sprite Rot to have x-position 239 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 179, 5, "Expected Sprite Rot to have y-position 179 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, 239, 5, "Expected Clone 1 of Rot to have x-position 239 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, 179, 5, "Expected Clone 1 of Rot to have y-position 179 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.not(t.getSprite("Rot").getClone(1).sayText, "Expected Clone 1 of Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).size, 80, 1, "Expected Clone 1 of Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.ok(t.getSprite("Rot").getClone(1).visible, "Expected Clone 1 of Rot to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.assert.equal(t.getSprite("Rot").getClone(1).volume, 100, "Expected Clone 1 of Rot to have volume 100");
  await t.runForSteps(46);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).currentCostume, 0, "Expected Clone 1 of Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 1, "Expected Sprite Rot to have 1 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 111, 1, "Expected Sprite Scheibe to face in direction 111 +-1");
  t.assert.equal(t.getSprite("Rot").direction, -126.83152137595451, 1, "Expected Sprite Rot to face in direction -126.83152137595451 +-1");
  t.assert.equal(t.getSprite("Rot").getClone(1).direction, -126.83152137595451, 1, "Expected Clone 1 of Rot to face in direction -126.83152137595451 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.color, 0, "Expected effect color of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.fisheye, 0, "Expected effect fisheye of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.whirl, 0, "Expected effect whirl of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.pixelate, 0, "Expected effect pixelate of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.mosaic, 0, "Expected effect mosaic of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.brightness, 0, "Expected effect brightness of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Rot").getClone(1).effects.ghost, 0, "Expected effect ghost of Clone 1 of Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 3, "Expected Sprite Scheibe to be at layer 3");
  t.assert.equal(t.getSprite("Rot").layerOrder, 2, "Expected Sprite Rot to be at layer 2");
  t.assert.equal(t.getSprite("Rot").getClone(1).getLayerOrder(), 1, "Expected Clone 1 of Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 239, 5, "Expected Sprite Rot to have x-position 239 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, 179, 5, "Expected Sprite Rot to have y-position 179 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).x, 114.18888888888888, 5, "Expected Clone 1 of Rot to have x-position 114.18888888888888 +-5");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).y, 85.52222222222221, 5, "Expected Clone 1 of Rot to have y-position 85.52222222222221 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.not(t.getSprite("Rot").getClone(1).sayText, "Expected Clone 1 of Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.withinRange(t.getSprite("Rot").getClone(1).size, 80, 1, "Expected Clone 1 of Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.ok(t.getSprite("Rot").getClone(1).visible, "Expected Clone 1 of Rot to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.assert.equal(t.getSprite("Rot").getClone(1).volume, 100, "Expected Clone 1 of Rot to have volume 100");
  await t.runForSteps(200);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Scheibe").currentCostume, 0, "Expected Sprite Scheibe to have costume 0");
  t.assert.equal(t.getSprite("Rot").currentCostume, 0, "Expected Sprite Rot to have costume 0");
  t.assert.equal(t.getSprite("Scheibe").getCloneCount(), 0, "Expected Sprite Scheibe to have 0 clones");
  t.assert.equal(t.getSprite("Rot").getCloneCount(), 0, "Expected Sprite Rot to have 0 clones");
  t.assert.equal(t.getSprite("Scheibe").direction, 111, 1, "Expected Sprite Scheibe to face in direction 111 +-1");
  t.assert.equal(t.getSprite("Rot").direction, -63.14312224878569, 1, "Expected Sprite Rot to face in direction -63.14312224878569 +-1");
  t.assert.equal(t.getSprite("Scheibe").effects.color, 0, "Expected effect color of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.fisheye, 0, "Expected effect fisheye of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.whirl, 0, "Expected effect whirl of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.pixelate, 0, "Expected effect pixelate of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.mosaic, 0, "Expected effect mosaic of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.brightness, 0, "Expected effect brightness of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Scheibe").effects.ghost, 0, "Expected effect ghost of Sprite Scheibe to be 0");
  t.assert.equal(t.getSprite("Rot").effects.color, 0, "Expected effect color of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.fisheye, 0, "Expected effect fisheye of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.whirl, 0, "Expected effect whirl of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.pixelate, 0, "Expected effect pixelate of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.mosaic, 0, "Expected effect mosaic of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.brightness, 0, "Expected effect brightness of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Rot").effects.ghost, 0, "Expected effect ghost of Sprite Rot to be 0");
  t.assert.equal(t.getSprite("Scheibe").layerOrder, 2, "Expected Sprite Scheibe to be at layer 2");
  t.assert.equal(t.getSprite("Rot").layerOrder, 1, "Expected Sprite Rot to be at layer 1");
  t.assert.withinRange(t.getSprite("Scheibe").x, 0, 5, "Expected Sprite Scheibe to have x-position 0 +-5");
  t.assert.withinRange(t.getSprite("Scheibe").y, 0, 5, "Expected Sprite Scheibe to have y-position 0 +-5");
  t.assert.withinRange(t.getSprite("Rot").x, 235, 5, "Expected Sprite Rot to have x-position 235 +-5");
  t.assert.withinRange(t.getSprite("Rot").y, -119, 5, "Expected Sprite Rot to have y-position -119 +-5");
  t.assert.not(t.getSprite("Scheibe").sayText, "Expected Sprite Scheibe not to say anything");
  t.assert.not(t.getSprite("Rot").sayText, "Expected Sprite Rot not to say anything");
  t.assert.withinRange(t.getSprite("Scheibe").size, 50, 1, "Expected Sprite Scheibe to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Rot").size, 80, 1, "Expected Sprite Rot to have size 80 +-1");
  t.assert.ok(t.getSprite("Scheibe").visible, "Expected Sprite Scheibe to be visible");
  t.assert.not(t.getSprite("Rot").visible, "Expected Sprite Rot not to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Scheibe").volume, 100, "Expected Sprite Scheibe to have volume 100");
  t.assert.equal(t.getSprite("Rot").volume, 100, "Expected Sprite Rot to have volume 100");
  t.end();
}

module.exports = [
  {
      test: test0,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687936680478',
      type: 'standard',
  }
]
