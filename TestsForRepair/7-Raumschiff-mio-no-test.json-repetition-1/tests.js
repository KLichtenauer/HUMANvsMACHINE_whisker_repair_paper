const test0 = async function (t) {
  t.dragSprite('Raumschiff', 100.87507901885157, 50.92983159829452, null);
  await t.runForSteps(1);
  t.dragSprite('Raumschiff', 144.94675121205546, 57.85326551150898, null);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Stern").getClone(2).currentCostume, 0, "Expected Clone 2 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 2, "Expected Sprite Stern to have 2 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 110, 1, "Expected Sprite Schwarzes Loch to face in direction 110 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(2).direction, 90, 1, "Expected Clone 2 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 6, "Expected Sprite Raumschiff to be at layer 6");
  t.assert.equal(t.getSprite("Stern").layerOrder, 5, "Expected Sprite Stern to be at layer 5");
  t.assert.equal(t.getSprite("Stern").getClone(2).getLayerOrder(), 4, "Expected Clone 2 of Stern to be at layer 4");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 144.68793216695295, 5, "Expected Sprite Raumschiff to have x-position 144.68793216695295 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 58.819191337798046, 5, "Expected Sprite Raumschiff to have y-position 58.819191337798046 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, -0.07596123493896023, 5, "Expected Sprite Schwarzes Loch to have x-position -0.07596123493896023 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -70.86824088833465, 5, "Expected Sprite Schwarzes Loch to have y-position -70.86824088833465 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 140.03333333333333, 5, "Expected Clone 1 of Stern to have x-position 140.03333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 20.183333333333334, 5, "Expected Clone 1 of Stern to have y-position 20.183333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 140, 5, "Expected Clone 2 of Stern to have x-position 140 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 20, 5, "Expected Clone 2 of Stern to have y-position 20 +-5");
  t.assert.not(t.getSprite("Stern").getClone(2).sayText, "Expected Clone 2 of Stern not to say anything");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).size, 50, 1, "Expected Clone 2 of Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Stern").getClone(2).visible, "Expected Clone 2 of Stern to be visible");
  t.assert.equal(t.getSprite("Stern").getClone(2).volume, 100, "Expected Clone 2 of Stern to have volume 100");
  t.dragSprite('Raumschiff', 104, 44, null);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Stern").getClone(3).currentCostume, 0, "Expected Clone 3 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 3, "Expected Sprite Stern to have 3 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 120, 1, "Expected Sprite Schwarzes Loch to face in direction 120 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(3).direction, 90, 1, "Expected Clone 3 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 7, "Expected Sprite Raumschiff to be at layer 7");
  t.assert.equal(t.getSprite("Stern").layerOrder, 6, "Expected Sprite Stern to be at layer 6");
  t.assert.equal(t.getSprite("Stern").getClone(3).getLayerOrder(), 5, "Expected Clone 3 of Stern to be at layer 5");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 103.74118095489747, 5, "Expected Sprite Raumschiff to have x-position 103.74118095489747 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 44.965925826289066, 5, "Expected Sprite Raumschiff to have y-position 44.965925826289066 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, 4.622501868990582, 5, "Expected Sprite Schwarzes Loch to have x-position 4.622501868990582 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -72.578341604963, 5, "Expected Sprite Schwarzes Loch to have y-position -72.578341604963 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 140.06666666666666, 5, "Expected Clone 1 of Stern to have x-position 140.06666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 20.366666666666667, 5, "Expected Clone 1 of Stern to have y-position 20.366666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 140.01666666666668, 5, "Expected Clone 2 of Stern to have x-position 140.01666666666668 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 19.9, 5, "Expected Clone 2 of Stern to have y-position 19.9 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 140, 5, "Expected Clone 3 of Stern to have x-position 140 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 20, 5, "Expected Clone 3 of Stern to have y-position 20 +-5");
  t.assert.not(t.getSprite("Stern").getClone(3).sayText, "Expected Clone 3 of Stern not to say anything");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).size, 50, 1, "Expected Clone 3 of Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Stern").getClone(3).visible, "Expected Clone 3 of Stern to be visible");
  t.assert.equal(t.getSprite("Stern").getClone(3).volume, 100, "Expected Clone 3 of Stern to have volume 100");
  t.dragSprite('Raumschiff', 240, -180, null);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 130, 1, "Expected Sprite Schwarzes Loch to face in direction 130 +-1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 239.7411809548975, 5, "Expected Sprite Raumschiff to have x-position 239.7411809548975 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -179.03407417371093, 5, "Expected Sprite Raumschiff to have y-position -179.03407417371093 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, 8.952628887912777, 5, "Expected Sprite Schwarzes Loch to have x-position 8.952628887912777 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -75.078341604963, 5, "Expected Sprite Schwarzes Loch to have y-position -75.078341604963 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 140.1, 5, "Expected Clone 1 of Stern to have x-position 140.1 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 20.55, 5, "Expected Clone 1 of Stern to have y-position 20.55 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 140.03333333333333, 5, "Expected Clone 2 of Stern to have x-position 140.03333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 19.8, 5, "Expected Clone 2 of Stern to have y-position 19.8 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 139.75, 5, "Expected Clone 3 of Stern to have x-position 139.75 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 20.066666666666666, 5, "Expected Clone 3 of Stern to have y-position 20.066666666666666 +-5");
  t.assert.equal(t.getSprite("Raumschiff").sayText, "Überstanden!", "Expected Sprite Raumschiff to say Überstanden!");
  t.assert.equal(t.getSprite("Stern").getVariable("xPosition").value, "-210", "Expected xPosition to have value -210 in Sprite Stern");
  t.assert.equal(t.getSprite("Stern").getVariable("yPosition").value, "150", "Expected yPosition to have value 150 in Sprite Stern");
  t.dragSprite('Raumschiff', -136, -66, null);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Stern").getClone(4).currentCostume, 0, "Expected Clone 4 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 4, "Expected Sprite Stern to have 4 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 140, 1, "Expected Sprite Schwarzes Loch to face in direction 140 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(4).direction, 90, 1, "Expected Clone 4 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.color, 0, "Expected effect color of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.fisheye, 0, "Expected effect fisheye of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.whirl, 0, "Expected effect whirl of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.pixelate, 0, "Expected effect pixelate of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.mosaic, 0, "Expected effect mosaic of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.brightness, 0, "Expected effect brightness of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.ghost, 0, "Expected effect ghost of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 8, "Expected Sprite Raumschiff to be at layer 8");
  t.assert.equal(t.getSprite("Stern").layerOrder, 7, "Expected Sprite Stern to be at layer 7");
  t.assert.equal(t.getSprite("Stern").getClone(4).getLayerOrder(), 6, "Expected Clone 4 of Stern to be at layer 6");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -121.16666666666667, 5, "Expected Sprite Raumschiff to have x-position -121.16666666666667 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -71.03333333333333, 5, "Expected Sprite Raumschiff to have y-position -71.03333333333333 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, 12.782851103507667, 5, "Expected Sprite Schwarzes Loch to have x-position 12.782851103507667 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -78.2922796533957, 5, "Expected Sprite Schwarzes Loch to have y-position -78.2922796533957 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 140.13333333333333, 5, "Expected Clone 1 of Stern to have x-position 140.13333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 20.733333333333334, 5, "Expected Clone 1 of Stern to have y-position 20.733333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 140.05, 5, "Expected Clone 2 of Stern to have x-position 140.05 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 19.7, 5, "Expected Clone 2 of Stern to have y-position 19.7 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 139.5, 5, "Expected Clone 3 of Stern to have x-position 139.5 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 20.133333333333333, 5, "Expected Clone 3 of Stern to have y-position 20.133333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -210, 5, "Expected Clone 4 of Stern to have x-position -210 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 150, 5, "Expected Clone 4 of Stern to have y-position 150 +-5");
  t.assert.not(t.getSprite("Stern").getClone(4).sayText, "Expected Clone 4 of Stern not to say anything");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).size, 50, 1, "Expected Clone 4 of Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Stern").getClone(4).visible, "Expected Clone 4 of Stern to be visible");
  t.assert.equal(t.getSprite("Stern").getClone(4).volume, 100, "Expected Clone 4 of Stern to have volume 100");
  await t.runForSteps(12);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Stern").getClone(5).currentCostume, 0, "Expected Clone 5 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).currentCostume, 0, "Expected Clone 6 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 6, "Expected Sprite Stern to have 6 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, -90, 1, "Expected Sprite Schwarzes Loch to face in direction -90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(5).direction, 90, 1, "Expected Clone 5 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(6).direction, 90, 1, "Expected Clone 6 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.color, 0, "Expected effect color of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.fisheye, 0, "Expected effect fisheye of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.whirl, 0, "Expected effect whirl of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.pixelate, 0, "Expected effect pixelate of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.mosaic, 0, "Expected effect mosaic of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.brightness, 0, "Expected effect brightness of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.ghost, 0, "Expected effect ghost of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.color, 0, "Expected effect color of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.fisheye, 0, "Expected effect fisheye of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.whirl, 0, "Expected effect whirl of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.pixelate, 0, "Expected effect pixelate of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.mosaic, 0, "Expected effect mosaic of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.brightness, 0, "Expected effect brightness of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.ghost, 0, "Expected effect ghost of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 10, "Expected Sprite Raumschiff to be at layer 10");
  t.assert.equal(t.getSprite("Stern").layerOrder, 9, "Expected Sprite Stern to be at layer 9");
  t.assert.equal(t.getSprite("Stern").getClone(5).getLayerOrder(), 7, "Expected Clone 5 of Stern to be at layer 7");
  t.assert.equal(t.getSprite("Stern").getClone(6).getLayerOrder(), 8, "Expected Clone 6 of Stern to be at layer 8");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 71.66666666666666, 5, "Expected Sprite Raumschiff to have x-position 71.66666666666666 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -136.46666666666667, 5, "Expected Sprite Raumschiff to have y-position -136.46666666666667 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, -5.000000000000002, 5, "Expected Sprite Schwarzes Loch to have x-position -5.000000000000002 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -127.15026151380673, 5, "Expected Sprite Schwarzes Loch to have y-position -127.15026151380673 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 140.56666666666666, 5, "Expected Clone 1 of Stern to have x-position 140.56666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 23.116666666666667, 5, "Expected Clone 1 of Stern to have y-position 23.116666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 140.26666666666668, 5, "Expected Clone 2 of Stern to have x-position 140.26666666666668 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 18.4, 5, "Expected Clone 2 of Stern to have y-position 18.4 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 136.25, 5, "Expected Clone 3 of Stern to have x-position 136.25 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 21, 5, "Expected Clone 3 of Stern to have y-position 21 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -212.81666666666666, 5, "Expected Clone 4 of Stern to have x-position -212.81666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 145.88333333333333, 5, "Expected Clone 4 of Stern to have y-position 145.88333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -208, 5, "Expected Clone 5 of Stern to have x-position -208 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 148.2, 5, "Expected Clone 5 of Stern to have y-position 148.2 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).x, -213.3, 5, "Expected Clone 6 of Stern to have x-position -213.3 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).y, 149.63333333333333, 5, "Expected Clone 6 of Stern to have y-position 149.63333333333333 +-5");
  t.assert.not(t.getSprite("Stern").getClone(5).sayText, "Expected Clone 5 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(6).sayText, "Expected Clone 6 of Stern not to say anything");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).size, 50, 1, "Expected Clone 5 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).size, 50, 1, "Expected Clone 6 of Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Stern").getClone(5).visible, "Expected Clone 5 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(6).visible, "Expected Clone 6 of Stern to be visible");
  t.assert.equal(t.getSprite("Stern").getClone(5).volume, 100, "Expected Clone 5 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(6).volume, 100, "Expected Clone 6 of Stern to have volume 100");
  t.keyPress('right arrow', 2);
  await t.runForSteps(2);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Raumschiff").direction, 15, 1, "Expected Sprite Raumschiff to face in direction 15 +-1");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, -60, 1, "Expected Sprite Schwarzes Loch to face in direction -60 +-1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 116.16666666666666, 5, "Expected Sprite Raumschiff to have x-position 116.16666666666666 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -151.56666666666666, 5, "Expected Sprite Raumschiff to have y-position -151.56666666666666 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, -19.622501868990582, 5, "Expected Sprite Schwarzes Loch to have x-position -19.622501868990582 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -124.57191990884373, 5, "Expected Sprite Schwarzes Loch to have y-position -124.57191990884373 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 140.66666666666666, 5, "Expected Clone 1 of Stern to have x-position 140.66666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 23.666666666666668, 5, "Expected Clone 1 of Stern to have y-position 23.666666666666668 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 140.31666666666666, 5, "Expected Clone 2 of Stern to have x-position 140.31666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 18.1, 5, "Expected Clone 2 of Stern to have y-position 18.1 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 135.5, 5, "Expected Clone 3 of Stern to have x-position 135.5 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 21.2, 5, "Expected Clone 3 of Stern to have y-position 21.2 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -213.46666666666667, 5, "Expected Clone 4 of Stern to have x-position -213.46666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 144.93333333333334, 5, "Expected Clone 4 of Stern to have y-position 144.93333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -207.5, 5, "Expected Clone 5 of Stern to have x-position -207.5 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 147.75, 5, "Expected Clone 5 of Stern to have y-position 147.75 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).x, -214.2, 5, "Expected Clone 6 of Stern to have x-position -214.2 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).y, 149.53333333333333, 5, "Expected Clone 6 of Stern to have y-position 149.53333333333333 +-5");
  t.keyPress('right arrow', 1);
  await t.runForSteps(1);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Raumschiff").direction, 30, 1, "Expected Sprite Raumschiff to face in direction 30 +-1");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, -40, 1, "Expected Sprite Schwarzes Loch to face in direction -40 +-1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 145.83333333333331, 5, "Expected Sprite Raumschiff to have x-position 145.83333333333331 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -161.63333333333333, 5, "Expected Sprite Raumschiff to have y-position -161.63333333333333 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, -27.782851103507667, 5, "Expected Sprite Schwarzes Loch to have x-position -27.782851103507667 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -118.85798186041103, 5, "Expected Sprite Schwarzes Loch to have y-position -118.85798186041103 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 140.73333333333332, 5, "Expected Clone 1 of Stern to have x-position 140.73333333333332 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 24.03333333333333, 5, "Expected Clone 1 of Stern to have y-position 24.03333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 140.35, 5, "Expected Clone 2 of Stern to have x-position 140.35 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 17.9, 5, "Expected Clone 2 of Stern to have y-position 17.9 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 135, 5, "Expected Clone 3 of Stern to have x-position 135 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 21.333333333333332, 5, "Expected Clone 3 of Stern to have y-position 21.333333333333332 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -213.9, 5, "Expected Clone 4 of Stern to have x-position -213.9 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 144.3, 5, "Expected Clone 4 of Stern to have y-position 144.3 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -207.16666666666666, 5, "Expected Clone 5 of Stern to have x-position -207.16666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 147.45, 5, "Expected Clone 5 of Stern to have y-position 147.45 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).x, -214.8, 5, "Expected Clone 6 of Stern to have x-position -214.8 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).y, 149.46666666666667, 5, "Expected Clone 6 of Stern to have y-position 149.46666666666667 +-5");
  await t.runForSteps(71);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 90, 1, "Expected Sprite Schwarzes Loch to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 4, "Expected Sprite Raumschiff to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 3, "Expected Sprite Stern to be at layer 3");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 251, 5, "Expected Sprite Raumschiff to have x-position 251 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -196.2679491924311, 5, "Expected Sprite Raumschiff to have y-position -196.2679491924311 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, -10, 5, "Expected Sprite Schwarzes Loch to have x-position -10 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -70, 5, "Expected Sprite Schwarzes Loch to have y-position -70 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.assert.withinRange(t.getSprite("Raumschiff").size, 5, 1, "Expected Sprite Raumschiff to have size 5 +-1");
  t.end();
}
const test1 = async function (t) {
  t.dragSprite('Raumschiff', 111.30319175107216, 40.1411430983213, null);
  await t.runForSteps(1);
  t.dragSprite('Raumschiff', 309, -217, null);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Stern").getClone(2).currentCostume, 0, "Expected Clone 2 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 2, "Expected Sprite Stern to have 2 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 110, 1, "Expected Sprite Schwarzes Loch to face in direction 110 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(2).direction, 90, 1, "Expected Clone 2 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.color, 0, "Expected effect color of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.fisheye, 0, "Expected effect fisheye of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.whirl, 0, "Expected effect whirl of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.pixelate, 0, "Expected effect pixelate of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.mosaic, 0, "Expected effect mosaic of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.brightness, 0, "Expected effect brightness of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(2).effects.ghost, 0, "Expected effect ghost of Clone 2 of Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 6, "Expected Sprite Raumschiff to be at layer 6");
  t.assert.equal(t.getSprite("Stern").layerOrder, 5, "Expected Sprite Stern to be at layer 5");
  t.assert.equal(t.getSprite("Stern").getClone(2).getLayerOrder(), 4, "Expected Clone 2 of Stern to be at layer 4");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 245.7411809548975, 5, "Expected Sprite Raumschiff to have x-position 245.7411809548975 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -199.03407417371093, 5, "Expected Sprite Raumschiff to have y-position -199.03407417371093 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, -0.07596123493896023, 5, "Expected Sprite Schwarzes Loch to have x-position -0.07596123493896023 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -70.86824088833465, 5, "Expected Sprite Schwarzes Loch to have y-position -70.86824088833465 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 140.03333333333333, 5, "Expected Clone 1 of Stern to have x-position 140.03333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 20.183333333333334, 5, "Expected Clone 1 of Stern to have y-position 20.183333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 140, 5, "Expected Clone 2 of Stern to have x-position 140 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 20, 5, "Expected Clone 2 of Stern to have y-position 20 +-5");
  t.assert.not(t.getSprite("Stern").getClone(2).sayText, "Expected Clone 2 of Stern not to say anything");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).size, 50, 1, "Expected Clone 2 of Stern to have size 50 +-1");
  t.assert.ok(t.getSprite("Stern").getClone(2).visible, "Expected Clone 2 of Stern to be visible");
  t.assert.equal(t.getSprite("Stern").getClone(2).volume, 100, "Expected Clone 2 of Stern to have volume 100");
  await t.runForSteps(44);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Stern").getClone(3).currentCostume, 0, "Expected Clone 3 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).currentCostume, 0, "Expected Clone 4 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).currentCostume, 0, "Expected Clone 5 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).currentCostume, 0, "Expected Clone 6 of Stern to have costume 0");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 6, "Expected Sprite Stern to have 6 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, -160, 1, "Expected Sprite Schwarzes Loch to face in direction -160 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(3).direction, 90, 1, "Expected Clone 3 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(4).direction, 90, 1, "Expected Clone 4 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(5).direction, 90, 1, "Expected Clone 5 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(6).direction, 90, 1, "Expected Clone 6 of Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.color, 0, "Expected effect color of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.fisheye, 0, "Expected effect fisheye of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.whirl, 0, "Expected effect whirl of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.pixelate, 0, "Expected effect pixelate of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.mosaic, 0, "Expected effect mosaic of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.brightness, 0, "Expected effect brightness of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(3).effects.ghost, 0, "Expected effect ghost of Clone 3 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.color, 0, "Expected effect color of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.fisheye, 0, "Expected effect fisheye of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.whirl, 0, "Expected effect whirl of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.pixelate, 0, "Expected effect pixelate of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.mosaic, 0, "Expected effect mosaic of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.brightness, 0, "Expected effect brightness of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(4).effects.ghost, 0, "Expected effect ghost of Clone 4 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.color, 0, "Expected effect color of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.fisheye, 0, "Expected effect fisheye of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.whirl, 0, "Expected effect whirl of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.pixelate, 0, "Expected effect pixelate of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.mosaic, 0, "Expected effect mosaic of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.brightness, 0, "Expected effect brightness of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(5).effects.ghost, 0, "Expected effect ghost of Clone 5 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.color, 0, "Expected effect color of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.fisheye, 0, "Expected effect fisheye of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.whirl, 0, "Expected effect whirl of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.pixelate, 0, "Expected effect pixelate of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.mosaic, 0, "Expected effect mosaic of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.brightness, 0, "Expected effect brightness of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Stern").getClone(6).effects.ghost, 0, "Expected effect ghost of Clone 6 of Stern to be 0");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 10, "Expected Sprite Raumschiff to be at layer 10");
  t.assert.equal(t.getSprite("Stern").layerOrder, 9, "Expected Sprite Stern to be at layer 9");
  t.assert.equal(t.getSprite("Stern").getClone(3).getLayerOrder(), 5, "Expected Clone 3 of Stern to be at layer 5");
  t.assert.equal(t.getSprite("Stern").getClone(4).getLayerOrder(), 6, "Expected Clone 4 of Stern to be at layer 6");
  t.assert.equal(t.getSprite("Stern").getClone(5).getLayerOrder(), 7, "Expected Clone 5 of Stern to be at layer 7");
  t.assert.equal(t.getSprite("Stern").getClone(6).getLayerOrder(), 8, "Expected Clone 6 of Stern to be at layer 8");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 242.63535241366733, 5, "Expected Sprite Raumschiff to have x-position 242.63535241366733 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -187.44296425824214, 5, "Expected Sprite Raumschiff to have y-position -187.44296425824214 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, 20.20688986856871, 5, "Expected Sprite Schwarzes Loch to have x-position 20.20688986856871 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -105.9991695219644, 5, "Expected Sprite Schwarzes Loch to have y-position -105.9991695219644 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 141.53333333333333, 5, "Expected Clone 1 of Stern to have x-position 141.53333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 28.433333333333334, 5, "Expected Clone 1 of Stern to have y-position 28.433333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 140.75, 5, "Expected Clone 2 of Stern to have x-position 140.75 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 15.5, 5, "Expected Clone 2 of Stern to have y-position 15.5 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 129, 5, "Expected Clone 3 of Stern to have x-position 129 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 22.933333333333334, 5, "Expected Clone 3 of Stern to have y-position 22.933333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -219.1, 5, "Expected Clone 4 of Stern to have x-position -219.1 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 136.7, 5, "Expected Clone 4 of Stern to have y-position 136.7 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -203.16666666666666, 5, "Expected Clone 5 of Stern to have x-position -203.16666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 143.85, 5, "Expected Clone 5 of Stern to have y-position 143.85 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).x, -222, 5, "Expected Clone 6 of Stern to have x-position -222 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).y, 148.66666666666666, 5, "Expected Clone 6 of Stern to have y-position 148.66666666666666 +-5");
  t.assert.equal(t.getSprite("Raumschiff").sayText, "Überstanden!", "Expected Sprite Raumschiff to say Überstanden!");
  t.assert.not(t.getSprite("Stern").getClone(3).sayText, "Expected Clone 3 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(4).sayText, "Expected Clone 4 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(5).sayText, "Expected Clone 5 of Stern not to say anything");
  t.assert.not(t.getSprite("Stern").getClone(6).sayText, "Expected Clone 6 of Stern not to say anything");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).size, 50, 1, "Expected Clone 3 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).size, 50, 1, "Expected Clone 4 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).size, 50, 1, "Expected Clone 5 of Stern to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).size, 50, 1, "Expected Clone 6 of Stern to have size 50 +-1");
  t.assert.equal(t.getSprite("Stern").getVariable("xPosition").value, "-210", "Expected xPosition to have value -210 in Sprite Stern");
  t.assert.equal(t.getSprite("Stern").getVariable("yPosition").value, "150", "Expected yPosition to have value 150 in Sprite Stern");
  t.assert.ok(t.getSprite("Stern").getClone(3).visible, "Expected Clone 3 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(4).visible, "Expected Clone 4 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(5).visible, "Expected Clone 5 of Stern to be visible");
  t.assert.ok(t.getSprite("Stern").getClone(6).visible, "Expected Clone 6 of Stern to be visible");
  t.assert.equal(t.getSprite("Stern").getClone(3).volume, 100, "Expected Clone 3 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(4).volume, 100, "Expected Clone 4 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(5).volume, 100, "Expected Clone 5 of Stern to have volume 100");
  t.assert.equal(t.getSprite("Stern").getClone(6).volume, 100, "Expected Clone 6 of Stern to have volume 100");
  await t.runForSteps(56);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 50, 1, "Expected Sprite Schwarzes Loch to face in direction 50 +-1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 227.8826668428241, 5, "Expected Sprite Raumschiff to have x-position 227.8826668428241 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -132.38519215976538, 5, "Expected Sprite Raumschiff to have y-position -132.38519215976538 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, -27.782851103507667, 5, "Expected Sprite Schwarzes Loch to have x-position -27.782851103507667 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -78.2922796533957, 5, "Expected Sprite Schwarzes Loch to have y-position -78.2922796533957 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 146.2, 5, "Expected Clone 1 of Stern to have x-position 146.2 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 31.7, 5, "Expected Clone 1 of Stern to have y-position 31.7 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 136.21666666666667, 5, "Expected Clone 2 of Stern to have x-position 136.21666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 6.483333333333333, 5, "Expected Clone 2 of Stern to have y-position 6.483333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 139.66666666666666, 5, "Expected Clone 3 of Stern to have x-position 139.66666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 16.666666666666668, 5, "Expected Clone 3 of Stern to have y-position 16.666666666666668 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -214.76666666666668, 5, "Expected Clone 4 of Stern to have x-position -214.76666666666668 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 153.8, 5, "Expected Clone 4 of Stern to have y-position 153.8 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -206.16666666666666, 5, "Expected Clone 5 of Stern to have x-position -206.16666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 158.26666666666665, 5, "Expected Clone 5 of Stern to have y-position 158.26666666666665 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).x, -216.6, 5, "Expected Clone 6 of Stern to have x-position -216.6 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).y, 152.8, 5, "Expected Clone 6 of Stern to have y-position 152.8 +-5");
  t.keyPress('right arrow', 2);
  await t.runForSteps(2);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Raumschiff").direction, 15, 1, "Expected Sprite Raumschiff to face in direction 15 +-1");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 80, 1, "Expected Sprite Schwarzes Loch to face in direction 80 +-1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 227.8826668428241, 5, "Expected Sprite Raumschiff to have x-position 227.8826668428241 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -129.45334050718725, 5, "Expected Sprite Raumschiff to have y-position -129.45334050718725 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, -14.92403876506104, 5, "Expected Sprite Schwarzes Loch to have x-position -14.92403876506104 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -70.86824088833465, 5, "Expected Sprite Schwarzes Loch to have y-position -70.86824088833465 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 146.5, 5, "Expected Clone 1 of Stern to have x-position 146.5 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 31.75, 5, "Expected Clone 1 of Stern to have y-position 31.75 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 135.86666666666667, 5, "Expected Clone 2 of Stern to have x-position 135.86666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 5.933333333333334, 5, "Expected Clone 2 of Stern to have y-position 5.933333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 140.76666666666668, 5, "Expected Clone 3 of Stern to have x-position 140.76666666666668 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 16.116666666666667, 5, "Expected Clone 3 of Stern to have y-position 16.116666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -214.11666666666667, 5, "Expected Clone 4 of Stern to have x-position -214.11666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 155.6, 5, "Expected Clone 4 of Stern to have y-position 155.6 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -206.66666666666666, 5, "Expected Clone 5 of Stern to have x-position -206.66666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 159.66666666666666, 5, "Expected Clone 5 of Stern to have y-position 159.66666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).x, -215.65, 5, "Expected Clone 6 of Stern to have x-position -215.65 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).y, 153.2, 5, "Expected Clone 6 of Stern to have y-position 153.2 +-5");
  t.keyPress('right arrow', 4);
  await t.runForSteps(4);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Raumschiff").direction, 75, 1, "Expected Sprite Raumschiff to face in direction 75 +-1");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 130, 1, "Expected Sprite Schwarzes Loch to face in direction 130 +-1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 231.1805438991867, 5, "Expected Sprite Raumschiff to have x-position 231.1805438991867 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -126.15546345082467, 5, "Expected Sprite Raumschiff to have y-position -126.15546345082467 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, 8.952628887912777, 5, "Expected Sprite Schwarzes Loch to have x-position 8.952628887912777 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -75.078341604963, 5, "Expected Sprite Schwarzes Loch to have y-position -75.078341604963 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 147, 5, "Expected Clone 1 of Stern to have x-position 147 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 31.833333333333332, 5, "Expected Clone 1 of Stern to have y-position 31.833333333333332 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 135.28333333333333, 5, "Expected Clone 2 of Stern to have x-position 135.28333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 5.0166666666666675, 5, "Expected Clone 2 of Stern to have y-position 5.0166666666666675 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 142.6, 5, "Expected Clone 3 of Stern to have x-position 142.6 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 15.2, 5, "Expected Clone 3 of Stern to have y-position 15.2 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -213.03333333333333, 5, "Expected Clone 4 of Stern to have x-position -213.03333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 158.6, 5, "Expected Clone 4 of Stern to have y-position 158.6 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -207.5, 5, "Expected Clone 5 of Stern to have x-position -207.5 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 162, 5, "Expected Clone 5 of Stern to have y-position 162 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).x, -214.06666666666666, 5, "Expected Clone 6 of Stern to have x-position -214.06666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).y, 153.86666666666667, 5, "Expected Clone 6 of Stern to have y-position 153.86666666666667 +-5");
  t.keyPress('right arrow', 3);
  await t.runForSteps(3);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Raumschiff").direction, 120, 1, "Expected Sprite Raumschiff to face in direction 120 +-1");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 170, 1, "Expected Sprite Schwarzes Loch to face in direction 170 +-1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 234.97842095554927, 5, "Expected Sprite Raumschiff to have x-position 234.97842095554927 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -126.65546345082467, 5, "Expected Sprite Raumschiff to have y-position -126.65546345082467 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, 20.20688986856871, 5, "Expected Sprite Schwarzes Loch to have x-position 20.20688986856871 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -91.15109199184232, 5, "Expected Sprite Schwarzes Loch to have y-position -91.15109199184232 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 147.4, 5, "Expected Clone 1 of Stern to have x-position 147.4 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 31.9, 5, "Expected Clone 1 of Stern to have y-position 31.9 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 134.81666666666666, 5, "Expected Clone 2 of Stern to have x-position 134.81666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 4.283333333333333, 5, "Expected Clone 2 of Stern to have y-position 4.283333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 144.06666666666666, 5, "Expected Clone 3 of Stern to have x-position 144.06666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 14.466666666666667, 5, "Expected Clone 3 of Stern to have y-position 14.466666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -212.16666666666666, 5, "Expected Clone 4 of Stern to have x-position -212.16666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 161, 5, "Expected Clone 4 of Stern to have y-position 161 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -208.16666666666666, 5, "Expected Clone 5 of Stern to have x-position -208.16666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 163.86666666666667, 5, "Expected Clone 5 of Stern to have y-position 163.86666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).x, -212.8, 5, "Expected Clone 6 of Stern to have x-position -212.8 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).y, 154.4, 5, "Expected Clone 6 of Stern to have y-position 154.4 +-5");
  t.dragSprite('Raumschiff', -190.3245110849751, -63.254558800657996, null);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 180, 1, "Expected Sprite Schwarzes Loch to face in direction 180 +-1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -189.45848568119064, 5, "Expected Sprite Raumschiff to have x-position -189.45848568119064 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -63.754558800657996, 5, "Expected Sprite Raumschiff to have y-position -63.754558800657996 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, 21.07513075690336, 5, "Expected Sprite Schwarzes Loch to have x-position 21.07513075690336 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -96.07513075690336, 5, "Expected Sprite Schwarzes Loch to have y-position -96.07513075690336 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 147.5, 5, "Expected Clone 1 of Stern to have x-position 147.5 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 31.916666666666668, 5, "Expected Clone 1 of Stern to have y-position 31.916666666666668 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 134.7, 5, "Expected Clone 2 of Stern to have x-position 134.7 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 4.1, 5, "Expected Clone 2 of Stern to have y-position 4.1 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 144.43333333333334, 5, "Expected Clone 3 of Stern to have x-position 144.43333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 14.283333333333333, 5, "Expected Clone 3 of Stern to have y-position 14.283333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -211.95, 5, "Expected Clone 4 of Stern to have x-position -211.95 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 161.6, 5, "Expected Clone 4 of Stern to have y-position 161.6 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -208.33333333333334, 5, "Expected Clone 5 of Stern to have x-position -208.33333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 164.33333333333334, 5, "Expected Clone 5 of Stern to have y-position 164.33333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).x, -212.48333333333335, 5, "Expected Clone 6 of Stern to have x-position -212.48333333333335 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).y, 154.53333333333333, 5, "Expected Clone 6 of Stern to have y-position 154.53333333333333 +-5");
  t.dragSprite('Raumschiff', 240, -180, null);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, -170, 1, "Expected Sprite Schwarzes Loch to face in direction -170 +-1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 240.86602540378445, 5, "Expected Sprite Raumschiff to have x-position 240.86602540378445 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -180.5, 5, "Expected Sprite Raumschiff to have y-position -180.5 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, 21.07513075690336, 5, "Expected Sprite Schwarzes Loch to have x-position 21.07513075690336 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -101.07513075690336, 5, "Expected Sprite Schwarzes Loch to have y-position -101.07513075690336 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 147.6, 5, "Expected Clone 1 of Stern to have x-position 147.6 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 31.933333333333334, 5, "Expected Clone 1 of Stern to have y-position 31.933333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 134.58333333333334, 5, "Expected Clone 2 of Stern to have x-position 134.58333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 3.916666666666668, 5, "Expected Clone 2 of Stern to have y-position 3.916666666666668 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 144.8, 5, "Expected Clone 3 of Stern to have x-position 144.8 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 14.1, 5, "Expected Clone 3 of Stern to have y-position 14.1 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -211.73333333333332, 5, "Expected Clone 4 of Stern to have x-position -211.73333333333332 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 162.2, 5, "Expected Clone 4 of Stern to have y-position 162.2 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -208.5, 5, "Expected Clone 5 of Stern to have x-position -208.5 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 164.8, 5, "Expected Clone 5 of Stern to have y-position 164.8 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).x, -212.16666666666666, 5, "Expected Clone 6 of Stern to have x-position -212.16666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).y, 154.66666666666666, 5, "Expected Clone 6 of Stern to have y-position 154.66666666666666 +-5");
  t.dragSprite('Raumschiff', -171.6889965221706, -105.59058408740333, null);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, -160, 1, "Expected Sprite Schwarzes Loch to face in direction -160 +-1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -170.82297111838616, 5, "Expected Sprite Raumschiff to have x-position -170.82297111838616 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -106.09058408740333, 5, "Expected Sprite Raumschiff to have y-position -106.09058408740333 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, 20.20688986856871, 5, "Expected Sprite Schwarzes Loch to have x-position 20.20688986856871 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -105.9991695219644, 5, "Expected Sprite Schwarzes Loch to have y-position -105.9991695219644 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 147.7, 5, "Expected Clone 1 of Stern to have x-position 147.7 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 31.95, 5, "Expected Clone 1 of Stern to have y-position 31.95 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 134.46666666666667, 5, "Expected Clone 2 of Stern to have x-position 134.46666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 3.7333333333333325, 5, "Expected Clone 2 of Stern to have y-position 3.7333333333333325 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 145.16666666666666, 5, "Expected Clone 3 of Stern to have x-position 145.16666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 13.916666666666668, 5, "Expected Clone 3 of Stern to have y-position 13.916666666666668 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -211.51666666666668, 5, "Expected Clone 4 of Stern to have x-position -211.51666666666668 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 162.8, 5, "Expected Clone 4 of Stern to have y-position 162.8 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -208.66666666666666, 5, "Expected Clone 5 of Stern to have x-position -208.66666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 165.26666666666665, 5, "Expected Clone 5 of Stern to have y-position 165.26666666666665 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).x, -211.85, 5, "Expected Clone 6 of Stern to have x-position -211.85 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).y, 154.8, 5, "Expected Clone 6 of Stern to have y-position 154.8 +-5");
  t.dragSprite('Raumschiff', -184.89355404783663, -43.00391292344469, null);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, -150, 1, "Expected Sprite Schwarzes Loch to face in direction -150 +-1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, -184.02752864405218, 5, "Expected Sprite Raumschiff to have x-position -184.02752864405218 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -43.50391292344469, 5, "Expected Sprite Raumschiff to have y-position -43.50391292344469 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, 18.496789151940362, 5, "Expected Sprite Schwarzes Loch to have x-position 18.496789151940362 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -110.69763262589395, 5, "Expected Sprite Schwarzes Loch to have y-position -110.69763262589395 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 147.8, 5, "Expected Clone 1 of Stern to have x-position 147.8 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 31.966666666666665, 5, "Expected Clone 1 of Stern to have y-position 31.966666666666665 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 134.35, 5, "Expected Clone 2 of Stern to have x-position 134.35 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 3.5500000000000007, 5, "Expected Clone 2 of Stern to have y-position 3.5500000000000007 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 145.53333333333333, 5, "Expected Clone 3 of Stern to have x-position 145.53333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 13.733333333333333, 5, "Expected Clone 3 of Stern to have y-position 13.733333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -211.3, 5, "Expected Clone 4 of Stern to have x-position -211.3 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 163.4, 5, "Expected Clone 4 of Stern to have y-position 163.4 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -208.83333333333334, 5, "Expected Clone 5 of Stern to have x-position -208.83333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 165.73333333333335, 5, "Expected Clone 5 of Stern to have y-position 165.73333333333335 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).x, -211.53333333333333, 5, "Expected Clone 6 of Stern to have x-position -211.53333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).y, 154.93333333333334, 5, "Expected Clone 6 of Stern to have y-position 154.93333333333334 +-5");
  t.dragSprite('Raumschiff', 157.57261910767463, 34.89075723999995, null);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, -140, 1, "Expected Sprite Schwarzes Loch to face in direction -140 +-1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 158.43864451145907, 5, "Expected Sprite Raumschiff to have x-position 158.43864451145907 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 34.39075723999995, 5, "Expected Sprite Raumschiff to have y-position 34.39075723999995 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, 15.99678915194036, 5, "Expected Sprite Schwarzes Loch to have x-position 15.99678915194036 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -115.02775964481614, 5, "Expected Sprite Schwarzes Loch to have y-position -115.02775964481614 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 147.9, 5, "Expected Clone 1 of Stern to have x-position 147.9 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 31.983333333333334, 5, "Expected Clone 1 of Stern to have y-position 31.983333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 134.23333333333332, 5, "Expected Clone 2 of Stern to have x-position 134.23333333333332 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 3.366666666666667, 5, "Expected Clone 2 of Stern to have y-position 3.366666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 145.9, 5, "Expected Clone 3 of Stern to have x-position 145.9 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 13.55, 5, "Expected Clone 3 of Stern to have y-position 13.55 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -211.08333333333334, 5, "Expected Clone 4 of Stern to have x-position -211.08333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 164, 5, "Expected Clone 4 of Stern to have y-position 164 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -209, 5, "Expected Clone 5 of Stern to have x-position -209 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 166.2, 5, "Expected Clone 5 of Stern to have y-position 166.2 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).x, -211.21666666666667, 5, "Expected Clone 6 of Stern to have x-position -211.21666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).y, 155.06666666666666, 5, "Expected Clone 6 of Stern to have y-position 155.06666666666666 +-5");
  t.dragSprite('Raumschiff', 104, 44, null);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, -130, 1, "Expected Sprite Schwarzes Loch to face in direction -130 +-1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 104.86602540378443, 5, "Expected Sprite Raumschiff to have x-position 104.86602540378443 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 43.5, 5, "Expected Sprite Raumschiff to have y-position 43.5 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, 12.782851103507664, 5, "Expected Sprite Schwarzes Loch to have x-position 12.782851103507664 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -118.85798186041103, 5, "Expected Sprite Schwarzes Loch to have y-position -118.85798186041103 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 148, 5, "Expected Clone 1 of Stern to have x-position 148 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 32, 5, "Expected Clone 1 of Stern to have y-position 32 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 134.11666666666667, 5, "Expected Clone 2 of Stern to have x-position 134.11666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 3.1833333333333336, 5, "Expected Clone 2 of Stern to have y-position 3.1833333333333336 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 146.26666666666665, 5, "Expected Clone 3 of Stern to have x-position 146.26666666666665 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 13.366666666666667, 5, "Expected Clone 3 of Stern to have y-position 13.366666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -210.86666666666667, 5, "Expected Clone 4 of Stern to have x-position -210.86666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 164.6, 5, "Expected Clone 4 of Stern to have y-position 164.6 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -209.16666666666666, 5, "Expected Clone 5 of Stern to have x-position -209.16666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 166.66666666666666, 5, "Expected Clone 5 of Stern to have y-position 166.66666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).x, -210.9, 5, "Expected Clone 6 of Stern to have x-position -210.9 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).y, 155.2, 5, "Expected Clone 6 of Stern to have y-position 155.2 +-5");
  t.keyPress('right arrow', 3);
  await t.runForSteps(3);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Raumschiff").direction, 165, 1, "Expected Sprite Raumschiff to face in direction 165 +-1");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, -90, 1, "Expected Sprite Schwarzes Loch to face in direction -90 +-1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 107.19797663385795, 5, "Expected Sprite Raumschiff to have x-position 107.19797663385795 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, 40.46094198873995, 5, "Expected Sprite Raumschiff to have y-position 40.46094198873995 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, -5.000000000000002, 5, "Expected Sprite Schwarzes Loch to have x-position -5.000000000000002 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -127.15026151380673, 5, "Expected Sprite Schwarzes Loch to have y-position -127.15026151380673 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 148.55, 5, "Expected Clone 1 of Stern to have x-position 148.55 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 30.45, 5, "Expected Clone 1 of Stern to have y-position 30.45 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 134.1, 5, "Expected Clone 2 of Stern to have x-position 134.1 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 3.5, 5, "Expected Clone 2 of Stern to have y-position 3.5 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 146.86666666666667, 5, "Expected Clone 3 of Stern to have x-position 146.86666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 13.433333333333334, 5, "Expected Clone 3 of Stern to have y-position 13.433333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).x, -210, 5, "Expected Clone 4 of Stern to have x-position -210 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(4).y, 167, 5, "Expected Clone 4 of Stern to have y-position 167 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -209.83333333333334, 5, "Expected Clone 5 of Stern to have x-position -209.83333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 168.53333333333333, 5, "Expected Clone 5 of Stern to have y-position 168.53333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).x, -209.63333333333333, 5, "Expected Clone 6 of Stern to have x-position -209.63333333333333 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).y, 155.73333333333332, 5, "Expected Clone 6 of Stern to have y-position 155.73333333333332 +-5");
  t.dragSprite('Raumschiff', 240, -180, null);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, -80, 1, "Expected Sprite Schwarzes Loch to face in direction -80 +-1");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 240.2588190451025, 5, "Expected Sprite Raumschiff to have x-position 240.2588190451025 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -180.96592582628907, 5, "Expected Sprite Raumschiff to have y-position -180.96592582628907 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, -10.000000000000002, 5, "Expected Sprite Schwarzes Loch to have x-position -10.000000000000002 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -127.15026151380673, 5, "Expected Sprite Schwarzes Loch to have y-position -127.15026151380673 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).x, 148.73333333333332, 5, "Expected Clone 1 of Stern to have x-position 148.73333333333332 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(1).y, 29.933333333333334, 5, "Expected Clone 1 of Stern to have y-position 29.933333333333334 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).x, 134.15, 5, "Expected Clone 2 of Stern to have x-position 134.15 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(2).y, 3.75, 5, "Expected Clone 2 of Stern to have y-position 3.75 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).x, 146.73333333333332, 5, "Expected Clone 3 of Stern to have x-position 146.73333333333332 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(3).y, 13.866666666666667, 5, "Expected Clone 3 of Stern to have y-position 13.866666666666667 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).x, -210, 5, "Expected Clone 5 of Stern to have x-position -210 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(5).y, 169, 5, "Expected Clone 5 of Stern to have y-position 169 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).x, -209.31666666666666, 5, "Expected Clone 6 of Stern to have x-position -209.31666666666666 +-5");
  t.assert.withinRange(t.getSprite("Stern").getClone(6).y, 155.86666666666667, 5, "Expected Clone 6 of Stern to have y-position 155.86666666666667 +-5");
  await t.runForSteps(57);
  await t.runForSteps(1);
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Schwarzes Loch").direction, 110, 1, "Expected Sprite Schwarzes Loch to face in direction 110 +-1");
  t.assert.equal(t.getSprite("Raumschiff").layerOrder, 4, "Expected Sprite Raumschiff to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 3, "Expected Sprite Stern to be at layer 3");
  t.assert.withinRange(t.getSprite("Raumschiff").x, 245.17638090205025, 5, "Expected Sprite Raumschiff to have x-position 245.17638090205025 +-5");
  t.assert.withinRange(t.getSprite("Raumschiff").y, -196, 5, "Expected Sprite Raumschiff to have y-position -196 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").x, -0.07596123493896023, 5, "Expected Sprite Schwarzes Loch to have x-position -0.07596123493896023 +-5");
  t.assert.withinRange(t.getSprite("Schwarzes Loch").y, -70.86824088833465, 5, "Expected Sprite Schwarzes Loch to have y-position -70.86824088833465 +-5");
  t.assert.not(t.getSprite("Raumschiff").sayText, "Expected Sprite Raumschiff not to say anything");
  t.end();
}

module.exports = [
  {
      test: test0,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687849451931',
      type: 'standard',
  },
  {
      test: test1,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687849451931',
      type: 'standard',
  }
]
