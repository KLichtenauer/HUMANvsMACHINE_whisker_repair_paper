const test0 = async function (t) {
  t.dragSprite('Qualle', -166.27413680734566, -57.3079926111413, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, 148.25471257764477, 1, "Expected Sprite Fisch to face in direction 148.25471257764477 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 90, 1, "Expected Sprite Kugelfisch to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, -49.90429975096373, 1, "Expected Sprite Qualle to face in direction -49.90429975096373 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, -189, 5, "Expected Sprite Fisch to have x-position -189 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, -128, 5, "Expected Sprite Fisch to have y-position -128 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -15, 5, "Expected Sprite Stern to have x-position -15 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, -98, 5, "Expected Sprite Stern to have y-position -98 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, -143, 5, "Expected Sprite Kugelfisch to have x-position -143 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, 80, 5, "Expected Sprite Kugelfisch to have y-position 80 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, 50, 5, "Expected Sprite Qualle to have x-position 50 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, 72, 5, "Expected Sprite Qualle to have y-position 72 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 60, 1, "Expected Sprite Kugelfisch to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  t.end();
}
const test1 = async function (t) {
  t.mouseMove(-121, 157);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, 148.25471257764477, 1, "Expected Sprite Fisch to face in direction 148.25471257764477 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 90, 1, "Expected Sprite Kugelfisch to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, -49.90429975096373, 1, "Expected Sprite Qualle to face in direction -49.90429975096373 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, -189, 5, "Expected Sprite Fisch to have x-position -189 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, -128, 5, "Expected Sprite Fisch to have y-position -128 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -15, 5, "Expected Sprite Stern to have x-position -15 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, -98, 5, "Expected Sprite Stern to have y-position -98 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, -143, 5, "Expected Sprite Kugelfisch to have x-position -143 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, 80, 5, "Expected Sprite Kugelfisch to have y-position 80 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, 50, 5, "Expected Sprite Qualle to have x-position 50 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, 72, 5, "Expected Sprite Qualle to have y-position 72 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 60, 1, "Expected Sprite Kugelfisch to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  await t.runForSteps(85);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, 157.4280145223018, 1, "Expected Sprite Fisch to face in direction 157.4280145223018 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 180, 1, "Expected Sprite Kugelfisch to face in direction 180 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, -63.569130731037774, 1, "Expected Sprite Qualle to face in direction -63.569130731037774 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, -121, 5, "Expected Sprite Fisch to have x-position -121 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, 157, 5, "Expected Sprite Fisch to have y-position 157 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -15, 5, "Expected Sprite Stern to have x-position -15 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, -98, 5, "Expected Sprite Stern to have y-position -98 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, -5, 5, "Expected Sprite Kugelfisch to have x-position -5 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, 48, 5, "Expected Sprite Kugelfisch to have y-position 48 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, -52.08381643433249, 5, "Expected Sprite Qualle to have x-position -52.08381643433249 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, 122.74341752583769, 5, "Expected Sprite Qualle to have y-position 122.74341752583769 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 70, 1, "Expected Sprite Kugelfisch to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  t.end();
}
const test2 = async function (t) {
  t.dragSprite('Qualle', -166.27413680734566, -57.3079926111413, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, 148.25471257764477, 1, "Expected Sprite Fisch to face in direction 148.25471257764477 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 90, 1, "Expected Sprite Kugelfisch to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, -49.90429975096373, 1, "Expected Sprite Qualle to face in direction -49.90429975096373 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, -189, 5, "Expected Sprite Fisch to have x-position -189 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, -128, 5, "Expected Sprite Fisch to have y-position -128 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -15, 5, "Expected Sprite Stern to have x-position -15 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, -98, 5, "Expected Sprite Stern to have y-position -98 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, -143, 5, "Expected Sprite Kugelfisch to have x-position -143 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, 80, 5, "Expected Sprite Kugelfisch to have y-position 80 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, 50, 5, "Expected Sprite Qualle to have x-position 50 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, 72, 5, "Expected Sprite Qualle to have y-position 72 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 60, 1, "Expected Sprite Kugelfisch to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  t.dragSprite('Stern', -209.07480851729588, -152.4800977858946, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, 148.25471257764477, 1, "Expected Sprite Fisch to face in direction 148.25471257764477 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 90, 1, "Expected Sprite Kugelfisch to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, -49.90429975096373, 1, "Expected Sprite Qualle to face in direction -49.90429975096373 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, -189, 5, "Expected Sprite Fisch to have x-position -189 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, -128, 5, "Expected Sprite Fisch to have y-position -128 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -209.07480851729588, 5, "Expected Sprite Stern to have x-position -209.07480851729588 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, -152.4800977858946, 5, "Expected Sprite Stern to have y-position -152.4800977858946 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, -141, 5, "Expected Sprite Kugelfisch to have x-position -141 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, 80, 5, "Expected Sprite Kugelfisch to have y-position 80 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, 50, 5, "Expected Sprite Qualle to have x-position 50 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, 72, 5, "Expected Sprite Qualle to have y-position 72 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 60, 1, "Expected Sprite Kugelfisch to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  t.end();
}
const test3 = async function (t) {
  t.dragSprite('Qualle', -166.27413680734566, -57.3079926111413, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, 148.25471257764477, 1, "Expected Sprite Fisch to face in direction 148.25471257764477 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 90, 1, "Expected Sprite Kugelfisch to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, -49.90429975096373, 1, "Expected Sprite Qualle to face in direction -49.90429975096373 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, -189, 5, "Expected Sprite Fisch to have x-position -189 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, -128, 5, "Expected Sprite Fisch to have y-position -128 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -15, 5, "Expected Sprite Stern to have x-position -15 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, -98, 5, "Expected Sprite Stern to have y-position -98 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, -143, 5, "Expected Sprite Kugelfisch to have x-position -143 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, 80, 5, "Expected Sprite Kugelfisch to have y-position 80 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, 50, 5, "Expected Sprite Qualle to have x-position 50 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, 72, 5, "Expected Sprite Qualle to have y-position 72 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 60, 1, "Expected Sprite Kugelfisch to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  t.dragSprite('Kugelfisch', -170.22526623130724, -60.19200257284987, null);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, 148.25471257764477, 1, "Expected Sprite Fisch to face in direction 148.25471257764477 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 90, 1, "Expected Sprite Kugelfisch to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, -49.90429975096373, 1, "Expected Sprite Qualle to face in direction -49.90429975096373 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, -189, 5, "Expected Sprite Fisch to have x-position -189 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, -128, 5, "Expected Sprite Fisch to have y-position -128 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -15, 5, "Expected Sprite Stern to have x-position -15 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, -98, 5, "Expected Sprite Stern to have y-position -98 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, -168.22526623130724, 5, "Expected Sprite Kugelfisch to have x-position -168.22526623130724 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, -60.19200257284987, 5, "Expected Sprite Kugelfisch to have y-position -60.19200257284987 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, 50, 5, "Expected Sprite Qualle to have x-position 50 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, 72, 5, "Expected Sprite Qualle to have y-position 72 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 60, 1, "Expected Sprite Kugelfisch to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  t.mouseMove(-72, -66);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, 148.25471257764477, 1, "Expected Sprite Fisch to face in direction 148.25471257764477 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 90, 1, "Expected Sprite Kugelfisch to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, -49.90429975096373, 1, "Expected Sprite Qualle to face in direction -49.90429975096373 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, -189, 5, "Expected Sprite Fisch to have x-position -189 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, -128, 5, "Expected Sprite Fisch to have y-position -128 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -15, 5, "Expected Sprite Stern to have x-position -15 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, -98, 5, "Expected Sprite Stern to have y-position -98 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, -166.22526623130724, 5, "Expected Sprite Kugelfisch to have x-position -166.22526623130724 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, -60.19200257284987, 5, "Expected Sprite Kugelfisch to have y-position -60.19200257284987 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, 50, 5, "Expected Sprite Qualle to have x-position 50 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, 72, 5, "Expected Sprite Qualle to have y-position 72 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 60, 1, "Expected Sprite Kugelfisch to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  await t.runForSteps(94);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, 119.31000707091613, 1, "Expected Sprite Fisch to face in direction 119.31000707091613 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 90, 1, "Expected Sprite Kugelfisch to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, -138.5214533769222, 1, "Expected Sprite Qualle to face in direction -138.5214533769222 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, -72, 5, "Expected Sprite Fisch to have x-position -72 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, -66, 5, "Expected Sprite Fisch to have y-position -66 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -15, 5, "Expected Sprite Stern to have x-position -15 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, -98, 5, "Expected Sprite Stern to have y-position -98 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, -110.22526623130724, 5, "Expected Sprite Kugelfisch to have x-position -110.22526623130724 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, -60.19200257284987, 5, "Expected Sprite Kugelfisch to have y-position -60.19200257284987 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, 48.67532086252554, 5, "Expected Sprite Qualle to have x-position 48.67532086252554 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, 70.50159245105348, 5, "Expected Sprite Qualle to have y-position 70.50159245105348 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 60, 1, "Expected Sprite Kugelfisch to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  t.end();
}
const test4 = async function (t) {
  t.mouseMove(-121, 157);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, 148.25471257764477, 1, "Expected Sprite Fisch to face in direction 148.25471257764477 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 90, 1, "Expected Sprite Kugelfisch to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, -49.90429975096373, 1, "Expected Sprite Qualle to face in direction -49.90429975096373 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, -189, 5, "Expected Sprite Fisch to have x-position -189 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, -128, 5, "Expected Sprite Fisch to have y-position -128 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -15, 5, "Expected Sprite Stern to have x-position -15 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, -98, 5, "Expected Sprite Stern to have y-position -98 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, -143, 5, "Expected Sprite Kugelfisch to have x-position -143 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, 80, 5, "Expected Sprite Kugelfisch to have y-position 80 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, 50, 5, "Expected Sprite Qualle to have x-position 50 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, 72, 5, "Expected Sprite Qualle to have y-position 72 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 60, 1, "Expected Sprite Kugelfisch to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  await t.runForSteps(9);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, 148.25471257764477, 1, "Expected Sprite Fisch to face in direction 148.25471257764477 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 90, 1, "Expected Sprite Kugelfisch to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, -49.90429975096373, 1, "Expected Sprite Qualle to face in direction -49.90429975096373 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, -189, 5, "Expected Sprite Fisch to have x-position -189 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, -128, 5, "Expected Sprite Fisch to have y-position -128 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -15, 5, "Expected Sprite Stern to have x-position -15 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, -98, 5, "Expected Sprite Stern to have y-position -98 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, -123, 5, "Expected Sprite Kugelfisch to have x-position -123 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, 80, 5, "Expected Sprite Kugelfisch to have y-position 80 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, 50, 5, "Expected Sprite Qualle to have x-position 50 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, 72, 5, "Expected Sprite Qualle to have y-position 72 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 60, 1, "Expected Sprite Kugelfisch to have size 60 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  await t.runForSteps(85);
  await t.runForSteps(1);
  t.assert.equal(t.getStage().currentCostume, 0, "Expected backdrop 0");
  t.assert.equal(t.getSprite("Fisch").currentCostume, 0, "Expected Sprite Fisch to have costume 0");
  t.assert.equal(t.getSprite("Stern").currentCostume, 0, "Expected Sprite Stern to have costume 0");
  t.assert.equal(t.getSprite("Kugelfisch").currentCostume, 2, "Expected Sprite Kugelfisch to have costume 2");
  t.assert.equal(t.getSprite("Qualle").currentCostume, 2, "Expected Sprite Qualle to have costume 2");
  t.assert.equal(t.getSprite("Fisch").getCloneCount(), 0, "Expected Sprite Fisch to have 0 clones");
  t.assert.equal(t.getSprite("Stern").getCloneCount(), 0, "Expected Sprite Stern to have 0 clones");
  t.assert.equal(t.getSprite("Kugelfisch").getCloneCount(), 0, "Expected Sprite Kugelfisch to have 0 clones");
  t.assert.equal(t.getSprite("Qualle").getCloneCount(), 0, "Expected Sprite Qualle to have 0 clones");
  t.assert.equal(t.getSprite("Fisch").direction, 157.4280145223018, 1, "Expected Sprite Fisch to face in direction 157.4280145223018 +-1");
  t.assert.equal(t.getSprite("Stern").direction, 90, 1, "Expected Sprite Stern to face in direction 90 +-1");
  t.assert.equal(t.getSprite("Kugelfisch").direction, 180, 1, "Expected Sprite Kugelfisch to face in direction 180 +-1");
  t.assert.equal(t.getSprite("Qualle").direction, -63.569130731037745, 1, "Expected Sprite Qualle to face in direction -63.569130731037745 +-1");
  t.assert.equal(t.getSprite("Fisch").effects.color, 0, "Expected effect color of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.whirl, 0, "Expected effect whirl of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.brightness, 0, "Expected effect brightness of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Fisch").effects.ghost, 0, "Expected effect ghost of Sprite Fisch to be 0");
  t.assert.equal(t.getSprite("Stern").effects.color, 0, "Expected effect color of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.fisheye, 0, "Expected effect fisheye of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.whirl, 0, "Expected effect whirl of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.pixelate, 0, "Expected effect pixelate of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.mosaic, 0, "Expected effect mosaic of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.brightness, 0, "Expected effect brightness of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Stern").effects.ghost, 0, "Expected effect ghost of Sprite Stern to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.color, 0, "Expected effect color of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.fisheye, 0, "Expected effect fisheye of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.whirl, 0, "Expected effect whirl of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.pixelate, 0, "Expected effect pixelate of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.mosaic, 0, "Expected effect mosaic of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.brightness, 0, "Expected effect brightness of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Kugelfisch").effects.ghost, 0, "Expected effect ghost of Sprite Kugelfisch to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.color, 0, "Expected effect color of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.fisheye, 0, "Expected effect fisheye of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.whirl, 0, "Expected effect whirl of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.pixelate, 0, "Expected effect pixelate of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.mosaic, 0, "Expected effect mosaic of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.brightness, 0, "Expected effect brightness of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Qualle").effects.ghost, 0, "Expected effect ghost of Sprite Qualle to be 0");
  t.assert.equal(t.getSprite("Fisch").layerOrder, 4, "Expected Sprite Fisch to be at layer 4");
  t.assert.equal(t.getSprite("Stern").layerOrder, 1, "Expected Sprite Stern to be at layer 1");
  t.assert.equal(t.getSprite("Kugelfisch").layerOrder, 2, "Expected Sprite Kugelfisch to be at layer 2");
  t.assert.equal(t.getSprite("Qualle").layerOrder, 3, "Expected Sprite Qualle to be at layer 3");
  t.assert.withinRange(t.getSprite("Fisch").x, -121, 5, "Expected Sprite Fisch to have x-position -121 +-5");
  t.assert.withinRange(t.getSprite("Fisch").y, 157, 5, "Expected Sprite Fisch to have y-position 157 +-5");
  t.assert.withinRange(t.getSprite("Stern").x, -15, 5, "Expected Sprite Stern to have x-position -15 +-5");
  t.assert.withinRange(t.getSprite("Stern").y, -98, 5, "Expected Sprite Stern to have y-position -98 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").x, -5, 5, "Expected Sprite Kugelfisch to have x-position -5 +-5");
  t.assert.withinRange(t.getSprite("Kugelfisch").y, 30, 5, "Expected Sprite Kugelfisch to have y-position 30 +-5");
  t.assert.withinRange(t.getSprite("Qualle").x, -68.2023137660692, 5, "Expected Sprite Qualle to have x-position -68.2023137660692 +-5");
  t.assert.withinRange(t.getSprite("Qualle").y, 130.75553608254893, 5, "Expected Sprite Qualle to have y-position 130.75553608254893 +-5");
  t.assert.not(t.getSprite("Fisch").sayText, "Expected Sprite Fisch not to say anything");
  t.assert.not(t.getSprite("Stern").sayText, "Expected Sprite Stern not to say anything");
  t.assert.not(t.getSprite("Kugelfisch").sayText, "Expected Sprite Kugelfisch not to say anything");
  t.assert.not(t.getSprite("Qualle").sayText, "Expected Sprite Qualle not to say anything");
  t.assert.withinRange(t.getSprite("Fisch").size, 50, 1, "Expected Sprite Fisch to have size 50 +-1");
  t.assert.withinRange(t.getSprite("Stern").size, 70, 1, "Expected Sprite Stern to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Kugelfisch").size, 70, 1, "Expected Sprite Kugelfisch to have size 70 +-1");
  t.assert.withinRange(t.getSprite("Qualle").size, 50, 1, "Expected Sprite Qualle to have size 50 +-1");
  t.assert.ok(t.getSprite("Fisch").visible, "Expected Sprite Fisch to be visible");
  t.assert.ok(t.getSprite("Stern").visible, "Expected Sprite Stern to be visible");
  t.assert.ok(t.getSprite("Kugelfisch").visible, "Expected Sprite Kugelfisch to be visible");
  t.assert.ok(t.getSprite("Qualle").visible, "Expected Sprite Qualle to be visible");
  t.assert.equal(t.getStage().volume, 100, "Expected Stage to have volume 100");
  t.assert.equal(t.getSprite("Fisch").volume, 100, "Expected Sprite Fisch to have volume 100");
  t.assert.equal(t.getSprite("Stern").volume, 100, "Expected Sprite Stern to have volume 100");
  t.assert.equal(t.getSprite("Kugelfisch").volume, 100, "Expected Sprite Kugelfisch to have volume 100");
  t.assert.equal(t.getSprite("Qualle").volume, 100, "Expected Sprite Qualle to have volume 100");
  t.end();
}

module.exports = [
  {
      test: test0,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687849811911',
      type: 'standard',
  },
  {
      test: test1,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687849811911',
      type: 'standard',
  },
  {
      test: test2,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687849811911',
      type: 'standard',
  },
  {
      test: test3,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687849811911',
      type: 'standard',
  },
  {
      test: test4,
      name: 'Generated Test',
      description: '',
      categories: [],
      generationAlgorithm: 'mio',
      seed: '1687849811911',
      type: 'standard',
  }
]
